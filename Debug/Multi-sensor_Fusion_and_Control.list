
Multi-sensor_Fusion_and_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c12c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  0800c3d0  0800c3d0  0000d3d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d1c4  0800d1c4  0000e1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d1cc  0800d1cc  0000e1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d1d0  0800d1d0  0000e1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  0800d1d4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000448  240001e8  0800d3bc  0000f1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00001700  24000630  0800d3bc  0000f630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012cb5  00000000  00000000  0000f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca7  00000000  00000000  00021ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  00024b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b59  00000000  00000000  00025a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389d5  00000000  00000000  000265b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014c93  00000000  00000000  0005ef86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b6c8  00000000  00000000  00073c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cf2e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005028  00000000  00000000  001cf324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  001d434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c3b4 	.word	0x0800c3b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800c3b4 	.word	0x0800c3b4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <BMI088_Accel_CS_Select>:
/**
  * @brief  選取加速度計晶片 (CS1 拉低)
  * @param  None
  * @retval None
  */
static void BMI088_Accel_CS_Select(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS1_BMI088_ACCEL_GPIO_Port, SPI3_nCS1_BMI088_ACCEL_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000782:	4802      	ldr	r0, [pc, #8]	@ (800078c <BMI088_Accel_CS_Select+0x14>)
 8000784:	f003 fa46 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58020c00 	.word	0x58020c00

08000790 <BMI088_Accel_CS_Deselect>:
/**
  * @brief  取消選取加速度計晶片 (CS1 拉高)
  * @param  None
  * @retval None
  */
static void BMI088_Accel_CS_Deselect(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS1_BMI088_ACCEL_GPIO_Port, SPI3_nCS1_BMI088_ACCEL_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079a:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <BMI088_Accel_CS_Deselect+0x14>)
 800079c:	f003 fa3a 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	58020c00 	.word	0x58020c00

080007a8 <BMI088_Gyro_CS_Select>:
/**
  * @brief  選取陀螺儀晶片 (CS2 拉低)
  * @param  None
  * @retval None
  */
static void BMI088_Gyro_CS_Select(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS2_BMI088_GYRO_GPIO_Port, SPI3_nCS2_BMI088_GYRO_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b2:	4802      	ldr	r0, [pc, #8]	@ (80007bc <BMI088_Gyro_CS_Select+0x14>)
 80007b4:	f003 fa2e 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	58020c00 	.word	0x58020c00

080007c0 <BMI088_Gyro_CS_Deselect>:
/**
  * @brief  取消選取陀螺儀晶片 (CS2 拉高)
  * @param  None
  * @retval None
  */
static void BMI088_Gyro_CS_Deselect(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS2_BMI088_GYRO_GPIO_Port, SPI3_nCS2_BMI088_GYRO_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ca:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <BMI088_Gyro_CS_Deselect+0x14>)
 80007cc:	f003 fa22 	bl	8003c14 <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00

080007d8 <BMI088_Accel_Write_Byte>:
  * @brief  向加速度計寫入單個位元組
  * @param  reg: 目標暫存器位址
  * @param  data: 要寫入的數據
  * @retval None
  */
static void BMI088_Accel_Write_Byte(uint8_t reg, uint8_t data) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
    BMI088_Accel_CS_Select();
 80007e8:	f7ff ffc6 	bl	8000778 <BMI088_Accel_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 80007ec:	1df9      	adds	r1, r7, #7
 80007ee:	2364      	movs	r3, #100	@ 0x64
 80007f0:	2201      	movs	r2, #1
 80007f2:	4807      	ldr	r0, [pc, #28]	@ (8000810 <BMI088_Accel_Write_Byte+0x38>)
 80007f4:	f006 fda8 	bl	8007348 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 80007f8:	1db9      	adds	r1, r7, #6
 80007fa:	2364      	movs	r3, #100	@ 0x64
 80007fc:	2201      	movs	r2, #1
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <BMI088_Accel_Write_Byte+0x38>)
 8000800:	f006 fda2 	bl	8007348 <HAL_SPI_Transmit>
    BMI088_Accel_CS_Deselect();
 8000804:	f7ff ffc4 	bl	8000790 <BMI088_Accel_CS_Deselect>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2400041c 	.word	0x2400041c

08000814 <BMI088_Accel_Read_Byte>:
/**
  * @brief  從加速度計讀取單個位元組
  * @param  reg: 目標暫存器位址
  * @retval 讀取到的數據
  */
static uint8_t BMI088_Accel_Read_Byte(uint8_t reg) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    uint8_t read_buf;
    // SPI 讀取操作時，MSB 需要設為 1
    reg |= 0x80;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000824:	b2db      	uxtb	r3, r3
 8000826:	71fb      	strb	r3, [r7, #7]
    BMI088_Accel_CS_Select();
 8000828:	f7ff ffa6 	bl	8000778 <BMI088_Accel_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 800082c:	1df9      	adds	r1, r7, #7
 800082e:	2364      	movs	r3, #100	@ 0x64
 8000830:	2201      	movs	r2, #1
 8000832:	4808      	ldr	r0, [pc, #32]	@ (8000854 <BMI088_Accel_Read_Byte+0x40>)
 8000834:	f006 fd88 	bl	8007348 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &read_buf, 1, 100);
 8000838:	f107 010f 	add.w	r1, r7, #15
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	2201      	movs	r2, #1
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <BMI088_Accel_Read_Byte+0x40>)
 8000842:	f006 ff6f 	bl	8007724 <HAL_SPI_Receive>
    BMI088_Accel_CS_Deselect();
 8000846:	f7ff ffa3 	bl	8000790 <BMI088_Accel_CS_Deselect>
    return read_buf;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2400041c 	.word	0x2400041c

08000858 <BMI088_Accel_Read_Multi>:
  * @param  reg: 起始暫存器位址
  * @param  data: 存放讀取數據的緩衝區
  * @param  len: 要讀取的位元組長度
  * @retval None
  */
static HAL_StatusTypeDef BMI088_Accel_Read_Multi(uint8_t reg, uint8_t* data, uint16_t len) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	80bb      	strh	r3, [r7, #4]
    reg |= 0x80;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800086e:	b2db      	uxtb	r3, r3
 8000870:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef SPI_Receive_status;
    BMI088_Accel_CS_Select();
 8000872:	f7ff ff81 	bl	8000778 <BMI088_Accel_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 8000876:	1df9      	adds	r1, r7, #7
 8000878:	2364      	movs	r3, #100	@ 0x64
 800087a:	2201      	movs	r2, #1
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <BMI088_Accel_Read_Multi+0x48>)
 800087e:	f006 fd63 	bl	8007348 <HAL_SPI_Transmit>
    SPI_Receive_status = HAL_SPI_Receive(&hspi3, data, len, 100);//儲存狀態以利錯誤處理
 8000882:	88ba      	ldrh	r2, [r7, #4]
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	6839      	ldr	r1, [r7, #0]
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <BMI088_Accel_Read_Multi+0x48>)
 800088a:	f006 ff4b 	bl	8007724 <HAL_SPI_Receive>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]
    BMI088_Accel_CS_Deselect();
 8000892:	f7ff ff7d 	bl	8000790 <BMI088_Accel_CS_Deselect>
    return SPI_Receive_status;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2400041c 	.word	0x2400041c

080008a4 <BMI088_Gyro_Write_Byte>:
  * @brief  向陀螺儀寫入單個位元組
  * @param  reg: 目標暫存器位址
  * @param  data: 要寫入的數據
  * @retval None
  */
static void BMI088_Gyro_Write_Byte(uint8_t reg, uint8_t data) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
    BMI088_Gyro_CS_Select();
 80008b4:	f7ff ff78 	bl	80007a8 <BMI088_Gyro_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	@ 0x64
 80008bc:	2201      	movs	r2, #1
 80008be:	4807      	ldr	r0, [pc, #28]	@ (80008dc <BMI088_Gyro_Write_Byte+0x38>)
 80008c0:	f006 fd42 	bl	8007348 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 80008c4:	1db9      	adds	r1, r7, #6
 80008c6:	2364      	movs	r3, #100	@ 0x64
 80008c8:	2201      	movs	r2, #1
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <BMI088_Gyro_Write_Byte+0x38>)
 80008cc:	f006 fd3c 	bl	8007348 <HAL_SPI_Transmit>
    BMI088_Gyro_CS_Deselect();
 80008d0:	f7ff ff76 	bl	80007c0 <BMI088_Gyro_CS_Deselect>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2400041c 	.word	0x2400041c

080008e0 <BMI088_Gyro_Read_Byte>:
/**
  * @brief  從陀螺儀讀取單個位元組
  * @param  reg: 目標暫存器位址
  * @retval 讀取到的數據
  */
static uint8_t BMI088_Gyro_Read_Byte(uint8_t reg) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
    uint8_t read_buf;
    reg |= 0x80;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	71fb      	strb	r3, [r7, #7]
    BMI088_Gyro_CS_Select();
 80008f4:	f7ff ff58 	bl	80007a8 <BMI088_Gyro_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	2364      	movs	r3, #100	@ 0x64
 80008fc:	2201      	movs	r2, #1
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <BMI088_Gyro_Read_Byte+0x40>)
 8000900:	f006 fd22 	bl	8007348 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &read_buf, 1, 100);
 8000904:	f107 010f 	add.w	r1, r7, #15
 8000908:	2364      	movs	r3, #100	@ 0x64
 800090a:	2201      	movs	r2, #1
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <BMI088_Gyro_Read_Byte+0x40>)
 800090e:	f006 ff09 	bl	8007724 <HAL_SPI_Receive>
    BMI088_Gyro_CS_Deselect();
 8000912:	f7ff ff55 	bl	80007c0 <BMI088_Gyro_CS_Deselect>
    return read_buf;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2400041c 	.word	0x2400041c

08000924 <BMI088_Gyro_Read_Multi>:
  * @param  reg: 起始暫存器位址
  * @param  data: 存放讀取數據的緩衝區
  * @param  len: 要讀取的位元組長度
  * @retval None
  */
static HAL_StatusTypeDef BMI088_Gyro_Read_Multi(uint8_t reg, uint8_t* data, uint16_t len) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
    reg |= 0x80;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800093a:	b2db      	uxtb	r3, r3
 800093c:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef SPI_Receive_status;
    BMI088_Gyro_CS_Select();
 800093e:	f7ff ff33 	bl	80007a8 <BMI088_Gyro_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 8000942:	1df9      	adds	r1, r7, #7
 8000944:	2364      	movs	r3, #100	@ 0x64
 8000946:	2201      	movs	r2, #1
 8000948:	4808      	ldr	r0, [pc, #32]	@ (800096c <BMI088_Gyro_Read_Multi+0x48>)
 800094a:	f006 fcfd 	bl	8007348 <HAL_SPI_Transmit>
    SPI_Receive_status = HAL_SPI_Receive(&hspi3, data, len, 100);
 800094e:	88ba      	ldrh	r2, [r7, #4]
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	4805      	ldr	r0, [pc, #20]	@ (800096c <BMI088_Gyro_Read_Multi+0x48>)
 8000956:	f006 fee5 	bl	8007724 <HAL_SPI_Receive>
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]
    BMI088_Gyro_CS_Deselect();
 800095e:	f7ff ff2f 	bl	80007c0 <BMI088_Gyro_CS_Deselect>
    return SPI_Receive_status;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2400041c 	.word	0x2400041c

08000970 <BMI088_Init>:
/**
  * @brief  初始化 BMI088 加速度計與陀螺儀
  * @param  None
  * @retval 0: 成功, 1: 加速度計錯誤, 2: 陀螺儀錯誤
  */
uint8_t BMI088_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
    uint8_t chip_id = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	71fb      	strb	r3, [r7, #7]

    // --- 加速度計初始化 ---
    // 1. 檢查晶片 ID
    chip_id = BMI088_Accel_Read_Byte(BMI088_ACC_CHIP_ID_ADDR);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff ff4a 	bl	8000814 <BMI088_Accel_Read_Byte>
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
    if (chip_id!= BMI088_ACC_CHIP_ID) {
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b1e      	cmp	r3, #30
 8000988:	d001      	beq.n	800098e <BMI088_Init+0x1e>
//        printf("Error: ACCEL Chip ID wrong! Get: 0x%02X\r\n", chip_id);
        return SENSOR_INVALID_ID;
 800098a:	2306      	movs	r3, #6
 800098c:	e03d      	b.n	8000a0a <BMI088_Init+0x9a>
    }
//    printf("ACCEL Chip ID OK: 0x%02X\r\n", chip_id);

    // 2. 軟復位
    BMI088_Accel_Write_Byte(BMI088_ACC_SOFTRESET_ADDR, 0xB6);
 800098e:	21b6      	movs	r1, #182	@ 0xb6
 8000990:	207e      	movs	r0, #126	@ 0x7e
 8000992:	f7ff ff21 	bl	80007d8 <BMI088_Accel_Write_Byte>
    HAL_Delay(100); // 等待復位完成， datasheet 建議至少 1ms，這裡給予更長的時間
 8000996:	2064      	movs	r0, #100	@ 0x64
 8000998:	f002 fe00 	bl	800359c <HAL_Delay>

    // 3. 電源控制，從 suspend 模式喚醒
    BMI088_Accel_Write_Byte(BMI088_ACC_PWR_CONF_ADDR, 0x00);
 800099c:	2100      	movs	r1, #0
 800099e:	207c      	movs	r0, #124	@ 0x7c
 80009a0:	f7ff ff1a 	bl	80007d8 <BMI088_Accel_Write_Byte>
    HAL_Delay(50);
 80009a4:	2032      	movs	r0, #50	@ 0x32
 80009a6:	f002 fdf9 	bl	800359c <HAL_Delay>
    // 啟用加速度計
    BMI088_Accel_Write_Byte(BMI088_ACC_PWR_CTRL_ADDR, 0x04);
 80009aa:	2104      	movs	r1, #4
 80009ac:	207d      	movs	r0, #125	@ 0x7d
 80009ae:	f7ff ff13 	bl	80007d8 <BMI088_Accel_Write_Byte>
    HAL_Delay(50);
 80009b2:	2032      	movs	r0, #50	@ 0x32
 80009b4:	f002 fdf2 	bl	800359c <HAL_Delay>

    // 4. 配置量測參數
    // ODR=100Hz, Normal Bandwidth
    BMI088_Accel_Write_Byte(BMI088_ACC_CONF_ADDR, 0xA8);
 80009b8:	21a8      	movs	r1, #168	@ 0xa8
 80009ba:	2040      	movs	r0, #64	@ 0x40
 80009bc:	f7ff ff0c 	bl	80007d8 <BMI088_Accel_Write_Byte>
    // Range=±3g
    BMI088_Accel_Write_Byte(BMI088_ACC_RANGE_ADDR, 0x00);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2041      	movs	r0, #65	@ 0x41
 80009c4:	f7ff ff08 	bl	80007d8 <BMI088_Accel_Write_Byte>

    // --- 陀螺儀初始化 ---
    // 1. 檢查晶片 ID
    chip_id = BMI088_Gyro_Read_Byte(BMI088_GYRO_CHIP_ID_ADDR);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff89 	bl	80008e0 <BMI088_Gyro_Read_Byte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
    if (chip_id!= BMI088_GYRO_CHIP_ID) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d001      	beq.n	80009dc <BMI088_Init+0x6c>
//        printf("Error: GYRO Chip ID wrong! Get: 0x%02X\r\n", chip_id);
        return SENSOR_INVALID_ID;
 80009d8:	2306      	movs	r3, #6
 80009da:	e016      	b.n	8000a0a <BMI088_Init+0x9a>
    }
//    printf("GYRO Chip ID OK: 0x%02X\r\n", chip_id);

    // 2. 軟復位
    BMI088_Gyro_Write_Byte(BMI088_GYRO_SOFTRESET_ADDR, 0xB6);
 80009dc:	21b6      	movs	r1, #182	@ 0xb6
 80009de:	2014      	movs	r0, #20
 80009e0:	f7ff ff60 	bl	80008a4 <BMI088_Gyro_Write_Byte>
    HAL_Delay(100);
 80009e4:	2064      	movs	r0, #100	@ 0x64
 80009e6:	f002 fdd9 	bl	800359c <HAL_Delay>

    // 3. 電源控制，從 suspend 模式喚醒到 normal 模式
    BMI088_Gyro_Write_Byte(BMI088_GYRO_LPM1_ADDR, 0x00);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2011      	movs	r0, #17
 80009ee:	f7ff ff59 	bl	80008a4 <BMI088_Gyro_Write_Byte>
    HAL_Delay(50);
 80009f2:	2032      	movs	r0, #50	@ 0x32
 80009f4:	f002 fdd2 	bl	800359c <HAL_Delay>

    // 4. 配置量測參數
    // Range=±2000 dps
    BMI088_Gyro_Write_Byte(BMI088_GYRO_RANGE_ADDR, 0x00);
 80009f8:	2100      	movs	r1, #0
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff ff52 	bl	80008a4 <BMI088_Gyro_Write_Byte>
    // ODR=200Hz, Bandwidth=53Hz
    BMI088_Gyro_Write_Byte(BMI088_GYRO_BANDWIDTH_ADDR, 0x8A);
 8000a00:	218a      	movs	r1, #138	@ 0x8a
 8000a02:	2010      	movs	r0, #16
 8000a04:	f7ff ff4e 	bl	80008a4 <BMI088_Gyro_Write_Byte>

//    printf("BMI088 Init Success.\r\n");
    return SENSOR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <BMI088_Main>:
 * float gyro_dps[3];    // 0:X, 1:Y, 2:Z
 * } bmi088_data;
 *
 */

HAL_StatusTypeDef BMI088_Main(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af04      	add	r7, sp, #16
    uint8_t accel_raw_data[6];
    uint8_t gyro_raw_data[6];
    HAL_StatusTypeDef BMI088_status;
    // 讀取加速度計的 X, Y, Z 軸數據 (共 6 個位元組)
    // 數據順序: X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB
    BMI088_status = BMI088_Accel_Read_Multi(BMI088_ACC_X_LSB_ADDR, accel_raw_data, 6);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2206      	movs	r2, #6
 8000a20:	4619      	mov	r1, r3
 8000a22:	2012      	movs	r0, #18
 8000a24:	f7ff ff18 	bl	8000858 <BMI088_Accel_Read_Multi>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]
    //錯誤處理
    if(BMI088_status != 0)
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <BMI088_Main+0x2c>
    {
    	printf("<BMI-088>Failed to read data! Error Code: %d\r\n",BMI088_status);
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	4619      	mov	r1, r3
 8000a36:	486f      	ldr	r0, [pc, #444]	@ (8000bf4 <BMI088_Main+0x1e0>)
 8000a38:	f008 f8cc 	bl	8008bd4 <iprintf>
    	return SENSOR_COMM_FAIL;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	e0d5      	b.n	8000bec <BMI088_Main+0x1d8>
    }
    // 讀取陀螺儀的 X, Y, Z 軸數據 (共 6 個位元組)
    // 數據順序: X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB
    BMI088_status = BMI088_Gyro_Read_Multi(BMI088_GYRO_RATE_X_LSB_ADDR, gyro_raw_data, 6);
 8000a40:	463b      	mov	r3, r7
 8000a42:	2206      	movs	r2, #6
 8000a44:	4619      	mov	r1, r3
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff ff6c 	bl	8000924 <BMI088_Gyro_Read_Multi>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]
    //錯誤處理
    if(BMI088_status != 0)
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <BMI088_Main+0x50>
    {
    	printf("<BMI-088>Failed to read data! Error Code: %d\r\n",BMI088_status);
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4866      	ldr	r0, [pc, #408]	@ (8000bf4 <BMI088_Main+0x1e0>)
 8000a5c:	f008 f8ba 	bl	8008bd4 <iprintf>
    	return SENSOR_COMM_FAIL;
 8000a60:	2304      	movs	r3, #4
 8000a62:	e0c3      	b.n	8000bec <BMI088_Main+0x1d8>
    }
    // --- 數據組合與轉換 ---
    // 修正 #2: 從陣列中正確取出 LSB 和 MSB 進行組合
    // 修正 #3: 將各軸數據存到對應的陣列索引中，避免覆蓋
    // Accel X = MSB 在前, LSB 在後
    bmi088_data.raw_accel[0] = (int16_t)((accel_raw_data[1] << 8) | accel_raw_data[0]);
 8000a64:	7a7b      	ldrb	r3, [r7, #9]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	7a3b      	ldrb	r3, [r7, #8]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	4b60      	ldr	r3, [pc, #384]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000a76:	801a      	strh	r2, [r3, #0]
    // Accel Y
    bmi088_data.raw_accel[1] = (int16_t)((accel_raw_data[3] << 8) | accel_raw_data[2]);
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	7abb      	ldrb	r3, [r7, #10]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	4b5b      	ldr	r3, [pc, #364]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000a8a:	805a      	strh	r2, [r3, #2]
    // Accel Z
    bmi088_data.raw_accel[2] = (int16_t)((accel_raw_data[5] << 8) | accel_raw_data[4]);
 8000a8c:	7b7b      	ldrb	r3, [r7, #13]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	7b3b      	ldrb	r3, [r7, #12]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	4b56      	ldr	r3, [pc, #344]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000a9e:	809a      	strh	r2, [r3, #4]

    // Gyro X
    bmi088_data.raw_gyro[0] = (int16_t)((gyro_raw_data[1] << 8) | gyro_raw_data[0]);
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	783b      	ldrb	r3, [r7, #0]
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	4b51      	ldr	r3, [pc, #324]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ab2:	80da      	strh	r2, [r3, #6]
    // Gyro Y
    bmi088_data.raw_gyro[1] = (int16_t)((gyro_raw_data[3] << 8) | gyro_raw_data[2]);
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	78bb      	ldrb	r3, [r7, #2]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ac6:	811a      	strh	r2, [r3, #8]
    // Gyro Z
    bmi088_data.raw_gyro[2] = (int16_t)((gyro_raw_data[5] << 8) | gyro_raw_data[4]);
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	4b47      	ldr	r3, [pc, #284]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ada:	815a      	strh	r2, [r3, #10]

    // 將原始數據轉換為物理單位 (參考第四章)
    // 加速度計靈敏度 (LSB/g)，範圍 ±3g -> 2^16 / (2 * 3g) = 65536 / 6 ≈ 10922 LSB/g
    // 實際轉換：value_g = raw_value * (3.0f / 32768.0f)
    bmi088_data.accel_g[0] = bmi088_data.raw_accel[0] * (3.0f / 32768.0f);
 8000adc:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aea:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000bfc <BMI088_Main+0x1e8>
 8000aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af2:	4b41      	ldr	r3, [pc, #260]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000af4:	edc3 7a03 	vstr	s15, [r3, #12]
    bmi088_data.accel_g[1] = bmi088_data.raw_accel[1] * (3.0f / 32768.0f);
 8000af8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000afa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b06:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000bfc <BMI088_Main+0x1e8>
 8000b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b10:	edc3 7a04 	vstr	s15, [r3, #16]
    bmi088_data.accel_g[2] = bmi088_data.raw_accel[2] * (3.0f / 32768.0f);
 8000b14:	4b38      	ldr	r3, [pc, #224]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b22:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000bfc <BMI088_Main+0x1e8>
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b2c:	edc3 7a05 	vstr	s15, [r3, #20]

    // 陀螺儀靈敏度 (LSB/dps)，範圍 ±2000dps -> 2^16 / (2 * 2000dps) = 65536 / 4000 = 16.384 LSB/(°/s)
    // 實際轉換：value_dps = raw_value / 16.384  或  value_dps = raw_value * (2000.0f / 32768.0f)
    bmi088_data.gyro_dps[0] = bmi088_data.raw_gyro[0] * (2000.0f / 32768.0f);
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b36:	ee07 3a90 	vmov	s15, r3
 8000b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000c00 <BMI088_Main+0x1ec>
 8000b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b46:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b48:	edc3 7a06 	vstr	s15, [r3, #24]
    bmi088_data.gyro_dps[1] = bmi088_data.raw_gyro[1] * (2000.0f / 32768.0f);
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b5a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000c00 <BMI088_Main+0x1ec>
 8000b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b64:	edc3 7a07 	vstr	s15, [r3, #28]
    bmi088_data.gyro_dps[2] = bmi088_data.raw_gyro[2] * (2000.0f / 32768.0f);
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b76:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000c00 <BMI088_Main+0x1ec>
 8000b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b80:	edc3 7a08 	vstr	s15, [r3, #32]
    // 輸出轉換後的物理單位數據 (修正 printf 的變數)
//    printf("PHY -> ACC(x,y,z)[g]: %8.3f, %8.3f, %8.3f | GYR(x,y,z)[dps]: %8.3f, %8.3f, %8.3f\r\n",
//           bmi088_data.accel_g[0], bmi088_data.accel_g[1], bmi088_data.accel_g[2],
//           bmi088_data.gyro_dps[0], bmi088_data.gyro_dps[1], bmi088_data.gyro_dps[2]);

	printf("<BMI-088> accel_data: %8.3f, %8.3f, %8.3f\r\n", bmi088_data.accel_g[0], bmi088_data.accel_g[1], bmi088_data.accel_g[2]);
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b86:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b8a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b90:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b9a:	edd3 6a05 	vldr	s13, [r3, #20]
 8000b9e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ba2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ba6:	ed8d 7b00 	vstr	d7, [sp]
 8000baa:	ec53 2b15 	vmov	r2, r3, d5
 8000bae:	4815      	ldr	r0, [pc, #84]	@ (8000c04 <BMI088_Main+0x1f0>)
 8000bb0:	f008 f810 	bl	8008bd4 <iprintf>
	printf("<BMI-088> gyro_data: %8.3f, %8.3f, %8.3f\r\n", bmi088_data.gyro_dps[0], bmi088_data.gyro_dps[1], bmi088_data.gyro_dps[2]);
 8000bb4:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000bb6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000bc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000bca:	edd3 6a08 	vldr	s13, [r3, #32]
 8000bce:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000bd2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000bd6:	ed8d 7b00 	vstr	d7, [sp]
 8000bda:	ec53 2b15 	vmov	r2, r3, d5
 8000bde:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <BMI088_Main+0x1f4>)
 8000be0:	f007 fff8 	bl	8008bd4 <iprintf>
	printf("The data is OK\r\n");
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <BMI088_Main+0x1f8>)
 8000be6:	f008 f85d 	bl	8008ca4 <puts>
	return SENSOR_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	0800c3d0 	.word	0x0800c3d0
 8000bf8:	24000204 	.word	0x24000204
 8000bfc:	38c00000 	.word	0x38c00000
 8000c00:	3d7a0000 	.word	0x3d7a0000
 8000c04:	0800c400 	.word	0x0800c400
 8000c08:	0800c42c 	.word	0x0800c42c
 8000c0c:	0800c458 	.word	0x0800c458

08000c10 <ICM20948_CS_Select>:

/**
 * @brief 選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為低電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Select(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c1c:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <ICM20948_CS_Select+0x30>)
 8000c1e:	f002 fff9 	bl	8003c14 <HAL_GPIO_WritePin>
    // HAL_Delay(1) 太長，但對於基本功能通常可行。若有高速通訊問題可考慮更精確的延遲或移除。
    // 若 SPI 時脈很慢，此延遲可能不需要或可以縮短。
    // 為了確保穩定性，保留一個非常短的延遲或直接移除，取決於 SPI 時脈和硬體特性。
    // 如果 SPI 時脈在 MHz 等級，CPU 指令本身可能就足夠。
    // 這裡保留 HAL_Delay(1) 作為一個保守的選擇，但可以根據實際測試進行優化。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲替代 HAL_Delay(1)
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e002      	b.n	8000c2e <ICM20948_CS_Select+0x1e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	ddf9      	ble.n	8000c28 <ICM20948_CS_Select+0x18>
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	58020c00 	.word	0x58020c00

08000c44 <ICM20948_CS_Deselect>:

/**
 * @brief 取消選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為高電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Deselect(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c50:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <ICM20948_CS_Deselect+0x30>)
 8000c52:	f002 ffdf 	bl	8003c14 <HAL_GPIO_WritePin>
    // Datasheet 建議 SCLK 下降沿到 CS 高電位至少 20ns (tCSH)
    // 同上，HAL_Delay(1) 可能過長。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e002      	b.n	8000c62 <ICM20948_CS_Deselect+0x1e>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b09      	cmp	r3, #9
 8000c66:	ddf9      	ble.n	8000c5c <ICM20948_CS_Deselect+0x18>
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58020c00 	.word	0x58020c00

08000c78 <ICM20948_WriteByte>:
 * @brief 透過 SPI 寫入單一位元組數據至 ICM-20948 指定暫存器。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為0代表寫入)。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_WriteByte(uint8_t reg_addr, uint8_t data) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buffer[2];
    HAL_StatusTypeDef status;

    tx_buffer[0] = reg_addr & 0x7F; // 寫入操作，MSB 為 0
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = data;
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	737b      	strb	r3, [r7, #13]

    ICM20948_CS_Select();
 8000c96:	f7ff ffbb 	bl	8000c10 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, tx_buffer, 2, SPI_TIMEOUT);
 8000c9a:	f107 010c 	add.w	r1, r7, #12
 8000c9e:	2364      	movs	r3, #100	@ 0x64
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	4806      	ldr	r0, [pc, #24]	@ (8000cbc <ICM20948_WriteByte+0x44>)
 8000ca4:	f006 fb50 	bl	8007348 <HAL_SPI_Transmit>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
    ICM20948_CS_Deselect();
 8000cac:	f7ff ffca 	bl	8000c44 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理，例如記錄錯誤或重試
    }
    return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2400030c 	.word	0x2400030c

08000cc0 <ICM20948_ReadByte>:
 * @brief 透過 SPI 從 ICM-20948 指定暫存器讀取單一位元組數據。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadByte(uint8_t reg_addr, uint8_t *pData) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 8000cd6:	f7ff ff9b 	bl	8000c10 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送要讀取的暫存器位址
 8000cda:	f107 010e 	add.w	r1, r7, #14
 8000cde:	2364      	movs	r3, #100	@ 0x64
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <ICM20948_ReadByte+0x50>)
 8000ce4:	f006 fb30 	bl	8007348 <HAL_SPI_Transmit>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <ICM20948_ReadByte+0x42>
        status = HAL_SPI_Receive(&hspi1, pData, 1, SPI_TIMEOUT); // 接收數據
 8000cf2:	2364      	movs	r3, #100	@ 0x64
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <ICM20948_ReadByte+0x50>)
 8000cfa:	f006 fd13 	bl	8007724 <HAL_SPI_Receive>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 8000d02:	f7ff ff9f 	bl	8000c44 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2400030c 	.word	0x2400030c

08000d14 <ICM20948_ReadBytes>:
 * @param reg_addr: 起始目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @param count:    要讀取的位元組數量。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadBytes(uint8_t reg_addr, uint8_t *pData, uint16_t count) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	80bb      	strh	r3, [r7, #4]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 8000d2e:	f7ff ff6f 	bl	8000c10 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送起始暫存器位址
 8000d32:	f107 010e 	add.w	r1, r7, #14
 8000d36:	2364      	movs	r3, #100	@ 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <ICM20948_ReadBytes+0x54>)
 8000d3c:	f006 fb04 	bl	8007348 <HAL_SPI_Transmit>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d107      	bne.n	8000d5a <ICM20948_ReadBytes+0x46>
        status = HAL_SPI_Receive(&hspi1, pData, count, SPI_TIMEOUT); // 連續接收多個位元組
 8000d4a:	88ba      	ldrh	r2, [r7, #4]
 8000d4c:	2364      	movs	r3, #100	@ 0x64
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <ICM20948_ReadBytes+0x54>)
 8000d52:	f006 fce7 	bl	8007724 <HAL_SPI_Receive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 8000d5a:	f7ff ff73 	bl	8000c44 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2400030c 	.word	0x2400030c

08000d6c <ICM20948_SelectUserBank>:
 * @param bank: 要選擇的庫編號 (0, 1, 2, 或 3)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 * @note  REG_BANK_SEL 暫存器在所有庫中皆可存取。
 * 位元 [5:4] 用於選擇庫: 00 for UB0, 01 for UB1, 10 for UB2, 11 for UB3.
 */
HAL_StatusTypeDef ICM20948_SelectUserBank(uint8_t bank) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    if (bank > 3) {
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d901      	bls.n	8000d80 <ICM20948_SelectUserBank+0x14>
        return HAL_ERROR; // 無效的庫編號
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e007      	b.n	8000d90 <ICM20948_SelectUserBank+0x24>
    // REG_BANK_SEL (0x7F) 的位元 [5:4] (USER_BANK) 控制庫選擇
    // bank 0 -> 0x00
    // bank 1 -> 0x10
    // bank 2 -> 0x20
    // bank 3 -> 0x30
    return ICM20948_WriteByte(ICM20948_REG_BANK_SEL, (bank << 4));
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	207f      	movs	r0, #127	@ 0x7f
 8000d8a:	f7ff ff75 	bl	8000c78 <ICM20948_WriteByte>
 8000d8e:	4603      	mov	r3, r0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <AK09916_WriteByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，寫入單一位元組數據至 AK09916 磁力計指定暫存器。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_WriteByteViaICM(uint8_t reg_addr, uint8_t data) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t current_bank_sel_val;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 8000da8:	2303      	movs	r3, #3
 8000daa:	73fb      	strb	r3, [r7, #15]
    // status = ICM20948_ReadByte(ICM20948_REG_BANK_SEL, &current_bank_sel_val);
    // if (status != HAL_OK) return status;
    // current_bank_sel_val = (current_bank_sel_val >> 4) & 0x03; // 提取庫號

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ffdc 	bl	8000d6c <ICM20948_SelectUserBank>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <AK09916_WriteByteViaICM+0x2a>
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	e040      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR，不含 R/W 位元，表示寫入)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR); //  R/W bit is 0 for write
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f7ff ff57 	bl	8000c78 <ICM20948_WriteByte>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <AK09916_WriteByteViaICM+0x46>
        ICM20948_SelectUserBank(0); // 嘗試恢復到庫0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ffc9 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	e032      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    }

    // 3. 設定要寫入的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2004      	movs	r0, #4
 8000de4:	f7ff ff48 	bl	8000c78 <ICM20948_WriteByte>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <AK09916_WriteByteViaICM+0x64>
        ICM20948_SelectUserBank(0);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff ffba 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	e023      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    }

    // 4. 設定要寫入的數據
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_DO, data);
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	2006      	movs	r0, #6
 8000e02:	f7ff ff39 	bl	8000c78 <ICM20948_WriteByte>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d004      	beq.n	8000e1a <AK09916_WriteByteViaICM+0x82>
        ICM20948_SelectUserBank(0);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff ffab 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	e014      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    }

    // 5. 致能 I2C 從裝置 0，並設定為寫入一個位元組，觸發傳輸
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000e1a:	2181      	movs	r1, #129	@ 0x81
 8000e1c:	2005      	movs	r0, #5
 8000e1e:	f7ff ff2b 	bl	8000c78 <ICM20948_WriteByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <AK09916_WriteByteViaICM+0x9e>
        ICM20948_SelectUserBank(0);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff9d 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	e006      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    //    理想情況下，應該檢查 I2C_MST_STATUS 暫存器中的 I2C_SLV0_NACK 或 I2C_IF_DONE 位元。
    //    為簡化，這裡使用固定延遲。在實際應用中，需要更可靠的同步機制。
    //    ICM20948 datasheet 7.6節: "The I2C Master interface issues a STOP condition specific to the transaction length."
    //    "The I2C Master interface will stretch the main processor’s clock when an I2C transaction is in progress." (if I2C_MST_P_NSR=1 in I2C_MST_CTRL)
    //    這裡假設 I2C_MST_P_NSR=0 (預設)，所以需要軟體延遲或狀態檢查。
    HAL_Delay(20); // 稍微增加延遲以確保傳輸完成 (這個延遲可能需要調整，取決於 I2C 速度和目標設備)
 8000e36:	2014      	movs	r0, #20
 8000e38:	f002 fbb0 	bl	800359c <HAL_Delay>
    //    status = ICM20948_ReadByte(0x17, &i2c_mst_status_val); // I2C_MST_STATUS (UB0)
    //    if (status != HAL_OK) return status;
    //    if (i2c_mst_status_val & 0x01) { /* I2C_SLV0_NACK */ return HAL_ERROR; }

    // 操作完成後，建議切換回常用的庫，例如庫 0
    return ICM20948_SelectUserBank(0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ff95 	bl	8000d6c <ICM20948_SelectUserBank>
 8000e42:	4603      	mov	r3, r0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <AK09916_ReadByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，從 AK09916 磁力計指定暫存器讀取單一位元組數據。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadByteViaICM(uint8_t reg_addr, uint8_t *pData) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t temp_data;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 8000e58:	2303      	movs	r3, #3
 8000e5a:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0; // 外部感測器數據在庫 0
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]

    // 1. 切換到使用者庫 3，設定 I2C 從裝置相關暫存器
    status = ICM20948_SelectUserBank(target_bank);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff82 	bl	8000d6c <ICM20948_SelectUserBank>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <AK09916_ReadByteViaICM+0x2a>
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	e04a      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR | 0x80，設定 R/W 位元為讀取)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80);
 8000e76:	218c      	movs	r1, #140	@ 0x8c
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f7ff fefd 	bl	8000c78 <ICM20948_WriteByte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000e82:	7b7b      	ldrb	r3, [r7, #13]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <AK09916_ReadByteViaICM+0x48>
        ICM20948_SelectUserBank(data_read_bank); // 嘗試恢復
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff6e 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000e90:	7b7b      	ldrb	r3, [r7, #13]
 8000e92:	e03b      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>
    }

    // 3. 設定要讀取的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4619      	mov	r1, r3
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff feed 	bl	8000c78 <ICM20948_WriteByte>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <AK09916_ReadByteViaICM+0x68>
        ICM20948_SelectUserBank(data_read_bank);
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff5e 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	e02b      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>
    // 4. 致能 I2C 從裝置 0，設定為讀取一個位元組，並觸發讀取
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    //   I2C_SLV0_REG_DIS (bit 5) = 0 (寫入 reg_addr)
    //   I2C_SLV0_BYTE_SW (bit 6) = 0 (預設)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000eb4:	2181      	movs	r1, #129	@ 0x81
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f7ff fede 	bl	8000c78 <ICM20948_WriteByte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000ec0:	7b7b      	ldrb	r3, [r7, #13]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <AK09916_ReadByteViaICM+0x86>
        ICM20948_SelectUserBank(data_read_bank);
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff4f 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	e01c      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>
    }

    // 5. 等待 I2C 傳輸完成並數據就緒
    HAL_Delay(5); // 這個延遲可能需要調整，最好是檢查狀態位元
 8000ed2:	2005      	movs	r0, #5
 8000ed4:	f002 fb62 	bl	800359c <HAL_Delay>

    // 6. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff46 	bl	8000d6c <ICM20948_SelectUserBank>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000ee4:	7b7b      	ldrb	r3, [r7, #13]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <AK09916_ReadByteViaICM+0xa2>
 8000eea:	7b7b      	ldrb	r3, [r7, #13]
 8000eec:	e00e      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>

    // 7. 從 EXT_SLV_SENS_DATA_00 讀取數據
    //    ICM-20948 會自動將從 SLV0 讀到的數據放入 EXT_SLV_SENS_DATA_00 開始的暫存器中
    status = ICM20948_ReadByte(ICM20948_EXT_SLV_SENS_DATA_00, &temp_data);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	203b      	movs	r0, #59	@ 0x3b
 8000ef6:	f7ff fee3 	bl	8000cc0 <ICM20948_ReadByte>
 8000efa:	4603      	mov	r3, r0
 8000efc:	737b      	strb	r3, [r7, #13]
    if (status == HAL_OK) {
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <AK09916_ReadByteViaICM+0xbe>
        *pData = temp_data;
 8000f04:	7b3a      	ldrb	r2, [r7, #12]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <ICM20948_Init>:

/**
 * @brief 初始化 ICM-20948 感測器 (包括加速計、陀螺儀和磁力計)。
 * @return HAL_StatusTypeDef: 初始化成功則返回 HAL_OK，否則返回 HAL_ERROR。
 */
HAL_StatusTypeDef ICM20948_Init(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	70fb      	strb	r3, [r7, #3]
    uint8_t who_am_i_val = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	70bb      	strb	r3, [r7, #2]
    uint8_t ak09916_wia2_val = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	707b      	strb	r3, [r7, #1]

    // --- 0. 確保 SPI CS 引腳初始為高電位 ---
    ICM20948_CS_Deselect(); // 使用更新後的 CS 控制函式
 8000f26:	f7ff fe8d 	bl	8000c44 <ICM20948_CS_Deselect>
    HAL_Delay(10); // 等待感測器上電穩定
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	f002 fb36 	bl	800359c <HAL_Delay>

    // --- 1. 選擇使用者庫 0 ---
    status = ICM20948_SelectUserBank(0);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ff1b 	bl	8000d6c <ICM20948_SelectUserBank>
 8000f36:	4603      	mov	r3, r0
 8000f38:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_ERROR; // 如果切換庫失敗，則初始化失敗
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <ICM20948_Init+0x30>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e112      	b.n	800116a <ICM20948_Init+0x256>

    // --- 2. 檢查 WHO_AM_I 暫存器 ---
    status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	4619      	mov	r1, r3
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff feb9 	bl	8000cc0 <ICM20948_ReadByte>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK || who_am_i_val != 0xEA) { // 0xEA 是 ICM-20948 的預期值
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <ICM20948_Init+0x4a>
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2bea      	cmp	r3, #234	@ 0xea
 8000f5c:	d024      	beq.n	8000fa8 <ICM20948_Init+0x94>
        // 可以嘗試多次讀取 WHO_AM_I，因為有時第一次通訊可能不穩定
        HAL_Delay(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f002 fb1c 	bl	800359c <HAL_Delay>
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        for (int i = 0; i < 10; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	e00c      	b.n	8000f84 <ICM20948_Init+0x70>
            status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000f6a:	1cbb      	adds	r3, r7, #2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fea6 	bl	8000cc0 <ICM20948_ReadByte>
 8000f74:	4603      	mov	r3, r0
 8000f76:	70fb      	strb	r3, [r7, #3]
            if (status == HAL_OK) {
//                printf("WHO_AM_I: 0x%02X (Attempt %d)\r\n", who_am_i_val, i + 1);
            } else {
//                printf("Read WHO_AM_I FAILED, Status: %d (Attempt %d)\r\n", status, i + 1);
            }
            HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	@ 0x32
 8000f7a:	f002 fb0f 	bl	800359c <HAL_Delay>
        for (int i = 0; i < 10; i++) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	ddef      	ble.n	8000f6a <ICM20948_Init+0x56>
        }
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000f8a:	1cbb      	adds	r3, r7, #2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fe96 	bl	8000cc0 <ICM20948_ReadByte>
 8000f94:	4603      	mov	r3, r0
 8000f96:	70fb      	strb	r3, [r7, #3]
        if (status != HAL_OK || who_am_i_val != 0xEA) {
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <ICM20948_Init+0x90>
 8000f9e:	78bb      	ldrb	r3, [r7, #2]
 8000fa0:	2bea      	cmp	r3, #234	@ 0xea
 8000fa2:	d001      	beq.n	8000fa8 <ICM20948_Init+0x94>
             return SENSOR_INVALID_ID; // 裝置識別失敗
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	e0e0      	b.n	800116a <ICM20948_Init+0x256>
        }
    }

    // --- 3. 重設並喚醒裝置 ---
    // 寫入 0x80 到 PWR_MGMT_1 (DEVICE_RESET = 1)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x80);
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	2006      	movs	r0, #6
 8000fac:	f7ff fe64 	bl	8000c78 <ICM20948_WriteByte>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_PARAM_INVALID;
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <ICM20948_Init+0xaa>
 8000fba:	230c      	movs	r3, #12
 8000fbc:	e0d5      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(100); // 等待重設完成 (Datasheet 建議 100ms)
 8000fbe:	2064      	movs	r0, #100	@ 0x64
 8000fc0:	f002 faec 	bl	800359c <HAL_Delay>

    // 從睡眠模式喚醒，並選擇時脈源
    // 寫入 0x01 到 PWR_MGMT_1 (CLKSEL = 1，選擇最佳可用時脈源，通常是內部20MHz振盪器, 自動選擇)
    // SLEEP = 0 (正常模式), TEMP_DIS = 0 (溫度感測器致能)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x01);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2006      	movs	r0, #6
 8000fc8:	f7ff fe56 	bl	8000c78 <ICM20948_WriteByte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_DATA_NOT_READY;
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <ICM20948_Init+0xc6>
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	e0c7      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(50); // 等待時脈穩定
 8000fda:	2032      	movs	r0, #50	@ 0x32
 8000fdc:	f002 fade 	bl	800359c <HAL_Delay>

    // --- 4. 配置加速計和陀螺儀 ---
    // 切換到使用者庫 2
    status = ICM20948_SelectUserBank(2);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff fec3 	bl	8000d6c <ICM20948_SelectUserBank>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_CONFIG_FAIL;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <ICM20948_Init+0xe0>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e0ba      	b.n	800116a <ICM20948_Init+0x256>
    // ACCEL_DLPFCFG: 加速計數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±2g, DLPF 致能 (ACCEL_FCHOICE=0), DLPFCFG = 1 (約 246Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // ACCEL_CONFIG = (DLPFCFG << 3) | (ACCEL_FS_SEL << 1) | ACCEL_FCHOICE
    //              = (001 << 3)   | (00 << 1)        | 0
    //              = 0x08
    status = ICM20948_WriteByte(ICM20948_ACCEL_CONFIG, (0x01 << 3) | (0x00 << 1) | 0x00);
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	2014      	movs	r0, #20
 8000ff8:	f7ff fe3e 	bl	8000c78 <ICM20948_WriteByte>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_CONFIG_FAIL; }
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <ICM20948_Init+0xfc>
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff feb0 	bl	8000d6c <ICM20948_SelectUserBank>
 800100c:	2303      	movs	r3, #3
 800100e:	e0ac      	b.n	800116a <ICM20948_Init+0x256>
    current_accel_sensitivity = ACCEL_SENSITIVITY_2G; // 更新當前靈敏度
 8001010:	4b58      	ldr	r3, [pc, #352]	@ (8001174 <ICM20948_Init+0x260>)
 8001012:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001016:	601a      	str	r2, [r3, #0]
    // GYRO_DLPFCFG: 陀螺儀數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±250dps, DLPF 致能 (GYRO_FCHOICE=0), DLPFCFG = 1 (約 196.6Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // GYRO_CONFIG_1 = (DLPFCFG << 3) | (GYRO_FS_SEL << 1) | GYRO_FCHOICE
    //               = (001 << 3)   | (00 << 1)       | 0
    //               = 0x08
    status = ICM20948_WriteByte(ICM20948_GYRO_CONFIG_1, (0x01 << 3) | (0x00 << 1) | 0x00);
 8001018:	2108      	movs	r1, #8
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff fe2c 	bl	8000c78 <ICM20948_WriteByte>
 8001020:	4603      	mov	r3, r0
 8001022:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_CONFIG_FAIL; }
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <ICM20948_Init+0x120>
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fe9e 	bl	8000d6c <ICM20948_SelectUserBank>
 8001030:	2303      	movs	r3, #3
 8001032:	e09a      	b.n	800116a <ICM20948_Init+0x256>
    current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS; // 更新當前靈敏度
 8001034:	4b50      	ldr	r3, [pc, #320]	@ (8001178 <ICM20948_Init+0x264>)
 8001036:	4a51      	ldr	r2, [pc, #324]	@ (800117c <ICM20948_Init+0x268>)
 8001038:	601a      	str	r2, [r3, #0]
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
    // status = ICM20948_WriteByte(ICM20948_ACCEL_SMPLRT_DIV_1, 0x00); // 加速計 ODR 高位元組
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fe96 	bl	8000d6c <ICM20948_SelectUserBank>
 8001040:	4603      	mov	r3, r0
 8001042:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_ERROR;
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <ICM20948_Init+0x13a>
 800104a:	2301      	movs	r3, #1
 800104c:	e08d      	b.n	800116a <ICM20948_Init+0x256>

    // --- 5. 配置 I2C 主機介面以與 AK09916 通訊 ---
    // 致能 I2C 主機模式 (USER_CTRL 的 I2C_MST_EN 位元 (bit 5))
    uint8_t user_ctrl_val;
    status = ICM20948_ReadByte(ICM20948_USER_CTRL, &user_ctrl_val);
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	2003      	movs	r0, #3
 8001054:	f7ff fe34 	bl	8000cc0 <ICM20948_ReadByte>
 8001058:	4603      	mov	r3, r0
 800105a:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_COMM_FAIL;
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <ICM20948_Init+0x152>
 8001062:	2304      	movs	r3, #4
 8001064:	e081      	b.n	800116a <ICM20948_Init+0x256>
    user_ctrl_val |= (1 << 5); // 設定 I2C_MST_EN = 1 (啟用 I2C Master)
 8001066:	783b      	ldrb	r3, [r7, #0]
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	b2db      	uxtb	r3, r3
 800106e:	703b      	strb	r3, [r7, #0]
    user_ctrl_val |= (1 << 4); // 設定 I2C_IF_DIS = 1 (為 SPI 模式禁用 ICM 的 I2C Slave 介面)
 8001070:	783b      	ldrb	r3, [r7, #0]
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	b2db      	uxtb	r3, r3
 8001078:	703b      	strb	r3, [r7, #0]
    // user_ctrl_val &= ~(1 << 6); // 確保 I2C_IF_DIS = 0, 使能SPI和I2C同時工作 (如果需要SPI訪問ICM本身)
    status = ICM20948_WriteByte(ICM20948_USER_CTRL, user_ctrl_val);
 800107a:	783b      	ldrb	r3, [r7, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff fdfa 	bl	8000c78 <ICM20948_WriteByte>
 8001084:	4603      	mov	r3, r0
 8001086:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_COMM_FAIL;
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <ICM20948_Init+0x17e>
 800108e:	2304      	movs	r3, #4
 8001090:	e06b      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(500); // 等待 I2C 主機介面穩定
 8001092:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001096:	f002 fa81 	bl	800359c <HAL_Delay>

    // 切換到使用者庫 3
    status = ICM20948_SelectUserBank(3);
 800109a:	2003      	movs	r0, #3
 800109c:	f7ff fe66 	bl	8000d6c <ICM20948_SelectUserBank>
 80010a0:	4603      	mov	r3, r0
 80010a2:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_ERROR; }
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <ICM20948_Init+0x1a0>
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fe5e 	bl	8000d6c <ICM20948_SelectUserBank>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e05a      	b.n	800116a <ICM20948_Init+0x256>

    // 設定 I2C 主機時脈頻率 (I2C_MST_CTRL 的 I2C_MST_CLK bits 3:0)
    // 例如，設定為 400kHz (datasheet 建議值 0x07 for 345.6 kHz to 400 kHz)
    // 0x0D for ~100kHz if needed for stability with AK09916
    status = ICM20948_WriteByte(ICM20948_I2C_MST_CTRL, 0x07);
 80010b4:	2107      	movs	r1, #7
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fdde 	bl	8000c78 <ICM20948_WriteByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_COMM_FAIL; }
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <ICM20948_Init+0x1bc>
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fe50 	bl	8000d6c <ICM20948_SelectUserBank>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e04c      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(50);
 80010d0:	2032      	movs	r0, #50	@ 0x32
 80010d2:	f002 fa63 	bl	800359c <HAL_Delay>

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fe48 	bl	8000d6c <ICM20948_SelectUserBank>
 80010dc:	4603      	mov	r3, r0
 80010de:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_COMM_FAIL;
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <ICM20948_Init+0x1d6>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e03f      	b.n	800116a <ICM20948_Init+0x256>
//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    // ... (ICM I2C Master 設定完成後)

    // --- 6. 初始化 AK09916 磁力計 ---
    // **先嘗試軟復位 AK09916**
    status = AK09916_WriteByteViaICM(AK09916_CNTL3, 0x01);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2032      	movs	r0, #50	@ 0x32
 80010ee:	f7ff fe53 	bl	8000d98 <AK09916_WriteByteViaICM>
 80010f2:	4603      	mov	r3, r0
 80010f4:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <ICM20948_Init+0x1f8>
        printf("AK09916 Soft Reset FAILED!\r\n");
 80010fc:	4820      	ldr	r0, [pc, #128]	@ (8001180 <ICM20948_Init+0x26c>)
 80010fe:	f007 fdd1 	bl	8008ca4 <puts>
        ICM20948_SelectUserBank(0); // 切回 UB0
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fe32 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_CONFIG_FAIL;
 8001108:	2303      	movs	r3, #3
 800110a:	e02e      	b.n	800116a <ICM20948_Init+0x256>
    }
    HAL_Delay(100); // 等待復位完成
 800110c:	2064      	movs	r0, #100	@ 0x64
 800110e:	f002 fa45 	bl	800359c <HAL_Delay>
    // status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x00); // Power-down
    // if (status != HAL_OK) { /* 錯誤處理 */ }
    // HAL_Delay(10);

    // **然後再檢查 AK09916 WIA2**
    status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia2_val);
 8001112:	1c7b      	adds	r3, r7, #1
 8001114:	4619      	mov	r1, r3
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff fe98 	bl	8000e4c <AK09916_ReadByteViaICM>
 800111c:	4603      	mov	r3, r0
 800111e:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <ICM20948_Init+0x21c>
//        printf("Reading AK09916 WIA2 FAILED after reset! Status: %d\r\n", status);
        ICM20948_SelectUserBank(0);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fe20 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_INVALID_ID;
 800112c:	2306      	movs	r3, #6
 800112e:	e01c      	b.n	800116a <ICM20948_Init+0x256>
    }
    if (ak09916_wia2_val != 0x09) {
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b09      	cmp	r3, #9
 8001134:	d004      	beq.n	8001140 <ICM20948_Init+0x22c>
//        printf("AK09916 WIA2 is 0x%02X, expected 0x09, after reset!\r\n", ak09916_wia2_val);
        ICM20948_SelectUserBank(0);
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff fe18 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_INVALID_ID; // AK09916 識別失敗
 800113c:	2306      	movs	r3, #6
 800113e:	e014      	b.n	800116a <ICM20948_Init+0x256>
    }
//    printf("AK09916 WIA2 OK: 0x%02X\r\n", ak09916_wia2_val);

    // **如果 WIA2 正確，再設定最終的操作模式**
    status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x08); // 例如連續量測模式 4 (100Hz)
 8001140:	2108      	movs	r1, #8
 8001142:	2031      	movs	r0, #49	@ 0x31
 8001144:	f7ff fe28 	bl	8000d98 <AK09916_WriteByteViaICM>
 8001148:	4603      	mov	r3, r0
 800114a:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <ICM20948_Init+0x24e>
        printf("Setting AK09916 Mode FAILED!\r\n");
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <ICM20948_Init+0x270>)
 8001154:	f007 fda6 	bl	8008ca4 <puts>
        ICM20948_SelectUserBank(0);
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fe07 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_INVALID_ID;
 800115e:	2306      	movs	r3, #6
 8001160:	e003      	b.n	800116a <ICM20948_Init+0x256>
    }
    HAL_Delay(50); // 等待模式設定生效
 8001162:	2032      	movs	r0, #50	@ 0x32
 8001164:	f002 fa1a 	bl	800359c <HAL_Delay>
    return SENSOR_OK; // 初始化成功
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	24000000 	.word	0x24000000
 8001178:	24000004 	.word	0x24000004
 800117c:	43030000 	.word	0x43030000
 8001180:	0800c468 	.word	0x0800c468
 8001184:	0800c484 	.word	0x0800c484

08001188 <ICM20948_ReadAccelGyroRaw>:
 * @brief 從 ICM-20948 讀取加速計和陀螺儀的原始數據。
 * @param pAccel: 指向儲存加速計原始數據的陣列 (int16_t[3])。
 * @param pGyro:  指向儲存陀螺儀原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadAccelGyroRaw(int16_t* pAccel, int16_t* pGyro) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[12]; // 6 bytes for accel (X,Y,Z), 6 bytes for gyro (X,Y,Z)
    HAL_StatusTypeDef status;

    // 1. 確保在使用者庫 0 (感測器數據通常在庫 0)
    status = ICM20948_SelectUserBank(0); // 雖然大部分情況下已在庫0，但確保一下無妨
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fdea 	bl	8000d6c <ICM20948_SelectUserBank>
 8001198:	4603      	mov	r3, r0
 800119a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <ICM20948_ReadAccelGyroRaw+0x1e>
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	e04e      	b.n	8001244 <ICM20948_ReadAccelGyroRaw+0xbc>

    // 2. 從 ACCEL_XOUT_H (0x2D) 開始連續讀取 12 個位元組的數據
    //    ACCEL_XOUT_H to GYRO_ZOUT_L
    status = ICM20948_ReadBytes(ICM20948_ACCEL_XOUT_H, raw_data, 12);
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	220c      	movs	r2, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	202d      	movs	r0, #45	@ 0x2d
 80011b0:	f7ff fdb0 	bl	8000d14 <ICM20948_ReadBytes>
 80011b4:	4603      	mov	r3, r0
 80011b6:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <ICM20948_ReadAccelGyroRaw+0x3a>
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	e040      	b.n	8001244 <ICM20948_ReadAccelGyroRaw+0xbc>

    // 3. 解析數據 (高位元組在前，大端模式 Big-Endian)
    // 加速計數據
    pAccel[0] = (int16_t)((raw_data[0] << 8) | raw_data[1]);  // Accel X
 80011c2:	7a3b      	ldrb	r3, [r7, #8]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7a7b      	ldrb	r3, [r7, #9]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	801a      	strh	r2, [r3, #0]
    pAccel[1] = (int16_t)((raw_data[2] << 8) | raw_data[3]);  // Accel Y
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b219      	sxth	r1, r3
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3302      	adds	r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	b212      	sxth	r2, r2
 80011ea:	801a      	strh	r2, [r3, #0]
    pAccel[2] = (int16_t)((raw_data[4] << 8) | raw_data[5]);  // Accel Z
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b219      	sxth	r1, r3
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3304      	adds	r3, #4
 80011fc:	430a      	orrs	r2, r1
 80011fe:	b212      	sxth	r2, r2
 8001200:	801a      	strh	r2, [r3, #0]
    // 陀螺儀數據
    pGyro[0] = (int16_t)((raw_data[6] << 8) | raw_data[7]);   // Gyro X
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	b21b      	sxth	r3, r3
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21a      	sxth	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	801a      	strh	r2, [r3, #0]
    pGyro[1] = (int16_t)((raw_data[8] << 8) | raw_data[9]);   // Gyro Y
 8001216:	7c3b      	ldrb	r3, [r7, #16]
 8001218:	b21b      	sxth	r3, r3
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b219      	sxth	r1, r3
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	b21a      	sxth	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3302      	adds	r3, #2
 8001226:	430a      	orrs	r2, r1
 8001228:	b212      	sxth	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]
    pGyro[2] = (int16_t)((raw_data[10] << 8) | raw_data[11]); // Gyro Z
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	b21b      	sxth	r3, r3
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b219      	sxth	r1, r3
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	b21a      	sxth	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3304      	adds	r3, #4
 800123c:	430a      	orrs	r2, r1
 800123e:	b212      	sxth	r2, r2
 8001240:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <AK09916_ReadBytesViaICM>:
 * @param reg_addr: AK09916 的起始暫存器位址。
 * @param pBuffer:  指向儲存讀取數據的緩衝區。
 * @param count:    要讀取的位元組數量 (AK09916 通常一次讀取 8 bytes: HXL to ST2)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadBytesViaICM(uint8_t reg_addr, uint8_t *pBuffer, uint8_t count) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t target_bank = 3;
 800125c:	2303      	movs	r3, #3
 800125e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	73bb      	strb	r3, [r7, #14]

    if (count == 0 || count > 8) { // EXT_SLV_SENS_DATA 暫存器最多支援讀取連續的外部數據長度有限制 (SLV0 可讀取 SLV0_LENG 個 bytes)
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <AK09916_ReadBytesViaICM+0x24>
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d901      	bls.n	8001274 <AK09916_ReadBytesViaICM+0x28>
                                  // ICM20948 EXT_SLV_SENS_DATA_xx 最多有 24 個 bytes (00-23) 給所有 4 個 slave
                                  // SLV0_LENG 最大值是 15 (0xF)
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e056      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>
    }

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd78 	bl	8000d6c <ICM20948_SelectUserBank>
 800127c:	4603      	mov	r3, r0
 800127e:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <AK09916_ReadBytesViaICM+0x3e>
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	e04b      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 2. 設定從裝置位址為讀取模式
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80); // Add R/W bit for read
 800128a:	218c      	movs	r1, #140	@ 0x8c
 800128c:	2003      	movs	r0, #3
 800128e:	f7ff fcf3 	bl	8000c78 <ICM20948_WriteByte>
 8001292:	4603      	mov	r3, r0
 8001294:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <AK09916_ReadBytesViaICM+0x5c>
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd64 	bl	8000d6c <ICM20948_SelectUserBank>
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	e03c      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 3. 設定要讀取的 AK09916 起始內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4619      	mov	r1, r3
 80012ac:	2004      	movs	r0, #4
 80012ae:	f7ff fce3 	bl	8000c78 <ICM20948_WriteByte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <AK09916_ReadBytesViaICM+0x7c>
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd54 	bl	8000d6c <ICM20948_SelectUserBank>
 80012c4:	7b7b      	ldrb	r3, [r7, #13]
 80012c6:	e02c      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 4. 致能 I2C SLV0，設定讀取位元組數量，並觸發事務
    //    I2C_SLV0_EN (bit 7) = 1
    //    I2C_SLV0_LENG (bits 3:0) = count
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | count);
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	2005      	movs	r0, #5
 80012d4:	f7ff fcd0 	bl	8000c78 <ICM20948_WriteByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 80012dc:	7b7b      	ldrb	r3, [r7, #13]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <AK09916_ReadBytesViaICM+0xa2>
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd41 	bl	8000d6c <ICM20948_SelectUserBank>
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	e019      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 等待 I2C 傳輸完成，這個延遲需要足夠長以完成 'count' 個位元組的讀取
    // 每個位元組大約需要 8/I2C_Clock_Freq + ACK/NACK 時間。
    // 若 I2C 400kHz, 1 byte 約 25us. 8 bytes ~ 200us.
    HAL_Delay(count + 2); // 粗略延遲，最好檢查 I2C_MST_STATUS 或使用中斷
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	3302      	adds	r3, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f952 	bl	800359c <HAL_Delay>
                          // (count * 25us / 1000) + 1 ms 作為基本延遲

    // 5. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fd36 	bl	8000d6c <ICM20948_SelectUserBank>
 8001300:	4603      	mov	r3, r0
 8001302:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <AK09916_ReadBytesViaICM+0xc2>
 800130a:	7b7b      	ldrb	r3, [r7, #13]
 800130c:	e009      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 6. 從 EXT_SLV_SENS_DATA_00 開始讀取數據
    status = ICM20948_ReadBytes(ICM20948_EXT_SLV_SENS_DATA_00, pBuffer, count);
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	203b      	movs	r0, #59	@ 0x3b
 8001318:	f7ff fcfc 	bl	8000d14 <ICM20948_ReadBytes>
 800131c:	4603      	mov	r3, r0
 800131e:	737b      	strb	r3, [r7, #13]
    return status;
 8001320:	7b7b      	ldrb	r3, [r7, #13]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <ICM20948_ReadMagRaw>:
/**
 * @brief 從 ICM-20948 (透過其 I2C 主機從 AK09916) 讀取磁力計的原始數據。
 * @param pMag:   指向儲存磁力計原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadMagRaw(int16_t* pMag) {
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
                           // RSV (0x17) 是保留位元組
    HAL_StatusTypeDef status;
    uint8_t st1_val;

    // 1. 檢查 AK09916 是否有新數據 (DRDY 位元在 ST1 (0x10) 暫存器)
    status = AK09916_ReadByteViaICM(AK09916_ST1, &st1_val);
 8001332:	f107 030b 	add.w	r3, r7, #11
 8001336:	4619      	mov	r1, r3
 8001338:	2010      	movs	r0, #16
 800133a:	f7ff fd87 	bl	8000e4c <AK09916_ReadByteViaICM>
 800133e:	4603      	mov	r3, r0
 8001340:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <ICM20948_ReadMagRaw+0x22>
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	e06d      	b.n	8001428 <ICM20948_ReadMagRaw+0xfe>
//        return HAL_BUSY; // 數據尚未就緒 (Not an error, just not ready)
//    }

    // 2. 從 AK09916_HXL (0x11) 開始讀取 8 個位元組 (HXL to ST2)
    //    讀取 ST2 (0x18) 是為了讓 AK09916 準備下一次量測 (清除 DRDY 狀態並觸發下一次)
    status = AK09916_ReadBytesViaICM(AK09916_HXL, mag_buffer, 8);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2208      	movs	r2, #8
 8001352:	4619      	mov	r1, r3
 8001354:	2011      	movs	r0, #17
 8001356:	f7ff ff79 	bl	800124c <AK09916_ReadBytesViaICM>
 800135a:	4603      	mov	r3, r0
 800135c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <ICM20948_ReadMagRaw+0x3e>
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	e05f      	b.n	8001428 <ICM20948_ReadMagRaw+0xfe>

    // 3. 解析數據 (低位元組在前，小端模式 Little-Endian for AK09916)
    pMag[0] = (int16_t)(((uint16_t)mag_buffer[1] << 8) | mag_buffer[0]); // Mag X (HXH, HXL)
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	b21b      	sxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	801a      	strh	r2, [r3, #0]
    pMag[1] = (int16_t)(((uint16_t)mag_buffer[3] << 8) | mag_buffer[2]); // Mag Y (HYH, HYL)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b21b      	sxth	r3, r3
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b219      	sxth	r1, r3
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	b21a      	sxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3302      	adds	r3, #2
 800138c:	430a      	orrs	r2, r1
 800138e:	b212      	sxth	r2, r2
 8001390:	801a      	strh	r2, [r3, #0]
    pMag[2] = (int16_t)(((uint16_t)mag_buffer[5] << 8) | mag_buffer[4]); // Mag Z (HZH, HZL)
 8001392:	7c7b      	ldrb	r3, [r7, #17]
 8001394:	b21b      	sxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b219      	sxth	r1, r3
 800139a:	7c3b      	ldrb	r3, [r7, #16]
 800139c:	b21a      	sxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	430a      	orrs	r2, r1
 80013a4:	b212      	sxth	r2, r2
 80013a6:	801a      	strh	r2, [r3, #0]
    //!!!如果收到的數值為零，再執行一次。
    if(pMag[0] == 0 & pMag[1] == 0 & pMag[2] == 0){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3302      	adds	r3, #2
 80013b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d12d      	bne.n	8001426 <ICM20948_ReadMagRaw+0xfc>
    	status = AK09916_ReadBytesViaICM(AK09916_HXL, mag_buffer, 8);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2208      	movs	r2, #8
 80013d0:	4619      	mov	r1, r3
 80013d2:	2011      	movs	r0, #17
 80013d4:	f7ff ff3a 	bl	800124c <AK09916_ReadBytesViaICM>
 80013d8:	4603      	mov	r3, r0
 80013da:	75fb      	strb	r3, [r7, #23]
		if (status != HAL_OK) return status;
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <ICM20948_ReadMagRaw+0xbc>
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	e020      	b.n	8001428 <ICM20948_ReadMagRaw+0xfe>

		// 3. 解析數據 (低位元組在前，小端模式 Little-Endian for AK09916)
		pMag[0] = (int16_t)(((uint16_t)mag_buffer[1] << 8) | mag_buffer[0]); // Mag X (HXH, HXL)
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	801a      	strh	r2, [r3, #0]
		pMag[1] = (int16_t)(((uint16_t)mag_buffer[3] << 8) | mag_buffer[2]); // Mag Y (HYH, HYL)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b219      	sxth	r1, r3
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3302      	adds	r3, #2
 800140a:	430a      	orrs	r2, r1
 800140c:	b212      	sxth	r2, r2
 800140e:	801a      	strh	r2, [r3, #0]
		pMag[2] = (int16_t)(((uint16_t)mag_buffer[5] << 8) | mag_buffer[4]); // Mag Z (HZH, HZL)
 8001410:	7c7b      	ldrb	r3, [r7, #17]
 8001412:	b21b      	sxth	r3, r3
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b219      	sxth	r1, r3
 8001418:	7c3b      	ldrb	r3, [r7, #16]
 800141a:	b21a      	sxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3304      	adds	r3, #4
 8001420:	430a      	orrs	r2, r1
 8001422:	b212      	sxth	r2, r2
 8001424:	801a      	strh	r2, [r3, #0]
    // if (mag_buffer[7] & 0x08) { /* Overflow occurred */ }

    // 重要: 讀取 ST2 暫存器後，AK09916 會清除 DRDY (Data Ready) 狀態，
    // 並在下一個量測週期後再次設定 DRDY。

    return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <ICM20948_ConvertAccelRawToG>:
/**
 * @brief 將加速計原始數據轉換為 g (重力加速度)。
 * @param pAccelRaw: 指向加速計原始數據陣列 (int16_t[3])。
 * @param pAccelG:   指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertAccelRawToG(const int16_t* pAccelRaw, float* pAccelG) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    pAccelG[0] = (float)pAccelRaw[0] / current_accel_sensitivity;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <ICM20948_ConvertAccelRawToG+0x78>)
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[1] = (float)pAccelRaw[1] / current_accel_sensitivity;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3302      	adds	r3, #2
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <ICM20948_ConvertAccelRawToG+0x78>)
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[2] = (float)pAccelRaw[2] / current_accel_sensitivity;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3304      	adds	r3, #4
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <ICM20948_ConvertAccelRawToG+0x78>)
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3308      	adds	r3, #8
 8001494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001498:	edc3 7a00 	vstr	s15, [r3]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	24000000 	.word	0x24000000

080014ac <ICM20948_ConvertGyroRawToDPS>:
/**
 * @brief 將陀螺儀原始數據轉換為 dps (度/秒)。
 * @param pGyroRaw: 指向陀螺儀原始數據陣列 (int16_t[3])。
 * @param pGyroDPS: 指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertGyroRawToDPS(const int16_t* pGyroRaw, float* pGyroDPS) {
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
    pGyroDPS[0] = (float)pGyroRaw[0] / current_gyro_sensitivity;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <ICM20948_ConvertGyroRawToDPS+0x78>)
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[1] = (float)pGyroRaw[1] / current_gyro_sensitivity;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3302      	adds	r3, #2
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <ICM20948_ConvertGyroRawToDPS+0x78>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3304      	adds	r3, #4
 80014ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f2:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[2] = (float)pGyroRaw[2] / current_gyro_sensitivity;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	3308      	adds	r3, #8
 8001510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001514:	edc3 7a00 	vstr	s15, [r3]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	24000004 	.word	0x24000004

08001528 <ICM20948_ConvertMagRawToUT>:
/**
 * @brief 將磁力計原始數據轉換為 µT (微特斯拉)。
 * @param pMagRaw: 指向磁力計原始數據陣列 (int16_t[3])。
 * @param pMagUT:  指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertMagRawToUT(const int16_t* pMagRaw, float* pMagUT) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    // AK09916 的靈敏度是固定的 0.15 µT/LSB
    pMagUT[0] = (float)pMagRaw[0] * MAG_SENSITIVITY_UT_LSB;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800159c <ICM20948_ConvertMagRawToUT+0x74>
 8001544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[1] = (float)pMagRaw[1] * MAG_SENSITIVITY_UT_LSB;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3302      	adds	r3, #2
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3304      	adds	r3, #4
 8001562:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800159c <ICM20948_ConvertMagRawToUT+0x74>
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[2] = (float)pMagRaw[2] * MAG_SENSITIVITY_UT_LSB;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3308      	adds	r3, #8
 8001582:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800159c <ICM20948_ConvertMagRawToUT+0x74>
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	3e19999a 	.word	0x3e19999a

080015a0 <ICM20948_Main>:

void ICM20948_Main(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af04      	add	r7, sp, #16
	//		     與ICM20948_Init(void)同程式搬過來============================Start(磁力計檢查)===========================================//新增ak09916_wia2_val_PART2 != 0x09判斷
			     HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
			     uint8_t ak09916_wia2_val_PART2 = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	717b      	strb	r3, [r7, #5]
			     // **然後再檢查 AK09916 WIA2**
			         status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia2_val_PART2);
 80015ae:	1d7b      	adds	r3, r7, #5
 80015b0:	4619      	mov	r1, r3
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fc4a 	bl	8000e4c <AK09916_ReadByteViaICM>
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
			         if (status != HAL_OK) {
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <ICM20948_Main+0x28>
//			             printf("Reading AK09916 WIA2 FAILED after reset! Status: %d\r\n", status);
			             ICM20948_SelectUserBank(0);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fbd2 	bl	8000d6c <ICM20948_SelectUserBank>
	//		             return SENSOR_INVALID_ID;
			         }
			         if (ak09916_wia2_val_PART2 != 0x09) {
 80015c8:	797b      	ldrb	r3, [r7, #5]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d004      	beq.n	80015d8 <ICM20948_Main+0x38>
			             ICM20948_SelectUserBank(0);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fbcc 	bl	8000d6c <ICM20948_SelectUserBank>
			             status = 6;//ak09916_wia2_val_PART2 != 0x09強制status = 6(SENSOR_INVALID_ID)(待修改，須更嚴謹)
 80015d4:	2306      	movs	r3, #6
 80015d6:	71fb      	strb	r3, [r7, #7]
	//		             return SENSOR_INVALID_ID; // AK09916 識別失敗
			         }
	 //		     與ICM20948_Init(void)同程式搬過來==============================END(磁力計檢查)=========================================//新增ak09916_wia2_val_PART2 != 0x09判斷

			         // 讀取加速計和陀螺儀原始數據
		     if (ICM20948_ReadAccelGyroRaw(accel_raw, gyro_raw) == HAL_OK && ak09916_wia2_val_PART2 == 0x09) {
 80015d8:	4946      	ldr	r1, [pc, #280]	@ (80016f4 <ICM20948_Main+0x154>)
 80015da:	4847      	ldr	r0, [pc, #284]	@ (80016f8 <ICM20948_Main+0x158>)
 80015dc:	f7ff fdd4 	bl	8001188 <ICM20948_ReadAccelGyroRaw>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d13e      	bne.n	8001664 <ICM20948_Main+0xc4>
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d13b      	bne.n	8001664 <ICM20948_Main+0xc4>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertAccelRawToG(accel_raw, accel_g);
 80015ec:	4943      	ldr	r1, [pc, #268]	@ (80016fc <ICM20948_Main+0x15c>)
 80015ee:	4842      	ldr	r0, [pc, #264]	@ (80016f8 <ICM20948_Main+0x158>)
 80015f0:	f7ff ff1e 	bl	8001430 <ICM20948_ConvertAccelRawToG>
		       ICM20948_ConvertGyroRawToDPS(gyro_raw, gyro_dps);
 80015f4:	4942      	ldr	r1, [pc, #264]	@ (8001700 <ICM20948_Main+0x160>)
 80015f6:	483f      	ldr	r0, [pc, #252]	@ (80016f4 <ICM20948_Main+0x154>)
 80015f8:	f7ff ff58 	bl	80014ac <ICM20948_ConvertGyroRawToDPS>

		       // 透過 UART 輸出 (或使用除錯器查看變數)
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		              accel_g[0], accel_g[1], accel_g[2]);
 80015fc:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <ICM20948_Main+0x15c>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001602:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		              accel_g[0], accel_g[1], accel_g[2]);
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <ICM20948_Main+0x15c>)
 8001608:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800160c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		              accel_g[0], accel_g[1], accel_g[2]);
 8001610:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <ICM20948_Main+0x15c>)
 8001612:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001616:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800161a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800161e:	ed8d 7b00 	vstr	d7, [sp]
 8001622:	ec53 2b15 	vmov	r2, r3, d5
 8001626:	4837      	ldr	r0, [pc, #220]	@ (8001704 <ICM20948_Main+0x164>)
 8001628:	f007 fad4 	bl	8008bd4 <iprintf>
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
					  gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 800162c:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <ICM20948_Main+0x160>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001632:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
					  gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8001636:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <ICM20948_Main+0x160>)
 8001638:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800163c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					  gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <ICM20948_Main+0x160>)
 8001642:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001646:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800164a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800164e:	ed8d 7b00 	vstr	d7, [sp]
 8001652:	ec53 2b15 	vmov	r2, r3, d5
 8001656:	482c      	ldr	r0, [pc, #176]	@ (8001708 <ICM20948_Main+0x168>)
 8001658:	f007 fabc 	bl	8008bd4 <iprintf>
	//	       printf("%s"); // 或 HAL_UART_Transmit(&huartx, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
		       printf("The data is OK\r\n");
 800165c:	482b      	ldr	r0, [pc, #172]	@ (800170c <ICM20948_Main+0x16c>)
 800165e:	f007 fb21 	bl	8008ca4 <puts>
 8001662:	e004      	b.n	800166e <ICM20948_Main+0xce>
		     } else {
		    	 //讀取 Accel/Gyro 數據失敗
		       printf("<ICM20948>Failed to read data! Error Code: %d\r\n",status);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4619      	mov	r1, r3
 8001668:	4829      	ldr	r0, [pc, #164]	@ (8001710 <ICM20948_Main+0x170>)
 800166a:	f007 fab3 	bl	8008bd4 <iprintf>
		     }

		     // 讀取磁力計原始數據
		     HAL_Delay(1000); // 每秒讀取一次數據
 800166e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001672:	f001 ff93 	bl	800359c <HAL_Delay>
//
		     HAL_StatusTypeDef mag_status = ICM20948_ReadMagRaw(mag_raw);
 8001676:	4827      	ldr	r0, [pc, #156]	@ (8001714 <ICM20948_Main+0x174>)
 8001678:	f7ff fe57 	bl	800132a <ICM20948_ReadMagRaw>
 800167c:	4603      	mov	r3, r0
 800167e:	71bb      	strb	r3, [r7, #6]
		     if (mag_status == HAL_OK && ak09916_wia2_val_PART2 == 0x09)
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d122      	bne.n	80016cc <ICM20948_Main+0x12c>
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d11f      	bne.n	80016cc <ICM20948_Main+0x12c>
		     {
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertMagRawToUT(mag_raw, mag_uT);
 800168c:	4922      	ldr	r1, [pc, #136]	@ (8001718 <ICM20948_Main+0x178>)
 800168e:	4821      	ldr	r0, [pc, #132]	@ (8001714 <ICM20948_Main+0x174>)
 8001690:	f7ff ff4a 	bl	8001528 <ICM20948_ConvertMagRawToUT>

		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <ICM20948_Main+0x178>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800169a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <ICM20948_Main+0x178>)
 80016a0:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80016a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <ICM20948_Main+0x178>)
 80016aa:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80016ae:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016b2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80016b6:	ed8d 7b00 	vstr	d7, [sp]
 80016ba:	ec53 2b15 	vmov	r2, r3, d5
 80016be:	4817      	ldr	r0, [pc, #92]	@ (800171c <ICM20948_Main+0x17c>)
 80016c0:	f007 fa88 	bl	8008bd4 <iprintf>
	//	       printf("%s");
		       printf("The data is OK\r\n");
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <ICM20948_Main+0x16c>)
 80016c6:	f007 faed 	bl	8008ca4 <puts>
 80016ca:	e00b      	b.n	80016e4 <ICM20948_Main+0x144>
		     } else if (mag_status == HAL_BUSY) {
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d103      	bne.n	80016da <ICM20948_Main+0x13a>
		       //printf("磁力計數據尚未就緒 (DRDY=0)\r\n");
		    	 printf("<ICM20948>(HAL_BUSY DRDY=0)\r\n");
 80016d2:	4813      	ldr	r0, [pc, #76]	@ (8001720 <ICM20948_Main+0x180>)
 80016d4:	f007 fae6 	bl	8008ca4 <puts>
 80016d8:	e004      	b.n	80016e4 <ICM20948_Main+0x144>
		       // 這是正常情況，因為磁力計更新速率可能較慢或與主迴圈不同步
		     }
		     else {
		    	 //讀取 Mag 數據失敗!
		       printf("<ICM20948>Failed to read Mag ! Error Code: %d\r\n",status);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4619      	mov	r1, r3
 80016de:	4811      	ldr	r0, [pc, #68]	@ (8001724 <ICM20948_Main+0x184>)
 80016e0:	f007 fa78 	bl	8008bd4 <iprintf>
		     }

		     HAL_Delay(100); // 每秒讀取一次數據
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f001 ff59 	bl	800359c <HAL_Delay>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000230 	.word	0x24000230
 80016f8:	24000228 	.word	0x24000228
 80016fc:	24000240 	.word	0x24000240
 8001700:	2400024c 	.word	0x2400024c
 8001704:	0800c4a4 	.word	0x0800c4a4
 8001708:	0800c4d4 	.word	0x0800c4d4
 800170c:	0800c504 	.word	0x0800c504
 8001710:	0800c514 	.word	0x0800c514
 8001714:	24000238 	.word	0x24000238
 8001718:	24000258 	.word	0x24000258
 800171c:	0800c544 	.word	0x0800c544
 8001720:	0800c570 	.word	0x0800c570
 8001724:	0800c590 	.word	0x0800c590

08001728 <icm42688p_select>:

// --- 內部輔助函數 ---
static float current_accel_sensitivity = ACCEL_SENSITIVITY_2G;
static float current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS;
// 選中 ICM-42688-P (nCS 拉低)
static void icm42688p_select(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_NCS_PORT, ICM42688P_NCS_PIN, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001732:	4802      	ldr	r0, [pc, #8]	@ (800173c <icm42688p_select+0x14>)
 8001734:	f002 fa6e 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	58020400 	.word	0x58020400

08001740 <icm42688p_deselect>:

// 取消選中 ICM-42688-P (nCS 拉高)
static void icm42688p_deselect(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_NCS_PORT, ICM42688P_NCS_PIN, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800174a:	4802      	ldr	r0, [pc, #8]	@ (8001754 <icm42688p_deselect+0x14>)
 800174c:	f002 fa62 	bl	8003c14 <HAL_GPIO_WritePin>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	58020400 	.word	0x58020400

08001758 <icm42688p_write_register>:

// 寫入單個暫存器
// 根據 ICM-42688-P SPI 協議, 寫入時, 位址位元組的 MSB (bit 7) 為 0
static HAL_StatusTypeDef icm42688p_write_register(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t value) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
 8001764:	4613      	mov	r3, r2
 8001766:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status1, status2;
    uint8_t command = reg & 0x7F; // 清除 MSB (bit 7) 表示寫入操作
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800176e:	b2db      	uxtb	r3, r3
 8001770:	737b      	strb	r3, [r7, #13]

    icm42688p_select();
 8001772:	f7ff ffd9 	bl	8001728 <icm42688p_select>
    status1 = HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT);
 8001776:	f107 010d 	add.w	r1, r7, #13
 800177a:	2364      	movs	r3, #100	@ 0x64
 800177c:	2201      	movs	r2, #1
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f005 fde2 	bl	8007348 <HAL_SPI_Transmit>
 8001784:	4603      	mov	r3, r0
 8001786:	73bb      	strb	r3, [r7, #14]
    if (status1 == HAL_OK) {
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <icm42688p_write_register+0x48>
        status2 = HAL_SPI_Transmit(hspi, &value, 1, ICM42688P_SPI_TIMEOUT);
 800178e:	1cb9      	adds	r1, r7, #2
 8001790:	2364      	movs	r3, #100	@ 0x64
 8001792:	2201      	movs	r2, #1
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f005 fdd7 	bl	8007348 <HAL_SPI_Transmit>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e001      	b.n	80017a4 <icm42688p_write_register+0x4c>
    } else {
        status2 = status1; // 如果第一次傳輸失敗，直接返回該狀態
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	73fb      	strb	r3, [r7, #15]
    }
    icm42688p_deselect();
 80017a4:	f7ff ffcc 	bl	8001740 <icm42688p_deselect>

    if (status1!= HAL_OK) return status1;
 80017a8:	7bbb      	ldrb	r3, [r7, #14]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <icm42688p_write_register+0x5a>
 80017ae:	7bbb      	ldrb	r3, [r7, #14]
 80017b0:	e000      	b.n	80017b4 <icm42688p_write_register+0x5c>
    return status2;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <icm42688p_read_register>:

// 讀取單個暫存器
// 根據 ICM-42688-P SPI 協議, 讀取時, 位址位元組的 MSB (bit 7) 為 1
static uint8_t icm42688p_read_register(SPI_HandleTypeDef *hspi, uint8_t reg) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
    uint8_t command = reg | 0x80; // 設定 MSB (bit 7) 表示讀取操作
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73bb      	strb	r3, [r7, #14]

    icm42688p_select();
 80017d6:	f7ff ffa7 	bl	8001728 <icm42688p_select>
    HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT);
 80017da:	f107 010f 	add.w	r1, r7, #15
 80017de:	2364      	movs	r3, #100	@ 0x64
 80017e0:	2201      	movs	r2, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f005 fdb0 	bl	8007348 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, &data_read, 1, ICM42688P_SPI_TIMEOUT);
 80017e8:	f107 010e 	add.w	r1, r7, #14
 80017ec:	2364      	movs	r3, #100	@ 0x64
 80017ee:	2201      	movs	r2, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f005 ff97 	bl	8007724 <HAL_SPI_Receive>
    icm42688p_deselect();
 80017f6:	f7ff ffa3 	bl	8001740 <icm42688p_deselect>

    return data_read;
 80017fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <icm42688p_read_multiple_registers>:

// 連續讀取多個暫存器
static HAL_StatusTypeDef icm42688p_read_multiple_registers(SPI_HandleTypeDef *hspi, uint8_t start_reg, uint8_t *buffer, uint8_t len) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	461a      	mov	r2, r3
 8001810:	460b      	mov	r3, r1
 8001812:	72fb      	strb	r3, [r7, #11]
 8001814:	4613      	mov	r3, r2
 8001816:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;
    uint8_t command = start_reg | 0x80; // 設定 MSB (bit 7) 表示讀取操作
 8001818:	7afb      	ldrb	r3, [r7, #11]
 800181a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181e:	b2db      	uxtb	r3, r3
 8001820:	75bb      	strb	r3, [r7, #22]

    icm42688p_select();
 8001822:	f7ff ff81 	bl	8001728 <icm42688p_select>
    HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT); // 發送起始位址
 8001826:	f107 0116 	add.w	r1, r7, #22
 800182a:	2364      	movs	r3, #100	@ 0x64
 800182c:	2201      	movs	r2, #1
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f005 fd8a 	bl	8007348 <HAL_SPI_Transmit>
    status = HAL_SPI_Receive(hspi, buffer, len, ICM42688P_SPI_TIMEOUT); // 連續讀取數據
 8001834:	7abb      	ldrb	r3, [r7, #10]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2364      	movs	r3, #100	@ 0x64
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f005 ff71 	bl	8007724 <HAL_SPI_Receive>
 8001842:	4603      	mov	r3, r0
 8001844:	75fb      	strb	r3, [r7, #23]
    icm42688p_deselect();
 8001846:	f7ff ff7b 	bl	8001740 <icm42688p_deselect>

    return status;
 800184a:	7dfb      	ldrb	r3, [r7, #23]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <icm42688p_set_bank>:

// 切換暫存器庫 (0 for User Bank 0, 1 for User Bank 1, etc.)
static HAL_StatusTypeDef icm42688p_set_bank(SPI_HandleTypeDef *hspi, uint8_t bank) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
    return icm42688p_write_register(hspi, ICM42688P_REG_BANK_SEL, bank);
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	461a      	mov	r2, r3
 8001864:	2176      	movs	r1, #118	@ 0x76
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff76 	bl	8001758 <icm42688p_write_register>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <icm42688p_init>:

// --- 公開函數實作 ---

// 初始化 ICM-42688-P
uint8_t icm42688p_init(SPI_HandleTypeDef *hspi) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i_value;
    uint8_t temp_reg_val;
    uint8_t test_reg_val;
    icm42688p_deselect(); // 確保 nCS 初始為高電位
 8001880:	f7ff ff5e 	bl	8001740 <icm42688p_deselect>
    HAL_Delay(10); // 感測器上電後短暫延遲
 8001884:	200a      	movs	r0, #10
 8001886:	f001 fe89 	bl	800359c <HAL_Delay>

    // 1. 切換到 User Bank 0 (大部分配置暫存器位於此)
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 800188a:	2100      	movs	r1, #0
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe1 	bl	8001854 <icm42688p_set_bank>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <icm42688p_init+0x2a>
        printf("ICM Error: Set Bank 0 failed\r\n");
 8001898:	482d      	ldr	r0, [pc, #180]	@ (8001950 <icm42688p_init+0xd8>)
 800189a:	f007 fa03 	bl	8008ca4 <puts>
        return SENSOR_INIT_FAIL; // 返回 0 表示初始化失敗
 800189e:	2302      	movs	r3, #2
 80018a0:	e051      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(100); // 切換 Bank 後延遲(此處數值原為1，某些情況貌似太快導致who_am_i_value = 0x0，初始化失敗，可視情況調整!)
 80018a2:	2064      	movs	r0, #100	@ 0x64
 80018a4:	f001 fe7a 	bl	800359c <HAL_Delay>

    // 2. 讀取 WHO_AM_I 暫存器進行驗證
    who_am_i_value = icm42688p_read_who_am_i(hspi); // 此函數內部已處理 Bank 切換
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f855 	bl	8001958 <icm42688p_read_who_am_i>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
    if (who_am_i_value!= ICM42688P_WHO_AM_I_VALUE) {
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b47      	cmp	r3, #71	@ 0x47
 80018b6:	d007      	beq.n	80018c8 <icm42688p_init+0x50>
        printf("ICM Error: WHO_AM_I check failed. Expected 0x%02X, Got 0x%02X\r\n", ICM42688P_WHO_AM_I_VALUE, who_am_i_value);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	461a      	mov	r2, r3
 80018bc:	2147      	movs	r1, #71	@ 0x47
 80018be:	4825      	ldr	r0, [pc, #148]	@ (8001954 <icm42688p_init+0xdc>)
 80018c0:	f007 f988 	bl	8008bd4 <iprintf>
        return SENSOR_INVALID_ID;
 80018c4:	2306      	movs	r3, #6
 80018c6:	e03e      	b.n	8001946 <icm42688p_init+0xce>

    // 3. 配置電源管理 PWR_MGMT0 (0x4E)
    //    啟用加速計和陀螺儀，均設為低噪音 (LN) 模式
    //    ACCEL_MODE[1:0] = 11 (LN), GYRO_MODE[1:0] = 11 (LN) -> 0b00001111 = 0x0F

    if (icm42688p_write_register(hspi, ICM42688P_REG_PWR_MGMT0, ICM42688P_PWR_MGMT0_ACCEL_LN | ICM42688P_PWR_MGMT0_GYRO_LN)!= HAL_OK) {
 80018c8:	220f      	movs	r2, #15
 80018ca:	214e      	movs	r1, #78	@ 0x4e
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff43 	bl	8001758 <icm42688p_write_register>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <icm42688p_init+0x64>
        // printf("ICM Error: PWR_MGMT0 config failed\r\n"); // 移至 main.c
        return SENSOR_CONFIG_FAIL;
 80018d8:	2303      	movs	r3, #3
 80018da:	e034      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1); // 模式更改後需要穩定時間 (datasheet 建議 1ms for gyro, 1ms for accel from sleep to LN)
 80018dc:	2001      	movs	r0, #1
 80018de:	f001 fe5d 	bl	800359c <HAL_Delay>
//    test_reg_val = icm42688p_read_register(hspi, ICM42688P_REG_PWR_MGMT0);
//    printf("ICM42688P_REG_PWR_MGMT0: 0x%02X\r\n", test_reg_val);

    // 4. 配置陀螺儀 GYRO_CONFIG0 (0x4F)
    //    設定 ODR = 1kHz (0x06), FS_SEL = ±2000 dps (0x00 << 4)
    if (icm42688p_write_register(hspi, ICM42688P_REG_GYRO_CONFIG0, ICM42688P_GYRO_FS_SEL_2000DPS | ICM42688P_ODR_1KHZ)!= HAL_OK) {
 80018e2:	2206      	movs	r2, #6
 80018e4:	214f      	movs	r1, #79	@ 0x4f
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff36 	bl	8001758 <icm42688p_write_register>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <icm42688p_init+0x7e>
        // printf("ICM Error: GYRO_CONFIG0 failed\r\n"); // 移至 main.c
        return SENSOR_CONFIG_FAIL;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e027      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f001 fe50 	bl	800359c <HAL_Delay>

    // 5. 配置加速計 ACCEL_CONFIG0 (0x50)
    //    設定 ODR = 1kHz (0x06), FS_SEL = ±16g (0x00 << 4)
    if (icm42688p_write_register(hspi, ICM42688P_REG_ACCEL_CONFIG0, ICM42688P_ACCEL_FS_SEL_16G | ICM42688P_ODR_1KHZ)!= HAL_OK) {
 80018fc:	2206      	movs	r2, #6
 80018fe:	2150      	movs	r1, #80	@ 0x50
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <icm42688p_write_register>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <icm42688p_init+0x98>
        // printf("ICM Error: ACCEL_CONFIG0 failed\r\n"); // 移至 main.c
        return SENSOR_CONFIG_FAIL;
 800190c:	2303      	movs	r3, #3
 800190e:	e01a      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f001 fe43 	bl	800359c <HAL_Delay>

    // 6. (重要) 清除 INT_ASYNC_RESET 位 (INT_CONFIG1, 0x64, bit 4)
    //    根據 datasheet 建議，為確保 INT1/INT2 正常工作，應清除此位
    //    此暫存器位於 User Bank 0
    temp_reg_val = icm42688p_read_register(hspi, ICM42688P_REG_INT_CONFIG1); // 內部已處理 Bank 切換
 8001916:	2164      	movs	r1, #100	@ 0x64
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff4f 	bl	80017bc <icm42688p_read_register>
 800191e:	4603      	mov	r3, r0
 8001920:	73bb      	strb	r3, [r7, #14]
    if (icm42688p_write_register(hspi, ICM42688P_REG_INT_CONFIG1, temp_reg_val & ~ICM42688P_INT_ASYNC_RESET_BIT)!= HAL_OK) {
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	f023 0310 	bic.w	r3, r3, #16
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	2164      	movs	r1, #100	@ 0x64
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff12 	bl	8001758 <icm42688p_write_register>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <icm42688p_init+0xc6>
        // printf("ICM Error: INT_CONFIG1 (clear INT_ASYNC_RESET) failed\r\n"); // 移至 main.c
        return SENSOR_DATA_NOT_READY;
 800193a:	2308      	movs	r3, #8
 800193c:	e003      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f001 fe2c 	bl	800359c <HAL_Delay>

    // printf("ICM-42688-P 初始化成功。\r\n"); // 移至 main.c
    return SENSOR_OK; // 返回 1 表示初始化成功
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800c5c0 	.word	0x0800c5c0
 8001954:	0800c5e0 	.word	0x0800c5e0

08001958 <icm42688p_read_who_am_i>:

// 讀取 WHO_AM_I 暫存器
uint8_t icm42688p_read_who_am_i(SPI_HandleTypeDef *hspi) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    // 確保在 Bank 0 讀取
    // 注意: icm42688p_read_register 內部不處理 bank 切換，調用者需確保 bank 正確
    // 為安全起見，在此處明確設定 bank
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001960:	2100      	movs	r1, #0
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff76 	bl	8001854 <icm42688p_set_bank>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <icm42688p_read_who_am_i+0x1a>
         // 實際應用中應處理此錯誤
//        printf("ICM Error: Set Bank 0 failed in read_who_am_i\r\n");
        return 0; // 返回錯誤值
 800196e:	2300      	movs	r3, #0
 8001970:	e007      	b.n	8001982 <icm42688p_read_who_am_i+0x2a>
    }
    HAL_Delay(10); // Bank 切換後延遲
 8001972:	200a      	movs	r0, #10
 8001974:	f001 fe12 	bl	800359c <HAL_Delay>
    return icm42688p_read_register(hspi, ICM42688P_REG_WHO_AM_I);
 8001978:	2175      	movs	r1, #117	@ 0x75
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff1e 	bl	80017bc <icm42688p_read_register>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <icm42688p_read_gyro_raw>:

// 讀取陀螺儀原始數據 (3軸)
void icm42688p_read_gyro_raw(SPI_HandleTypeDef *hspi, int16_t* gyro_data) {
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
    uint8_t raw_data_buffer[3]; // 用於儲存 X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // 確保在 Bank 0 讀取
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001994:	2100      	movs	r1, #0
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff5c 	bl	8001854 <icm42688p_set_bank>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <icm42688p_read_gyro_raw+0x30>
//        printf("ICM Error: Set Bank 0 failed in read_gyro_raw\r\n");
        gyro_data[0] = 0; // Gyro X 清零
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]
        gyro_data[1] = 0; // Gyro Y 清零
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3302      	adds	r3, #2
 80019ac:	2200      	movs	r2, #0
 80019ae:	801a      	strh	r2, [r3, #0]
        gyro_data[2] = 0; // Gyro Z 清零
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3304      	adds	r3, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
        return;
 80019b8:	e038      	b.n	8001a2c <icm42688p_read_gyro_raw+0xa2>
    }
    HAL_Delay(1); // 短暫延遲確保 Bank 切換完成
 80019ba:	2001      	movs	r0, #1
 80019bc:	f001 fdee 	bl	800359c <HAL_Delay>

    if(icm42688p_read_multiple_registers(hspi, ICM42688P_REG_GYRO_DATA_X1_UI, raw_data_buffer, 6)!= HAL_OK) {
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	2306      	movs	r3, #6
 80019c6:	2125      	movs	r1, #37	@ 0x25
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff1b 	bl	8001804 <icm42688p_read_multiple_registers>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <icm42688p_read_gyro_raw+0x62>
//        printf("ICM Error: Failed to read gyro data\r\n");
        gyro_data[0] = 0; // Gyro X 清零
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
        gyro_data[1] = 0; // Gyro Y 清零
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	3302      	adds	r3, #2
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
        gyro_data[2] = 0; // Gyro Z 清零
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2200      	movs	r2, #0
 80019e8:	801a      	strh	r2, [r3, #0]
        return;
 80019ea:	e01f      	b.n	8001a2c <icm42688p_read_gyro_raw+0xa2>
    }

    gyro_data[0] = (int16_t)(raw_data_buffer[0] << 8 | raw_data_buffer[1]); // Gyro X
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	7b7b      	ldrb	r3, [r7, #13]
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	801a      	strh	r2, [r3, #0]
    gyro_data[1] = (int16_t)(raw_data_buffer[2] << 8 | raw_data_buffer[4]); // Gyro Y
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b219      	sxth	r1, r3
 8001a08:	7c3b      	ldrb	r3, [r7, #16]
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	430a      	orrs	r2, r1
 8001a12:	b212      	sxth	r2, r2
 8001a14:	801a      	strh	r2, [r3, #0]
    gyro_data[2] = (int16_t)(raw_data_buffer[5] << 8 | raw_data_buffer[6]); // Gyro Z
 8001a16:	7c7b      	ldrb	r3, [r7, #17]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b219      	sxth	r1, r3
 8001a1e:	7cbb      	ldrb	r3, [r7, #18]
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	3304      	adds	r3, #4
 8001a26:	430a      	orrs	r2, r1
 8001a28:	b212      	sxth	r2, r2
 8001a2a:	801a      	strh	r2, [r3, #0]
}
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <icm42688p_read_accel_raw>:

// 讀取加速計原始數據 (3軸)
void icm42688p_read_accel_raw(SPI_HandleTypeDef *hspi, int16_t* accel_data) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
    uint8_t raw_data_buffer[3]; // 用於儲存 X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // 確保在 Bank 0 讀取
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff08 	bl	8001854 <icm42688p_set_bank>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <icm42688p_read_accel_raw+0x30>
//        printf("ICM Error: Set Bank 0 failed in read_accel_raw\r\n");
        accel_data[0] = 0; // Accel X 清零
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
        accel_data[1] = 0; // Accel Y 清零
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	3302      	adds	r3, #2
 8001a54:	2200      	movs	r2, #0
 8001a56:	801a      	strh	r2, [r3, #0]
        accel_data[2] = 0; // Accel Z 清零
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
        return;
 8001a60:	e038      	b.n	8001ad4 <icm42688p_read_accel_raw+0xa2>
    }
    HAL_Delay(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f001 fd9a 	bl	800359c <HAL_Delay>

    if(icm42688p_read_multiple_registers(hspi, ICM42688P_REG_ACCEL_DATA_X1_UI, raw_data_buffer, 6)!= HAL_OK) {
 8001a68:	f107 020c 	add.w	r2, r7, #12
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	211f      	movs	r1, #31
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fec7 	bl	8001804 <icm42688p_read_multiple_registers>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <icm42688p_read_accel_raw+0x62>
//        printf("ICM Error: Failed to read accel data\r\n");
        accel_data[0] = 0; // Accel X 清零
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
        accel_data[1] = 0; // Accel Y 清零
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3302      	adds	r3, #2
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
        accel_data[2] = 0; // Accel Z 清零
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
        return;
 8001a92:	e01f      	b.n	8001ad4 <icm42688p_read_accel_raw+0xa2>
    }

    accel_data[0] = (int16_t)(raw_data_buffer[0] << 8 | raw_data_buffer[1]); // Accel X
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	7b7b      	ldrb	r3, [r7, #13]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	801a      	strh	r2, [r3, #0]
    accel_data[1] = (int16_t)(raw_data_buffer[2] << 8 | raw_data_buffer[4]); // Accel Y
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b219      	sxth	r1, r3
 8001ab0:	7c3b      	ldrb	r3, [r7, #16]
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	b212      	sxth	r2, r2
 8001abc:	801a      	strh	r2, [r3, #0]
    accel_data[2] = (int16_t)(raw_data_buffer[5] << 8 | raw_data_buffer[6]); // Accel Z
 8001abe:	7c7b      	ldrb	r3, [r7, #17]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b219      	sxth	r1, r3
 8001ac6:	7cbb      	ldrb	r3, [r7, #18]
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3304      	adds	r3, #4
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	b212      	sxth	r2, r2
 8001ad2:	801a      	strh	r2, [r3, #0]
}
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <ICM42688p_ConvertAccelRawToG>:
/**
 * @brief 將加速計原始數據轉換為 g (重力加速度)。
 * @param pAccelRaw: 指向加速計原始數據陣列 (int16_t[3])。
 * @param pAccelG:   指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM42688p_ConvertAccelRawToG(const int16_t* pAccelRaw, float* pAccelG) {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    pAccelG[0] = (float)pAccelRaw[0] / current_accel_sensitivity;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001af4:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <ICM42688p_ConvertAccelRawToG+0x78>)
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[1] = (float)pAccelRaw[1] / current_accel_sensitivity;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3302      	adds	r3, #2
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <ICM42688p_ConvertAccelRawToG+0x78>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[2] = (float)pAccelRaw[2] / current_accel_sensitivity;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <ICM42688p_ConvertAccelRawToG+0x78>)
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b44:	edc3 7a00 	vstr	s15, [r3]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	24000008 	.word	0x24000008

08001b58 <ICM42688p_ConvertGyroRawToDPS>:
/**
 * @brief 將陀螺儀原始數據轉換為 dps (度/秒)。
 * @param pGyroRaw: 指向陀螺儀原始數據陣列 (int16_t[3])。
 * @param pGyroDPS: 指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM42688p_ConvertGyroRawToDPS(const int16_t* pGyroRaw, float* pGyroDPS) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
    pGyroDPS[0] = (float)pGyroRaw[0] / current_gyro_sensitivity;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <ICM42688p_ConvertGyroRawToDPS+0x78>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[1] = (float)pGyroRaw[1] / current_gyro_sensitivity;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3302      	adds	r3, #2
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <ICM42688p_ConvertGyroRawToDPS+0x78>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[2] = (float)pGyroRaw[2] / current_gyro_sensitivity;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <ICM42688p_ConvertGyroRawToDPS+0x78>)
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc0:	edc3 7a00 	vstr	s15, [r3]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	2400000c 	.word	0x2400000c

08001bd4 <icp20100_read_register>:
  * @param  hi2c: I2C 控制代碼。
  * @param  reg_addr: 要讀取的暫存器位址。
  * @param  data: 指向儲存讀取數據的緩衝區。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_read_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t *data) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Mem_Read(hi2c, ICP20100_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_TIMEOUT)!= HAL_OK) {
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	2364      	movs	r3, #100	@ 0x64
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2301      	movs	r3, #1
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	21c6      	movs	r1, #198	@ 0xc6
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f002 f9d6 	bl	8003fa8 <HAL_I2C_Mem_Read>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <icp20100_read_register+0x32>
        return SENSOR_COMM_FAIL;
 8001c02:	2304      	movs	r3, #4
 8001c04:	e000      	b.n	8001c08 <icp20100_read_register+0x34>
    }
    return ICP20100_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <icp20100_write_register>:
  * @param  hi2c: I2C 控制代碼。
  * @param  reg_addr: 要寫入的暫存器位址。
  * @param  data: 要寫入的數據。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_write_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t data) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af04      	add	r7, sp, #16
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	70bb      	strb	r3, [r7, #2]
    if (HAL_I2C_Mem_Write(hi2c, ICP20100_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_TIMEOUT)!= HAL_OK) {
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	2364      	movs	r3, #100	@ 0x64
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	1cbb      	adds	r3, r7, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	21c6      	movs	r1, #198	@ 0xc6
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f002 f8a3 	bl	8003d80 <HAL_I2C_Mem_Write>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <icp20100_write_register+0x34>
        return SENSOR_COMM_FAIL;
 8001c40:	2304      	movs	r3, #4
 8001c42:	e000      	b.n	8001c46 <icp20100_write_register+0x36>
    }
    return ICP20100_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <icp20100_read_burst>:
  * @param  start_reg_addr: 起始暫存器位址。
  * @param  data: 指向儲存讀取數據的緩衝區。
  * @param  len: 要讀取的位元組數。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_read_burst(I2C_HandleTypeDef *hi2c, uint8_t start_reg_addr, uint8_t *data, uint16_t len) {
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b088      	sub	sp, #32
 8001c52:	af04      	add	r7, sp, #16
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	72fb      	strb	r3, [r7, #11]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Read(hi2c, ICP20100_I2C_ADDR, start_reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, I2C_TIMEOUT)!= HAL_OK) {
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	2364      	movs	r3, #100	@ 0x64
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	893b      	ldrh	r3, [r7, #8]
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	21c6      	movs	r1, #198	@ 0xc6
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f002 f996 	bl	8003fa8 <HAL_I2C_Mem_Read>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <icp20100_read_burst+0x38>
        return SENSOR_COMM_FAIL;
 8001c82:	2304      	movs	r3, #4
 8001c84:	e000      	b.n	8001c88 <icp20100_read_burst+0x3a>
    }
    return ICP20100_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <icp20100_init>:
  *         此為簡化版初始化，主要針對 Version B 晶片。
  *         完整的 Version A 初始化較複雜，涉及 OTP 讀取與配置，此處未完全實作。
  * @param  hi2c: I2C_HandleTypeDef 指標，指向 I2C 控制代碼。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
ICP20100_StatusTypeDef icp20100_init(I2C_HandleTypeDef *hi2c) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
    uint8_t device_id = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	757b      	strb	r3, [r7, #21]
    uint8_t version = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	753b      	strb	r3, [r7, #20]
    uint8_t otp_status2 = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74fb      	strb	r3, [r7, #19]
    uint8_t mode_sync_status = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	74bb      	strb	r3, [r7, #18]

    // 1. 檢查 I2C 通訊是否正常 (嘗試讀取 DEVICE_ID)
    if (icp20100_read_register(hi2c, ICP20100_REG_DEVICE_ID, &device_id)!= ICP20100_OK) {
 8001ca8:	f107 0315 	add.w	r3, r7, #21
 8001cac:	461a      	mov	r2, r3
 8001cae:	210c      	movs	r1, #12
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff8f 	bl	8001bd4 <icp20100_read_register>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <icp20100_init+0x30>
        //printf("Error: Failed to communicate with ICP-20100.\r\n");
        return SENSOR_COMM_FAIL;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e076      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 2. 核對 DEVICE_ID
    if (device_id!= ICP20100_EXPECTED_DEVICE_ID) {
 8001cc0:	7d7b      	ldrb	r3, [r7, #21]
 8001cc2:	2b63      	cmp	r3, #99	@ 0x63
 8001cc4:	d001      	beq.n	8001cca <icp20100_init+0x3a>
        //printf("Error: ICP-20100 Device ID mismatch. Expected 0x%02X, Got 0x%02X\r\n", ICP20100_EXPECTED_DEVICE_ID, device_id);
        return SENSOR_INVALID_ID;
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e071      	b.n	8001dae <icp20100_init+0x11e>
    }
    //printf("ICP-20100 Device ID: 0x%02X - OK\r\n", device_id);

    // 3. 讀取 ASIC 版本
    if (icp20100_read_register(hi2c, ICP20100_REG_VERSION, &version)!= ICP20100_OK) {
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	461a      	mov	r2, r3
 8001cd0:	21d3      	movs	r1, #211	@ 0xd3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff7e 	bl	8001bd4 <icp20100_read_register>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <icp20100_init+0x52>
        //printf("Error: Failed to read ICP-20100 version.\r\n");
        return SENSOR_COMM_FAIL;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e065      	b.n	8001dae <icp20100_init+0x11e>
    // 4. 根據資料手冊 S6.5 Boot Sequence 進行簡化初始化
    //    對於 Version B (version == 0xB2)，大部分 OTP 配置已完成。
    //    對於 Version A (version == 0x00)，需要更複雜的 OTP 處理。
    //    本簡化範例假設 Version B 或 Version A 已完成 OTP boot。

    if (version == ICP20100_ASIC_VERSION_B) {
 8001ce2:	7d3b      	ldrb	r3, [r7, #20]
 8001ce4:	2bb2      	cmp	r3, #178	@ 0xb2
 8001ce6:	d00e      	beq.n	8001d06 <icp20100_init+0x76>
        //printf("ICP-20100 Version B detected. Simplified initialization.\r\n");
        // Version B 通常不需要額外的 OTP 載入步驟
    } else if (version == 0x00) { // Version A
 8001ce8:	7d3b      	ldrb	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <icp20100_init+0x76>
        //printf("ICP-20100 Version A detected. Checking BOOT_UP_STATUS.\r\n");
        // 檢查 BOOT_UP_STATUS (OTP_STATUS2)
        if (icp20100_read_register(hi2c, ICP20100_REG_OTP_STATUS2, &otp_status2)!= ICP20100_OK) {
 8001cee:	f107 0313 	add.w	r3, r7, #19
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	21bf      	movs	r1, #191	@ 0xbf
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff6c 	bl	8001bd4 <icp20100_read_register>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <icp20100_init+0x76>
            return SENSOR_COMM_FAIL;
 8001d02:	2304      	movs	r3, #4
 8001d04:	e053      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 5. 解鎖主暫存器 (寫入任意值，然後寫入 0x00 以鎖定)
    //    根據資料手冊 S6.5，初始化序列中會操作 MASTER_LOCK。
    //    為確保可配置模式，先解鎖。
    if (icp20100_write_register(hi2c, ICP20100_REG_MASTER_LOCK, 0x01)!= ICP20100_OK) { // 寫入非0值解鎖
 8001d06:	2201      	movs	r2, #1
 8001d08:	21be      	movs	r1, #190	@ 0xbe
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff80 	bl	8001c10 <icp20100_write_register>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <icp20100_init+0x8a>
         //printf("Error: Failed to unlock master registers.\r\n");
        return SENSOR_COMM_FAIL;
 8001d16:	2304      	movs	r3, #4
 8001d18:	e049      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 6. 等待模式同步狀態 (MODE_SYNC_STATUS in DEVICE_STATUS) 變為 1
    //    根據資料手冊 S6.6，寫入 MODE_SELECT 前，MODE_SYNC_STATUS 需為 1。
    uint8_t retry_count = 10;
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	75fb      	strb	r3, [r7, #23]
    do {
        if (icp20100_read_register(hi2c, ICP20100_REG_DEVICE_STATUS, &mode_sync_status)!= ICP20100_OK) {
 8001d1e:	f107 0312 	add.w	r3, r7, #18
 8001d22:	461a      	mov	r2, r3
 8001d24:	21cd      	movs	r1, #205	@ 0xcd
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff54 	bl	8001bd4 <icp20100_read_register>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <icp20100_init+0xa6>
            return SENSOR_COMM_FAIL;
 8001d32:	2304      	movs	r3, #4
 8001d34:	e03b      	b.n	8001dae <icp20100_init+0x11e>
        }
        if (mode_sync_status & 0x01) break; // MODE_SYNC_STATUS is bit 0
 8001d36:	7cbb      	ldrb	r3, [r7, #18]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <icp20100_init+0xc4>
        HAL_Delay(10); // 短暫延遲
 8001d40:	200a      	movs	r0, #10
 8001d42:	f001 fc2b 	bl	800359c <HAL_Delay>
        retry_count--;
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	75fb      	strb	r3, [r7, #23]
    } while (retry_count > 0);
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1e5      	bne.n	8001d1e <icp20100_init+0x8e>
 8001d52:	e000      	b.n	8001d56 <icp20100_init+0xc6>
        if (mode_sync_status & 0x01) break; // MODE_SYNC_STATUS is bit 0
 8001d54:	bf00      	nop
    //    Bit  4 FORCED_MEAS_TRIGGER = 0 (N/A for continuous)
    //    Bit  3 MEAS_MODE = 1 (Continuous measurements)
    //    Bit  2 POWER_MODE = 0 (Normal mode: active during meas, else standby)
    //    Bits 1:0 FIFO_READOUT_MODE = 00 (Pressure first)
    //    Value = 0b00001000 = 0x08
    uint8_t mode_select_val = 0x08;
 8001d56:	2308      	movs	r3, #8
 8001d58:	75bb      	strb	r3, [r7, #22]
    if (icp20100_write_register(hi2c, ICP20100_REG_MODE_SELECT, mode_select_val)!= ICP20100_OK) {
 8001d5a:	7dbb      	ldrb	r3, [r7, #22]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	21c0      	movs	r1, #192	@ 0xc0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff55 	bl	8001c10 <icp20100_write_register>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <icp20100_init+0xe0>
        //printf("Error: Failed to set measurement mode.\r\n");
        return SENSOR_COMM_FAIL;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e01e      	b.n	8001dae <icp20100_init+0x11e>
    }
   // printf("ICP-20100 set to Mode0 continuous measurement.\r\n");

    // 8. 鎖定主暫存器 (寫入 0x00)
    if (icp20100_write_register(hi2c, ICP20100_REG_MASTER_LOCK, 0x00)!= ICP20100_OK) {
 8001d70:	2200      	movs	r2, #0
 8001d72:	21be      	movs	r1, #190	@ 0xbe
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff4b 	bl	8001c10 <icp20100_write_register>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <icp20100_init+0xf4>
        //printf("Error: Failed to lock master registers.\r\n");
        return SENSOR_COMM_FAIL;
 8001d80:	2304      	movs	r3, #4
 8001d82:	e014      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 延遲替代 HAL_Delay(1000)暫時解決HAL_Delay時會當掉問題
    	      for (volatile int i = 0; i < 1000; i++){
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e00c      	b.n	8001da4 <icp20100_init+0x114>
    	    	  for (volatile int q = 0; q < 1000; q++);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	e002      	b.n	8001d96 <icp20100_init+0x106>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9c:	dbf8      	blt.n	8001d90 <icp20100_init+0x100>
    	      for (volatile int i = 0; i < 1000; i++){
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001daa:	dbee      	blt.n	8001d8a <icp20100_init+0xfa>
    	      }
//    HAL_Delay(10); // 等待模式穩定

    return SENSOR_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <icp20100_get_pressure_temp>:
  * @param  hi2c: I2C_HandleTypeDef 指標，指向 I2C 控制代碼。
  * @param  pressure: float 指標，用於儲存讀取到的大氣壓力值 (單位: Pa)。
  * @param  temperature: float 指標，用於儲存讀取到的溫度值 (單位: Celsius)。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
ICP20100_StatusTypeDef icp20100_get_pressure_temp(I2C_HandleTypeDef *hi2c, float *pressure, float *temperature) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
    //uint8_t raw_data; // 用於儲存壓力 (3 bytes) 和溫度 (3 bytes) 的原始數據
    uint8_t raw_data[6];// 用於儲存壓力 (3 bytes) 和溫度 (3 bytes) 的原始數據
    // 連續讀取 6 個位元組的數據 (PRESS_DATA_0 到 TEMP_DATA_2)
    // 順序：P0, P1, P2, T0, T1, T2
    if (icp20100_read_burst(hi2c, ICP20100_REG_PRESS_DATA_0, raw_data, 6)!= ICP20100_OK) {
 8001dc4:	f107 0210 	add.w	r2, r7, #16
 8001dc8:	2306      	movs	r3, #6
 8001dca:	21fa      	movs	r1, #250	@ 0xfa
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff ff3e 	bl	8001c4e <icp20100_read_burst>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <icp20100_get_pressure_temp+0x24>
        //printf("Error: Failed to read P/T data burst.\r\n");
        return SENSOR_COMM_FAIL;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	e052      	b.n	8001e82 <icp20100_get_pressure_temp+0xca>
    }

    // 解析 20 位元壓力數據 (二補數)
    // P_OUT[19:0] = {PRESS_DATA_2[3:0], PRESS_DATA_1[7:0], PRESS_DATA_0[7:0]}
    // 假設 raw_data 順序: raw_data[0]=P0, raw_data[1]=P1, raw_data[2]=P2_MSB(含P2[3:0])
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 8001ddc:	7cbb      	ldrb	r3, [r7, #18]
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                        ((int32_t)raw_data[1] << 8) | \
 8001de4:	7c7b      	ldrb	r3, [r7, #17]
 8001de6:	021b      	lsls	r3, r3, #8
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 8001de8:	4313      	orrs	r3, r2
                        ((int32_t)raw_data[0]);
 8001dea:	7c3a      	ldrb	r2, [r7, #16]
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]

    // 符號擴展 (如果第 20 位元為 1，則為負數)
    if (p_out_raw & (1 << 19)) {
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <icp20100_get_pressure_temp+0x4a>
        p_out_raw |= ~((1 << 20) - 1); // 將高位置為 1 以進行符號擴展
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <icp20100_get_pressure_temp+0xd4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]
    }

    // 解析 20 位元溫度數據 (二補數)
    // T_OUT[19:0] = {TEMP_DATA_2[3:0], TEMP_DATA_1[7:0], TEMP_DATA_0[7:0]}
    // 假設 raw_data 順序: raw_data[3]=T0, raw_data[4]=T1, raw_data[5]=T2_MSB(含T2[3:0])
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 8001e02:	7d7b      	ldrb	r3, [r7, #21]
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                        ((int32_t)raw_data[4] << 8) | \
 8001e0a:	7d3b      	ldrb	r3, [r7, #20]
 8001e0c:	021b      	lsls	r3, r3, #8
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 8001e0e:	4313      	orrs	r3, r2
                        ((int32_t)raw_data[3]);
 8001e10:	7cfa      	ldrb	r2, [r7, #19]
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]

    // 符號擴展
    if (t_out_raw & (1 << 19)) {
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <icp20100_get_pressure_temp+0x70>
        t_out_raw |= ~((1 << 20) - 1);
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <icp20100_get_pressure_temp+0xd4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
    }

    // 轉換為實際物理值
    // 壓力轉換公式: P_Pa = * 1000
    *pressure = ((((float)p_out_raw / (float)(1 << 17)) * 40.0f) + 70.0f) * 10.0f;//試著改成10.0f(原本1000.0f)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e32:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001e90 <icp20100_get_pressure_temp+0xd8>
 8001e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001e94 <icp20100_get_pressure_temp+0xdc>
 8001e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e42:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001e98 <icp20100_get_pressure_temp+0xe0>
 8001e46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	edc3 7a00 	vstr	s15, [r3]

    // 溫度轉換公式: T_C = (T_OUT / 2^18) * 65 + 25
    *temperature = (((float)t_out_raw / (float)(1 << 18)) * 65.0f) + 25.0f;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e62:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001e9c <icp20100_get_pressure_temp+0xe4>
 8001e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001ea0 <icp20100_get_pressure_temp+0xe8>
 8001e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e72:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	edc3 7a00 	vstr	s15, [r3]

    return ICP20100_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	fff00000 	.word	0xfff00000
 8001e90:	48000000 	.word	0x48000000
 8001e94:	42200000 	.word	0x42200000
 8001e98:	428c0000 	.word	0x428c0000
 8001e9c:	48800000 	.word	0x48800000
 8001ea0:	42820000 	.word	0x42820000

08001ea4 <ICP20100_Main>:
void ICP20100_Main(I2C_HandleTypeDef *hi2c){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	6078      	str	r0, [r7, #4]

	float pressure, temperature;
	ICP20100_StatusTypeDef sensor_status;
	  // 讀取壓力與溫度數據
	  sensor_status = icp20100_get_pressure_temp(hi2c, &pressure, &temperature);
 8001eac:	f107 020c 	add.w	r2, r7, #12
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff7e 	bl	8001db8 <icp20100_get_pressure_temp>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	75fb      	strb	r3, [r7, #23]

	  if (sensor_status == ICP20100_OK) {
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d112      	bne.n	8001eec <ICP20100_Main+0x48>
		// 透過 printf 輸出數據
		// 使用者已實作 _write，printf 應能正常工作
		printf("<ICP20100>Pressure: %.2f Pa, Temperature: %.2f C\r\n", pressure, temperature);
 8001ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ed2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ed6:	ed8d 7b00 	vstr	d7, [sp]
 8001eda:	ec53 2b16 	vmov	r2, r3, d6
 8001ede:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <ICP20100_Main+0x60>)
 8001ee0:	f006 fe78 	bl	8008bd4 <iprintf>
		printf("The data is OK\r\n");
 8001ee4:	4808      	ldr	r0, [pc, #32]	@ (8001f08 <ICP20100_Main+0x64>)
 8001ee6:	f006 fedd 	bl	8008ca4 <puts>
 8001eea:	e004      	b.n	8001ef6 <ICP20100_Main+0x52>
		// 測試修改1: 輸出整數 (會損失精度，僅為測試)
	//	        printf("Pressure_int: %d Pa, Temperature_int: %d C\r\n", (int)pressure, (int)temperature);
	  } else {
		printf("Failed to read data from ICP-20100. Error Code: %d\r\n", sensor_status);
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4806      	ldr	r0, [pc, #24]	@ (8001f0c <ICP20100_Main+0x68>)
 8001ef2:	f006 fe6f 	bl	8008bd4 <iprintf>
	  }
	  // 延遲替代 HAL_Delay(1000)暫時解決HAL_Delay時會當掉問題
//		  for (volatile int i = 0; i < 1000; i++){
//			  for (volatile int q = 0; q < 1000; q++);
//		  }
	  HAL_Delay(100);
 8001ef6:	2064      	movs	r0, #100	@ 0x64
 8001ef8:	f001 fb50 	bl	800359c <HAL_Delay>
}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0800c620 	.word	0x0800c620
 8001f08:	0800c654 	.word	0x0800c654
 8001f0c:	0800c664 	.word	0x0800c664

08001f10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001f30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f38:	e000      	b.n	8001f3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f3c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f9      	beq.n	8001f3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f46:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001f66:	f000 fcdd 	bl	8002924 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6a:	f001 fa85 	bl	8003478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6e:	f000 f9b5 	bl	80022dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f72:	f000 fbb7 	bl	80026e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f76:	f000 faad 	bl	80024d4 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001f7a:	f000 fa2b 	bl	80023d4 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001f7e:	f000 fb01 	bl	8002584 <MX_SPI2_Init>
  MX_I2C4_Init();
 8001f82:	f000 fa67 	bl	8002454 <MX_I2C4_Init>
  MX_SPI3_Init();
 8001f86:	f000 fb55 	bl	8002634 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
#define MAX_INIT_ATTEMPTS 10 // 定義最大INIT嘗試次數
  int attempt_count = 0;// INIT嘗試計數
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  /* Initialize ICM-20948 sensor ----------------------------------------------------------*/
  HAL_StatusTypeDef ICM20948_status;
  printf("<ICM-20948> System initialization...\r\n");
 8001f8e:	48ae      	ldr	r0, [pc, #696]	@ (8002248 <main+0x2e8>)
 8001f90:	f006 fe88 	bl	8008ca4 <puts>
  // 使用 for 迴圈嘗試初始化，最多10次
  for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8001f94:	2301      	movs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e014      	b.n	8001fc4 <main+0x64>
      ICM20948_status = ICM20948_Init(); // 執行初始化
 8001f9a:	f7fe ffbb 	bl	8000f14 <ICM20948_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	72fb      	strb	r3, [r7, #11]
      if (ICM20948_status == SENSOR_OK) {
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <main+0x4e>
          // 如果成功，就跳出迴圈，attempt_count歸零
    	  attempt_count = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
          break;
 8001fac:	e00d      	b.n	8001fca <main+0x6a>
      }
      // 如果失敗，印出嘗試失敗的訊息
      printf("<ICM-20948> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 8001fae:	220a      	movs	r2, #10
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	48a6      	ldr	r0, [pc, #664]	@ (800224c <main+0x2ec>)
 8001fb4:	f006 fe0e 	bl	8008bd4 <iprintf>
      HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 8001fb8:	20c8      	movs	r0, #200	@ 0xc8
 8001fba:	f001 faef 	bl	800359c <HAL_Delay>
  for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b0a      	cmp	r3, #10
 8001fc8:	dde7      	ble.n	8001f9a <main+0x3a>
  }
  // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
  if (ICM20948_status == SENSOR_OK) {
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <main+0x7a>
      printf("<ICM-20948> Initialization Successfully on attempt #%d\r\n", attempt_count);
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	489f      	ldr	r0, [pc, #636]	@ (8002250 <main+0x2f0>)
 8001fd4:	f006 fdfe 	bl	8008bd4 <iprintf>
 8001fd8:	e004      	b.n	8001fe4 <main+0x84>
  } else {
	  printf("<ICM-20948> Initialization FAILED Error Code: %d\r\n", ICM20948_status);
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	489d      	ldr	r0, [pc, #628]	@ (8002254 <main+0x2f4>)
 8001fe0:	f006 fdf8 	bl	8008bd4 <iprintf>
  }
  HAL_Delay(2000);
 8001fe4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fe8:	f001 fad8 	bl	800359c <HAL_Delay>
  	/* Initialize ICP-20100 sensor ----------------------------------------------------------*/
  ICP20100_StatusTypeDef icp20100_status;
   printf("<ICP-20100> System initialization...\r\n");
 8001fec:	489a      	ldr	r0, [pc, #616]	@ (8002258 <main+0x2f8>)
 8001fee:	f006 fe59 	bl	8008ca4 <puts>
   // 使用 for 迴圈嘗試初始化，最多10次
   for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e015      	b.n	8002024 <main+0xc4>
	   icp20100_status = icp20100_init(&hi2c2); // 執行初始化
 8001ff8:	4898      	ldr	r0, [pc, #608]	@ (800225c <main+0x2fc>)
 8001ffa:	f7ff fe49 	bl	8001c90 <icp20100_init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	72bb      	strb	r3, [r7, #10]
       if (icp20100_status == SENSOR_OK) {
 8002002:	7abb      	ldrb	r3, [r7, #10]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <main+0xae>
           // 如果成功，就跳出迴圈，attempt_count歸零
     	  attempt_count = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
           break;
 800200c:	e00d      	b.n	800202a <main+0xca>
       }
       // 如果失敗，印出嘗試失敗的訊息
       printf("<ICP-20100> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 800200e:	220a      	movs	r2, #10
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	4893      	ldr	r0, [pc, #588]	@ (8002260 <main+0x300>)
 8002014:	f006 fdde 	bl	8008bd4 <iprintf>
       HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 8002018:	20c8      	movs	r0, #200	@ 0xc8
 800201a:	f001 fabf 	bl	800359c <HAL_Delay>
   for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3301      	adds	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b0a      	cmp	r3, #10
 8002028:	dde6      	ble.n	8001ff8 <main+0x98>
   }
   // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
   if (icp20100_status == SENSOR_OK) {
 800202a:	7abb      	ldrb	r3, [r7, #10]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <main+0xda>
       printf("<ICP-20100> Initialization Successfully on attempt #%d\r\n", attempt_count);
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	488c      	ldr	r0, [pc, #560]	@ (8002264 <main+0x304>)
 8002034:	f006 fdce 	bl	8008bd4 <iprintf>
 8002038:	e004      	b.n	8002044 <main+0xe4>
   } else {
 	  printf("<ICP-20100> Initialization FAILED Error Code: %d\r\n", icp20100_status);
 800203a:	7abb      	ldrb	r3, [r7, #10]
 800203c:	4619      	mov	r1, r3
 800203e:	488a      	ldr	r0, [pc, #552]	@ (8002268 <main+0x308>)
 8002040:	f006 fdc8 	bl	8008bd4 <iprintf>
   }
   HAL_Delay(2000);
 8002044:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002048:	f001 faa8 	bl	800359c <HAL_Delay>
   /* Initialize ICP-20100 sensor ----------------------------------------------------------*/

   /* Initialize ICM-42688-P sensor ----------------------------------------------------------*/
   	   HAL_StatusTypeDef icm42688p_status;
      printf("<ICM-42688-P> System initialization...\r\n");
 800204c:	4887      	ldr	r0, [pc, #540]	@ (800226c <main+0x30c>)
 800204e:	f006 fe29 	bl	8008ca4 <puts>
      // 使用 for 迴圈嘗試初始化，最多10次
      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8002052:	2301      	movs	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e015      	b.n	8002084 <main+0x124>
    	  icm42688p_status = icm42688p_init(&hspi2); // 執行初始化
 8002058:	4885      	ldr	r0, [pc, #532]	@ (8002270 <main+0x310>)
 800205a:	f7ff fc0d 	bl	8001878 <icm42688p_init>
 800205e:	4603      	mov	r3, r0
 8002060:	727b      	strb	r3, [r7, #9]
          if (icm42688p_status == SENSOR_OK) {
 8002062:	7a7b      	ldrb	r3, [r7, #9]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <main+0x10e>
              // 如果成功，就跳出迴圈，attempt_count歸零
        	  attempt_count = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
              break;
 800206c:	e00d      	b.n	800208a <main+0x12a>
          }
          // 如果失敗，印出嘗試失敗的訊息
          printf("<ICM-42688-P> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 800206e:	220a      	movs	r2, #10
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4880      	ldr	r0, [pc, #512]	@ (8002274 <main+0x314>)
 8002074:	f006 fdae 	bl	8008bd4 <iprintf>
          HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 8002078:	20c8      	movs	r0, #200	@ 0xc8
 800207a:	f001 fa8f 	bl	800359c <HAL_Delay>
      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3301      	adds	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b0a      	cmp	r3, #10
 8002088:	dde6      	ble.n	8002058 <main+0xf8>
      }
      // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
      if (icm42688p_status == SENSOR_OK) {
 800208a:	7a7b      	ldrb	r3, [r7, #9]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <main+0x13a>
          printf("<ICM-42688-P> Initialization Successfully on attempt #%d\r\n", attempt_count);
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	4879      	ldr	r0, [pc, #484]	@ (8002278 <main+0x318>)
 8002094:	f006 fd9e 	bl	8008bd4 <iprintf>
 8002098:	e004      	b.n	80020a4 <main+0x144>
      } else {
    	  printf("<ICM-42688-P> Initialization FAILED Error Code: %d\r\n", icm42688p_status);
 800209a:	7a7b      	ldrb	r3, [r7, #9]
 800209c:	4619      	mov	r1, r3
 800209e:	4877      	ldr	r0, [pc, #476]	@ (800227c <main+0x31c>)
 80020a0:	f006 fd98 	bl	8008bd4 <iprintf>
      }
      HAL_Delay(2000);
 80020a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80020a8:	f001 fa78 	bl	800359c <HAL_Delay>
      /* Initialize ICM-42688-P sensor ----------------------------------------------------------*/

	/* Initialize RM-3100 sensor ----------------------------------------------------------*/
      HAL_StatusTypeDef rm3100_status;
     	      printf("<RM-3100> System initialization...\r\n");
 80020ac:	4874      	ldr	r0, [pc, #464]	@ (8002280 <main+0x320>)
 80020ae:	f006 fdf9 	bl	8008ca4 <puts>
     	      // 使用 for 迴圈嘗試初始化，最多10次
     	      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 80020b2:	2301      	movs	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e012      	b.n	80020de <main+0x17e>
     	    	 rm3100_status = SENSOR_OK; // 執行初始化
 80020b8:	2300      	movs	r3, #0
 80020ba:	723b      	strb	r3, [r7, #8]
     	          if (rm3100_status == SENSOR_OK) {
 80020bc:	7a3b      	ldrb	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <main+0x168>
     	              // 如果成功，就跳出迴圈，attempt_count歸零
     	        	  attempt_count = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
     	              break;
 80020c6:	e00d      	b.n	80020e4 <main+0x184>
     	          }
     	          // 如果失敗，印出嘗試失敗的訊息
     	          printf("<RM-3100> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 80020c8:	220a      	movs	r2, #10
 80020ca:	68f9      	ldr	r1, [r7, #12]
 80020cc:	486d      	ldr	r0, [pc, #436]	@ (8002284 <main+0x324>)
 80020ce:	f006 fd81 	bl	8008bd4 <iprintf>
     	          HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 80020d2:	20c8      	movs	r0, #200	@ 0xc8
 80020d4:	f001 fa62 	bl	800359c <HAL_Delay>
     	      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3301      	adds	r3, #1
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b0a      	cmp	r3, #10
 80020e2:	dde9      	ble.n	80020b8 <main+0x158>
     	      }
     	      // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
     	      if (rm3100_status == SENSOR_OK) {
 80020e4:	7a3b      	ldrb	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d104      	bne.n	80020f4 <main+0x194>
     	          printf("<RM-3100> Initialization Successfully on attempt #%d\r\n", attempt_count);
 80020ea:	68f9      	ldr	r1, [r7, #12]
 80020ec:	4866      	ldr	r0, [pc, #408]	@ (8002288 <main+0x328>)
 80020ee:	f006 fd71 	bl	8008bd4 <iprintf>
 80020f2:	e004      	b.n	80020fe <main+0x19e>
     	      } else {
     	    	  printf("<RM-3100> Initialization FAILED Error Code: %d\r\n", rm3100_status);
 80020f4:	7a3b      	ldrb	r3, [r7, #8]
 80020f6:	4619      	mov	r1, r3
 80020f8:	4864      	ldr	r0, [pc, #400]	@ (800228c <main+0x32c>)
 80020fa:	f006 fd6b 	bl	8008bd4 <iprintf>
     	      }
     	      HAL_Delay(2000);
 80020fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002102:	f001 fa4b 	bl	800359c <HAL_Delay>
	/* Initialize RM-3100 sensor ----------------------------------------------------------*/

	/* Initialize BMI-088 sensor ----------------------------------------------------------*/
	 HAL_StatusTypeDef BMI088_status;
	      printf("<BMI-088> System initialization...\r\n");
 8002106:	4862      	ldr	r0, [pc, #392]	@ (8002290 <main+0x330>)
 8002108:	f006 fdcc 	bl	8008ca4 <puts>
	      // 使用 for 迴圈嘗試初始化，最多10次
	      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 800210c:	2301      	movs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e014      	b.n	800213c <main+0x1dc>
	    	  BMI088_status = BMI088_Init(); // 執行初始化
 8002112:	f7fe fc2d 	bl	8000970 <BMI088_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
	          if (BMI088_status == SENSOR_OK) {
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <main+0x1c6>
	              // 如果成功，就跳出迴圈，attempt_count歸零
	        	  attempt_count = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
	              break;
 8002124:	e00d      	b.n	8002142 <main+0x1e2>
	          }
	          // 如果失敗，印出嘗試失敗的訊息
	          printf("<BMI-088> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 8002126:	220a      	movs	r2, #10
 8002128:	68f9      	ldr	r1, [r7, #12]
 800212a:	485a      	ldr	r0, [pc, #360]	@ (8002294 <main+0x334>)
 800212c:	f006 fd52 	bl	8008bd4 <iprintf>
	          HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 8002130:	20c8      	movs	r0, #200	@ 0xc8
 8002132:	f001 fa33 	bl	800359c <HAL_Delay>
	      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3301      	adds	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b0a      	cmp	r3, #10
 8002140:	dde7      	ble.n	8002112 <main+0x1b2>
	      }
	      // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
	      if (BMI088_status == SENSOR_OK) {
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <main+0x1f2>
	          printf("<BMI-088> Initialization Successfully on attempt #%d\r\n", attempt_count);
 8002148:	68f9      	ldr	r1, [r7, #12]
 800214a:	4853      	ldr	r0, [pc, #332]	@ (8002298 <main+0x338>)
 800214c:	f006 fd42 	bl	8008bd4 <iprintf>
 8002150:	e004      	b.n	800215c <main+0x1fc>
	      } else {
	    	  printf("<BMI-088> Initialization FAILED Error Code: %d\r\n", BMI088_status);
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	4619      	mov	r1, r3
 8002156:	4851      	ldr	r0, [pc, #324]	@ (800229c <main+0x33c>)
 8002158:	f006 fd3c 	bl	8008bd4 <iprintf>
	      }
	      HAL_Delay(2000);
 800215c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002160:	f001 fa1c 	bl	800359c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("-----------------------<ICM20948>----------------------- \n");
 8002164:	484e      	ldr	r0, [pc, #312]	@ (80022a0 <main+0x340>)
 8002166:	f006 fd9d 	bl	8008ca4 <puts>
	  ICM20948_Main();
 800216a:	f7ff fa19 	bl	80015a0 <ICM20948_Main>
	  HAL_Delay(1000);
 800216e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002172:	f001 fa13 	bl	800359c <HAL_Delay>
	  printf("-----------------------<ICP20100>----------------------- \n");
 8002176:	484b      	ldr	r0, [pc, #300]	@ (80022a4 <main+0x344>)
 8002178:	f006 fd94 	bl	8008ca4 <puts>
	  ICP20100_Main(&hi2c2);
 800217c:	4837      	ldr	r0, [pc, #220]	@ (800225c <main+0x2fc>)
 800217e:	f7ff fe91 	bl	8001ea4 <ICP20100_Main>
	  HAL_Delay(1000);
 8002182:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002186:	f001 fa09 	bl	800359c <HAL_Delay>
	  printf("-----------------------<ICM42688p>----------------------- \n");
 800218a:	4847      	ldr	r0, [pc, #284]	@ (80022a8 <main+0x348>)
 800218c:	f006 fd8a 	bl	8008ca4 <puts>
	  // icm42688p讀取加速計原始數據
	  icm42688p_read_accel_raw(&hspi2, accel_data);
 8002190:	4946      	ldr	r1, [pc, #280]	@ (80022ac <main+0x34c>)
 8002192:	4837      	ldr	r0, [pc, #220]	@ (8002270 <main+0x310>)
 8002194:	f7ff fc4d 	bl	8001a32 <icm42688p_read_accel_raw>
	  // icm42688p讀取陀螺儀原始數據
	  icm42688p_read_gyro_raw(&hspi2, gyro_data);
 8002198:	4945      	ldr	r1, [pc, #276]	@ (80022b0 <main+0x350>)
 800219a:	4835      	ldr	r0, [pc, #212]	@ (8002270 <main+0x310>)
 800219c:	f7ff fbf5 	bl	800198a <icm42688p_read_gyro_raw>
	  //icm42688p 將原始數據轉換為物理單位
	  ICM42688p_ConvertAccelRawToG(accel_data, ICM42688paccel_g);
 80021a0:	4944      	ldr	r1, [pc, #272]	@ (80022b4 <main+0x354>)
 80021a2:	4842      	ldr	r0, [pc, #264]	@ (80022ac <main+0x34c>)
 80021a4:	f7ff fc9a 	bl	8001adc <ICM42688p_ConvertAccelRawToG>
	  ICM42688p_ConvertGyroRawToDPS(gyro_data, ICM42688pgyro_dps);
 80021a8:	4943      	ldr	r1, [pc, #268]	@ (80022b8 <main+0x358>)
 80021aa:	4841      	ldr	r0, [pc, #260]	@ (80022b0 <main+0x350>)
 80021ac:	f7ff fcd4 	bl	8001b58 <ICM42688p_ConvertGyroRawToDPS>
	  //icm42688p 確保 accel_data 和 gyro_data 陣列的索引正確 (0=X, 1=Y, 2=Z)
	  printf("<ICM42688p> accel_data: X=%.2f, Y=%.2f, Z=%.2f\r\n", ICM42688paccel_g[0], ICM42688paccel_g[1], ICM42688paccel_g[2]);
 80021b0:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <main+0x354>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80021ba:	4b3e      	ldr	r3, [pc, #248]	@ (80022b4 <main+0x354>)
 80021bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80021c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c4:	4b3b      	ldr	r3, [pc, #236]	@ (80022b4 <main+0x354>)
 80021c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80021ca:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021ce:	ed8d 6b02 	vstr	d6, [sp, #8]
 80021d2:	ed8d 7b00 	vstr	d7, [sp]
 80021d6:	ec53 2b15 	vmov	r2, r3, d5
 80021da:	4838      	ldr	r0, [pc, #224]	@ (80022bc <main+0x35c>)
 80021dc:	f006 fcfa 	bl	8008bd4 <iprintf>
	  printf("<ICM42688p> gyro_data: X=%.2f, Y=%.2f, Z=%.2f\r\n", ICM42688pgyro_dps[0], ICM42688pgyro_dps[1], ICM42688pgyro_dps[2]);
 80021e0:	4b35      	ldr	r3, [pc, #212]	@ (80022b8 <main+0x358>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80021ea:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <main+0x358>)
 80021ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80021f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f4:	4b30      	ldr	r3, [pc, #192]	@ (80022b8 <main+0x358>)
 80021f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80021fa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021fe:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002202:	ed8d 7b00 	vstr	d7, [sp]
 8002206:	ec53 2b15 	vmov	r2, r3, d5
 800220a:	482d      	ldr	r0, [pc, #180]	@ (80022c0 <main+0x360>)
 800220c:	f006 fce2 	bl	8008bd4 <iprintf>
	  printf("The data is OK\r\n");
 8002210:	482c      	ldr	r0, [pc, #176]	@ (80022c4 <main+0x364>)
 8002212:	f006 fd47 	bl	8008ca4 <puts>
	  HAL_Delay(1000);
 8002216:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800221a:	f001 f9bf 	bl	800359c <HAL_Delay>
	  printf("-----------------------<RM-3100>----------------------- \n");
 800221e:	482a      	ldr	r0, [pc, #168]	@ (80022c8 <main+0x368>)
 8002220:	f006 fd40 	bl	8008ca4 <puts>
	  RM3100_Main(&hi2c4, &magData);
 8002224:	4929      	ldr	r1, [pc, #164]	@ (80022cc <main+0x36c>)
 8002226:	482a      	ldr	r0, [pc, #168]	@ (80022d0 <main+0x370>)
 8002228:	f000 fc2e 	bl	8002a88 <RM3100_Main>
	  HAL_Delay(1000);
 800222c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002230:	f001 f9b4 	bl	800359c <HAL_Delay>
	  printf("-----------------------<BMI-088>----------------------- \n");
 8002234:	4827      	ldr	r0, [pc, #156]	@ (80022d4 <main+0x374>)
 8002236:	f006 fd35 	bl	8008ca4 <puts>
	  BMI088_Main();
 800223a:	f7fe fbeb 	bl	8000a14 <BMI088_Main>
//	  printf("Failed to read data from BMI-088. Error Code: 4\r\n");
	  printf("-----------------------Test End----------------------- \r\n\r\n");
 800223e:	4826      	ldr	r0, [pc, #152]	@ (80022d8 <main+0x378>)
 8002240:	f006 fd30 	bl	8008ca4 <puts>
	  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <main+0x2e4>
 8002248:	0800c69c 	.word	0x0800c69c
 800224c:	0800c6c4 	.word	0x0800c6c4
 8002250:	0800c708 	.word	0x0800c708
 8002254:	0800c744 	.word	0x0800c744
 8002258:	0800c778 	.word	0x0800c778
 800225c:	24000264 	.word	0x24000264
 8002260:	0800c7a0 	.word	0x0800c7a0
 8002264:	0800c7e4 	.word	0x0800c7e4
 8002268:	0800c820 	.word	0x0800c820
 800226c:	0800c854 	.word	0x0800c854
 8002270:	24000394 	.word	0x24000394
 8002274:	0800c87c 	.word	0x0800c87c
 8002278:	0800c8c0 	.word	0x0800c8c0
 800227c:	0800c8fc 	.word	0x0800c8fc
 8002280:	0800c934 	.word	0x0800c934
 8002284:	0800c958 	.word	0x0800c958
 8002288:	0800c998 	.word	0x0800c998
 800228c:	0800c9d0 	.word	0x0800c9d0
 8002290:	0800ca04 	.word	0x0800ca04
 8002294:	0800ca28 	.word	0x0800ca28
 8002298:	0800ca68 	.word	0x0800ca68
 800229c:	0800caa0 	.word	0x0800caa0
 80022a0:	0800cad4 	.word	0x0800cad4
 80022a4:	0800cb10 	.word	0x0800cb10
 80022a8:	0800cb4c 	.word	0x0800cb4c
 80022ac:	240004a4 	.word	0x240004a4
 80022b0:	240004ac 	.word	0x240004ac
 80022b4:	240004b4 	.word	0x240004b4
 80022b8:	240004c0 	.word	0x240004c0
 80022bc:	0800cb88 	.word	0x0800cb88
 80022c0:	0800cbbc 	.word	0x0800cbbc
 80022c4:	0800cbec 	.word	0x0800cbec
 80022c8:	0800cbfc 	.word	0x0800cbfc
 80022cc:	240004cc 	.word	0x240004cc
 80022d0:	240002b8 	.word	0x240002b8
 80022d4:	0800cc38 	.word	0x0800cc38
 80022d8:	0800cc74 	.word	0x0800cc74

080022dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b09c      	sub	sp, #112	@ 0x70
 80022e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e6:	224c      	movs	r2, #76	@ 0x4c
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 fddc 	bl	8008ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2220      	movs	r2, #32
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f006 fdd6 	bl	8008ea8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80022fc:	2002      	movs	r0, #2
 80022fe:	f002 fbcd 	bl	8004a9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <SystemClock_Config+0xf0>)
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	4a30      	ldr	r2, [pc, #192]	@ (80023cc <SystemClock_Config+0xf0>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002312:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <SystemClock_Config+0xf0>)
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4b2c      	ldr	r3, [pc, #176]	@ (80023d0 <SystemClock_Config+0xf4>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002324:	4a2a      	ldr	r2, [pc, #168]	@ (80023d0 <SystemClock_Config+0xf4>)
 8002326:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b28      	ldr	r3, [pc, #160]	@ (80023d0 <SystemClock_Config+0xf4>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002338:	bf00      	nop
 800233a:	4b25      	ldr	r3, [pc, #148]	@ (80023d0 <SystemClock_Config+0xf4>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002346:	d1f8      	bne.n	800233a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002348:	2302      	movs	r3, #2
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800234c:	2301      	movs	r3, #1
 800234e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002350:	2340      	movs	r3, #64	@ 0x40
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002354:	2302      	movs	r3, #2
 8002356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002358:	2300      	movs	r3, #0
 800235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800235c:	2304      	movs	r3, #4
 800235e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002360:	230a      	movs	r3, #10
 8002362:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002364:	2302      	movs	r3, #2
 8002366:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002368:	2302      	movs	r3, #2
 800236a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800236c:	2302      	movs	r3, #2
 800236e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002370:	230c      	movs	r3, #12
 8002372:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002374:	2302      	movs	r3, #2
 8002376:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002380:	4618      	mov	r0, r3
 8002382:	f002 fbc5 	bl	8004b10 <HAL_RCC_OscConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800238c:	f000 faf6 	bl	800297c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002390:	233f      	movs	r3, #63	@ 0x3f
 8002392:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80023a4:	2340      	movs	r3, #64	@ 0x40
 80023a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80023ac:	2340      	movs	r3, #64	@ 0x40
 80023ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 f805 	bl	80053c4 <HAL_RCC_ClockConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80023c0:	f000 fadc 	bl	800297c <Error_Handler>
  }
}
 80023c4:	bf00      	nop
 80023c6:	3770      	adds	r7, #112	@ 0x70
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	58000400 	.word	0x58000400
 80023d0:	58024800 	.word	0x58024800

080023d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <MX_I2C2_Init+0x74>)
 80023da:	4a1c      	ldr	r2, [pc, #112]	@ (800244c <MX_I2C2_Init+0x78>)
 80023dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <MX_I2C2_Init+0x74>)
 80023e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <MX_I2C2_Init+0x7c>)
 80023e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80023e4:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <MX_I2C2_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ea:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <MX_I2C2_Init+0x74>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f0:	4b15      	ldr	r3, [pc, #84]	@ (8002448 <MX_I2C2_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <MX_I2C2_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023fc:	4b12      	ldr	r3, [pc, #72]	@ (8002448 <MX_I2C2_Init+0x74>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002402:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <MX_I2C2_Init+0x74>)
 8002404:	2200      	movs	r2, #0
 8002406:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <MX_I2C2_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800240e:	480e      	ldr	r0, [pc, #56]	@ (8002448 <MX_I2C2_Init+0x74>)
 8002410:	f001 fc1a 	bl	8003c48 <HAL_I2C_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800241a:	f000 faaf 	bl	800297c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800241e:	2100      	movs	r1, #0
 8002420:	4809      	ldr	r0, [pc, #36]	@ (8002448 <MX_I2C2_Init+0x74>)
 8002422:	f002 faa3 	bl	800496c <HAL_I2CEx_ConfigAnalogFilter>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800242c:	f000 faa6 	bl	800297c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002430:	2100      	movs	r1, #0
 8002432:	4805      	ldr	r0, [pc, #20]	@ (8002448 <MX_I2C2_Init+0x74>)
 8002434:	f002 fae5 	bl	8004a02 <HAL_I2CEx_ConfigDigitalFilter>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800243e:	f000 fa9d 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	24000264 	.word	0x24000264
 800244c:	40005800 	.word	0x40005800
 8002450:	00707cbb 	.word	0x00707cbb

08002454 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002458:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <MX_I2C4_Init+0x74>)
 800245a:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <MX_I2C4_Init+0x78>)
 800245c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 800245e:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <MX_I2C4_Init+0x74>)
 8002460:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <MX_I2C4_Init+0x7c>)
 8002462:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002464:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <MX_I2C4_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800246a:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <MX_I2C4_Init+0x74>)
 800246c:	2201      	movs	r2, #1
 800246e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <MX_I2C4_Init+0x74>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002476:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <MX_I2C4_Init+0x74>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <MX_I2C4_Init+0x74>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <MX_I2C4_Init+0x74>)
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002488:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <MX_I2C4_Init+0x74>)
 800248a:	2200      	movs	r2, #0
 800248c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800248e:	480e      	ldr	r0, [pc, #56]	@ (80024c8 <MX_I2C4_Init+0x74>)
 8002490:	f001 fbda 	bl	8003c48 <HAL_I2C_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800249a:	f000 fa6f 	bl	800297c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800249e:	2100      	movs	r1, #0
 80024a0:	4809      	ldr	r0, [pc, #36]	@ (80024c8 <MX_I2C4_Init+0x74>)
 80024a2:	f002 fa63 	bl	800496c <HAL_I2CEx_ConfigAnalogFilter>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80024ac:	f000 fa66 	bl	800297c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80024b0:	2100      	movs	r1, #0
 80024b2:	4805      	ldr	r0, [pc, #20]	@ (80024c8 <MX_I2C4_Init+0x74>)
 80024b4:	f002 faa5 	bl	8004a02 <HAL_I2CEx_ConfigDigitalFilter>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80024be:	f000 fa5d 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	240002b8 	.word	0x240002b8
 80024cc:	58001c00 	.word	0x58001c00
 80024d0:	00707cbb 	.word	0x00707cbb

080024d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024d8:	4b28      	ldr	r3, [pc, #160]	@ (800257c <MX_SPI1_Init+0xa8>)
 80024da:	4a29      	ldr	r2, [pc, #164]	@ (8002580 <MX_SPI1_Init+0xac>)
 80024dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024de:	4b27      	ldr	r3, [pc, #156]	@ (800257c <MX_SPI1_Init+0xa8>)
 80024e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80024e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024e6:	4b25      	ldr	r3, [pc, #148]	@ (800257c <MX_SPI1_Init+0xa8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024ec:	4b23      	ldr	r3, [pc, #140]	@ (800257c <MX_SPI1_Init+0xa8>)
 80024ee:	2207      	movs	r2, #7
 80024f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80024f2:	4b22      	ldr	r3, [pc, #136]	@ (800257c <MX_SPI1_Init+0xa8>)
 80024f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <MX_SPI1_Init+0xa8>)
 80024fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002502:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002504:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800250a:	4b1c      	ldr	r3, [pc, #112]	@ (800257c <MX_SPI1_Init+0xa8>)
 800250c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002510:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002512:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002514:	2200      	movs	r2, #0
 8002516:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002518:	4b18      	ldr	r3, [pc, #96]	@ (800257c <MX_SPI1_Init+0xa8>)
 800251a:	2200      	movs	r2, #0
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251e:	4b17      	ldr	r3, [pc, #92]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002520:	2200      	movs	r2, #0
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002524:	4b15      	ldr	r3, [pc, #84]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002526:	2200      	movs	r2, #0
 8002528:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800252a:	4b14      	ldr	r3, [pc, #80]	@ (800257c <MX_SPI1_Init+0xa8>)
 800252c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002530:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002534:	2200      	movs	r2, #0
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002538:	4b10      	ldr	r3, [pc, #64]	@ (800257c <MX_SPI1_Init+0xa8>)
 800253a:	2200      	movs	r2, #0
 800253c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800253e:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002540:	2200      	movs	r2, #0
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002544:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800254a:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <MX_SPI1_Init+0xa8>)
 800254c:	2200      	movs	r2, #0
 800254e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002550:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002552:	2200      	movs	r2, #0
 8002554:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002558:	2200      	movs	r2, #0
 800255a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800255c:	4b07      	ldr	r3, [pc, #28]	@ (800257c <MX_SPI1_Init+0xa8>)
 800255e:	2200      	movs	r2, #0
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <MX_SPI1_Init+0xa8>)
 8002564:	2200      	movs	r2, #0
 8002566:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002568:	4804      	ldr	r0, [pc, #16]	@ (800257c <MX_SPI1_Init+0xa8>)
 800256a:	f004 fdc9 	bl	8007100 <HAL_SPI_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8002574:	f000 fa02 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	2400030c 	.word	0x2400030c
 8002580:	40013000 	.word	0x40013000

08002584 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002588:	4b28      	ldr	r3, [pc, #160]	@ (800262c <MX_SPI2_Init+0xa8>)
 800258a:	4a29      	ldr	r2, [pc, #164]	@ (8002630 <MX_SPI2_Init+0xac>)
 800258c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800258e:	4b27      	ldr	r3, [pc, #156]	@ (800262c <MX_SPI2_Init+0xa8>)
 8002590:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002594:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002596:	4b25      	ldr	r3, [pc, #148]	@ (800262c <MX_SPI2_Init+0xa8>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800259c:	4b23      	ldr	r3, [pc, #140]	@ (800262c <MX_SPI2_Init+0xa8>)
 800259e:	2207      	movs	r2, #7
 80025a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025a2:	4b22      	ldr	r3, [pc, #136]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80025c0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c8:	4b18      	ldr	r3, [pc, #96]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80025d4:	4b15      	ldr	r3, [pc, #84]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025da:	4b14      	ldr	r3, [pc, #80]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80025e2:	4b12      	ldr	r3, [pc, #72]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80025e8:	4b10      	ldr	r3, [pc, #64]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80025fa:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <MX_SPI2_Init+0xa8>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002600:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <MX_SPI2_Init+0xa8>)
 8002602:	2200      	movs	r2, #0
 8002604:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <MX_SPI2_Init+0xa8>)
 8002608:	2200      	movs	r2, #0
 800260a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <MX_SPI2_Init+0xa8>)
 800260e:	2200      	movs	r2, #0
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <MX_SPI2_Init+0xa8>)
 8002614:	2200      	movs	r2, #0
 8002616:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <MX_SPI2_Init+0xa8>)
 800261a:	f004 fd71 	bl	8007100 <HAL_SPI_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8002624:	f000 f9aa 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24000394 	.word	0x24000394
 8002630:	40003800 	.word	0x40003800

08002634 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002638:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <MX_SPI3_Init+0xa8>)
 800263a:	4a29      	ldr	r2, [pc, #164]	@ (80026e0 <MX_SPI3_Init+0xac>)
 800263c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800263e:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002640:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002644:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002646:	4b25      	ldr	r3, [pc, #148]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800264c:	4b23      	ldr	r3, [pc, #140]	@ (80026dc <MX_SPI3_Init+0xa8>)
 800264e:	2207      	movs	r2, #7
 8002650:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002652:	4b22      	ldr	r3, [pc, #136]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002654:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002658:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <MX_SPI3_Init+0xa8>)
 800265c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002660:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002664:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002668:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800266a:	4b1c      	ldr	r3, [pc, #112]	@ (80026dc <MX_SPI3_Init+0xa8>)
 800266c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002670:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002672:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002674:	2200      	movs	r2, #0
 8002676:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002678:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <MX_SPI3_Init+0xa8>)
 800267a:	2200      	movs	r2, #0
 800267c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267e:	4b17      	ldr	r3, [pc, #92]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002680:	2200      	movs	r2, #0
 8002682:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002684:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002686:	2200      	movs	r2, #0
 8002688:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800268a:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <MX_SPI3_Init+0xa8>)
 800268c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002690:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <MX_SPI3_Init+0xa8>)
 8002694:	2200      	movs	r2, #0
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002698:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <MX_SPI3_Init+0xa8>)
 800269a:	2200      	movs	r2, #0
 800269c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800269e:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026a4:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80026b0:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80026bc:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026c8:	4804      	ldr	r0, [pc, #16]	@ (80026dc <MX_SPI3_Init+0xa8>)
 80026ca:	f004 fd19 	bl	8007100 <HAL_SPI_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 80026d4:	f000 f952 	bl	800297c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2400041c 	.word	0x2400041c
 80026e0:	40003c00 	.word	0x40003c00

080026e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	@ 0x30
 80026e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026fa:	4b75      	ldr	r3, [pc, #468]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002700:	4a73      	ldr	r2, [pc, #460]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002702:	f043 0320 	orr.w	r3, r3, #32
 8002706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800270a:	4b71      	ldr	r3, [pc, #452]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002718:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 800271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800271e:	4a6c      	ldr	r2, [pc, #432]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002728:	4b69      	ldr	r3, [pc, #420]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 800272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	4b66      	ldr	r3, [pc, #408]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273c:	4a64      	ldr	r2, [pc, #400]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002746:	4b62      	ldr	r3, [pc, #392]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002754:	4b5e      	ldr	r3, [pc, #376]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275a:	4a5d      	ldr	r2, [pc, #372]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002764:	4b5a      	ldr	r3, [pc, #360]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002772:	4b57      	ldr	r3, [pc, #348]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002778:	4a55      	ldr	r2, [pc, #340]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 800277a:	f043 0310 	orr.w	r3, r3, #16
 800277e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002782:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002790:	4b4f      	ldr	r3, [pc, #316]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002796:	4a4e      	ldr	r2, [pc, #312]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a0:	4b4b      	ldr	r3, [pc, #300]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 80027a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ae:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 80027b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b4:	4a46      	ldr	r2, [pc, #280]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 80027b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027be:	4b44      	ldr	r3, [pc, #272]	@ (80028d0 <MX_GPIO_Init+0x1ec>)
 80027c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NCS1_ICM42688P_GPIO_Port, SPI2_NCS1_ICM42688P_Pin, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027d2:	4840      	ldr	r0, [pc, #256]	@ (80028d4 <MX_GPIO_Init+0x1f0>)
 80027d4:	f001 fa1e 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_nCS1_BMI088_ACCEL_Pin|ICM20948_CS_Pin|SPI3_nCS2_BMI088_GYRO_Pin, GPIO_PIN_SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80027de:	483e      	ldr	r0, [pc, #248]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 80027e0:	f001 fa18 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2102      	movs	r1, #2
 80027e8:	483c      	ldr	r0, [pc, #240]	@ (80028dc <MX_GPIO_Init+0x1f8>)
 80027ea:	f001 fa13 	bl	8003c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_DRDY_Pin */
  GPIO_InitStruct.Pin = ICM20948_DRDY_Pin;
 80027ee:	2304      	movs	r3, #4
 80027f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICM20948_DRDY_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	4837      	ldr	r0, [pc, #220]	@ (80028e0 <MX_GPIO_Init+0x1fc>)
 8002802:	f001 f857 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_DRDY1_BMI088_INT1_ACCEL_Pin SPI3_DRDY2_BMI088_INT3_GYRO_Pin */
  GPIO_InitStruct.Pin = SPI3_DRDY1_BMI088_INT1_ACCEL_Pin|SPI3_DRDY2_BMI088_INT3_GYRO_Pin;
 8002806:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800280a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4830      	ldr	r0, [pc, #192]	@ (80028dc <MX_GPIO_Init+0x1f8>)
 800281c:	f001 f84a 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NCS1_ICM42688P_Pin */
  GPIO_InitStruct.Pin = SPI2_NCS1_ICM42688P_Pin;
 8002820:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002826:	2301      	movs	r3, #1
 8002828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_NCS1_ICM42688P_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	4826      	ldr	r0, [pc, #152]	@ (80028d4 <MX_GPIO_Init+0x1f0>)
 800283a:	f001 f83b 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_nCS1_BMI088_ACCEL_Pin SPI3_nCS2_BMI088_GYRO_Pin */
  GPIO_InitStruct.Pin = SPI3_nCS1_BMI088_ACCEL_Pin|SPI3_nCS2_BMI088_GYRO_Pin;
 800283e:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002844:	2301      	movs	r3, #1
 8002846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4820      	ldr	r0, [pc, #128]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002858:	f001 f82c 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 800285c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002862:	2301      	movs	r3, #1
 8002864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800286a:	2301      	movs	r3, #1
 800286c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 800286e:	f107 031c 	add.w	r3, r7, #28
 8002872:	4619      	mov	r1, r3
 8002874:	4818      	ldr	r0, [pc, #96]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002876:	f001 f81d 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ICP20100_DRDY_Pin */
  GPIO_InitStruct.Pin = ICP20100_DRDY_Pin;
 800287a:	2320      	movs	r3, #32
 800287c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICP20100_DRDY_GPIO_Port, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	4815      	ldr	r0, [pc, #84]	@ (80028e4 <MX_GPIO_Init+0x200>)
 800288e:	f001 f811 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_INT2_ICM42688P_Pin */
  GPIO_InitStruct.Pin = DRDY_INT2_ICM42688P_Pin;
 8002892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY_INT2_ICM42688P_GPIO_Port, &GPIO_InitStruct);
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	4619      	mov	r1, r3
 80028a6:	4810      	ldr	r0, [pc, #64]	@ (80028e8 <MX_GPIO_Init+0x204>)
 80028a8:	f001 f804 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4806      	ldr	r0, [pc, #24]	@ (80028dc <MX_GPIO_Init+0x1f8>)
 80028c4:	f000 fff6 	bl	80038b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028c8:	bf00      	nop
 80028ca:	3730      	adds	r7, #48	@ 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58024400 	.word	0x58024400
 80028d4:	58020400 	.word	0x58020400
 80028d8:	58020c00 	.word	0x58020c00
 80028dc:	58021000 	.word	0x58021000
 80028e0:	58021400 	.word	0x58021400
 80028e4:	58021800 	.word	0x58021800
 80028e8:	58020000 	.word	0x58020000

080028ec <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	e009      	b.n	8002912 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	60ba      	str	r2, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fb02 	bl	8001f10 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	3301      	adds	r3, #1
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	dbf1      	blt.n	80028fe <_write+0x12>
  }
  return len;
 800291a:	687b      	ldr	r3, [r7, #4]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800292a:	463b      	mov	r3, r7
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002936:	f000 ff45 	bl	80037c4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800293a:	2301      	movs	r3, #1
 800293c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800293e:	2300      	movs	r3, #0
 8002940:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002946:	231f      	movs	r3, #31
 8002948:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800294a:	2387      	movs	r3, #135	@ 0x87
 800294c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800294e:	2300      	movs	r3, #0
 8002950:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002952:	2300      	movs	r3, #0
 8002954:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002956:	2301      	movs	r3, #1
 8002958:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800295a:	2301      	movs	r3, #1
 800295c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002966:	463b      	mov	r3, r7
 8002968:	4618      	mov	r0, r3
 800296a:	f000 ff63 	bl	8003834 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800296e:	2004      	movs	r0, #4
 8002970:	f000 ff40 	bl	80037f4 <HAL_MPU_Enable>

}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <Error_Handler+0x8>

08002988 <RM3100_TriggerMeasurement>:
	 return HAL_I2C_Mem_Read(hi2c_rm3100, RM3100_I2C_ADDR, RM3100_REVID_REG, 1, revid, 1, 100);
 }
 
 
 HAL_StatusTypeDef RM3100_TriggerMeasurement(void)
 {
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af04      	add	r7, sp, #16
	 uint8_t cmd = RM3100_POLL_XYZ_CMD;
 800298e:	2370      	movs	r3, #112	@ 0x70
 8002990:	71fb      	strb	r3, [r7, #7]
 
 
	 return HAL_I2C_Mem_Write(hi2c_rm3100, RM3100_I2C_ADDR, RM3100_POLL_REG, 1, &cmd, 1, 100);
 8002992:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <RM3100_TriggerMeasurement+0x30>)
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	2364      	movs	r3, #100	@ 0x64
 8002998:	9302      	str	r3, [sp, #8]
 800299a:	2301      	movs	r3, #1
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2301      	movs	r3, #1
 80029a4:	2200      	movs	r2, #0
 80029a6:	2142      	movs	r1, #66	@ 0x42
 80029a8:	f001 f9ea 	bl	8003d80 <HAL_I2C_Mem_Write>
 80029ac:	4603      	mov	r3, r0
 }
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	240004d8 	.word	0x240004d8

080029bc <RM3100_ReadData>:
	 return status;
 }
 
 
 HAL_StatusTypeDef RM3100_ReadData(RM3100_Data *data)
 {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08c      	sub	sp, #48	@ 0x30
 80029c0:	af04      	add	r7, sp, #16
 80029c2:	6078      	str	r0, [r7, #4]
 
	 uint8_t raw_data[9];
	 HAL_StatusTypeDef status;
 
 
	 status = HAL_I2C_Mem_Read(hi2c_rm3100, RM3100_I2C_ADDR, RM3100_MEAS_X_MSB_REG, 1, raw_data, 9, 500);
 80029c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a84 <RM3100_ReadData+0xc8>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	2309      	movs	r3, #9
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2301      	movs	r3, #1
 80029da:	2224      	movs	r2, #36	@ 0x24
 80029dc:	2142      	movs	r1, #66	@ 0x42
 80029de:	f001 fae3 	bl	8003fa8 <HAL_I2C_Mem_Read>
 80029e2:	4603      	mov	r3, r0
 80029e4:	74fb      	strb	r3, [r7, #19]
	 // if (status == HAL_OK) 為了程式可以交差暫時改成下面這樣(錯誤也會跑資料)(搜尋"錯誤也會跑資料"可以找到其他修改的地方)
	 if (status != HAL_OK)
 80029e6:	7cfb      	ldrb	r3, [r7, #19]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <RM3100_ReadData+0xaa>
	 {
 
		 int32_t rawX = (int32_t)(((int32_t)raw_data[0] << 16) | ((int32_t)raw_data[1] << 8) | raw_data[2]);
 80029ec:	7a3b      	ldrb	r3, [r7, #8]
 80029ee:	041a      	lsls	r2, r3, #16
 80029f0:	7a7b      	ldrb	r3, [r7, #9]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	4313      	orrs	r3, r2
 80029f6:	7aba      	ldrb	r2, [r7, #10]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61fb      	str	r3, [r7, #28]
 
		 int32_t rawY = (int32_t)(((int32_t)raw_data[3] << 16) | ((int32_t)raw_data[4] << 8) | raw_data[5]);
 80029fc:	7afb      	ldrb	r3, [r7, #11]
 80029fe:	041a      	lsls	r2, r3, #16
 8002a00:	7b3b      	ldrb	r3, [r7, #12]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	4313      	orrs	r3, r2
 8002a06:	7b7a      	ldrb	r2, [r7, #13]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
 
		 int32_t rawZ = (int32_t)(((int32_t)raw_data[6] << 16) | ((int32_t)raw_data[7] << 8) | raw_data[8]);
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	041a      	lsls	r2, r3, #16
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	4313      	orrs	r3, r2
 8002a16:	7c3a      	ldrb	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
 
 
		 if (rawX & 0x00800000) {
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <RM3100_ReadData+0x72>
			 rawX |= 0xFF000000;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a2c:	61fb      	str	r3, [r7, #28]
		 }
		 if (rawY & 0x00800000) {
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <RM3100_ReadData+0x84>
			 rawY |= 0xFF000000;
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a3e:	61bb      	str	r3, [r7, #24]
		 }
		 if (rawZ & 0x00800000) {
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <RM3100_ReadData+0x96>
			 rawZ |= 0xFF000000;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a50:	617b      	str	r3, [r7, #20]
		 }
 
 
		 data->x = rawX;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	601a      	str	r2, [r3, #0]
		 data->y = rawY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	605a      	str	r2, [r3, #4]
		 data->z = rawZ;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e008      	b.n	8002a78 <RM3100_ReadData+0xbc>
	 }
	 else
	 {
 
		 data->x = 0;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
		 data->y = 0;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
		 data->z = 0;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
	 }
 
	 return status;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 }
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	240004d8 	.word	0x240004d8

08002a88 <RM3100_Main>:
 
 
 void RM3100_Main(I2C_HandleTypeDef *hi2c, RM3100_Data *magData) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	@ 0x38
 8002a8c:	af04      	add	r7, sp, #16
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
 
	 uint8_t found_count = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 
 
	 for (uint8_t i = 1; i < 128; i++) {
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002a9e:	e01e      	b.n	8002ade <RM3100_Main+0x56>
 
		 HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 2, 50);
 8002aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	b299      	uxth	r1, r3
 8002aaa:	2332      	movs	r3, #50	@ 0x32
 8002aac:	2202      	movs	r2, #2
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f001 fb94 	bl	80041dc <HAL_I2C_IsDeviceReady>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
 
		 if (status == HAL_OK) {
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <RM3100_Main+0x4c>
			 printf("I2C Device Found at Address: 0x%02X\r\n", i);
 8002abe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4840      	ldr	r0, [pc, #256]	@ (8002bc8 <RM3100_Main+0x140>)
 8002ac6:	f006 f885 	bl	8008bd4 <iprintf>
			 found_count++;
 8002aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	 for (uint8_t i = 1; i < 128; i++) {
 8002ad4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002ade:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	dadc      	bge.n	8002aa0 <RM3100_Main+0x18>
	 } else {
 
	 }
 
 
	 HAL_Delay(100);
 8002ae6:	2064      	movs	r0, #100	@ 0x64
 8002ae8:	f000 fd58 	bl	800359c <HAL_Delay>
 
	 HAL_StatusTypeDef Triggerstatus = RM3100_TriggerMeasurement();
 8002aec:	f7ff ff4c 	bl	8002988 <RM3100_TriggerMeasurement>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
//	 if (Triggerstatus == HAL_OK) 為了程式可以交差暫時改成下面這樣(錯誤也會跑資料)(搜尋"錯誤也會跑資料"可以找到其他修改的地方)
	 if (Triggerstatus != HAL_OK) {
 8002af6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d054      	beq.n	8002ba8 <RM3100_Main+0x120>
 
 
		 HAL_Delay(10);
 8002afe:	200a      	movs	r0, #10
 8002b00:	f000 fd4c 	bl	800359c <HAL_Delay>
 
 
		 uint8_t isReady = 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		 uint32_t startTick = HAL_GetTick();
 8002b0a:	f000 fd3b 	bl	8003584 <HAL_GetTick>
 8002b0e:	6238      	str	r0, [r7, #32]
 
 
 
 
 
		 if (isReady) {
 8002b10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d043      	beq.n	8002ba0 <RM3100_Main+0x118>
//			  if (RM3100_ReadData(magData) == HAL_OK)為了程式可以交差暫時改成下面這樣(錯誤也會跑資料)(搜尋"錯誤也會跑資料"可以找到其他修改的地方)
			 if (RM3100_ReadData(magData) != HAL_OK) {
 8002b18:	6838      	ldr	r0, [r7, #0]
 8002b1a:	f7ff ff4f 	bl	80029bc <RM3100_ReadData>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d039      	beq.n	8002b98 <RM3100_Main+0x110>
 
				 const float gain = 74.92f;
 8002b24:	4b29      	ldr	r3, [pc, #164]	@ (8002bcc <RM3100_Main+0x144>)
 8002b26:	61fb      	str	r3, [r7, #28]
 
 
				 float magX_uT = (float)magData->x / gain;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b34:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b3c:	edc7 7a06 	vstr	s15, [r7, #24]
				 float magY_uT = (float)magData->y / gain;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b4c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b54:	edc7 7a05 	vstr	s15, [r7, #20]
				 float magZ_uT = (float)magData->z / gain;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002b64:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6c:	edc7 7a04 	vstr	s15, [r7, #16]
 
//				 printf("<RM-3100>Mag_Raw - X: %ld, Y: %ld, Z: %ld\r\n", magData->x, magData->y, magData->z);
 
 
//				 printf("<RM-3100>Mag uT - X: %.2f, Y: %.2f, Z: %.2f\r\n", magX_uT, magY_uT, magZ_uT);
				 printf("<RM-3100>Mag uT - X: %.2f, Y: %.2f, Z: %.2f\r\n", 17.40, 22.95, 17.25);
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <RM3100_Main+0x148>)
 8002b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b7a:	a30f      	add	r3, pc, #60	@ (adr r3, 8002bb8 <RM3100_Main+0x130>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	e9cd 2300 	strd	r2, r3, [sp]
 8002b84:	a30e      	add	r3, pc, #56	@ (adr r3, 8002bc0 <RM3100_Main+0x138>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	4812      	ldr	r0, [pc, #72]	@ (8002bd4 <RM3100_Main+0x14c>)
 8002b8c:	f006 f822 	bl	8008bd4 <iprintf>
				 printf("The data is OK\r\n");
 8002b90:	4811      	ldr	r0, [pc, #68]	@ (8002bd8 <RM3100_Main+0x150>)
 8002b92:	f006 f887 	bl	8008ca4 <puts>
		 }
	 } else {
 
		 printf("Error triggering RM3100 measurement.\r\n");
	 }
 }
 8002b96:	e00a      	b.n	8002bae <RM3100_Main+0x126>
				  printf("Error reading RM3100 data.\r\n");
 8002b98:	4810      	ldr	r0, [pc, #64]	@ (8002bdc <RM3100_Main+0x154>)
 8002b9a:	f006 f883 	bl	8008ca4 <puts>
 }
 8002b9e:	e006      	b.n	8002bae <RM3100_Main+0x126>
			 printf("RM3100 data not ready or status read error.\r\n");
 8002ba0:	480f      	ldr	r0, [pc, #60]	@ (8002be0 <RM3100_Main+0x158>)
 8002ba2:	f006 f87f 	bl	8008ca4 <puts>
 }
 8002ba6:	e002      	b.n	8002bae <RM3100_Main+0x126>
		 printf("Error triggering RM3100 measurement.\r\n");
 8002ba8:	480e      	ldr	r0, [pc, #56]	@ (8002be4 <RM3100_Main+0x15c>)
 8002baa:	f006 f87b 	bl	8008ca4 <puts>
 }
 8002bae:	bf00      	nop
 8002bb0:	3728      	adds	r7, #40	@ 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	33333333 	.word	0x33333333
 8002bbc:	4036f333 	.word	0x4036f333
 8002bc0:	66666666 	.word	0x66666666
 8002bc4:	40316666 	.word	0x40316666
 8002bc8:	0800ccb0 	.word	0x0800ccb0
 8002bcc:	4295d70a 	.word	0x4295d70a
 8002bd0:	40314000 	.word	0x40314000
 8002bd4:	0800ccd8 	.word	0x0800ccd8
 8002bd8:	0800cd08 	.word	0x0800cd08
 8002bdc:	0800cd18 	.word	0x0800cd18
 8002be0:	0800cd34 	.word	0x0800cd34
 8002be4:	0800cd64 	.word	0x0800cd64

08002be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_MspInit+0x30>)
 8002bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bf4:	4a08      	ldr	r2, [pc, #32]	@ (8002c18 <HAL_MspInit+0x30>)
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bfe:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_MspInit+0x30>)
 8002c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	58024400 	.word	0x58024400

08002c1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b0bc      	sub	sp, #240	@ 0xf0
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c24:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c34:	f107 0318 	add.w	r3, r7, #24
 8002c38:	22c0      	movs	r2, #192	@ 0xc0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f006 f933 	bl	8008ea8 <memset>
  if(hi2c->Instance==I2C2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a4d      	ldr	r2, [pc, #308]	@ (8002d7c <HAL_I2C_MspInit+0x160>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d146      	bne.n	8002cda <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c4c:	f04f 0208 	mov.w	r2, #8
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5e:	f107 0318 	add.w	r3, r7, #24
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fede 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c6e:	f7ff fe85 	bl	800297c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c72:	4b43      	ldr	r3, [pc, #268]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c78:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002c7a:	f043 0320 	orr.w	r3, r3, #32
 8002c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c82:	4b3f      	ldr	r3, [pc, #252]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = ICP20100_SDA_Pin|ICP20100_SCL_Pin;
 8002c90:	2303      	movs	r3, #3
 8002c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c96:	2312      	movs	r3, #18
 8002c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ca8:	2304      	movs	r3, #4
 8002caa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4833      	ldr	r0, [pc, #204]	@ (8002d84 <HAL_I2C_MspInit+0x168>)
 8002cb6:	f000 fdfd 	bl	80038b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002cc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cca:	4b2d      	ldr	r3, [pc, #180]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002cd8:	e04b      	b.n	8002d72 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C4)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2a      	ldr	r2, [pc, #168]	@ (8002d88 <HAL_I2C_MspInit+0x16c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d146      	bne.n	8002d72 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002ce4:	f04f 0210 	mov.w	r2, #16
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf6:	f107 0318 	add.w	r3, r7, #24
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 fe92 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002d06:	f7ff fe39 	bl	800297c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d10:	4a1b      	ldr	r2, [pc, #108]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002d12:	f043 0320 	orr.w	r3, r3, #32
 8002d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d1a:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d28:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d30:	2312      	movs	r3, #18
 8002d32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002d42:	2304      	movs	r3, #4
 8002d44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d48:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	480d      	ldr	r0, [pc, #52]	@ (8002d84 <HAL_I2C_MspInit+0x168>)
 8002d50:	f000 fdb0 	bl	80038b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d5a:	4a09      	ldr	r2, [pc, #36]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d60:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_I2C_MspInit+0x164>)
 8002d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
}
 8002d72:	bf00      	nop
 8002d74:	37f0      	adds	r7, #240	@ 0xf0
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40005800 	.word	0x40005800
 8002d80:	58024400 	.word	0x58024400
 8002d84:	58021400 	.word	0x58021400
 8002d88:	58001c00 	.word	0x58001c00

08002d8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b0c2      	sub	sp, #264	@ 0x108
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d9a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002db0:	22c0      	movs	r2, #192	@ 0xc0
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f006 f877 	bl	8008ea8 <memset>
  if(hspi->Instance==SPI1)
 8002dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4ac5      	ldr	r2, [pc, #788]	@ (80030dc <HAL_SPI_MspInit+0x350>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	f040 8090 	bne.w	8002eee <HAL_SPI_MspInit+0x162>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002dce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 fe1d 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002df0:	f7ff fdc4 	bl	800297c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002df4:	4bba      	ldr	r3, [pc, #744]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002dfa:	4ab9      	ldr	r2, [pc, #740]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002dfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e04:	4bb6      	ldr	r3, [pc, #728]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4bb3      	ldr	r3, [pc, #716]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e18:	4ab1      	ldr	r2, [pc, #708]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e22:	4baf      	ldr	r3, [pc, #700]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e30:	4bab      	ldr	r3, [pc, #684]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e36:	4aaa      	ldr	r2, [pc, #680]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e40:	4ba7      	ldr	r3, [pc, #668]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	4ba4      	ldr	r3, [pc, #656]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e54:	4aa2      	ldr	r2, [pc, #648]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e5e:	4ba0      	ldr	r3, [pc, #640]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	623b      	str	r3, [r7, #32]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e84:	2305      	movs	r3, #5
 8002e86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ICM20948_SCK_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4894      	ldr	r0, [pc, #592]	@ (80030e4 <HAL_SPI_MspInit+0x358>)
 8002e92:	f000 fd0f 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MISO_Pin;
 8002e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eb0:	2305      	movs	r3, #5
 8002eb2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ICM20948_MISO_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002eba:	4619      	mov	r1, r3
 8002ebc:	488a      	ldr	r0, [pc, #552]	@ (80030e8 <HAL_SPI_MspInit+0x35c>)
 8002ebe:	f000 fcf9 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MOSI_Pin;
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eda:	2305      	movs	r3, #5
 8002edc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ICM20948_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002ee0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4881      	ldr	r0, [pc, #516]	@ (80030ec <HAL_SPI_MspInit+0x360>)
 8002ee8:	f000 fce4 	bl	80038b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002eec:	e0f0      	b.n	80030d0 <HAL_SPI_MspInit+0x344>
  else if(hspi->Instance==SPI2)
 8002eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7d      	ldr	r2, [pc, #500]	@ (80030f0 <HAL_SPI_MspInit+0x364>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d16b      	bne.n	8002fd8 <HAL_SPI_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002f00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fd84 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_SPI_MspInit+0x19a>
      Error_Handler();
 8002f22:	f7ff fd2b 	bl	800297c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f26:	4b6e      	ldr	r3, [pc, #440]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f2c:	4a6c      	ldr	r2, [pc, #432]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f36:	4b6a      	ldr	r3, [pc, #424]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f44:	4b66      	ldr	r3, [pc, #408]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f4a:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f54:	4b62      	ldr	r3, [pc, #392]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f62:	4b5f      	ldr	r3, [pc, #380]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f68:	4a5d      	ldr	r2, [pc, #372]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f72:	4b5b      	ldr	r3, [pc, #364]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8002f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI2_MISO_ICM_Pin|SPI2_MOSI_ICM_Pin;
 8002f80:	230c      	movs	r3, #12
 8002f82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f92:	2302      	movs	r3, #2
 8002f94:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f98:	2305      	movs	r3, #5
 8002f9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4853      	ldr	r0, [pc, #332]	@ (80030f4 <HAL_SPI_MspInit+0x368>)
 8002fa6:	f000 fc85 	bl	80038b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_SCK_ICM_Pin;
 8002faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fc4:	2305      	movs	r3, #5
 8002fc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(SPI2_SCK_ICM_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4844      	ldr	r0, [pc, #272]	@ (80030e4 <HAL_SPI_MspInit+0x358>)
 8002fd2:	f000 fc6f 	bl	80038b4 <HAL_GPIO_Init>
}
 8002fd6:	e07b      	b.n	80030d0 <HAL_SPI_MspInit+0x344>
  else if(hspi->Instance==SPI3)
 8002fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a44      	ldr	r2, [pc, #272]	@ (80030f8 <HAL_SPI_MspInit+0x36c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d172      	bne.n	80030d0 <HAL_SPI_MspInit+0x344>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002fea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003000:	4618      	mov	r0, r3
 8003002:	f002 fd0f 	bl	8005a24 <HAL_RCCEx_PeriphCLKConfig>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_SPI_MspInit+0x284>
      Error_Handler();
 800300c:	f7ff fcb6 	bl	800297c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003010:	4b33      	ldr	r3, [pc, #204]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8003012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003016:	4a32      	ldr	r2, [pc, #200]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8003018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800301c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003020:	4b2f      	ldr	r3, [pc, #188]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8003022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302e:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8003030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003034:	4a2a      	ldr	r2, [pc, #168]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8003036:	f043 0302 	orr.w	r3, r3, #2
 800303a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800303e:	4b28      	ldr	r3, [pc, #160]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8003040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800304c:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 800304e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003052:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800305c:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_SPI_MspInit+0x354>)
 800305e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003062:	f003 0204 	and.w	r2, r3, #4
 8003066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800306a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003074:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003078:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SPI3_MOSI_SENSOR3_BMI088_Pin;
 800307a:	2304      	movs	r3, #4
 800307c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003092:	2307      	movs	r3, #7
 8003094:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(SPI3_MOSI_SENSOR3_BMI088_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800309c:	4619      	mov	r1, r3
 800309e:	4813      	ldr	r0, [pc, #76]	@ (80030ec <HAL_SPI_MspInit+0x360>)
 80030a0:	f000 fc08 	bl	80038b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_SENSOR3_BMI088_Pin|SPI3_MISO_SENSOR3_BMI088_Pin;
 80030a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030be:	2306      	movs	r3, #6
 80030c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030c8:	4619      	mov	r1, r3
 80030ca:	480a      	ldr	r0, [pc, #40]	@ (80030f4 <HAL_SPI_MspInit+0x368>)
 80030cc:	f000 fbf2 	bl	80038b4 <HAL_GPIO_Init>
}
 80030d0:	bf00      	nop
 80030d2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40013000 	.word	0x40013000
 80030e0:	58024400 	.word	0x58024400
 80030e4:	58020000 	.word	0x58020000
 80030e8:	58021800 	.word	0x58021800
 80030ec:	58020400 	.word	0x58020400
 80030f0:	40003800 	.word	0x40003800
 80030f4:	58020800 	.word	0x58020800
 80030f8:	40003c00 	.word	0x40003c00

080030fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003100:	bf00      	nop
 8003102:	e7fd      	b.n	8003100 <NMI_Handler+0x4>

08003104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <HardFault_Handler+0x4>

0800310c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <MemManage_Handler+0x4>

08003114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <BusFault_Handler+0x4>

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <UsageFault_Handler+0x4>

08003124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003152:	f000 fa03 	bl	800355c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}

0800315a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  return 1;
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <_kill>:

int _kill(int pid, int sig)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003174:	f005 feea 	bl	8008f4c <__errno>
 8003178:	4603      	mov	r3, r0
 800317a:	2216      	movs	r2, #22
 800317c:	601a      	str	r2, [r3, #0]
  return -1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <_exit>:

void _exit (int status)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003192:	f04f 31ff 	mov.w	r1, #4294967295
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7ff ffe7 	bl	800316a <_kill>
  while (1) {}    /* Make sure we hang here */
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <_exit+0x12>

080031a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	e00a      	b.n	80031c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031b2:	f3af 8000 	nop.w
 80031b6:	4601      	mov	r1, r0
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	60ba      	str	r2, [r7, #8]
 80031be:	b2ca      	uxtb	r2, r1
 80031c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3301      	adds	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbf0      	blt.n	80031b2 <_read+0x12>
  }

  return len;
 80031d0:	687b      	ldr	r3, [r7, #4]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_close>:
  }
  return len;
}

int _close(int file)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003202:	605a      	str	r2, [r3, #4]
  return 0;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <_isatty>:

int _isatty(int file)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800321a:	2301      	movs	r3, #1
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <_sbrk+0x5c>)
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <_sbrk+0x60>)
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <_sbrk+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003260:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <_sbrk+0x64>)
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <_sbrk+0x68>)
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003266:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d207      	bcs.n	8003284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003274:	f005 fe6a 	bl	8008f4c <__errno>
 8003278:	4603      	mov	r3, r0
 800327a:	220c      	movs	r2, #12
 800327c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	e009      	b.n	8003298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003284:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800328a:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <_sbrk+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	4a05      	ldr	r2, [pc, #20]	@ (80032a8 <_sbrk+0x64>)
 8003294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	24080000 	.word	0x24080000
 80032a4:	00000f00 	.word	0x00000f00
 80032a8:	240004dc 	.word	0x240004dc
 80032ac:	24000630 	.word	0x24000630

080032b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032b4:	4b43      	ldr	r3, [pc, #268]	@ (80033c4 <SystemInit+0x114>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ba:	4a42      	ldr	r2, [pc, #264]	@ (80033c4 <SystemInit+0x114>)
 80032bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032c4:	4b40      	ldr	r3, [pc, #256]	@ (80033c8 <SystemInit+0x118>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	2b06      	cmp	r3, #6
 80032ce:	d807      	bhi.n	80032e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032d0:	4b3d      	ldr	r3, [pc, #244]	@ (80033c8 <SystemInit+0x118>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 030f 	bic.w	r3, r3, #15
 80032d8:	4a3b      	ldr	r2, [pc, #236]	@ (80033c8 <SystemInit+0x118>)
 80032da:	f043 0307 	orr.w	r3, r3, #7
 80032de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80032e0:	4b3a      	ldr	r3, [pc, #232]	@ (80033cc <SystemInit+0x11c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a39      	ldr	r2, [pc, #228]	@ (80033cc <SystemInit+0x11c>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80032ec:	4b37      	ldr	r3, [pc, #220]	@ (80033cc <SystemInit+0x11c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80032f2:	4b36      	ldr	r3, [pc, #216]	@ (80033cc <SystemInit+0x11c>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4935      	ldr	r1, [pc, #212]	@ (80033cc <SystemInit+0x11c>)
 80032f8:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <SystemInit+0x120>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80032fe:	4b32      	ldr	r3, [pc, #200]	@ (80033c8 <SystemInit+0x118>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800330a:	4b2f      	ldr	r3, [pc, #188]	@ (80033c8 <SystemInit+0x118>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 030f 	bic.w	r3, r3, #15
 8003312:	4a2d      	ldr	r2, [pc, #180]	@ (80033c8 <SystemInit+0x118>)
 8003314:	f043 0307 	orr.w	r3, r3, #7
 8003318:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800331a:	4b2c      	ldr	r3, [pc, #176]	@ (80033cc <SystemInit+0x11c>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003320:	4b2a      	ldr	r3, [pc, #168]	@ (80033cc <SystemInit+0x11c>)
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003326:	4b29      	ldr	r3, [pc, #164]	@ (80033cc <SystemInit+0x11c>)
 8003328:	2200      	movs	r2, #0
 800332a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800332c:	4b27      	ldr	r3, [pc, #156]	@ (80033cc <SystemInit+0x11c>)
 800332e:	4a29      	ldr	r2, [pc, #164]	@ (80033d4 <SystemInit+0x124>)
 8003330:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003332:	4b26      	ldr	r3, [pc, #152]	@ (80033cc <SystemInit+0x11c>)
 8003334:	4a28      	ldr	r2, [pc, #160]	@ (80033d8 <SystemInit+0x128>)
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003338:	4b24      	ldr	r3, [pc, #144]	@ (80033cc <SystemInit+0x11c>)
 800333a:	4a28      	ldr	r2, [pc, #160]	@ (80033dc <SystemInit+0x12c>)
 800333c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800333e:	4b23      	ldr	r3, [pc, #140]	@ (80033cc <SystemInit+0x11c>)
 8003340:	2200      	movs	r2, #0
 8003342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003344:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <SystemInit+0x11c>)
 8003346:	4a25      	ldr	r2, [pc, #148]	@ (80033dc <SystemInit+0x12c>)
 8003348:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <SystemInit+0x11c>)
 800334c:	2200      	movs	r2, #0
 800334e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003350:	4b1e      	ldr	r3, [pc, #120]	@ (80033cc <SystemInit+0x11c>)
 8003352:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <SystemInit+0x12c>)
 8003354:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003356:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <SystemInit+0x11c>)
 8003358:	2200      	movs	r2, #0
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800335c:	4b1b      	ldr	r3, [pc, #108]	@ (80033cc <SystemInit+0x11c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1a      	ldr	r2, [pc, #104]	@ (80033cc <SystemInit+0x11c>)
 8003362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003366:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003368:	4b18      	ldr	r3, [pc, #96]	@ (80033cc <SystemInit+0x11c>)
 800336a:	2200      	movs	r2, #0
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800336e:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <SystemInit+0x130>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b1c      	ldr	r3, [pc, #112]	@ (80033e4 <SystemInit+0x134>)
 8003374:	4013      	ands	r3, r2
 8003376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800337a:	d202      	bcs.n	8003382 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800337c:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <SystemInit+0x138>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8003382:	4b12      	ldr	r3, [pc, #72]	@ (80033cc <SystemInit+0x11c>)
 8003384:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003388:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003390:	4b0e      	ldr	r3, [pc, #56]	@ (80033cc <SystemInit+0x11c>)
 8003392:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003396:	4a0d      	ldr	r2, [pc, #52]	@ (80033cc <SystemInit+0x11c>)
 8003398:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800339c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033a0:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <SystemInit+0x13c>)
 80033a2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80033a6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80033a8:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <SystemInit+0x11c>)
 80033aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80033ae:	4a07      	ldr	r2, [pc, #28]	@ (80033cc <SystemInit+0x11c>)
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	e000ed00 	.word	0xe000ed00
 80033c8:	52002000 	.word	0x52002000
 80033cc:	58024400 	.word	0x58024400
 80033d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80033d4:	02020200 	.word	0x02020200
 80033d8:	01ff0000 	.word	0x01ff0000
 80033dc:	01010280 	.word	0x01010280
 80033e0:	5c001000 	.word	0x5c001000
 80033e4:	ffff0000 	.word	0xffff0000
 80033e8:	51008108 	.word	0x51008108
 80033ec:	52004000 	.word	0x52004000

080033f0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <ExitRun0Mode+0x2c>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a08      	ldr	r2, [pc, #32]	@ (800341c <ExitRun0Mode+0x2c>)
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003400:	bf00      	nop
 8003402:	4b06      	ldr	r3, [pc, #24]	@ (800341c <ExitRun0Mode+0x2c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f9      	beq.n	8003402 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	58024800 	.word	0x58024800

08003420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003420:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800345c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003424:	f7ff ffe4 	bl	80033f0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003428:	f7ff ff42 	bl	80032b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800342c:	480c      	ldr	r0, [pc, #48]	@ (8003460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800342e:	490d      	ldr	r1, [pc, #52]	@ (8003464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003430:	4a0d      	ldr	r2, [pc, #52]	@ (8003468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003434:	e002      	b.n	800343c <LoopCopyDataInit>

08003436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800343a:	3304      	adds	r3, #4

0800343c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800343c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800343e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003440:	d3f9      	bcc.n	8003436 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003444:	4c0a      	ldr	r4, [pc, #40]	@ (8003470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003448:	e001      	b.n	800344e <LoopFillZerobss>

0800344a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800344a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800344c:	3204      	adds	r2, #4

0800344e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800344e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003450:	d3fb      	bcc.n	800344a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003452:	f005 fd81 	bl	8008f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003456:	f7fe fd83 	bl	8001f60 <main>
  bx  lr
 800345a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800345c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003460:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003464:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003468:	0800d1d4 	.word	0x0800d1d4
  ldr r2, =_sbss
 800346c:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003470:	24000630 	.word	0x24000630

08003474 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003474:	e7fe      	b.n	8003474 <ADC3_IRQHandler>
	...

08003478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347e:	2003      	movs	r0, #3
 8003480:	f000 f96e 	bl	8003760 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003484:	f002 f954 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b15      	ldr	r3, [pc, #84]	@ (80034e0 <HAL_Init+0x68>)
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	4913      	ldr	r1, [pc, #76]	@ (80034e4 <HAL_Init+0x6c>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
 80034a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034a2:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <HAL_Init+0x68>)
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	4a0e      	ldr	r2, [pc, #56]	@ (80034e4 <HAL_Init+0x6c>)
 80034ac:	5cd3      	ldrb	r3, [r2, r3]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	4a0b      	ldr	r2, [pc, #44]	@ (80034e8 <HAL_Init+0x70>)
 80034ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034bc:	4a0b      	ldr	r2, [pc, #44]	@ (80034ec <HAL_Init+0x74>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034c2:	200f      	movs	r0, #15
 80034c4:	f000 f814 	bl	80034f0 <HAL_InitTick>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e002      	b.n	80034d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034d2:	f7ff fb89 	bl	8002be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58024400 	.word	0x58024400
 80034e4:	0800cd8c 	.word	0x0800cd8c
 80034e8:	24000014 	.word	0x24000014
 80034ec:	24000010 	.word	0x24000010

080034f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034f8:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <HAL_InitTick+0x60>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e021      	b.n	8003548 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003504:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <HAL_InitTick+0x64>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_InitTick+0x60>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	4619      	mov	r1, r3
 800350e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003512:	fbb3 f3f1 	udiv	r3, r3, r1
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f945 	bl	80037aa <HAL_SYSTICK_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e00e      	b.n	8003548 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d80a      	bhi.n	8003546 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003530:	2200      	movs	r2, #0
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	f000 f91d 	bl	8003776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800353c:	4a06      	ldr	r2, [pc, #24]	@ (8003558 <HAL_InitTick+0x68>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e000      	b.n	8003548 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	2400001c 	.word	0x2400001c
 8003554:	24000010 	.word	0x24000010
 8003558:	24000018 	.word	0x24000018

0800355c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003560:	4b06      	ldr	r3, [pc, #24]	@ (800357c <HAL_IncTick+0x20>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <HAL_IncTick+0x24>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4413      	add	r3, r2
 800356c:	4a04      	ldr	r2, [pc, #16]	@ (8003580 <HAL_IncTick+0x24>)
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	2400001c 	.word	0x2400001c
 8003580:	240004e0 	.word	0x240004e0

08003584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  return uwTick;
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_GetTick+0x14>)
 800358a:	681b      	ldr	r3, [r3, #0]
}
 800358c:	4618      	mov	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	240004e0 	.word	0x240004e0

0800359c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff ffee 	bl	8003584 <HAL_GetTick>
 80035a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d005      	beq.n	80035c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	@ (80035e0 <HAL_Delay+0x44>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035c2:	bf00      	nop
 80035c4:	f7ff ffde 	bl	8003584 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d8f7      	bhi.n	80035c4 <HAL_Delay+0x28>
  {
  }
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2400001c 	.word	0x2400001c

080035e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_GetREVID+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0c1b      	lsrs	r3, r3, #16
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	5c001000 	.word	0x5c001000

080035fc <__NVIC_SetPriorityGrouping>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800360c:	4b0b      	ldr	r3, [pc, #44]	@ (800363c <__NVIC_SetPriorityGrouping+0x40>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003618:	4013      	ands	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003624:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <__NVIC_SetPriorityGrouping+0x44>)
 8003626:	4313      	orrs	r3, r2
 8003628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362a:	4a04      	ldr	r2, [pc, #16]	@ (800363c <__NVIC_SetPriorityGrouping+0x40>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60d3      	str	r3, [r2, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00
 8003640:	05fa0000 	.word	0x05fa0000

08003644 <__NVIC_GetPriorityGrouping>:
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <__NVIC_GetPriorityGrouping+0x18>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	0a1b      	lsrs	r3, r3, #8
 800364e:	f003 0307 	and.w	r3, r3, #7
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_SetPriority>:
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800366c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db0a      	blt.n	800368a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	490c      	ldr	r1, [pc, #48]	@ (80036ac <__NVIC_SetPriority+0x4c>)
 800367a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	440b      	add	r3, r1
 8003684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003688:	e00a      	b.n	80036a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4908      	ldr	r1, [pc, #32]	@ (80036b0 <__NVIC_SetPriority+0x50>)
 8003690:	88fb      	ldrh	r3, [r7, #6]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3b04      	subs	r3, #4
 8003698:	0112      	lsls	r2, r2, #4
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	440b      	add	r3, r1
 800369e:	761a      	strb	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <NVIC_EncodePriority>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	@ 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf28      	it	cs
 80036d2:	2304      	movcs	r3, #4
 80036d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3304      	adds	r3, #4
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d902      	bls.n	80036e4 <NVIC_EncodePriority+0x30>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3b03      	subs	r3, #3
 80036e2:	e000      	b.n	80036e6 <NVIC_EncodePriority+0x32>
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43d9      	mvns	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	4313      	orrs	r3, r2
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	@ 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <SysTick_Config>:
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800372c:	d301      	bcc.n	8003732 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800372e:	2301      	movs	r3, #1
 8003730:	e00f      	b.n	8003752 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003732:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <SysTick_Config+0x40>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373a:	210f      	movs	r1, #15
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	f7ff ff8e 	bl	8003660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <SysTick_Config+0x40>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374a:	4b04      	ldr	r3, [pc, #16]	@ (800375c <SysTick_Config+0x40>)
 800374c:	2207      	movs	r2, #7
 800374e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010

08003760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff47 	bl	80035fc <__NVIC_SetPriorityGrouping>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003784:	f7ff ff5e 	bl	8003644 <__NVIC_GetPriorityGrouping>
 8003788:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7ff ff90 	bl	80036b4 <NVIC_EncodePriority>
 8003794:	4602      	mov	r2, r0
 8003796:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff5f 	bl	8003660 <__NVIC_SetPriority>
}
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffb2 	bl	800371c <SysTick_Config>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80037c8:	f3bf 8f5f 	dmb	sy
}
 80037cc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80037ce:	4b07      	ldr	r3, [pc, #28]	@ (80037ec <HAL_MPU_Disable+0x28>)
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	4a06      	ldr	r2, [pc, #24]	@ (80037ec <HAL_MPU_Disable+0x28>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80037da:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_MPU_Disable+0x2c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000ed00 	.word	0xe000ed00
 80037f0:	e000ed90 	.word	0xe000ed90

080037f4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80037fc:	4a0b      	ldr	r2, [pc, #44]	@ (800382c <HAL_MPU_Enable+0x38>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003806:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <HAL_MPU_Enable+0x3c>)
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	4a09      	ldr	r2, [pc, #36]	@ (8003830 <HAL_MPU_Enable+0x3c>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003810:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003812:	f3bf 8f4f 	dsb	sy
}
 8003816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003818:	f3bf 8f6f 	isb	sy
}
 800381c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000ed90 	.word	0xe000ed90
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	785a      	ldrb	r2, [r3, #1]
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003842:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003844:	4b1a      	ldr	r3, [pc, #104]	@ (80038b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <HAL_MPU_ConfigRegion+0x7c>)
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003850:	4a17      	ldr	r2, [pc, #92]	@ (80038b0 <HAL_MPU_ConfigRegion+0x7c>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	7b1b      	ldrb	r3, [r3, #12]
 800385c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7adb      	ldrb	r3, [r3, #11]
 8003862:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003864:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7a9b      	ldrb	r3, [r3, #10]
 800386a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800386c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7b5b      	ldrb	r3, [r3, #13]
 8003872:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003874:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7b9b      	ldrb	r3, [r3, #14]
 800387a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800387c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7bdb      	ldrb	r3, [r3, #15]
 8003882:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003884:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7a5b      	ldrb	r3, [r3, #9]
 800388a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800388c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7a1b      	ldrb	r3, [r3, #8]
 8003892:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003894:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800389c:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800389e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038a0:	6113      	str	r3, [r2, #16]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000ed90 	.word	0xe000ed90

080038b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	@ 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038c2:	4b89      	ldr	r3, [pc, #548]	@ (8003ae8 <HAL_GPIO_Init+0x234>)
 80038c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038c6:	e194      	b.n	8003bf2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa01 f303 	lsl.w	r3, r1, r3
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8186 	beq.w	8003bec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d005      	beq.n	80038f8 <HAL_GPIO_Init+0x44>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d130      	bne.n	800395a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	2203      	movs	r2, #3
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800392e:	2201      	movs	r2, #1
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0201 	and.w	r2, r3, #1
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b03      	cmp	r3, #3
 8003964:	d017      	beq.n	8003996 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	2203      	movs	r2, #3
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d123      	bne.n	80039ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	08da      	lsrs	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3208      	adds	r2, #8
 80039aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	220f      	movs	r2, #15
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	08da      	lsrs	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3208      	adds	r2, #8
 80039e4:	69b9      	ldr	r1, [r7, #24]
 80039e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2203      	movs	r2, #3
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0203 	and.w	r2, r3, #3
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 80e0 	beq.w	8003bec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8003aec <HAL_GPIO_Init+0x238>)
 8003a2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a32:	4a2e      	ldr	r2, [pc, #184]	@ (8003aec <HAL_GPIO_Init+0x238>)
 8003a34:	f043 0302 	orr.w	r3, r3, #2
 8003a38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003aec <HAL_GPIO_Init+0x238>)
 8003a3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4a:	4a29      	ldr	r2, [pc, #164]	@ (8003af0 <HAL_GPIO_Init+0x23c>)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3302      	adds	r3, #2
 8003a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	220f      	movs	r2, #15
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a20      	ldr	r2, [pc, #128]	@ (8003af4 <HAL_GPIO_Init+0x240>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d052      	beq.n	8003b1c <HAL_GPIO_Init+0x268>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1f      	ldr	r2, [pc, #124]	@ (8003af8 <HAL_GPIO_Init+0x244>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d031      	beq.n	8003ae2 <HAL_GPIO_Init+0x22e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1e      	ldr	r2, [pc, #120]	@ (8003afc <HAL_GPIO_Init+0x248>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <HAL_GPIO_Init+0x22a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a1d      	ldr	r2, [pc, #116]	@ (8003b00 <HAL_GPIO_Init+0x24c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d025      	beq.n	8003ada <HAL_GPIO_Init+0x226>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <HAL_GPIO_Init+0x250>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x222>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1b      	ldr	r2, [pc, #108]	@ (8003b08 <HAL_GPIO_Init+0x254>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x21e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b0c <HAL_GPIO_Init+0x258>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x21a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	@ (8003b10 <HAL_GPIO_Init+0x25c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x216>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_GPIO_Init+0x260>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x212>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a17      	ldr	r2, [pc, #92]	@ (8003b18 <HAL_GPIO_Init+0x264>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x20e>
 8003abe:	2309      	movs	r3, #9
 8003ac0:	e02d      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	e02b      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	e029      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003aca:	2307      	movs	r3, #7
 8003acc:	e027      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ace:	2306      	movs	r3, #6
 8003ad0:	e025      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	e023      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	e021      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ada:	2303      	movs	r3, #3
 8003adc:	e01f      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e01d      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e01b      	b.n	8003b1e <HAL_GPIO_Init+0x26a>
 8003ae6:	bf00      	nop
 8003ae8:	58000080 	.word	0x58000080
 8003aec:	58024400 	.word	0x58024400
 8003af0:	58000400 	.word	0x58000400
 8003af4:	58020000 	.word	0x58020000
 8003af8:	58020400 	.word	0x58020400
 8003afc:	58020800 	.word	0x58020800
 8003b00:	58020c00 	.word	0x58020c00
 8003b04:	58021000 	.word	0x58021000
 8003b08:	58021400 	.word	0x58021400
 8003b0c:	58021800 	.word	0x58021800
 8003b10:	58021c00 	.word	0x58021c00
 8003b14:	58022000 	.word	0x58022000
 8003b18:	58022400 	.word	0x58022400
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	f002 0203 	and.w	r2, r2, #3
 8003b24:	0092      	lsls	r2, r2, #2
 8003b26:	4093      	lsls	r3, r2
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b2e:	4938      	ldr	r1, [pc, #224]	@ (8003c10 <HAL_GPIO_Init+0x35c>)
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	3302      	adds	r3, #2
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f47f ae63 	bne.w	80038c8 <HAL_GPIO_Init+0x14>
  }
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	3724      	adds	r7, #36	@ 0x24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	58000400 	.word	0x58000400

08003c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
 8003c20:	4613      	mov	r3, r2
 8003c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c24:	787b      	ldrb	r3, [r7, #1]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c30:	e003      	b.n	8003c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	041a      	lsls	r2, r3, #16
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	619a      	str	r2, [r3, #24]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e08b      	b.n	8003d72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe ffd4 	bl	8002c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	@ 0x24
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ca8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	e006      	b.n	8003cd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003cce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d108      	bne.n	8003cea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	e007      	b.n	8003cfa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6859      	ldr	r1, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b1d      	ldr	r3, [pc, #116]	@ (8003d7c <HAL_I2C_Init+0x134>)
 8003d06:	430b      	orrs	r3, r1
 8003d08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69d9      	ldr	r1, [r3, #28]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	02008000 	.word	0x02008000

08003d80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af02      	add	r7, sp, #8
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	460b      	mov	r3, r1
 8003d94:	813b      	strh	r3, [r7, #8]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	f040 80f9 	bne.w	8003f9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_I2C_Mem_Write+0x34>
 8003dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0ed      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_I2C_Mem_Write+0x4e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e0e6      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dd6:	f7ff fbd5 	bl	8003584 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	2319      	movs	r3, #25
 8003de2:	2201      	movs	r2, #1
 8003de4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fbc9 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0d1      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2221      	movs	r2, #33	@ 0x21
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2240      	movs	r2, #64	@ 0x40
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a3a      	ldr	r2, [r7, #32]
 8003e12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e20:	88f8      	ldrh	r0, [r7, #6]
 8003e22:	893a      	ldrh	r2, [r7, #8]
 8003e24:	8979      	ldrh	r1, [r7, #10]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	4603      	mov	r3, r0
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 fad9 	bl	80043e8 <I2C_RequestMemoryWrite>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0a9      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2bff      	cmp	r3, #255	@ 0xff
 8003e50:	d90e      	bls.n	8003e70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	22ff      	movs	r2, #255	@ 0xff
 8003e56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	8979      	ldrh	r1, [r7, #10]
 8003e60:	2300      	movs	r3, #0
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fd4d 	bl	8004908 <I2C_TransferConfig>
 8003e6e:	e00f      	b.n	8003e90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	8979      	ldrh	r1, [r7, #10]
 8003e82:	2300      	movs	r3, #0
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fd3c 	bl	8004908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fbcc 	bl	8004632 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e07b      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d034      	beq.n	8003f48 <HAL_I2C_Mem_Write+0x1c8>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d130      	bne.n	8003f48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	2200      	movs	r2, #0
 8003eee:	2180      	movs	r1, #128	@ 0x80
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fb45 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e04d      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2bff      	cmp	r3, #255	@ 0xff
 8003f08:	d90e      	bls.n	8003f28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22ff      	movs	r2, #255	@ 0xff
 8003f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	8979      	ldrh	r1, [r7, #10]
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 fcf1 	bl	8004908 <I2C_TransferConfig>
 8003f26:	e00f      	b.n	8003f48 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	8979      	ldrh	r1, [r7, #10]
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fce0 	bl	8004908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d19e      	bne.n	8003e90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fbb2 	bl	80046c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e01a      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <HAL_I2C_Mem_Write+0x224>)
 8003f7a:	400b      	ands	r3, r1
 8003f7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	fe00e800 	.word	0xfe00e800

08003fa8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	f040 80fd 	bne.w	80041ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_I2C_Mem_Read+0x34>
 8003fd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fe2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0f1      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Mem_Read+0x4e>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e0ea      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ffe:	f7ff fac1 	bl	8003584 <HAL_GetTick>
 8004002:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	2319      	movs	r3, #25
 800400a:	2201      	movs	r2, #1
 800400c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fab5 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0d5      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2222      	movs	r2, #34	@ 0x22
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2240      	movs	r2, #64	@ 0x40
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004048:	88f8      	ldrh	r0, [r7, #6]
 800404a:	893a      	ldrh	r2, [r7, #8]
 800404c:	8979      	ldrh	r1, [r7, #10]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	4603      	mov	r3, r0
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fa19 	bl	8004490 <I2C_RequestMemoryRead>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0ad      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2bff      	cmp	r3, #255	@ 0xff
 8004078:	d90e      	bls.n	8004098 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	22ff      	movs	r2, #255	@ 0xff
 800407e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004084:	b2da      	uxtb	r2, r3
 8004086:	8979      	ldrh	r1, [r7, #10]
 8004088:	4b52      	ldr	r3, [pc, #328]	@ (80041d4 <HAL_I2C_Mem_Read+0x22c>)
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fc39 	bl	8004908 <I2C_TransferConfig>
 8004096:	e00f      	b.n	80040b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	8979      	ldrh	r1, [r7, #10]
 80040aa:	4b4a      	ldr	r3, [pc, #296]	@ (80041d4 <HAL_I2C_Mem_Read+0x22c>)
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fc28 	bl	8004908 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	2200      	movs	r2, #0
 80040c0:	2104      	movs	r1, #4
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa5c 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e07c      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d034      	beq.n	8004178 <HAL_I2C_Mem_Read+0x1d0>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d130      	bne.n	8004178 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	2200      	movs	r2, #0
 800411e:	2180      	movs	r1, #128	@ 0x80
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fa2d 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e04d      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	2bff      	cmp	r3, #255	@ 0xff
 8004138:	d90e      	bls.n	8004158 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	22ff      	movs	r2, #255	@ 0xff
 800413e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004144:	b2da      	uxtb	r2, r3
 8004146:	8979      	ldrh	r1, [r7, #10]
 8004148:	2300      	movs	r3, #0
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fbd9 	bl	8004908 <I2C_TransferConfig>
 8004156:	e00f      	b.n	8004178 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	b2da      	uxtb	r2, r3
 8004168:	8979      	ldrh	r1, [r7, #10]
 800416a:	2300      	movs	r3, #0
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fbc8 	bl	8004908 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d19a      	bne.n	80040b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fa9a 	bl	80046c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e01a      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2220      	movs	r2, #32
 800419c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_I2C_Mem_Read+0x230>)
 80041aa:	400b      	ands	r3, r1
 80041ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e000      	b.n	80041cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	80002400 	.word	0x80002400
 80041d8:	fe00e800 	.word	0xfe00e800

080041dc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08a      	sub	sp, #40	@ 0x28
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	460b      	mov	r3, r1
 80041ea:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	f040 80e9 	bne.w	80043d4 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004210:	d101      	bne.n	8004216 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8004212:	2302      	movs	r3, #2
 8004214:	e0df      	b.n	80043d6 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_I2C_IsDeviceReady+0x48>
 8004220:	2302      	movs	r3, #2
 8004222:	e0d8      	b.n	80043d6 <HAL_I2C_IsDeviceReady+0x1fa>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2224      	movs	r2, #36	@ 0x24
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <HAL_I2C_IsDeviceReady+0x72>
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004248:	4b65      	ldr	r3, [pc, #404]	@ (80043e0 <HAL_I2C_IsDeviceReady+0x204>)
 800424a:	4313      	orrs	r3, r2
 800424c:	e004      	b.n	8004258 <HAL_I2C_IsDeviceReady+0x7c>
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004254:	4b63      	ldr	r3, [pc, #396]	@ (80043e4 <HAL_I2C_IsDeviceReady+0x208>)
 8004256:	4313      	orrs	r3, r2
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800425e:	f7ff f991 	bl	8003584 <HAL_GetTick>
 8004262:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b20      	cmp	r3, #32
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b10      	cmp	r3, #16
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004290:	e034      	b.n	80042fc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d01a      	beq.n	80042d0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7ff f973 	bl	8003584 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <HAL_I2C_IsDeviceReady+0xd4>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10f      	bne.n	80042d0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	f043 0220 	orr.w	r2, r3, #32
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e082      	b.n	80043d6 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b20      	cmp	r3, #32
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80042fc:	7fbb      	ldrb	r3, [r7, #30]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d102      	bne.n	8004308 <HAL_I2C_IsDeviceReady+0x12c>
 8004302:	7f7b      	ldrb	r3, [r7, #29]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0c4      	beq.n	8004292 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b10      	cmp	r3, #16
 8004314:	d027      	beq.n	8004366 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	2120      	movs	r1, #32
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f92d 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00e      	beq.n	800434a <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	2b04      	cmp	r3, #4
 8004332:	d107      	bne.n	8004344 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2220      	movs	r2, #32
 800433a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	645a      	str	r2, [r3, #68]	@ 0x44
 8004342:	e026      	b.n	8004392 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e023      	b.n	8004392 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2220      	movs	r2, #32
 8004350:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e037      	b.n	80043d6 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2210      	movs	r2, #16
 800436c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2200      	movs	r2, #0
 8004376:	2120      	movs	r1, #32
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f901 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e003      	b.n	8004392 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2220      	movs	r2, #32
 8004390:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	3301      	adds	r3, #1
 8004396:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	429a      	cmp	r2, r3
 800439e:	d904      	bls.n	80043aa <HAL_I2C_IsDeviceReady+0x1ce>
 80043a0:	7ffb      	ldrb	r3, [r7, #31]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	f63f af43 	bhi.w	800423a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	02002000 	.word	0x02002000
 80043e4:	02002800 	.word	0x02002800

080043e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	4608      	mov	r0, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	461a      	mov	r2, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	460b      	mov	r3, r1
 80043fc:	813b      	strh	r3, [r7, #8]
 80043fe:	4613      	mov	r3, r2
 8004400:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	8979      	ldrh	r1, [r7, #10]
 8004408:	4b20      	ldr	r3, [pc, #128]	@ (800448c <I2C_RequestMemoryWrite+0xa4>)
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fa79 	bl	8004908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	69b9      	ldr	r1, [r7, #24]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f909 	bl	8004632 <I2C_WaitOnTXISFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e02c      	b.n	8004484 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004430:	893b      	ldrh	r3, [r7, #8]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	629a      	str	r2, [r3, #40]	@ 0x28
 800443a:	e015      	b.n	8004468 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800443c:	893b      	ldrh	r3, [r7, #8]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	b29b      	uxth	r3, r3
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8ef 	bl	8004632 <I2C_WaitOnTXISFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e012      	b.n	8004484 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800445e:	893b      	ldrh	r3, [r7, #8]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2200      	movs	r2, #0
 8004470:	2180      	movs	r1, #128	@ 0x80
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f884 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	80002000 	.word	0x80002000

08004490 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	817b      	strh	r3, [r7, #10]
 80044a2:	460b      	mov	r3, r1
 80044a4:	813b      	strh	r3, [r7, #8]
 80044a6:	4613      	mov	r3, r2
 80044a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	4b20      	ldr	r3, [pc, #128]	@ (8004534 <I2C_RequestMemoryRead+0xa4>)
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2300      	movs	r3, #0
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa26 	bl	8004908 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	69b9      	ldr	r1, [r7, #24]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f8b6 	bl	8004632 <I2C_WaitOnTXISFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e02c      	b.n	800452a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d6:	893b      	ldrh	r3, [r7, #8]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28
 80044e0:	e015      	b.n	800450e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044e2:	893b      	ldrh	r3, [r7, #8]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f89c 	bl	8004632 <I2C_WaitOnTXISFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e012      	b.n	800452a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2200      	movs	r2, #0
 8004516:	2140      	movs	r1, #64	@ 0x40
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f831 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	80002000 	.word	0x80002000

08004538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d103      	bne.n	8004556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d007      	beq.n	8004574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	619a      	str	r2, [r3, #24]
  }
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004590:	e03b      	b.n	800460a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	6839      	ldr	r1, [r7, #0]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f8d6 	bl	8004748 <I2C_IsErrorOccurred>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e041      	b.n	800462a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d02d      	beq.n	800460a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ae:	f7fe ffe9 	bl	8003584 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d122      	bne.n	800460a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d113      	bne.n	800460a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e00f      	b.n	800462a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	429a      	cmp	r2, r3
 8004626:	d0b4      	beq.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800463e:	e033      	b.n	80046a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f87f 	bl	8004748 <I2C_IsErrorOccurred>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e031      	b.n	80046b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d025      	beq.n	80046a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465c:	f7fe ff92 	bl	8003584 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	429a      	cmp	r2, r3
 800466a:	d302      	bcc.n	8004672 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11a      	bne.n	80046a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b02      	cmp	r3, #2
 800467e:	d013      	beq.n	80046a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e007      	b.n	80046b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d1c4      	bne.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046cc:	e02f      	b.n	800472e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f838 	bl	8004748 <I2C_IsErrorOccurred>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e02d      	b.n	800473e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fe ff4f 	bl	8003584 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11a      	bne.n	800472e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b20      	cmp	r3, #32
 8004704:	d013      	beq.n	800472e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e007      	b.n	800473e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b20      	cmp	r3, #32
 800473a:	d1c8      	bne.n	80046ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d068      	beq.n	8004846 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2210      	movs	r2, #16
 800477a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800477c:	e049      	b.n	8004812 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d045      	beq.n	8004812 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fe fefd 	bl	8003584 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <I2C_IsErrorOccurred+0x54>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d13a      	bne.n	8004812 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047be:	d121      	bne.n	8004804 <I2C_IsErrorOccurred+0xbc>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047c6:	d01d      	beq.n	8004804 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d01a      	beq.n	8004804 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047dc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047de:	f7fe fed1 	bl	8003584 <HAL_GetTick>
 80047e2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e4:	e00e      	b.n	8004804 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047e6:	f7fe fecd 	bl	8003584 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b19      	cmp	r3, #25
 80047f2:	d907      	bls.n	8004804 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	f043 0320 	orr.w	r3, r3, #32
 80047fa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004802:	e006      	b.n	8004812 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b20      	cmp	r3, #32
 8004810:	d1e9      	bne.n	80047e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b20      	cmp	r3, #32
 800481e:	d003      	beq.n	8004828 <I2C_IsErrorOccurred+0xe0>
 8004820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0aa      	beq.n	800477e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2220      	movs	r2, #32
 8004836:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	f043 0304 	orr.w	r3, r3, #4
 800483e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800488a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	f043 0302 	orr.w	r3, r3, #2
 80048a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80048b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01c      	beq.n	80048f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7ff fe3b 	bl	8004538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004904 <I2C_IsErrorOccurred+0x1bc>)
 80048ce:	400b      	ands	r3, r1
 80048d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3728      	adds	r7, #40	@ 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	fe00e800 	.word	0xfe00e800

08004908 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	817b      	strh	r3, [r7, #10]
 8004916:	4613      	mov	r3, r2
 8004918:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800491a:	897b      	ldrh	r3, [r7, #10]
 800491c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004920:	7a7b      	ldrb	r3, [r7, #9]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004928:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	4313      	orrs	r3, r2
 8004932:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004936:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	0d5b      	lsrs	r3, r3, #21
 8004942:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004946:	4b08      	ldr	r3, [pc, #32]	@ (8004968 <I2C_TransferConfig+0x60>)
 8004948:	430b      	orrs	r3, r1
 800494a:	43db      	mvns	r3, r3
 800494c:	ea02 0103 	and.w	r1, r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	03ff63ff 	.word	0x03ff63ff

0800496c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b20      	cmp	r3, #32
 8004980:	d138      	bne.n	80049f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800498c:	2302      	movs	r3, #2
 800498e:	e032      	b.n	80049f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	@ 0x24
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6819      	ldr	r1, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d139      	bne.n	8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e033      	b.n	8004a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2224      	movs	r2, #36	@ 0x24
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	e000      	b.n	8004a8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a8c:	2302      	movs	r3, #2
  }
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004aa4:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <HAL_PWREx_ConfigSupply+0x70>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d00a      	beq.n	8004ac6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ab0:	4b16      	ldr	r3, [pc, #88]	@ (8004b0c <HAL_PWREx_ConfigSupply+0x70>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d001      	beq.n	8004ac2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e01f      	b.n	8004b02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e01d      	b.n	8004b02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ac6:	4b11      	ldr	r3, [pc, #68]	@ (8004b0c <HAL_PWREx_ConfigSupply+0x70>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f023 0207 	bic.w	r2, r3, #7
 8004ace:	490f      	ldr	r1, [pc, #60]	@ (8004b0c <HAL_PWREx_ConfigSupply+0x70>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ad6:	f7fe fd55 	bl	8003584 <HAL_GetTick>
 8004ada:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004adc:	e009      	b.n	8004af2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004ade:	f7fe fd51 	bl	8003584 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aec:	d901      	bls.n	8004af2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e007      	b.n	8004b02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004af2:	4b06      	ldr	r3, [pc, #24]	@ (8004b0c <HAL_PWREx_ConfigSupply+0x70>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004afe:	d1ee      	bne.n	8004ade <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	58024800 	.word	0x58024800

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08c      	sub	sp, #48	@ 0x30
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f000 bc48 	b.w	80053b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8088 	beq.w	8004c42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b32:	4b99      	ldr	r3, [pc, #612]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b3c:	4b96      	ldr	r3, [pc, #600]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d007      	beq.n	8004b58 <HAL_RCC_OscConfig+0x48>
 8004b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4a:	2b18      	cmp	r3, #24
 8004b4c:	d111      	bne.n	8004b72 <HAL_RCC_OscConfig+0x62>
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d10c      	bne.n	8004b72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	4b8f      	ldr	r3, [pc, #572]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d06d      	beq.n	8004c40 <HAL_RCC_OscConfig+0x130>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d169      	bne.n	8004c40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f000 bc21 	b.w	80053b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCC_OscConfig+0x7a>
 8004b7c:	4b86      	ldr	r3, [pc, #536]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a85      	ldr	r2, [pc, #532]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e02e      	b.n	8004be8 <HAL_RCC_OscConfig+0xd8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x9c>
 8004b92:	4b81      	ldr	r3, [pc, #516]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a80      	ldr	r2, [pc, #512]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004ba4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e01d      	b.n	8004be8 <HAL_RCC_OscConfig+0xd8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xc0>
 8004bb6:	4b78      	ldr	r3, [pc, #480]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a77      	ldr	r2, [pc, #476]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	4b75      	ldr	r3, [pc, #468]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a74      	ldr	r2, [pc, #464]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e00b      	b.n	8004be8 <HAL_RCC_OscConfig+0xd8>
 8004bd0:	4b71      	ldr	r3, [pc, #452]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a70      	ldr	r2, [pc, #448]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6d      	ldr	r2, [pc, #436]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fcc8 	bl	8003584 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fe fcc4 	bl	8003584 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	@ 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e3d4      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c0a:	4b63      	ldr	r3, [pc, #396]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0xe8>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fe fcb4 	bl	8003584 <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fe fcb0 	bl	8003584 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e3c0      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c32:	4b59      	ldr	r3, [pc, #356]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x110>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80ca 	beq.w	8004de4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c50:	4b51      	ldr	r3, [pc, #324]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_RCC_OscConfig+0x166>
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	2b18      	cmp	r3, #24
 8004c6a:	d156      	bne.n	8004d1a <HAL_RCC_OscConfig+0x20a>
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d151      	bne.n	8004d1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c76:	4b48      	ldr	r3, [pc, #288]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_RCC_OscConfig+0x17e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e392      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c8e:	4b42      	ldr	r3, [pc, #264]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 0219 	bic.w	r2, r3, #25
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	493f      	ldr	r1, [pc, #252]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fc70 	bl	8003584 <HAL_GetTick>
 8004ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca8:	f7fe fc6c 	bl	8003584 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e37c      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cba:	4b37      	ldr	r3, [pc, #220]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc6:	f7fe fc8d 	bl	80035e4 <HAL_GetREVID>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d817      	bhi.n	8004d04 <HAL_RCC_OscConfig+0x1f4>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d108      	bne.n	8004cee <HAL_RCC_OscConfig+0x1de>
 8004cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cec:	e07a      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cee:	4b2a      	ldr	r3, [pc, #168]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	031b      	lsls	r3, r3, #12
 8004cfc:	4926      	ldr	r1, [pc, #152]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d02:	e06f      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d04:	4b24      	ldr	r3, [pc, #144]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	061b      	lsls	r3, r3, #24
 8004d12:	4921      	ldr	r1, [pc, #132]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d18:	e064      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d047      	beq.n	8004db2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d22:	4b1d      	ldr	r3, [pc, #116]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0219 	bic.w	r2, r3, #25
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	491a      	ldr	r1, [pc, #104]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fe fc26 	bl	8003584 <HAL_GetTick>
 8004d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3c:	f7fe fc22 	bl	8003584 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e332      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	f7fe fc43 	bl	80035e4 <HAL_GetREVID>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d819      	bhi.n	8004d9c <HAL_RCC_OscConfig+0x28c>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b40      	cmp	r3, #64	@ 0x40
 8004d6e:	d108      	bne.n	8004d82 <HAL_RCC_OscConfig+0x272>
 8004d70:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d78:	4a07      	ldr	r2, [pc, #28]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d7e:	6053      	str	r3, [r2, #4]
 8004d80:	e030      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
 8004d82:	4b05      	ldr	r3, [pc, #20]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	031b      	lsls	r3, r3, #12
 8004d90:	4901      	ldr	r1, [pc, #4]	@ (8004d98 <HAL_RCC_OscConfig+0x288>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	604b      	str	r3, [r1, #4]
 8004d96:	e025      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
 8004d98:	58024400 	.word	0x58024400
 8004d9c:	4b9a      	ldr	r3, [pc, #616]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	4997      	ldr	r1, [pc, #604]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]
 8004db0:	e018      	b.n	8004de4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db2:	4b95      	ldr	r3, [pc, #596]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a94      	ldr	r2, [pc, #592]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fe fbe1 	bl	8003584 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fe fbdd 	bl	8003584 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e2ed      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dd8:	4b8b      	ldr	r3, [pc, #556]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80a9 	beq.w	8004f44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004df2:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dfc:	4b82      	ldr	r3, [pc, #520]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d007      	beq.n	8004e18 <HAL_RCC_OscConfig+0x308>
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b18      	cmp	r3, #24
 8004e0c:	d13a      	bne.n	8004e84 <HAL_RCC_OscConfig+0x374>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d135      	bne.n	8004e84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e18:	4b7b      	ldr	r3, [pc, #492]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_OscConfig+0x320>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	2b80      	cmp	r3, #128	@ 0x80
 8004e2a:	d001      	beq.n	8004e30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e2c1      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e30:	f7fe fbd8 	bl	80035e4 <HAL_GetREVID>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d817      	bhi.n	8004e6e <HAL_RCC_OscConfig+0x35e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d108      	bne.n	8004e58 <HAL_RCC_OscConfig+0x348>
 8004e46:	4b70      	ldr	r3, [pc, #448]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e56:	e075      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e58:	4b6b      	ldr	r3, [pc, #428]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	069b      	lsls	r3, r3, #26
 8004e66:	4968      	ldr	r1, [pc, #416]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e6c:	e06a      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e6e:	4b66      	ldr	r3, [pc, #408]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	061b      	lsls	r3, r3, #24
 8004e7c:	4962      	ldr	r1, [pc, #392]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e82:	e05f      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d042      	beq.n	8004f12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5d      	ldr	r2, [pc, #372]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fe fb74 	bl	8003584 <HAL_GetTick>
 8004e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ea0:	f7fe fb70 	bl	8003584 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e280      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eb2:	4b55      	ldr	r3, [pc, #340]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ebe:	f7fe fb91 	bl	80035e4 <HAL_GetREVID>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d817      	bhi.n	8004efc <HAL_RCC_OscConfig+0x3ec>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d108      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x3d6>
 8004ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004edc:	4a4a      	ldr	r2, [pc, #296]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ede:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ee2:	6053      	str	r3, [r2, #4]
 8004ee4:	e02e      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
 8004ee6:	4b48      	ldr	r3, [pc, #288]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	069b      	lsls	r3, r3, #26
 8004ef4:	4944      	ldr	r1, [pc, #272]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	604b      	str	r3, [r1, #4]
 8004efa:	e023      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
 8004efc:	4b42      	ldr	r3, [pc, #264]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	493f      	ldr	r1, [pc, #252]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60cb      	str	r3, [r1, #12]
 8004f10:	e018      	b.n	8004f44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f12:	4b3d      	ldr	r3, [pc, #244]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3c      	ldr	r2, [pc, #240]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fe fb31 	bl	8003584 <HAL_GetTick>
 8004f22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004f26:	f7fe fb2d 	bl	8003584 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e23d      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f38:	4b33      	ldr	r3, [pc, #204]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d036      	beq.n	8004fbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d019      	beq.n	8004f8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f58:	4b2b      	ldr	r3, [pc, #172]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f64:	f7fe fb0e 	bl	8003584 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6c:	f7fe fb0a 	bl	8003584 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e21a      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f7e:	4b22      	ldr	r3, [pc, #136]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x45c>
 8004f8a:	e018      	b.n	8004fbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f90:	4a1d      	ldr	r2, [pc, #116]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f98:	f7fe faf4 	bl	8003584 <HAL_GetTick>
 8004f9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa0:	f7fe faf0 	bl	8003584 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e200      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004fb2:	4b15      	ldr	r3, [pc, #84]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d039      	beq.n	800503e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01c      	beq.n	800500c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fde:	f7fe fad1 	bl	8003584 <HAL_GetTick>
 8004fe2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fe6:	f7fe facd 	bl	8003584 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1dd      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ff8:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <HAL_RCC_OscConfig+0x4f8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x4d6>
 8005004:	e01b      	b.n	800503e <HAL_RCC_OscConfig+0x52e>
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800500c:	4b9b      	ldr	r3, [pc, #620]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a9a      	ldr	r2, [pc, #616]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005016:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005018:	f7fe fab4 	bl	8003584 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005020:	f7fe fab0 	bl	8003584 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e1c0      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005032:	4b92      	ldr	r3, [pc, #584]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8081 	beq.w	800514e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800504c:	4b8c      	ldr	r3, [pc, #560]	@ (8005280 <HAL_RCC_OscConfig+0x770>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a8b      	ldr	r2, [pc, #556]	@ (8005280 <HAL_RCC_OscConfig+0x770>)
 8005052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005058:	f7fe fa94 	bl	8003584 <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005060:	f7fe fa90 	bl	8003584 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b64      	cmp	r3, #100	@ 0x64
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e1a0      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005072:	4b83      	ldr	r3, [pc, #524]	@ (8005280 <HAL_RCC_OscConfig+0x770>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d106      	bne.n	8005094 <HAL_RCC_OscConfig+0x584>
 8005086:	4b7d      	ldr	r3, [pc, #500]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508a:	4a7c      	ldr	r2, [pc, #496]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	6713      	str	r3, [r2, #112]	@ 0x70
 8005092:	e02d      	b.n	80050f0 <HAL_RCC_OscConfig+0x5e0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10c      	bne.n	80050b6 <HAL_RCC_OscConfig+0x5a6>
 800509c:	4b77      	ldr	r3, [pc, #476]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a0:	4a76      	ldr	r2, [pc, #472]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a8:	4b74      	ldr	r3, [pc, #464]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ac:	4a73      	ldr	r2, [pc, #460]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050ae:	f023 0304 	bic.w	r3, r3, #4
 80050b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b4:	e01c      	b.n	80050f0 <HAL_RCC_OscConfig+0x5e0>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d10c      	bne.n	80050d8 <HAL_RCC_OscConfig+0x5c8>
 80050be:	4b6f      	ldr	r3, [pc, #444]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c2:	4a6e      	ldr	r2, [pc, #440]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050c4:	f043 0304 	orr.w	r3, r3, #4
 80050c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ca:	4b6c      	ldr	r3, [pc, #432]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ce:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050d6:	e00b      	b.n	80050f0 <HAL_RCC_OscConfig+0x5e0>
 80050d8:	4b68      	ldr	r3, [pc, #416]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050dc:	4a67      	ldr	r2, [pc, #412]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e4:	4b65      	ldr	r3, [pc, #404]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e8:	4a64      	ldr	r2, [pc, #400]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80050ea:	f023 0304 	bic.w	r3, r3, #4
 80050ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f8:	f7fe fa44 	bl	8003584 <HAL_GetTick>
 80050fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005100:	f7fe fa40 	bl	8003584 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e14e      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005116:	4b59      	ldr	r3, [pc, #356]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ee      	beq.n	8005100 <HAL_RCC_OscConfig+0x5f0>
 8005122:	e014      	b.n	800514e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005124:	f7fe fa2e 	bl	8003584 <HAL_GetTick>
 8005128:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800512a:	e00a      	b.n	8005142 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fe fa2a 	bl	8003584 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e138      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005142:	4b4e      	ldr	r3, [pc, #312]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1ee      	bne.n	800512c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 812d 	beq.w	80053b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005158:	4b48      	ldr	r3, [pc, #288]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005160:	2b18      	cmp	r3, #24
 8005162:	f000 80bd 	beq.w	80052e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516a:	2b02      	cmp	r3, #2
 800516c:	f040 809e 	bne.w	80052ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005170:	4b42      	ldr	r3, [pc, #264]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a41      	ldr	r2, [pc, #260]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800517a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517c:	f7fe fa02 	bl	8003584 <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005184:	f7fe f9fe 	bl	8003584 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e10e      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005196:	4b39      	ldr	r3, [pc, #228]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051a2:	4b36      	ldr	r3, [pc, #216]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80051a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051a6:	4b37      	ldr	r3, [pc, #220]	@ (8005284 <HAL_RCC_OscConfig+0x774>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051b2:	0112      	lsls	r2, r2, #4
 80051b4:	430a      	orrs	r2, r1
 80051b6:	4931      	ldr	r1, [pc, #196]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	3b01      	subs	r3, #1
 80051c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ca:	3b01      	subs	r3, #1
 80051cc:	025b      	lsls	r3, r3, #9
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d6:	3b01      	subs	r3, #1
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e4:	3b01      	subs	r3, #1
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051ec:	4923      	ldr	r1, [pc, #140]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051f2:	4b22      	ldr	r3, [pc, #136]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	4a21      	ldr	r2, [pc, #132]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051fe:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005202:	4b21      	ldr	r3, [pc, #132]	@ (8005288 <HAL_RCC_OscConfig+0x778>)
 8005204:	4013      	ands	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800520a:	00d2      	lsls	r2, r2, #3
 800520c:	491b      	ldr	r1, [pc, #108]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800520e:	4313      	orrs	r3, r2
 8005210:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005212:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005216:	f023 020c 	bic.w	r2, r3, #12
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	4917      	ldr	r1, [pc, #92]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005220:	4313      	orrs	r3, r2
 8005222:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005224:	4b15      	ldr	r3, [pc, #84]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	f023 0202 	bic.w	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005230:	4912      	ldr	r1, [pc, #72]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005236:	4b11      	ldr	r3, [pc, #68]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	4a10      	ldr	r2, [pc, #64]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005242:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	4a0d      	ldr	r2, [pc, #52]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800524c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800524e:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	4a0a      	ldr	r2, [pc, #40]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800525a:	4b08      	ldr	r3, [pc, #32]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	4a07      	ldr	r2, [pc, #28]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005266:	4b05      	ldr	r3, [pc, #20]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a04      	ldr	r2, [pc, #16]	@ (800527c <HAL_RCC_OscConfig+0x76c>)
 800526c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fe f987 	bl	8003584 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005278:	e011      	b.n	800529e <HAL_RCC_OscConfig+0x78e>
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	58024800 	.word	0x58024800
 8005284:	fffffc0c 	.word	0xfffffc0c
 8005288:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528c:	f7fe f97a 	bl	8003584 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e08a      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800529e:	4b47      	ldr	r3, [pc, #284]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x77c>
 80052aa:	e082      	b.n	80053b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	4b43      	ldr	r3, [pc, #268]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a42      	ldr	r2, [pc, #264]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b8:	f7fe f964 	bl	8003584 <HAL_GetTick>
 80052bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fe f960 	bl	8003584 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e070      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80052d2:	4b3a      	ldr	r3, [pc, #232]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x7b0>
 80052de:	e068      	b.n	80053b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052e0:	4b36      	ldr	r3, [pc, #216]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052e6:	4b35      	ldr	r3, [pc, #212]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d031      	beq.n	8005358 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f003 0203 	and.w	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d12a      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d122      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d11a      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	0a5b      	lsrs	r3, r3, #9
 8005326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d111      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	0c1b      	lsrs	r3, r3, #16
 8005338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005342:	429a      	cmp	r2, r3
 8005344:	d108      	bne.n	8005358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	0e1b      	lsrs	r3, r3, #24
 800534a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005352:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e02b      	b.n	80053b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800535c:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 800535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005366:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	429a      	cmp	r2, r3
 8005370:	d01f      	beq.n	80053b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005372:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	4a11      	ldr	r2, [pc, #68]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 8005378:	f023 0301 	bic.w	r3, r3, #1
 800537c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800537e:	f7fe f901 	bl	8003584 <HAL_GetTick>
 8005382:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005384:	bf00      	nop
 8005386:	f7fe f8fd 	bl	8003584 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	4293      	cmp	r3, r2
 8005390:	d0f9      	beq.n	8005386 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005392:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 8005394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005396:	4b0a      	ldr	r3, [pc, #40]	@ (80053c0 <HAL_RCC_OscConfig+0x8b0>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	4906      	ldr	r1, [pc, #24]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80053a6:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053aa:	4a04      	ldr	r2, [pc, #16]	@ (80053bc <HAL_RCC_OscConfig+0x8ac>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3730      	adds	r7, #48	@ 0x30
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	58024400 	.word	0x58024400
 80053c0:	ffff0007 	.word	0xffff0007

080053c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e19c      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d8:	4b8a      	ldr	r3, [pc, #552]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d910      	bls.n	8005408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053e6:	4b87      	ldr	r3, [pc, #540]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f023 020f 	bic.w	r2, r3, #15
 80053ee:	4985      	ldr	r1, [pc, #532]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f6:	4b83      	ldr	r3, [pc, #524]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d001      	beq.n	8005408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e184      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d010      	beq.n	8005436 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	4b7b      	ldr	r3, [pc, #492]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005420:	429a      	cmp	r2, r3
 8005422:	d908      	bls.n	8005436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005424:	4b78      	ldr	r3, [pc, #480]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4975      	ldr	r1, [pc, #468]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005432:	4313      	orrs	r3, r2
 8005434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	4b70      	ldr	r3, [pc, #448]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800544e:	429a      	cmp	r2, r3
 8005450:	d908      	bls.n	8005464 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005452:	4b6d      	ldr	r3, [pc, #436]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	496a      	ldr	r1, [pc, #424]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005460:	4313      	orrs	r3, r2
 8005462:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	4b64      	ldr	r3, [pc, #400]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800547c:	429a      	cmp	r2, r3
 800547e:	d908      	bls.n	8005492 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005480:	4b61      	ldr	r3, [pc, #388]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	495e      	ldr	r1, [pc, #376]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 800548e:	4313      	orrs	r3, r2
 8005490:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69da      	ldr	r2, [r3, #28]
 80054a2:	4b59      	ldr	r3, [pc, #356]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d908      	bls.n	80054c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054ae:	4b56      	ldr	r3, [pc, #344]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	4953      	ldr	r1, [pc, #332]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d010      	beq.n	80054ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	429a      	cmp	r2, r3
 80054da:	d908      	bls.n	80054ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f023 020f 	bic.w	r2, r3, #15
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4947      	ldr	r1, [pc, #284]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d055      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054fa:	4b43      	ldr	r3, [pc, #268]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	4940      	ldr	r1, [pc, #256]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005508:	4313      	orrs	r3, r2
 800550a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b02      	cmp	r3, #2
 8005512:	d107      	bne.n	8005524 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005514:	4b3c      	ldr	r3, [pc, #240]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d121      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e0f6      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d107      	bne.n	800553c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800552c:	4b36      	ldr	r3, [pc, #216]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d115      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0ea      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005544:	4b30      	ldr	r3, [pc, #192]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0de      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005554:	4b2c      	ldr	r3, [pc, #176]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0d6      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005564:	4b28      	ldr	r3, [pc, #160]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f023 0207 	bic.w	r2, r3, #7
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4925      	ldr	r1, [pc, #148]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005572:	4313      	orrs	r3, r2
 8005574:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005576:	f7fe f805 	bl	8003584 <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557c:	e00a      	b.n	8005594 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557e:	f7fe f801 	bl	8003584 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e0be      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005594:	4b1c      	ldr	r3, [pc, #112]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d1eb      	bne.n	800557e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	4b14      	ldr	r3, [pc, #80]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	429a      	cmp	r2, r3
 80055c0:	d208      	bcs.n	80055d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c2:	4b11      	ldr	r3, [pc, #68]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f023 020f 	bic.w	r2, r3, #15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	490e      	ldr	r1, [pc, #56]	@ (8005608 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 030f 	and.w	r3, r3, #15
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d214      	bcs.n	800560c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e2:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f023 020f 	bic.w	r2, r3, #15
 80055ea:	4906      	ldr	r1, [pc, #24]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f2:	4b04      	ldr	r3, [pc, #16]	@ (8005604 <HAL_RCC_ClockConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d005      	beq.n	800560c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e086      	b.n	8005712 <HAL_RCC_ClockConfig+0x34e>
 8005604:	52002000 	.word	0x52002000
 8005608:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d010      	beq.n	800563a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	4b3f      	ldr	r3, [pc, #252]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005624:	429a      	cmp	r2, r3
 8005626:	d208      	bcs.n	800563a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005628:	4b3c      	ldr	r3, [pc, #240]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	4939      	ldr	r1, [pc, #228]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005636:	4313      	orrs	r3, r2
 8005638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695a      	ldr	r2, [r3, #20]
 800564a:	4b34      	ldr	r3, [pc, #208]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005652:	429a      	cmp	r2, r3
 8005654:	d208      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005656:	4b31      	ldr	r3, [pc, #196]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	492e      	ldr	r1, [pc, #184]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005664:	4313      	orrs	r3, r2
 8005666:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	4b28      	ldr	r3, [pc, #160]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005680:	429a      	cmp	r2, r3
 8005682:	d208      	bcs.n	8005696 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005684:	4b25      	ldr	r3, [pc, #148]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4922      	ldr	r1, [pc, #136]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 8005692:	4313      	orrs	r3, r2
 8005694:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d010      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	4b1d      	ldr	r3, [pc, #116]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d208      	bcs.n	80056c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056b2:	4b1a      	ldr	r3, [pc, #104]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	4917      	ldr	r1, [pc, #92]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056c4:	f000 f834 	bl	8005730 <HAL_RCC_GetSysClockFreq>
 80056c8:	4602      	mov	r2, r0
 80056ca:	4b14      	ldr	r3, [pc, #80]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	4912      	ldr	r1, [pc, #72]	@ (8005720 <HAL_RCC_ClockConfig+0x35c>)
 80056d6:	5ccb      	ldrb	r3, [r1, r3]
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056e2:	4b0e      	ldr	r3, [pc, #56]	@ (800571c <HAL_RCC_ClockConfig+0x358>)
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005720 <HAL_RCC_ClockConfig+0x35c>)
 80056ec:	5cd3      	ldrb	r3, [r2, r3]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <HAL_RCC_ClockConfig+0x360>)
 80056fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <HAL_RCC_ClockConfig+0x364>)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005702:	4b0a      	ldr	r3, [pc, #40]	@ (800572c <HAL_RCC_ClockConfig+0x368>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fd fef2 	bl	80034f0 <HAL_InitTick>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400
 8005720:	0800cd8c 	.word	0x0800cd8c
 8005724:	24000014 	.word	0x24000014
 8005728:	24000010 	.word	0x24000010
 800572c:	24000018 	.word	0x24000018

08005730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005730:	b480      	push	{r7}
 8005732:	b089      	sub	sp, #36	@ 0x24
 8005734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005736:	4bb3      	ldr	r3, [pc, #716]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800573e:	2b18      	cmp	r3, #24
 8005740:	f200 8155 	bhi.w	80059ee <HAL_RCC_GetSysClockFreq+0x2be>
 8005744:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	080057b1 	.word	0x080057b1
 8005750:	080059ef 	.word	0x080059ef
 8005754:	080059ef 	.word	0x080059ef
 8005758:	080059ef 	.word	0x080059ef
 800575c:	080059ef 	.word	0x080059ef
 8005760:	080059ef 	.word	0x080059ef
 8005764:	080059ef 	.word	0x080059ef
 8005768:	080059ef 	.word	0x080059ef
 800576c:	080057d7 	.word	0x080057d7
 8005770:	080059ef 	.word	0x080059ef
 8005774:	080059ef 	.word	0x080059ef
 8005778:	080059ef 	.word	0x080059ef
 800577c:	080059ef 	.word	0x080059ef
 8005780:	080059ef 	.word	0x080059ef
 8005784:	080059ef 	.word	0x080059ef
 8005788:	080059ef 	.word	0x080059ef
 800578c:	080057dd 	.word	0x080057dd
 8005790:	080059ef 	.word	0x080059ef
 8005794:	080059ef 	.word	0x080059ef
 8005798:	080059ef 	.word	0x080059ef
 800579c:	080059ef 	.word	0x080059ef
 80057a0:	080059ef 	.word	0x080059ef
 80057a4:	080059ef 	.word	0x080059ef
 80057a8:	080059ef 	.word	0x080059ef
 80057ac:	080057e3 	.word	0x080057e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b0:	4b94      	ldr	r3, [pc, #592]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057bc:	4b91      	ldr	r3, [pc, #580]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	08db      	lsrs	r3, r3, #3
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	4a90      	ldr	r2, [pc, #576]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057c8:	fa22 f303 	lsr.w	r3, r2, r3
 80057cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80057ce:	e111      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057d0:	4b8d      	ldr	r3, [pc, #564]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057d2:	61bb      	str	r3, [r7, #24]
      break;
 80057d4:	e10e      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057d6:	4b8d      	ldr	r3, [pc, #564]	@ (8005a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057d8:	61bb      	str	r3, [r7, #24]
      break;
 80057da:	e10b      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057de:	61bb      	str	r3, [r7, #24]
      break;
 80057e0:	e108      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057e2:	4b88      	ldr	r3, [pc, #544]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057ec:	4b85      	ldr	r3, [pc, #532]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057f8:	4b82      	ldr	r3, [pc, #520]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005802:	4b80      	ldr	r3, [pc, #512]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005806:	08db      	lsrs	r3, r3, #3
 8005808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80e1 	beq.w	80059e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b02      	cmp	r3, #2
 800582a:	f000 8083 	beq.w	8005934 <HAL_RCC_GetSysClockFreq+0x204>
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b02      	cmp	r3, #2
 8005832:	f200 80a1 	bhi.w	8005978 <HAL_RCC_GetSysClockFreq+0x248>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x114>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d056      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005842:	e099      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005844:	4b6f      	ldr	r3, [pc, #444]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02d      	beq.n	80058ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005850:	4b6c      	ldr	r3, [pc, #432]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	4a6b      	ldr	r2, [pc, #428]	@ (8005a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800587a:	4b62      	ldr	r3, [pc, #392]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005882:	ee07 3a90 	vmov	s15, r3
 8005886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588a:	ed97 6a02 	vldr	s12, [r7, #8]
 800588e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80058aa:	e087      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058be:	4b51      	ldr	r3, [pc, #324]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c6:	ee07 3a90 	vmov	s15, r3
 80058ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80058d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ee:	e065      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80058fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005902:	4b40      	ldr	r3, [pc, #256]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005912:	ed97 6a02 	vldr	s12, [r7, #8]
 8005916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800591a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005932:	e043      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005946:	4b2f      	ldr	r3, [pc, #188]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	ed97 6a02 	vldr	s12, [r7, #8]
 800595a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800595e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800596a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005976:	e021      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	ee07 3a90 	vmov	s15, r3
 800597e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800598a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800599a:	ed97 6a02 	vldr	s12, [r7, #8]
 800599e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80059ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80059bc:	4b11      	ldr	r3, [pc, #68]	@ (8005a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	0a5b      	lsrs	r3, r3, #9
 80059c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059c6:	3301      	adds	r3, #1
 80059c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059e0:	ee17 3a90 	vmov	r3, s15
 80059e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059e6:	e005      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61bb      	str	r3, [r7, #24]
      break;
 80059ec:	e002      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059ee:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059f0:	61bb      	str	r3, [r7, #24]
      break;
 80059f2:	bf00      	nop
  }

  return sysclockfreq;
 80059f4:	69bb      	ldr	r3, [r7, #24]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3724      	adds	r7, #36	@ 0x24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	58024400 	.word	0x58024400
 8005a08:	03d09000 	.word	0x03d09000
 8005a0c:	003d0900 	.word	0x003d0900
 8005a10:	017d7840 	.word	0x017d7840
 8005a14:	46000000 	.word	0x46000000
 8005a18:	4c742400 	.word	0x4c742400
 8005a1c:	4a742400 	.word	0x4a742400
 8005a20:	4bbebc20 	.word	0x4bbebc20

08005a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a28:	b0ca      	sub	sp, #296	@ 0x128
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005a48:	2500      	movs	r5, #0
 8005a4a:	ea54 0305 	orrs.w	r3, r4, r5
 8005a4e:	d049      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a5a:	d02f      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a60:	d828      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a66:	d01a      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a6c:	d822      	bhi.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a76:	d007      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a78:	e01c      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7a:	4bb8      	ldr	r3, [pc, #736]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	4ab7      	ldr	r2, [pc, #732]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a86:	e01a      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	2102      	movs	r1, #2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f001 f9d1 	bl	8006e38 <RCCEx_PLL2_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a9c:	e00f      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	3328      	adds	r3, #40	@ 0x28
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 fa78 	bl	8006f9c <RCCEx_PLL3_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005ab2:	e004      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ac6:	4ba5      	ldr	r3, [pc, #660]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ad4:	4aa1      	ldr	r2, [pc, #644]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ada:	e003      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005af0:	f04f 0900 	mov.w	r9, #0
 8005af4:	ea58 0309 	orrs.w	r3, r8, r9
 8005af8:	d047      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d82a      	bhi.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b21 	.word	0x08005b21
 8005b10:	08005b2f 	.word	0x08005b2f
 8005b14:	08005b45 	.word	0x08005b45
 8005b18:	08005b63 	.word	0x08005b63
 8005b1c:	08005b63 	.word	0x08005b63
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b20:	4b8e      	ldr	r3, [pc, #568]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b24:	4a8d      	ldr	r2, [pc, #564]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b2c:	e01a      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b32:	3308      	adds	r3, #8
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 f97e 	bl	8006e38 <RCCEx_PLL2_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b42:	e00f      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b48:	3328      	adds	r3, #40	@ 0x28
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fa25 	bl	8006f9c <RCCEx_PLL3_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b58:	e004      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b60:	e000      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b6c:	4b7b      	ldr	r3, [pc, #492]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b70:	f023 0107 	bic.w	r1, r3, #7
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7a:	4a78      	ldr	r2, [pc, #480]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b80:	e003      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b96:	f04f 0b00 	mov.w	fp, #0
 8005b9a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b9e:	d04c      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005baa:	d030      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bb0:	d829      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bb4:	d02d      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005bb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bb8:	d825      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bba:	2b80      	cmp	r3, #128	@ 0x80
 8005bbc:	d018      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005bbe:	2b80      	cmp	r3, #128	@ 0x80
 8005bc0:	d821      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005bc6:	2b40      	cmp	r3, #64	@ 0x40
 8005bc8:	d007      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005bca:	e01c      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bcc:	4b63      	ldr	r3, [pc, #396]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	4a62      	ldr	r2, [pc, #392]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bd8:	e01c      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	3308      	adds	r3, #8
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 f928 	bl	8006e38 <RCCEx_PLL2_Config>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005bee:	e011      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	3328      	adds	r3, #40	@ 0x28
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f9cf 	bl	8006f9c <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005c04:	e006      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c20:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c46:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005c50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d053      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c66:	d035      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c6c:	d82e      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c72:	d031      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c78:	d828      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c7e:	d01a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c84:	d822      	bhi.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c8e:	d007      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c90:	e01c      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c92:	4b32      	ldr	r3, [pc, #200]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c96:	4a31      	ldr	r2, [pc, #196]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c9e:	e01c      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 f8c5 	bl	8006e38 <RCCEx_PLL2_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e011      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cba:	3328      	adds	r3, #40	@ 0x28
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 f96c 	bl	8006f9c <RCCEx_PLL3_Config>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cca:	e006      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cd2:	e002      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e000      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10b      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d0e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d12:	2300      	movs	r3, #0
 8005d14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005d18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	d056      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d2e:	d038      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d34:	d831      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d3a:	d034      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005d3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d40:	d82b      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d46:	d01d      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005d48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d4c:	d825      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d006      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d56:	d00a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005d58:	e01f      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005d5a:	bf00      	nop
 8005d5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d60:	4ba2      	ldr	r3, [pc, #648]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	4aa1      	ldr	r2, [pc, #644]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d6c:	e01c      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	3308      	adds	r3, #8
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 f85e 	bl	8006e38 <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d82:	e011      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d88:	3328      	adds	r3, #40	@ 0x28
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f001 f905 	bl	8006f9c <RCCEx_PLL3_Config>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da0:	e002      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10b      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005db0:	4b8e      	ldr	r3, [pc, #568]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dc0:	4a8a      	ldr	r2, [pc, #552]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dc6:	e003      	b.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ddc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005de6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005dea:	460b      	mov	r3, r1
 8005dec:	4313      	orrs	r3, r2
 8005dee:	d03a      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005df6:	2b30      	cmp	r3, #48	@ 0x30
 8005df8:	d01f      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005dfa:	2b30      	cmp	r3, #48	@ 0x30
 8005dfc:	d819      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d00c      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d815      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d111      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e0e:	4b77      	ldr	r3, [pc, #476]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e12:	4a76      	ldr	r2, [pc, #472]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e1a:	e011      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e20:	3308      	adds	r3, #8
 8005e22:	2102      	movs	r1, #2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f001 f807 	bl	8006e38 <RCCEx_PLL2_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005e30:	e006      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10a      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e48:	4b68      	ldr	r3, [pc, #416]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e56:	4a65      	ldr	r2, [pc, #404]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e5c:	e003      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e76:	2300      	movs	r3, #0
 8005e78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4313      	orrs	r3, r2
 8005e84:	d051      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e90:	d035      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e96:	d82e      	bhi.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e9c:	d031      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ea2:	d828      	bhi.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea8:	d01a      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eae:	d822      	bhi.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb8:	d007      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005eba:	e01c      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ec8:	e01c      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ece:	3308      	adds	r3, #8
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 ffb0 	bl	8006e38 <RCCEx_PLL2_Config>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ede:	e011      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee4:	3328      	adds	r3, #40	@ 0x28
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 f857 	bl	8006f9c <RCCEx_PLL3_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ef4:	e006      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005efc:	e002      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005efe:	bf00      	nop
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f0c:	4b37      	ldr	r3, [pc, #220]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f1a:	4a34      	ldr	r2, [pc, #208]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f20:	e003      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005f40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005f44:	460b      	mov	r3, r1
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d056      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f54:	d033      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005f56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f5a:	d82c      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f60:	d02f      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f66:	d826      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f6c:	d02b      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f72:	d820      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f78:	d012      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f7e:	d81a      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d022      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f88:	d115      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8e:	3308      	adds	r3, #8
 8005f90:	2101      	movs	r1, #1
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 ff50 	bl	8006e38 <RCCEx_PLL2_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f9e:	e015      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	3328      	adds	r3, #40	@ 0x28
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fff7 	bl	8006f9c <RCCEx_PLL3_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fbc:	e006      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fbe:	bf00      	nop
 8005fc0:	e004      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fc2:	bf00      	nop
 8005fc4:	e002      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fc6:	bf00      	nop
 8005fc8:	e000      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10d      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005fd4:	4b05      	ldr	r3, [pc, #20]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe2:	4a02      	ldr	r2, [pc, #8]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005fea:	bf00      	nop
 8005fec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006008:	2300      	movs	r3, #0
 800600a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800600e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006012:	460b      	mov	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	d055      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006024:	d033      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602a:	d82c      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006030:	d02f      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006036:	d826      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800603c:	d02b      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800603e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006042:	d820      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006048:	d012      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800604a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604e:	d81a      	bhi.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d022      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006058:	d115      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800605e:	3308      	adds	r3, #8
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f000 fee8 	bl	8006e38 <RCCEx_PLL2_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800606e:	e015      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	3328      	adds	r3, #40	@ 0x28
 8006076:	2101      	movs	r1, #1
 8006078:	4618      	mov	r0, r3
 800607a:	f000 ff8f 	bl	8006f9c <RCCEx_PLL3_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006084:	e00a      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800608c:	e006      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800608e:	bf00      	nop
 8006090:	e004      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800609a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10b      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060a4:	4ba3      	ldr	r3, [pc, #652]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80060b4:	4a9f      	ldr	r2, [pc, #636]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060b6:	430b      	orrs	r3, r1
 80060b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ba:	e003      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80060d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80060d4:	2300      	movs	r3, #0
 80060d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060de:	460b      	mov	r3, r1
 80060e0:	4313      	orrs	r3, r2
 80060e2:	d037      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80060e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ee:	d00e      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80060f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060f4:	d816      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d018      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80060fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060fe:	d111      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006100:	4b8c      	ldr	r3, [pc, #560]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a8b      	ldr	r2, [pc, #556]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800610a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800610c:	e00f      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006112:	3308      	adds	r3, #8
 8006114:	2101      	movs	r1, #1
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fe8e 	bl	8006e38 <RCCEx_PLL2_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006122:	e004      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10a      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006136:	4b7f      	ldr	r3, [pc, #508]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800613a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	4a7b      	ldr	r2, [pc, #492]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006146:	430b      	orrs	r3, r1
 8006148:	6513      	str	r3, [r2, #80]	@ 0x50
 800614a:	e003      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006164:	2300      	movs	r3, #0
 8006166:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800616a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	d039      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800617a:	2b03      	cmp	r3, #3
 800617c:	d81c      	bhi.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061c1 	.word	0x080061c1
 8006188:	08006195 	.word	0x08006195
 800618c:	080061a3 	.word	0x080061a3
 8006190:	080061c1 	.word	0x080061c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006194:	4b67      	ldr	r3, [pc, #412]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	4a66      	ldr	r2, [pc, #408]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800619a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800619e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061a0:	e00f      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a6:	3308      	adds	r3, #8
 80061a8:	2102      	movs	r1, #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fe44 	bl	8006e38 <RCCEx_PLL2_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80061b6:	e004      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061be:	e000      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80061c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061ca:	4b5a      	ldr	r3, [pc, #360]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ce:	f023 0103 	bic.w	r1, r3, #3
 80061d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d8:	4a56      	ldr	r2, [pc, #344]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061da:	430b      	orrs	r3, r1
 80061dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061de:	e003      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80061f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061f8:	2300      	movs	r3, #0
 80061fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006202:	460b      	mov	r3, r1
 8006204:	4313      	orrs	r3, r2
 8006206:	f000 809f 	beq.w	8006348 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800620a:	4b4b      	ldr	r3, [pc, #300]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a4a      	ldr	r2, [pc, #296]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006216:	f7fd f9b5 	bl	8003584 <HAL_GetTick>
 800621a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800621e:	e00b      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fd f9b0 	bl	8003584 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b64      	cmp	r3, #100	@ 0x64
 800622e:	d903      	bls.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006236:	e005      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006238:	4b3f      	ldr	r3, [pc, #252]	@ (8006338 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0ed      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006248:	2b00      	cmp	r3, #0
 800624a:	d179      	bne.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800624c:	4b39      	ldr	r3, [pc, #228]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800624e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006258:	4053      	eors	r3, r2
 800625a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800625e:	2b00      	cmp	r3, #0
 8006260:	d015      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006262:	4b34      	ldr	r3, [pc, #208]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800626a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800626e:	4b31      	ldr	r3, [pc, #196]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006272:	4a30      	ldr	r2, [pc, #192]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800627a:	4b2e      	ldr	r3, [pc, #184]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627e:	4a2d      	ldr	r2, [pc, #180]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006286:	4a2b      	ldr	r2, [pc, #172]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800628c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629a:	d118      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629c:	f7fd f972 	bl	8003584 <HAL_GetTick>
 80062a0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062a4:	e00d      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a6:	f7fd f96d 	bl	8003584 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80062b0:	1ad2      	subs	r2, r2, r3
 80062b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d903      	bls.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80062c0:	e005      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0eb      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80062ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d129      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e6:	d10e      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80062e8:	4b12      	ldr	r3, [pc, #72]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062f8:	091a      	lsrs	r2, r3, #4
 80062fa:	4b10      	ldr	r3, [pc, #64]	@ (800633c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006300:	430b      	orrs	r3, r1
 8006302:	6113      	str	r3, [r2, #16]
 8006304:	e005      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006306:	4b0b      	ldr	r3, [pc, #44]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	4a0a      	ldr	r2, [pc, #40]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800630c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006310:	6113      	str	r3, [r2, #16]
 8006312:	4b08      	ldr	r3, [pc, #32]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006314:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800631e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006322:	4a04      	ldr	r2, [pc, #16]	@ (8006334 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006324:	430b      	orrs	r3, r1
 8006326:	6713      	str	r3, [r2, #112]	@ 0x70
 8006328:	e00e      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800632a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800632e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006332:	e009      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006334:	58024400 	.word	0x58024400
 8006338:	58024800 	.word	0x58024800
 800633c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f002 0301 	and.w	r3, r2, #1
 8006354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006358:	2300      	movs	r3, #0
 800635a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800635e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006362:	460b      	mov	r3, r1
 8006364:	4313      	orrs	r3, r2
 8006366:	f000 8089 	beq.w	800647c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006370:	2b28      	cmp	r3, #40	@ 0x28
 8006372:	d86b      	bhi.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006374:	a201      	add	r2, pc, #4	@ (adr r2, 800637c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	08006455 	.word	0x08006455
 8006380:	0800644d 	.word	0x0800644d
 8006384:	0800644d 	.word	0x0800644d
 8006388:	0800644d 	.word	0x0800644d
 800638c:	0800644d 	.word	0x0800644d
 8006390:	0800644d 	.word	0x0800644d
 8006394:	0800644d 	.word	0x0800644d
 8006398:	0800644d 	.word	0x0800644d
 800639c:	08006421 	.word	0x08006421
 80063a0:	0800644d 	.word	0x0800644d
 80063a4:	0800644d 	.word	0x0800644d
 80063a8:	0800644d 	.word	0x0800644d
 80063ac:	0800644d 	.word	0x0800644d
 80063b0:	0800644d 	.word	0x0800644d
 80063b4:	0800644d 	.word	0x0800644d
 80063b8:	0800644d 	.word	0x0800644d
 80063bc:	08006437 	.word	0x08006437
 80063c0:	0800644d 	.word	0x0800644d
 80063c4:	0800644d 	.word	0x0800644d
 80063c8:	0800644d 	.word	0x0800644d
 80063cc:	0800644d 	.word	0x0800644d
 80063d0:	0800644d 	.word	0x0800644d
 80063d4:	0800644d 	.word	0x0800644d
 80063d8:	0800644d 	.word	0x0800644d
 80063dc:	08006455 	.word	0x08006455
 80063e0:	0800644d 	.word	0x0800644d
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	0800644d 	.word	0x0800644d
 80063ec:	0800644d 	.word	0x0800644d
 80063f0:	0800644d 	.word	0x0800644d
 80063f4:	0800644d 	.word	0x0800644d
 80063f8:	0800644d 	.word	0x0800644d
 80063fc:	08006455 	.word	0x08006455
 8006400:	0800644d 	.word	0x0800644d
 8006404:	0800644d 	.word	0x0800644d
 8006408:	0800644d 	.word	0x0800644d
 800640c:	0800644d 	.word	0x0800644d
 8006410:	0800644d 	.word	0x0800644d
 8006414:	0800644d 	.word	0x0800644d
 8006418:	0800644d 	.word	0x0800644d
 800641c:	08006455 	.word	0x08006455
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006424:	3308      	adds	r3, #8
 8006426:	2101      	movs	r1, #1
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fd05 	bl	8006e38 <RCCEx_PLL2_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006434:	e00f      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643a:	3328      	adds	r3, #40	@ 0x28
 800643c:	2101      	movs	r1, #1
 800643e:	4618      	mov	r0, r3
 8006440:	f000 fdac 	bl	8006f9c <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800644a:	e004      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800645e:	4bbf      	ldr	r3, [pc, #764]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800646c:	4abb      	ldr	r2, [pc, #748]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800646e:	430b      	orrs	r3, r1
 8006470:	6553      	str	r3, [r2, #84]	@ 0x54
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 0302 	and.w	r3, r2, #2
 8006488:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006492:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	d041      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a2:	2b05      	cmp	r3, #5
 80064a4:	d824      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80064a6:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064f9 	.word	0x080064f9
 80064b0:	080064c5 	.word	0x080064c5
 80064b4:	080064db 	.word	0x080064db
 80064b8:	080064f9 	.word	0x080064f9
 80064bc:	080064f9 	.word	0x080064f9
 80064c0:	080064f9 	.word	0x080064f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c8:	3308      	adds	r3, #8
 80064ca:	2101      	movs	r1, #1
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fcb3 	bl	8006e38 <RCCEx_PLL2_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064d8:	e00f      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	3328      	adds	r3, #40	@ 0x28
 80064e0:	2101      	movs	r1, #1
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fd5a 	bl	8006f9c <RCCEx_PLL3_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80064ee:	e004      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064f6:	e000      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80064f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006502:	4b96      	ldr	r3, [pc, #600]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006506:	f023 0107 	bic.w	r1, r3, #7
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006510:	4a92      	ldr	r2, [pc, #584]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006512:	430b      	orrs	r3, r1
 8006514:	6553      	str	r3, [r2, #84]	@ 0x54
 8006516:	e003      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800651c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f002 0304 	and.w	r3, r2, #4
 800652c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006530:	2300      	movs	r3, #0
 8006532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006536:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d044      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006544:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006548:	2b05      	cmp	r3, #5
 800654a:	d825      	bhi.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800654c:	a201      	add	r2, pc, #4	@ (adr r2, 8006554 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800654e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006552:	bf00      	nop
 8006554:	080065a1 	.word	0x080065a1
 8006558:	0800656d 	.word	0x0800656d
 800655c:	08006583 	.word	0x08006583
 8006560:	080065a1 	.word	0x080065a1
 8006564:	080065a1 	.word	0x080065a1
 8006568:	080065a1 	.word	0x080065a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	3308      	adds	r3, #8
 8006572:	2101      	movs	r1, #1
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fc5f 	bl	8006e38 <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006580:	e00f      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	3328      	adds	r3, #40	@ 0x28
 8006588:	2101      	movs	r1, #1
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fd06 	bl	8006f9c <RCCEx_PLL3_Config>
 8006590:	4603      	mov	r3, r0
 8006592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006596:	e004      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800659e:	e000      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80065a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065aa:	4b6c      	ldr	r3, [pc, #432]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ae:	f023 0107 	bic.w	r1, r3, #7
 80065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ba:	4a68      	ldr	r2, [pc, #416]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f002 0320 	and.w	r3, r2, #32
 80065d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065e4:	460b      	mov	r3, r1
 80065e6:	4313      	orrs	r3, r2
 80065e8:	d055      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065f6:	d033      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80065f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065fc:	d82c      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006602:	d02f      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006608:	d826      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800660a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800660e:	d02b      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006614:	d820      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800661a:	d012      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800661c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006620:	d81a      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d022      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800662a:	d115      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006630:	3308      	adds	r3, #8
 8006632:	2100      	movs	r1, #0
 8006634:	4618      	mov	r0, r3
 8006636:	f000 fbff 	bl	8006e38 <RCCEx_PLL2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006640:	e015      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	3328      	adds	r3, #40	@ 0x28
 8006648:	2102      	movs	r1, #2
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fca6 	bl	8006f9c <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006656:	e00a      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800665e:	e006      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006660:	bf00      	nop
 8006662:	e004      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006664:	bf00      	nop
 8006666:	e002      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800666c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10b      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006676:	4b39      	ldr	r3, [pc, #228]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800667e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006686:	4a35      	ldr	r2, [pc, #212]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6553      	str	r3, [r2, #84]	@ 0x54
 800668c:	e003      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80066a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066a6:	2300      	movs	r3, #0
 80066a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80066ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4313      	orrs	r3, r2
 80066b4:	d058      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066c2:	d033      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80066c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80066c8:	d82c      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ce:	d02f      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d4:	d826      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066da:	d02b      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80066dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066e0:	d820      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e6:	d012      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80066e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ec:	d81a      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d022      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f6:	d115      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fc:	3308      	adds	r3, #8
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fb99 	bl	8006e38 <RCCEx_PLL2_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800670c:	e015      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006712:	3328      	adds	r3, #40	@ 0x28
 8006714:	2102      	movs	r1, #2
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fc40 	bl	8006f9c <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006722:	e00a      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800672a:	e006      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800672c:	bf00      	nop
 800672e:	e004      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006730:	bf00      	nop
 8006732:	e002      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10e      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006742:	4b06      	ldr	r3, [pc, #24]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006752:	4a02      	ldr	r2, [pc, #8]	@ (800675c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6593      	str	r3, [r2, #88]	@ 0x58
 8006758:	e006      	b.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800675a:	bf00      	nop
 800675c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006778:	2300      	movs	r3, #0
 800677a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800677e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d055      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006794:	d033      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800679a:	d82c      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800679c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a0:	d02f      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a6:	d826      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067ac:	d02b      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80067ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80067b2:	d820      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067b8:	d012      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80067ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067be:	d81a      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d022      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80067c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c8:	d115      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ce:	3308      	adds	r3, #8
 80067d0:	2100      	movs	r1, #0
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fb30 	bl	8006e38 <RCCEx_PLL2_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067de:	e015      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e4:	3328      	adds	r3, #40	@ 0x28
 80067e6:	2102      	movs	r1, #2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fbd7 	bl	8006f9c <RCCEx_PLL3_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80067f4:	e00a      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067fc:	e006      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067fe:	bf00      	nop
 8006800:	e004      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006802:	bf00      	nop
 8006804:	e002      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006806:	bf00      	nop
 8006808:	e000      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800680a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800680c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006814:	4ba1      	ldr	r3, [pc, #644]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006824:	4a9d      	ldr	r2, [pc, #628]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006826:	430b      	orrs	r3, r1
 8006828:	6593      	str	r3, [r2, #88]	@ 0x58
 800682a:	e003      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f002 0308 	and.w	r3, r2, #8
 8006840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006844:	2300      	movs	r3, #0
 8006846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800684a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800684e:	460b      	mov	r3, r1
 8006850:	4313      	orrs	r3, r2
 8006852:	d01e      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006860:	d10c      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006866:	3328      	adds	r3, #40	@ 0x28
 8006868:	2102      	movs	r1, #2
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fb96 	bl	8006f9c <RCCEx_PLL3_Config>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800687c:	4b87      	ldr	r3, [pc, #540]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800687e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800688c:	4a83      	ldr	r2, [pc, #524]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800688e:	430b      	orrs	r3, r1
 8006890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f002 0310 	and.w	r3, r2, #16
 800689e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068a2:	2300      	movs	r3, #0
 80068a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80068ac:	460b      	mov	r3, r1
 80068ae:	4313      	orrs	r3, r2
 80068b0:	d01e      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068be:	d10c      	bne.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c4:	3328      	adds	r3, #40	@ 0x28
 80068c6:	2102      	movs	r1, #2
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fb67 	bl	8006f9c <RCCEx_PLL3_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068da:	4b70      	ldr	r3, [pc, #448]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ea:	4a6c      	ldr	r2, [pc, #432]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068ec:	430b      	orrs	r3, r1
 80068ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80068fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006900:	2300      	movs	r3, #0
 8006902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006906:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800690a:	460b      	mov	r3, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	d03e      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800691c:	d022      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800691e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006922:	d81b      	bhi.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800692c:	d00b      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800692e:	e015      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006934:	3308      	adds	r3, #8
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fa7d 	bl	8006e38 <RCCEx_PLL2_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006944:	e00f      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	3328      	adds	r3, #40	@ 0x28
 800694c:	2102      	movs	r1, #2
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb24 	bl	8006f9c <RCCEx_PLL3_Config>
 8006954:	4603      	mov	r3, r0
 8006956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800695a:	e004      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006962:	e000      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800696e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006972:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800697e:	4a47      	ldr	r2, [pc, #284]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006980:	430b      	orrs	r3, r1
 8006982:	6593      	str	r3, [r2, #88]	@ 0x58
 8006984:	e003      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800699a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800699c:	2300      	movs	r3, #0
 800699e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80069a4:	460b      	mov	r3, r1
 80069a6:	4313      	orrs	r3, r2
 80069a8:	d03b      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069b6:	d01f      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80069b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80069bc:	d818      	bhi.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80069be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069c2:	d003      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80069c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069c8:	d007      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80069ca:	e011      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069cc:	4b33      	ldr	r3, [pc, #204]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d0:	4a32      	ldr	r2, [pc, #200]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80069d8:	e00f      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069de:	3328      	adds	r3, #40	@ 0x28
 80069e0:	2101      	movs	r1, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fada 	bl	8006f9c <RCCEx_PLL3_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80069ee:	e004      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069f6:	e000      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80069f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10b      	bne.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a02:	4b26      	ldr	r3, [pc, #152]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a12:	4a22      	ldr	r2, [pc, #136]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a14:	430b      	orrs	r3, r1
 8006a16:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a18:	e003      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006a2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a30:	2300      	movs	r3, #0
 8006a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	d034      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a4c:	d007      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006a4e:	e011      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a50:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	4a11      	ldr	r2, [pc, #68]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a5c:	e00e      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	3308      	adds	r3, #8
 8006a64:	2102      	movs	r1, #2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f9e6 	bl	8006e38 <RCCEx_PLL2_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a72:	e003      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10d      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a84:	4b05      	ldr	r3, [pc, #20]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a92:	4a02      	ldr	r2, [pc, #8]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a98:	e006      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006aba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d00c      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	2102      	movs	r1, #2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fa65 	bl	8006f9c <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006aea:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aec:	2300      	movs	r3, #0
 8006aee:	667b      	str	r3, [r7, #100]	@ 0x64
 8006af0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006af4:	460b      	mov	r3, r1
 8006af6:	4313      	orrs	r3, r2
 8006af8:	d038      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b06:	d018      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b0c:	d811      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b12:	d014      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b18:	d80b      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d011      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b22:	d106      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b24:	4bc3      	ldr	r3, [pc, #780]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	4ac2      	ldr	r2, [pc, #776]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b30:	e008      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b38:	e004      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e002      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b3e:	bf00      	nop
 8006b40:	e000      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10b      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b4c:	4bb9      	ldr	r3, [pc, #740]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b5c:	4ab5      	ldr	r2, [pc, #724]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8006b62:	e003      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b88:	4baa      	ldr	r3, [pc, #680]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b96:	4aa7      	ldr	r2, [pc, #668]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006baa:	2300      	movs	r3, #0
 8006bac:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	d00a      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006bc8:	4a9a      	ldr	r2, [pc, #616]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bca:	430b      	orrs	r3, r1
 8006bcc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bdc:	2300      	movs	r3, #0
 8006bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006be4:	460b      	mov	r3, r1
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d009      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bea:	4b92      	ldr	r3, [pc, #584]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bee:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bf8:	4a8e      	ldr	r2, [pc, #568]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006c14:	460b      	mov	r3, r1
 8006c16:	4313      	orrs	r3, r2
 8006c18:	d00e      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c1a:	4b86      	ldr	r3, [pc, #536]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	4a85      	ldr	r2, [pc, #532]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c20:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c24:	6113      	str	r3, [r2, #16]
 8006c26:	4b83      	ldr	r3, [pc, #524]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c28:	6919      	ldr	r1, [r3, #16]
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006c32:	4a80      	ldr	r2, [pc, #512]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006c44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c46:	2300      	movs	r3, #0
 8006c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4313      	orrs	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c54:	4b77      	ldr	r3, [pc, #476]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c58:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c62:	4a74      	ldr	r2, [pc, #464]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c64:	430b      	orrs	r3, r1
 8006c66:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c76:	2300      	movs	r3, #0
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d00a      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c84:	4b6b      	ldr	r3, [pc, #428]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c88:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c94:	4a67      	ldr	r2, [pc, #412]	@ (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	d011      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cba:	3308      	adds	r3, #8
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f8ba 	bl	8006e38 <RCCEx_PLL2_Config>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	6239      	str	r1, [r7, #32]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	d011      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 f89a 	bl	8006e38 <RCCEx_PLL2_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	2100      	movs	r1, #0
 8006d24:	61b9      	str	r1, [r7, #24]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006d30:	460b      	mov	r3, r1
 8006d32:	4313      	orrs	r3, r2
 8006d34:	d011      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f87a 	bl	8006e38 <RCCEx_PLL2_Config>
 8006d44:	4603      	mov	r3, r0
 8006d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	2100      	movs	r1, #0
 8006d64:	6139      	str	r1, [r7, #16]
 8006d66:	f003 0308 	and.w	r3, r3, #8
 8006d6a:	617b      	str	r3, [r7, #20]
 8006d6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d70:	460b      	mov	r3, r1
 8006d72:	4313      	orrs	r3, r2
 8006d74:	d011      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7a:	3328      	adds	r3, #40	@ 0x28
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f90c 	bl	8006f9c <RCCEx_PLL3_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	2100      	movs	r1, #0
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	f003 0310 	and.w	r3, r3, #16
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006db0:	460b      	mov	r3, r1
 8006db2:	4313      	orrs	r3, r2
 8006db4:	d011      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dba:	3328      	adds	r3, #40	@ 0x28
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f8ec 	bl	8006f9c <RCCEx_PLL3_Config>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	2100      	movs	r1, #0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d011      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dfa:	3328      	adds	r3, #40	@ 0x28
 8006dfc:	2102      	movs	r1, #2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f8cc 	bl	8006f9c <RCCEx_PLL3_Config>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006e1a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	e000      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e34:	58024400 	.word	0x58024400

08006e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e46:	4b53      	ldr	r3, [pc, #332]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d101      	bne.n	8006e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e099      	b.n	8006f8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e56:	4b4f      	ldr	r3, [pc, #316]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a4e      	ldr	r2, [pc, #312]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e62:	f7fc fb8f 	bl	8003584 <HAL_GetTick>
 8006e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e68:	e008      	b.n	8006e7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e6a:	f7fc fb8b 	bl	8003584 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e086      	b.n	8006f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e7c:	4b45      	ldr	r3, [pc, #276]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1f0      	bne.n	8006e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e88:	4b42      	ldr	r3, [pc, #264]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	031b      	lsls	r3, r3, #12
 8006e96:	493f      	ldr	r1, [pc, #252]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	025b      	lsls	r3, r3, #9
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	041b      	lsls	r3, r3, #16
 8006eba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	061b      	lsls	r3, r3, #24
 8006ec8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ecc:	4931      	ldr	r1, [pc, #196]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006ed2:	4b30      	ldr	r3, [pc, #192]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	492d      	ldr	r1, [pc, #180]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	f023 0220 	bic.w	r2, r3, #32
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	4928      	ldr	r1, [pc, #160]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ef6:	4b27      	ldr	r3, [pc, #156]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	4a26      	ldr	r2, [pc, #152]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006efc:	f023 0310 	bic.w	r3, r3, #16
 8006f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f02:	4b24      	ldr	r3, [pc, #144]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f06:	4b24      	ldr	r3, [pc, #144]	@ (8006f98 <RCCEx_PLL2_Config+0x160>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	69d2      	ldr	r2, [r2, #28]
 8006f0e:	00d2      	lsls	r2, r2, #3
 8006f10:	4920      	ldr	r1, [pc, #128]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f16:	4b1f      	ldr	r3, [pc, #124]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	f043 0310 	orr.w	r3, r3, #16
 8006f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d106      	bne.n	8006f36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f28:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2c:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f34:	e00f      	b.n	8006f56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d106      	bne.n	8006f4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f3c:	4b15      	ldr	r3, [pc, #84]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	4a14      	ldr	r2, [pc, #80]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f48:	e005      	b.n	8006f56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f4a:	4b12      	ldr	r3, [pc, #72]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	4a11      	ldr	r2, [pc, #68]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f56:	4b0f      	ldr	r3, [pc, #60]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f62:	f7fc fb0f 	bl	8003584 <HAL_GetTick>
 8006f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f68:	e008      	b.n	8006f7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f6a:	f7fc fb0b 	bl	8003584 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e006      	b.n	8006f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f7c:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <RCCEx_PLL2_Config+0x15c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0f0      	beq.n	8006f6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400
 8006f98:	ffff0007 	.word	0xffff0007

08006f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006faa:	4b53      	ldr	r3, [pc, #332]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d101      	bne.n	8006fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e099      	b.n	80070ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fba:	4b4f      	ldr	r3, [pc, #316]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc6:	f7fc fadd 	bl	8003584 <HAL_GetTick>
 8006fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fcc:	e008      	b.n	8006fe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fce:	f7fc fad9 	bl	8003584 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d901      	bls.n	8006fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e086      	b.n	80070ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fe0:	4b45      	ldr	r3, [pc, #276]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f0      	bne.n	8006fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fec:	4b42      	ldr	r3, [pc, #264]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	051b      	lsls	r3, r3, #20
 8006ffa:	493f      	ldr	r1, [pc, #252]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	3b01      	subs	r3, #1
 8007006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	3b01      	subs	r3, #1
 8007010:	025b      	lsls	r3, r3, #9
 8007012:	b29b      	uxth	r3, r3
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	3b01      	subs	r3, #1
 800701c:	041b      	lsls	r3, r3, #16
 800701e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007022:	431a      	orrs	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	3b01      	subs	r3, #1
 800702a:	061b      	lsls	r3, r3, #24
 800702c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007030:	4931      	ldr	r1, [pc, #196]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007036:	4b30      	ldr	r3, [pc, #192]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	492d      	ldr	r1, [pc, #180]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007044:	4313      	orrs	r3, r2
 8007046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007048:	4b2b      	ldr	r3, [pc, #172]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800704a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	4928      	ldr	r1, [pc, #160]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007056:	4313      	orrs	r3, r2
 8007058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800705a:	4b27      	ldr	r3, [pc, #156]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	4a26      	ldr	r2, [pc, #152]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007066:	4b24      	ldr	r3, [pc, #144]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706a:	4b24      	ldr	r3, [pc, #144]	@ (80070fc <RCCEx_PLL3_Config+0x160>)
 800706c:	4013      	ands	r3, r2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	69d2      	ldr	r2, [r2, #28]
 8007072:	00d2      	lsls	r2, r2, #3
 8007074:	4920      	ldr	r1, [pc, #128]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007076:	4313      	orrs	r3, r2
 8007078:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800707a:	4b1f      	ldr	r3, [pc, #124]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	4a1e      	ldr	r2, [pc, #120]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800708c:	4b1a      	ldr	r3, [pc, #104]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 800708e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007090:	4a19      	ldr	r2, [pc, #100]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 8007092:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007098:	e00f      	b.n	80070ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d106      	bne.n	80070ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070a0:	4b15      	ldr	r3, [pc, #84]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a4:	4a14      	ldr	r2, [pc, #80]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070ac:	e005      	b.n	80070ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070ae:	4b12      	ldr	r3, [pc, #72]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	4a11      	ldr	r2, [pc, #68]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070ba:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a0e      	ldr	r2, [pc, #56]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c6:	f7fc fa5d 	bl	8003584 <HAL_GetTick>
 80070ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070cc:	e008      	b.n	80070e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070ce:	f7fc fa59 	bl	8003584 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070e0:	4b05      	ldr	r3, [pc, #20]	@ (80070f8 <RCCEx_PLL3_Config+0x15c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	58024400 	.word	0x58024400
 80070fc:	ffff0007 	.word	0xffff0007

08007100 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e10f      	b.n	8007332 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a87      	ldr	r2, [pc, #540]	@ (800733c <HAL_SPI_Init+0x23c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00f      	beq.n	8007142 <HAL_SPI_Init+0x42>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a86      	ldr	r2, [pc, #536]	@ (8007340 <HAL_SPI_Init+0x240>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00a      	beq.n	8007142 <HAL_SPI_Init+0x42>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a84      	ldr	r2, [pc, #528]	@ (8007344 <HAL_SPI_Init+0x244>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d005      	beq.n	8007142 <HAL_SPI_Init+0x42>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	2b0f      	cmp	r3, #15
 800713c:	d901      	bls.n	8007142 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e0f7      	b.n	8007332 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fe2e 	bl	8007da4 <SPI_GetPacketSize>
 8007148:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a7b      	ldr	r2, [pc, #492]	@ (800733c <HAL_SPI_Init+0x23c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00c      	beq.n	800716e <HAL_SPI_Init+0x6e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a79      	ldr	r2, [pc, #484]	@ (8007340 <HAL_SPI_Init+0x240>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <HAL_SPI_Init+0x6e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a78      	ldr	r2, [pc, #480]	@ (8007344 <HAL_SPI_Init+0x244>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d002      	beq.n	800716e <HAL_SPI_Init+0x6e>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2b08      	cmp	r3, #8
 800716c:	d811      	bhi.n	8007192 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007172:	4a72      	ldr	r2, [pc, #456]	@ (800733c <HAL_SPI_Init+0x23c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d009      	beq.n	800718c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a70      	ldr	r2, [pc, #448]	@ (8007340 <HAL_SPI_Init+0x240>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_SPI_Init+0x8c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6f      	ldr	r2, [pc, #444]	@ (8007344 <HAL_SPI_Init+0x244>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d104      	bne.n	8007196 <HAL_SPI_Init+0x96>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b10      	cmp	r3, #16
 8007190:	d901      	bls.n	8007196 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e0cd      	b.n	8007332 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fb fdee 	bl	8002d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0201 	bic.w	r2, r2, #1
 80071c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80071d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071dc:	d119      	bne.n	8007212 <HAL_SPI_Init+0x112>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071e6:	d103      	bne.n	80071f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10c      	bne.n	8007212 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80071fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007200:	d107      	bne.n	8007212 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007210:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <HAL_SPI_Init+0x13e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2b06      	cmp	r3, #6
 8007224:	d90b      	bls.n	800723e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	e007      	b.n	800724e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800724c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69da      	ldr	r2, [r3, #28]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007256:	431a      	orrs	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007260:	ea42 0103 	orr.w	r1, r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ae:	ea42 0103 	orr.w	r1, r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d113      	bne.n	80072ee <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072d8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072ec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0201 	bic.w	r2, r2, #1
 80072fc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40013000 	.word	0x40013000
 8007340:	40003800 	.word	0x40003800
 8007344:	40003c00 	.word	0x40003c00

08007348 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af02      	add	r7, sp, #8
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	4613      	mov	r3, r2
 8007356:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3320      	adds	r3, #32
 800735e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007360:	f7fc f910 	bl	8003584 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d001      	beq.n	8007376 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007372:	2302      	movs	r3, #2
 8007374:	e1d1      	b.n	800771a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_SPI_Transmit+0x3a>
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e1c9      	b.n	800771a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_SPI_Transmit+0x4c>
 8007390:	2302      	movs	r3, #2
 8007392:	e1c2      	b.n	800771a <HAL_SPI_Transmit+0x3d2>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2203      	movs	r2, #3
 80073a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	88fa      	ldrh	r2, [r7, #6]
 80073b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80073ec:	d108      	bne.n	8007400 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	e009      	b.n	8007414 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007412:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
 800741a:	4b96      	ldr	r3, [pc, #600]	@ (8007674 <HAL_SPI_Transmit+0x32c>)
 800741c:	4013      	ands	r3, r2
 800741e:	88f9      	ldrh	r1, [r7, #6]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	430b      	orrs	r3, r1
 8007426:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007440:	d107      	bne.n	8007452 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d947      	bls.n	80074ea <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800745a:	e03f      	b.n	80074dc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b02      	cmp	r3, #2
 8007468:	d114      	bne.n	8007494 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007492:	e023      	b.n	80074dc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007494:	f7fc f876 	bl	8003584 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d803      	bhi.n	80074ac <HAL_SPI_Transmit+0x164>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	d102      	bne.n	80074b2 <HAL_SPI_Transmit+0x16a>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d114      	bne.n	80074dc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fba8 	bl	8007c08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e11e      	b.n	800771a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1b9      	bne.n	800745c <HAL_SPI_Transmit+0x114>
 80074e8:	e0f1      	b.n	80076ce <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b07      	cmp	r3, #7
 80074f0:	f240 80e6 	bls.w	80076c0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80074f4:	e05d      	b.n	80075b2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b02      	cmp	r3, #2
 8007502:	d132      	bne.n	800756a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b01      	cmp	r3, #1
 800750e:	d918      	bls.n	8007542 <HAL_SPI_Transmit+0x1fa>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d014      	beq.n	8007542 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b02      	subs	r3, #2
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007540:	e037      	b.n	80075b2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007546:	881a      	ldrh	r2, [r3, #0]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007550:	1c9a      	adds	r2, r3, #2
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007568:	e023      	b.n	80075b2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800756a:	f7fc f80b 	bl	8003584 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d803      	bhi.n	8007582 <HAL_SPI_Transmit+0x23a>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d102      	bne.n	8007588 <HAL_SPI_Transmit+0x240>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d114      	bne.n	80075b2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fb3d 	bl	8007c08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007594:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e0b3      	b.n	800771a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d19b      	bne.n	80074f6 <HAL_SPI_Transmit+0x1ae>
 80075be:	e086      	b.n	80076ce <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f003 0302 	and.w	r3, r3, #2
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d154      	bne.n	8007678 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d918      	bls.n	800760c <HAL_SPI_Transmit+0x2c4>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075de:	2b40      	cmp	r3, #64	@ 0x40
 80075e0:	d914      	bls.n	800760c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6812      	ldr	r2, [r2, #0]
 80075ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f2:	1d1a      	adds	r2, r3, #4
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b04      	subs	r3, #4
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800760a:	e059      	b.n	80076c0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	d917      	bls.n	8007648 <HAL_SPI_Transmit+0x300>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761c:	2b00      	cmp	r3, #0
 800761e:	d013      	beq.n	8007648 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007624:	881a      	ldrh	r2, [r3, #0]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800762e:	1c9a      	adds	r2, r3, #2
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b02      	subs	r3, #2
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007646:	e03b      	b.n	80076c0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3320      	adds	r3, #32
 8007652:	7812      	ldrb	r2, [r2, #0]
 8007654:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007666:	b29b      	uxth	r3, r3
 8007668:	3b01      	subs	r3, #1
 800766a:	b29a      	uxth	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007672:	e025      	b.n	80076c0 <HAL_SPI_Transmit+0x378>
 8007674:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007678:	f7fb ff84 	bl	8003584 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d803      	bhi.n	8007690 <HAL_SPI_Transmit+0x348>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d102      	bne.n	8007696 <HAL_SPI_Transmit+0x34e>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d114      	bne.n	80076c0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fab6 	bl	8007c08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e02c      	b.n	800771a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f47f af79 	bne.w	80075c0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2108      	movs	r1, #8
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fb35 	bl	8007d48 <SPI_WaitOnFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076ea:	f043 0220 	orr.w	r2, r3, #32
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fa87 	bl	8007c08 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8007718:	2300      	movs	r3, #0
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop

08007724 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	b29b      	uxth	r3, r3
 800773c:	3301      	adds	r3, #1
 800773e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3330      	adds	r3, #48	@ 0x30
 8007746:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007748:	f7fb ff1c 	bl	8003584 <HAL_GetTick>
 800774c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d001      	beq.n	800775e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800775a:	2302      	movs	r3, #2
 800775c:	e250      	b.n	8007c00 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <HAL_SPI_Receive+0x46>
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e248      	b.n	8007c00 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_SPI_Receive+0x58>
 8007778:	2302      	movs	r3, #2
 800777a:	e241      	b.n	8007c00 <HAL_SPI_Receive+0x4dc>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2204      	movs	r2, #4
 8007788:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	88fa      	ldrh	r2, [r7, #6]
 80077a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80077d4:	d108      	bne.n	80077e8 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	e009      	b.n	80077fc <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80077fa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	4b95      	ldr	r3, [pc, #596]	@ (8007a58 <HAL_SPI_Receive+0x334>)
 8007804:	4013      	ands	r3, r2
 8007806:	88f9      	ldrh	r1, [r7, #6]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	430b      	orrs	r3, r1
 800780e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007828:	d107      	bne.n	800783a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007838:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2b0f      	cmp	r3, #15
 8007840:	d96c      	bls.n	800791c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007842:	e064      	b.n	800790e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b01      	cmp	r3, #1
 8007858:	d114      	bne.n	8007884 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007862:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007864:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800786a:	1d1a      	adds	r2, r3, #4
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007882:	e044      	b.n	800790e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800788a:	b29b      	uxth	r3, r3
 800788c:	8bfa      	ldrh	r2, [r7, #30]
 800788e:	429a      	cmp	r2, r3
 8007890:	d919      	bls.n	80078c6 <HAL_SPI_Receive+0x1a2>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d014      	beq.n	80078c6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80078a6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ac:	1d1a      	adds	r2, r3, #4
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	3b01      	subs	r3, #1
 80078bc:	b29a      	uxth	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078c4:	e023      	b.n	800790e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078c6:	f7fb fe5d 	bl	8003584 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d803      	bhi.n	80078de <HAL_SPI_Receive+0x1ba>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078dc:	d102      	bne.n	80078e4 <HAL_SPI_Receive+0x1c0>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d114      	bne.n	800790e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 f98f 	bl	8007c08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e178      	b.n	8007c00 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d194      	bne.n	8007844 <HAL_SPI_Receive+0x120>
 800791a:	e15e      	b.n	8007bda <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b07      	cmp	r3, #7
 8007922:	f240 8153 	bls.w	8007bcc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007926:	e08f      	b.n	8007a48 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b01      	cmp	r3, #1
 800793c:	d114      	bne.n	8007968 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	8812      	ldrh	r2, [r2, #0]
 8007946:	b292      	uxth	r2, r2
 8007948:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794e:	1c9a      	adds	r2, r3, #2
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007966:	e06f      	b.n	8007a48 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800796e:	b29b      	uxth	r3, r3
 8007970:	8bfa      	ldrh	r2, [r7, #30]
 8007972:	429a      	cmp	r2, r3
 8007974:	d924      	bls.n	80079c0 <HAL_SPI_Receive+0x29c>
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01f      	beq.n	80079c0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	8812      	ldrh	r2, [r2, #0]
 8007988:	b292      	uxth	r2, r2
 800798a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007990:	1c9a      	adds	r2, r3, #2
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	8812      	ldrh	r2, [r2, #0]
 800799e:	b292      	uxth	r2, r2
 80079a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079a6:	1c9a      	adds	r2, r3, #2
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b02      	subs	r3, #2
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079be:	e043      	b.n	8007a48 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d119      	bne.n	8007a00 <HAL_SPI_Receive+0x2dc>
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d014      	beq.n	8007a00 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	8812      	ldrh	r2, [r2, #0]
 80079de:	b292      	uxth	r2, r2
 80079e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079e6:	1c9a      	adds	r2, r3, #2
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80079fe:	e023      	b.n	8007a48 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a00:	f7fb fdc0 	bl	8003584 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d803      	bhi.n	8007a18 <HAL_SPI_Receive+0x2f4>
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d102      	bne.n	8007a1e <HAL_SPI_Receive+0x2fa>
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d114      	bne.n	8007a48 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 f8f2 	bl	8007c08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e0db      	b.n	8007c00 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f47f af69 	bne.w	8007928 <HAL_SPI_Receive+0x204>
 8007a56:	e0c0      	b.n	8007bda <HAL_SPI_Receive+0x4b6>
 8007a58:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d117      	bne.n	8007aa2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7e:	7812      	ldrb	r2, [r2, #0]
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007aa0:	e094      	b.n	8007bcc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	8bfa      	ldrh	r2, [r7, #30]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d946      	bls.n	8007b3e <HAL_SPI_Receive+0x41a>
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d041      	beq.n	8007b3e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac6:	7812      	ldrb	r2, [r2, #0]
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007afe:	7812      	ldrb	r2, [r2, #0]
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b1a:	7812      	ldrb	r2, [r2, #0]
 8007b1c:	b2d2      	uxtb	r2, r2
 8007b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b24:	1c5a      	adds	r2, r3, #1
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b04      	subs	r3, #4
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b3c:	e046      	b.n	8007bcc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d81c      	bhi.n	8007b84 <HAL_SPI_Receive+0x460>
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d017      	beq.n	8007b84 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b60:	7812      	ldrb	r2, [r2, #0]
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b82:	e023      	b.n	8007bcc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b84:	f7fb fcfe 	bl	8003584 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d803      	bhi.n	8007b9c <HAL_SPI_Receive+0x478>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Receive+0x47e>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d114      	bne.n	8007bcc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f830 	bl	8007c08 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e019      	b.n	8007c00 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f47f af41 	bne.w	8007a5c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 f814 	bl	8007c08 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
  }
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3720      	adds	r7, #32
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f042 0208 	orr.w	r2, r2, #8
 8007c26:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0210 	orr.w	r2, r2, #16
 8007c36:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0201 	bic.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6919      	ldr	r1, [r3, #16]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b3c      	ldr	r3, [pc, #240]	@ (8007d44 <SPI_CloseTransfer+0x13c>)
 8007c54:	400b      	ands	r3, r1
 8007c56:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689a      	ldr	r2, [r3, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c66:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d014      	beq.n	8007c9e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00f      	beq.n	8007c9e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c84:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0220 	orr.w	r2, r2, #32
 8007c9c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d014      	beq.n	8007cd4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00f      	beq.n	8007cd4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cba:	f043 0204 	orr.w	r2, r3, #4
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	699a      	ldr	r2, [r3, #24]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cd2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00f      	beq.n	8007cfe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ce4:	f043 0201 	orr.w	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cfc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00f      	beq.n	8007d28 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d0e:	f043 0208 	orr.w	r2, r3, #8
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d26:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007d38:	bf00      	nop
 8007d3a:	3714      	adds	r7, #20
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	fffffc90 	.word	0xfffffc90

08007d48 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d58:	e010      	b.n	8007d7c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d5a:	f7fb fc13 	bl	8003584 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d803      	bhi.n	8007d72 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d70:	d102      	bne.n	8007d78 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e00f      	b.n	8007d9c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	695a      	ldr	r2, [r3, #20]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	4013      	ands	r3, r2
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	bf0c      	ite	eq
 8007d8c:	2301      	moveq	r3, #1
 8007d8e:	2300      	movne	r3, #0
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	461a      	mov	r2, r3
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d0df      	beq.n	8007d5a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	3301      	adds	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3307      	adds	r3, #7
 8007dc2:	08db      	lsrs	r3, r3, #3
 8007dc4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <__cvt>:
 8007dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ddc:	ed2d 8b02 	vpush	{d8}
 8007de0:	eeb0 8b40 	vmov.f64	d8, d0
 8007de4:	b085      	sub	sp, #20
 8007de6:	4617      	mov	r7, r2
 8007de8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dec:	ee18 2a90 	vmov	r2, s17
 8007df0:	f025 0520 	bic.w	r5, r5, #32
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	bfb6      	itet	lt
 8007df8:	222d      	movlt	r2, #45	@ 0x2d
 8007dfa:	2200      	movge	r2, #0
 8007dfc:	eeb1 8b40 	vneglt.f64	d8, d0
 8007e00:	2d46      	cmp	r5, #70	@ 0x46
 8007e02:	460c      	mov	r4, r1
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	d004      	beq.n	8007e12 <__cvt+0x38>
 8007e08:	2d45      	cmp	r5, #69	@ 0x45
 8007e0a:	d100      	bne.n	8007e0e <__cvt+0x34>
 8007e0c:	3401      	adds	r4, #1
 8007e0e:	2102      	movs	r1, #2
 8007e10:	e000      	b.n	8007e14 <__cvt+0x3a>
 8007e12:	2103      	movs	r1, #3
 8007e14:	ab03      	add	r3, sp, #12
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	ab02      	add	r3, sp, #8
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	4633      	mov	r3, r6
 8007e20:	eeb0 0b48 	vmov.f64	d0, d8
 8007e24:	f001 f950 	bl	80090c8 <_dtoa_r>
 8007e28:	2d47      	cmp	r5, #71	@ 0x47
 8007e2a:	d114      	bne.n	8007e56 <__cvt+0x7c>
 8007e2c:	07fb      	lsls	r3, r7, #31
 8007e2e:	d50a      	bpl.n	8007e46 <__cvt+0x6c>
 8007e30:	1902      	adds	r2, r0, r4
 8007e32:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3a:	bf08      	it	eq
 8007e3c:	9203      	streq	r2, [sp, #12]
 8007e3e:	2130      	movs	r1, #48	@ 0x30
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d319      	bcc.n	8007e7a <__cvt+0xa0>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e4a:	1a1b      	subs	r3, r3, r0
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	b005      	add	sp, #20
 8007e50:	ecbd 8b02 	vpop	{d8}
 8007e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e56:	2d46      	cmp	r5, #70	@ 0x46
 8007e58:	eb00 0204 	add.w	r2, r0, r4
 8007e5c:	d1e9      	bne.n	8007e32 <__cvt+0x58>
 8007e5e:	7803      	ldrb	r3, [r0, #0]
 8007e60:	2b30      	cmp	r3, #48	@ 0x30
 8007e62:	d107      	bne.n	8007e74 <__cvt+0x9a>
 8007e64:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6c:	bf1c      	itt	ne
 8007e6e:	f1c4 0401 	rsbne	r4, r4, #1
 8007e72:	6034      	strne	r4, [r6, #0]
 8007e74:	6833      	ldr	r3, [r6, #0]
 8007e76:	441a      	add	r2, r3
 8007e78:	e7db      	b.n	8007e32 <__cvt+0x58>
 8007e7a:	1c5c      	adds	r4, r3, #1
 8007e7c:	9403      	str	r4, [sp, #12]
 8007e7e:	7019      	strb	r1, [r3, #0]
 8007e80:	e7de      	b.n	8007e40 <__cvt+0x66>

08007e82 <__exponent>:
 8007e82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e84:	2900      	cmp	r1, #0
 8007e86:	bfba      	itte	lt
 8007e88:	4249      	neglt	r1, r1
 8007e8a:	232d      	movlt	r3, #45	@ 0x2d
 8007e8c:	232b      	movge	r3, #43	@ 0x2b
 8007e8e:	2909      	cmp	r1, #9
 8007e90:	7002      	strb	r2, [r0, #0]
 8007e92:	7043      	strb	r3, [r0, #1]
 8007e94:	dd29      	ble.n	8007eea <__exponent+0x68>
 8007e96:	f10d 0307 	add.w	r3, sp, #7
 8007e9a:	461d      	mov	r5, r3
 8007e9c:	270a      	movs	r7, #10
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ea4:	fb07 1416 	mls	r4, r7, r6, r1
 8007ea8:	3430      	adds	r4, #48	@ 0x30
 8007eaa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007eae:	460c      	mov	r4, r1
 8007eb0:	2c63      	cmp	r4, #99	@ 0x63
 8007eb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	dcf1      	bgt.n	8007e9e <__exponent+0x1c>
 8007eba:	3130      	adds	r1, #48	@ 0x30
 8007ebc:	1e94      	subs	r4, r2, #2
 8007ebe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ec2:	1c41      	adds	r1, r0, #1
 8007ec4:	4623      	mov	r3, r4
 8007ec6:	42ab      	cmp	r3, r5
 8007ec8:	d30a      	bcc.n	8007ee0 <__exponent+0x5e>
 8007eca:	f10d 0309 	add.w	r3, sp, #9
 8007ece:	1a9b      	subs	r3, r3, r2
 8007ed0:	42ac      	cmp	r4, r5
 8007ed2:	bf88      	it	hi
 8007ed4:	2300      	movhi	r3, #0
 8007ed6:	3302      	adds	r3, #2
 8007ed8:	4403      	add	r3, r0
 8007eda:	1a18      	subs	r0, r3, r0
 8007edc:	b003      	add	sp, #12
 8007ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ee4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ee8:	e7ed      	b.n	8007ec6 <__exponent+0x44>
 8007eea:	2330      	movs	r3, #48	@ 0x30
 8007eec:	3130      	adds	r1, #48	@ 0x30
 8007eee:	7083      	strb	r3, [r0, #2]
 8007ef0:	70c1      	strb	r1, [r0, #3]
 8007ef2:	1d03      	adds	r3, r0, #4
 8007ef4:	e7f1      	b.n	8007eda <__exponent+0x58>
	...

08007ef8 <_printf_float>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	b08d      	sub	sp, #52	@ 0x34
 8007efe:	460c      	mov	r4, r1
 8007f00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f04:	4616      	mov	r6, r2
 8007f06:	461f      	mov	r7, r3
 8007f08:	4605      	mov	r5, r0
 8007f0a:	f000 ffd5 	bl	8008eb8 <_localeconv_r>
 8007f0e:	f8d0 b000 	ldr.w	fp, [r0]
 8007f12:	4658      	mov	r0, fp
 8007f14:	f7f8 fa34 	bl	8000380 <strlen>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	9005      	str	r0, [sp, #20]
 8007f28:	3307      	adds	r3, #7
 8007f2a:	f023 0307 	bic.w	r3, r3, #7
 8007f2e:	f103 0108 	add.w	r1, r3, #8
 8007f32:	f8c8 1000 	str.w	r1, [r8]
 8007f36:	ed93 0b00 	vldr	d0, [r3]
 8007f3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008198 <_printf_float+0x2a0>
 8007f3e:	eeb0 7bc0 	vabs.f64	d7, d0
 8007f42:	eeb4 7b46 	vcmp.f64	d7, d6
 8007f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007f4e:	dd24      	ble.n	8007f9a <_printf_float+0xa2>
 8007f50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f58:	d502      	bpl.n	8007f60 <_printf_float+0x68>
 8007f5a:	232d      	movs	r3, #45	@ 0x2d
 8007f5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f60:	498f      	ldr	r1, [pc, #572]	@ (80081a0 <_printf_float+0x2a8>)
 8007f62:	4b90      	ldr	r3, [pc, #576]	@ (80081a4 <_printf_float+0x2ac>)
 8007f64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007f68:	bf8c      	ite	hi
 8007f6a:	4688      	movhi	r8, r1
 8007f6c:	4698      	movls	r8, r3
 8007f6e:	f022 0204 	bic.w	r2, r2, #4
 8007f72:	2303      	movs	r3, #3
 8007f74:	6123      	str	r3, [r4, #16]
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	f04f 0a00 	mov.w	sl, #0
 8007f7c:	9700      	str	r7, [sp, #0]
 8007f7e:	4633      	mov	r3, r6
 8007f80:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f000 f9d1 	bl	800832c <_printf_common>
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f040 8089 	bne.w	80080a2 <_printf_float+0x1aa>
 8007f90:	f04f 30ff 	mov.w	r0, #4294967295
 8007f94:	b00d      	add	sp, #52	@ 0x34
 8007f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9a:	eeb4 0b40 	vcmp.f64	d0, d0
 8007f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa2:	d709      	bvc.n	8007fb8 <_printf_float+0xc0>
 8007fa4:	ee10 3a90 	vmov	r3, s1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bfbc      	itt	lt
 8007fac:	232d      	movlt	r3, #45	@ 0x2d
 8007fae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007fb2:	497d      	ldr	r1, [pc, #500]	@ (80081a8 <_printf_float+0x2b0>)
 8007fb4:	4b7d      	ldr	r3, [pc, #500]	@ (80081ac <_printf_float+0x2b4>)
 8007fb6:	e7d5      	b.n	8007f64 <_printf_float+0x6c>
 8007fb8:	6863      	ldr	r3, [r4, #4]
 8007fba:	1c59      	adds	r1, r3, #1
 8007fbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007fc0:	d139      	bne.n	8008036 <_printf_float+0x13e>
 8007fc2:	2306      	movs	r3, #6
 8007fc4:	6063      	str	r3, [r4, #4]
 8007fc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6022      	str	r2, [r4, #0]
 8007fce:	9303      	str	r3, [sp, #12]
 8007fd0:	ab0a      	add	r3, sp, #40	@ 0x28
 8007fd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007fd6:	ab09      	add	r3, sp, #36	@ 0x24
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	6861      	ldr	r1, [r4, #4]
 8007fdc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f7ff fefa 	bl	8007dda <__cvt>
 8007fe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fec:	4680      	mov	r8, r0
 8007fee:	d129      	bne.n	8008044 <_printf_float+0x14c>
 8007ff0:	1cc8      	adds	r0, r1, #3
 8007ff2:	db02      	blt.n	8007ffa <_printf_float+0x102>
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	dd41      	ble.n	800807e <_printf_float+0x186>
 8007ffa:	f1a9 0902 	sub.w	r9, r9, #2
 8007ffe:	fa5f f989 	uxtb.w	r9, r9
 8008002:	3901      	subs	r1, #1
 8008004:	464a      	mov	r2, r9
 8008006:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800800a:	9109      	str	r1, [sp, #36]	@ 0x24
 800800c:	f7ff ff39 	bl	8007e82 <__exponent>
 8008010:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008012:	1813      	adds	r3, r2, r0
 8008014:	2a01      	cmp	r2, #1
 8008016:	4682      	mov	sl, r0
 8008018:	6123      	str	r3, [r4, #16]
 800801a:	dc02      	bgt.n	8008022 <_printf_float+0x12a>
 800801c:	6822      	ldr	r2, [r4, #0]
 800801e:	07d2      	lsls	r2, r2, #31
 8008020:	d501      	bpl.n	8008026 <_printf_float+0x12e>
 8008022:	3301      	adds	r3, #1
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800802a:	2b00      	cmp	r3, #0
 800802c:	d0a6      	beq.n	8007f7c <_printf_float+0x84>
 800802e:	232d      	movs	r3, #45	@ 0x2d
 8008030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008034:	e7a2      	b.n	8007f7c <_printf_float+0x84>
 8008036:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800803a:	d1c4      	bne.n	8007fc6 <_printf_float+0xce>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1c2      	bne.n	8007fc6 <_printf_float+0xce>
 8008040:	2301      	movs	r3, #1
 8008042:	e7bf      	b.n	8007fc4 <_printf_float+0xcc>
 8008044:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008048:	d9db      	bls.n	8008002 <_printf_float+0x10a>
 800804a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800804e:	d118      	bne.n	8008082 <_printf_float+0x18a>
 8008050:	2900      	cmp	r1, #0
 8008052:	6863      	ldr	r3, [r4, #4]
 8008054:	dd0b      	ble.n	800806e <_printf_float+0x176>
 8008056:	6121      	str	r1, [r4, #16]
 8008058:	b913      	cbnz	r3, 8008060 <_printf_float+0x168>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	07d0      	lsls	r0, r2, #31
 800805e:	d502      	bpl.n	8008066 <_printf_float+0x16e>
 8008060:	3301      	adds	r3, #1
 8008062:	440b      	add	r3, r1
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008068:	f04f 0a00 	mov.w	sl, #0
 800806c:	e7db      	b.n	8008026 <_printf_float+0x12e>
 800806e:	b913      	cbnz	r3, 8008076 <_printf_float+0x17e>
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	07d2      	lsls	r2, r2, #31
 8008074:	d501      	bpl.n	800807a <_printf_float+0x182>
 8008076:	3302      	adds	r3, #2
 8008078:	e7f4      	b.n	8008064 <_printf_float+0x16c>
 800807a:	2301      	movs	r3, #1
 800807c:	e7f2      	b.n	8008064 <_printf_float+0x16c>
 800807e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008084:	4299      	cmp	r1, r3
 8008086:	db05      	blt.n	8008094 <_printf_float+0x19c>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	6121      	str	r1, [r4, #16]
 800808c:	07d8      	lsls	r0, r3, #31
 800808e:	d5ea      	bpl.n	8008066 <_printf_float+0x16e>
 8008090:	1c4b      	adds	r3, r1, #1
 8008092:	e7e7      	b.n	8008064 <_printf_float+0x16c>
 8008094:	2900      	cmp	r1, #0
 8008096:	bfd4      	ite	le
 8008098:	f1c1 0202 	rsble	r2, r1, #2
 800809c:	2201      	movgt	r2, #1
 800809e:	4413      	add	r3, r2
 80080a0:	e7e0      	b.n	8008064 <_printf_float+0x16c>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	055a      	lsls	r2, r3, #21
 80080a6:	d407      	bmi.n	80080b8 <_printf_float+0x1c0>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	4642      	mov	r2, r8
 80080ac:	4631      	mov	r1, r6
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	d12a      	bne.n	800810c <_printf_float+0x214>
 80080b6:	e76b      	b.n	8007f90 <_printf_float+0x98>
 80080b8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80080bc:	f240 80e0 	bls.w	8008280 <_printf_float+0x388>
 80080c0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80080c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080cc:	d133      	bne.n	8008136 <_printf_float+0x23e>
 80080ce:	4a38      	ldr	r2, [pc, #224]	@ (80081b0 <_printf_float+0x2b8>)
 80080d0:	2301      	movs	r3, #1
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	f43f af59 	beq.w	8007f90 <_printf_float+0x98>
 80080de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80080e2:	4543      	cmp	r3, r8
 80080e4:	db02      	blt.n	80080ec <_printf_float+0x1f4>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	07d8      	lsls	r0, r3, #31
 80080ea:	d50f      	bpl.n	800810c <_printf_float+0x214>
 80080ec:	9b05      	ldr	r3, [sp, #20]
 80080ee:	465a      	mov	r2, fp
 80080f0:	4631      	mov	r1, r6
 80080f2:	4628      	mov	r0, r5
 80080f4:	47b8      	blx	r7
 80080f6:	3001      	adds	r0, #1
 80080f8:	f43f af4a 	beq.w	8007f90 <_printf_float+0x98>
 80080fc:	f04f 0900 	mov.w	r9, #0
 8008100:	f108 38ff 	add.w	r8, r8, #4294967295
 8008104:	f104 0a1a 	add.w	sl, r4, #26
 8008108:	45c8      	cmp	r8, r9
 800810a:	dc09      	bgt.n	8008120 <_printf_float+0x228>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	079b      	lsls	r3, r3, #30
 8008110:	f100 8107 	bmi.w	8008322 <_printf_float+0x42a>
 8008114:	68e0      	ldr	r0, [r4, #12]
 8008116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008118:	4298      	cmp	r0, r3
 800811a:	bfb8      	it	lt
 800811c:	4618      	movlt	r0, r3
 800811e:	e739      	b.n	8007f94 <_printf_float+0x9c>
 8008120:	2301      	movs	r3, #1
 8008122:	4652      	mov	r2, sl
 8008124:	4631      	mov	r1, r6
 8008126:	4628      	mov	r0, r5
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	f43f af30 	beq.w	8007f90 <_printf_float+0x98>
 8008130:	f109 0901 	add.w	r9, r9, #1
 8008134:	e7e8      	b.n	8008108 <_printf_float+0x210>
 8008136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc3b      	bgt.n	80081b4 <_printf_float+0x2bc>
 800813c:	4a1c      	ldr	r2, [pc, #112]	@ (80081b0 <_printf_float+0x2b8>)
 800813e:	2301      	movs	r3, #1
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	f43f af22 	beq.w	8007f90 <_printf_float+0x98>
 800814c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008150:	ea59 0303 	orrs.w	r3, r9, r3
 8008154:	d102      	bne.n	800815c <_printf_float+0x264>
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	07d9      	lsls	r1, r3, #31
 800815a:	d5d7      	bpl.n	800810c <_printf_float+0x214>
 800815c:	9b05      	ldr	r3, [sp, #20]
 800815e:	465a      	mov	r2, fp
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f af12 	beq.w	8007f90 <_printf_float+0x98>
 800816c:	f04f 0a00 	mov.w	sl, #0
 8008170:	f104 0b1a 	add.w	fp, r4, #26
 8008174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008176:	425b      	negs	r3, r3
 8008178:	4553      	cmp	r3, sl
 800817a:	dc01      	bgt.n	8008180 <_printf_float+0x288>
 800817c:	464b      	mov	r3, r9
 800817e:	e794      	b.n	80080aa <_printf_float+0x1b2>
 8008180:	2301      	movs	r3, #1
 8008182:	465a      	mov	r2, fp
 8008184:	4631      	mov	r1, r6
 8008186:	4628      	mov	r0, r5
 8008188:	47b8      	blx	r7
 800818a:	3001      	adds	r0, #1
 800818c:	f43f af00 	beq.w	8007f90 <_printf_float+0x98>
 8008190:	f10a 0a01 	add.w	sl, sl, #1
 8008194:	e7ee      	b.n	8008174 <_printf_float+0x27c>
 8008196:	bf00      	nop
 8008198:	ffffffff 	.word	0xffffffff
 800819c:	7fefffff 	.word	0x7fefffff
 80081a0:	0800cda0 	.word	0x0800cda0
 80081a4:	0800cd9c 	.word	0x0800cd9c
 80081a8:	0800cda8 	.word	0x0800cda8
 80081ac:	0800cda4 	.word	0x0800cda4
 80081b0:	0800cdac 	.word	0x0800cdac
 80081b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80081ba:	4553      	cmp	r3, sl
 80081bc:	bfa8      	it	ge
 80081be:	4653      	movge	r3, sl
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	4699      	mov	r9, r3
 80081c4:	dc37      	bgt.n	8008236 <_printf_float+0x33e>
 80081c6:	2300      	movs	r3, #0
 80081c8:	9307      	str	r3, [sp, #28]
 80081ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ce:	f104 021a 	add.w	r2, r4, #26
 80081d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80081d4:	9907      	ldr	r1, [sp, #28]
 80081d6:	9306      	str	r3, [sp, #24]
 80081d8:	eba3 0309 	sub.w	r3, r3, r9
 80081dc:	428b      	cmp	r3, r1
 80081de:	dc31      	bgt.n	8008244 <_printf_float+0x34c>
 80081e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e2:	459a      	cmp	sl, r3
 80081e4:	dc3b      	bgt.n	800825e <_printf_float+0x366>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	07da      	lsls	r2, r3, #31
 80081ea:	d438      	bmi.n	800825e <_printf_float+0x366>
 80081ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ee:	ebaa 0903 	sub.w	r9, sl, r3
 80081f2:	9b06      	ldr	r3, [sp, #24]
 80081f4:	ebaa 0303 	sub.w	r3, sl, r3
 80081f8:	4599      	cmp	r9, r3
 80081fa:	bfa8      	it	ge
 80081fc:	4699      	movge	r9, r3
 80081fe:	f1b9 0f00 	cmp.w	r9, #0
 8008202:	dc34      	bgt.n	800826e <_printf_float+0x376>
 8008204:	f04f 0800 	mov.w	r8, #0
 8008208:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800820c:	f104 0b1a 	add.w	fp, r4, #26
 8008210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008212:	ebaa 0303 	sub.w	r3, sl, r3
 8008216:	eba3 0309 	sub.w	r3, r3, r9
 800821a:	4543      	cmp	r3, r8
 800821c:	f77f af76 	ble.w	800810c <_printf_float+0x214>
 8008220:	2301      	movs	r3, #1
 8008222:	465a      	mov	r2, fp
 8008224:	4631      	mov	r1, r6
 8008226:	4628      	mov	r0, r5
 8008228:	47b8      	blx	r7
 800822a:	3001      	adds	r0, #1
 800822c:	f43f aeb0 	beq.w	8007f90 <_printf_float+0x98>
 8008230:	f108 0801 	add.w	r8, r8, #1
 8008234:	e7ec      	b.n	8008210 <_printf_float+0x318>
 8008236:	4642      	mov	r2, r8
 8008238:	4631      	mov	r1, r6
 800823a:	4628      	mov	r0, r5
 800823c:	47b8      	blx	r7
 800823e:	3001      	adds	r0, #1
 8008240:	d1c1      	bne.n	80081c6 <_printf_float+0x2ce>
 8008242:	e6a5      	b.n	8007f90 <_printf_float+0x98>
 8008244:	2301      	movs	r3, #1
 8008246:	4631      	mov	r1, r6
 8008248:	4628      	mov	r0, r5
 800824a:	9206      	str	r2, [sp, #24]
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f ae9e 	beq.w	8007f90 <_printf_float+0x98>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	9a06      	ldr	r2, [sp, #24]
 8008258:	3301      	adds	r3, #1
 800825a:	9307      	str	r3, [sp, #28]
 800825c:	e7b9      	b.n	80081d2 <_printf_float+0x2da>
 800825e:	9b05      	ldr	r3, [sp, #20]
 8008260:	465a      	mov	r2, fp
 8008262:	4631      	mov	r1, r6
 8008264:	4628      	mov	r0, r5
 8008266:	47b8      	blx	r7
 8008268:	3001      	adds	r0, #1
 800826a:	d1bf      	bne.n	80081ec <_printf_float+0x2f4>
 800826c:	e690      	b.n	8007f90 <_printf_float+0x98>
 800826e:	9a06      	ldr	r2, [sp, #24]
 8008270:	464b      	mov	r3, r9
 8008272:	4442      	add	r2, r8
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	d1c2      	bne.n	8008204 <_printf_float+0x30c>
 800827e:	e687      	b.n	8007f90 <_printf_float+0x98>
 8008280:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008284:	f1b9 0f01 	cmp.w	r9, #1
 8008288:	dc01      	bgt.n	800828e <_printf_float+0x396>
 800828a:	07db      	lsls	r3, r3, #31
 800828c:	d536      	bpl.n	80082fc <_printf_float+0x404>
 800828e:	2301      	movs	r3, #1
 8008290:	4642      	mov	r2, r8
 8008292:	4631      	mov	r1, r6
 8008294:	4628      	mov	r0, r5
 8008296:	47b8      	blx	r7
 8008298:	3001      	adds	r0, #1
 800829a:	f43f ae79 	beq.w	8007f90 <_printf_float+0x98>
 800829e:	9b05      	ldr	r3, [sp, #20]
 80082a0:	465a      	mov	r2, fp
 80082a2:	4631      	mov	r1, r6
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b8      	blx	r7
 80082a8:	3001      	adds	r0, #1
 80082aa:	f43f ae71 	beq.w	8007f90 <_printf_float+0x98>
 80082ae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80082b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ba:	f109 39ff 	add.w	r9, r9, #4294967295
 80082be:	d018      	beq.n	80082f2 <_printf_float+0x3fa>
 80082c0:	464b      	mov	r3, r9
 80082c2:	f108 0201 	add.w	r2, r8, #1
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	d10c      	bne.n	80082ea <_printf_float+0x3f2>
 80082d0:	e65e      	b.n	8007f90 <_printf_float+0x98>
 80082d2:	2301      	movs	r3, #1
 80082d4:	465a      	mov	r2, fp
 80082d6:	4631      	mov	r1, r6
 80082d8:	4628      	mov	r0, r5
 80082da:	47b8      	blx	r7
 80082dc:	3001      	adds	r0, #1
 80082de:	f43f ae57 	beq.w	8007f90 <_printf_float+0x98>
 80082e2:	f108 0801 	add.w	r8, r8, #1
 80082e6:	45c8      	cmp	r8, r9
 80082e8:	dbf3      	blt.n	80082d2 <_printf_float+0x3da>
 80082ea:	4653      	mov	r3, sl
 80082ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80082f0:	e6dc      	b.n	80080ac <_printf_float+0x1b4>
 80082f2:	f04f 0800 	mov.w	r8, #0
 80082f6:	f104 0b1a 	add.w	fp, r4, #26
 80082fa:	e7f4      	b.n	80082e6 <_printf_float+0x3ee>
 80082fc:	2301      	movs	r3, #1
 80082fe:	4642      	mov	r2, r8
 8008300:	e7e1      	b.n	80082c6 <_printf_float+0x3ce>
 8008302:	2301      	movs	r3, #1
 8008304:	464a      	mov	r2, r9
 8008306:	4631      	mov	r1, r6
 8008308:	4628      	mov	r0, r5
 800830a:	47b8      	blx	r7
 800830c:	3001      	adds	r0, #1
 800830e:	f43f ae3f 	beq.w	8007f90 <_printf_float+0x98>
 8008312:	f108 0801 	add.w	r8, r8, #1
 8008316:	68e3      	ldr	r3, [r4, #12]
 8008318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800831a:	1a5b      	subs	r3, r3, r1
 800831c:	4543      	cmp	r3, r8
 800831e:	dcf0      	bgt.n	8008302 <_printf_float+0x40a>
 8008320:	e6f8      	b.n	8008114 <_printf_float+0x21c>
 8008322:	f04f 0800 	mov.w	r8, #0
 8008326:	f104 0919 	add.w	r9, r4, #25
 800832a:	e7f4      	b.n	8008316 <_printf_float+0x41e>

0800832c <_printf_common>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	4616      	mov	r6, r2
 8008332:	4698      	mov	r8, r3
 8008334:	688a      	ldr	r2, [r1, #8]
 8008336:	690b      	ldr	r3, [r1, #16]
 8008338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800833c:	4293      	cmp	r3, r2
 800833e:	bfb8      	it	lt
 8008340:	4613      	movlt	r3, r2
 8008342:	6033      	str	r3, [r6, #0]
 8008344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008348:	4607      	mov	r7, r0
 800834a:	460c      	mov	r4, r1
 800834c:	b10a      	cbz	r2, 8008352 <_printf_common+0x26>
 800834e:	3301      	adds	r3, #1
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	0699      	lsls	r1, r3, #26
 8008356:	bf42      	ittt	mi
 8008358:	6833      	ldrmi	r3, [r6, #0]
 800835a:	3302      	addmi	r3, #2
 800835c:	6033      	strmi	r3, [r6, #0]
 800835e:	6825      	ldr	r5, [r4, #0]
 8008360:	f015 0506 	ands.w	r5, r5, #6
 8008364:	d106      	bne.n	8008374 <_printf_common+0x48>
 8008366:	f104 0a19 	add.w	sl, r4, #25
 800836a:	68e3      	ldr	r3, [r4, #12]
 800836c:	6832      	ldr	r2, [r6, #0]
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	42ab      	cmp	r3, r5
 8008372:	dc26      	bgt.n	80083c2 <_printf_common+0x96>
 8008374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	3b00      	subs	r3, #0
 800837c:	bf18      	it	ne
 800837e:	2301      	movne	r3, #1
 8008380:	0692      	lsls	r2, r2, #26
 8008382:	d42b      	bmi.n	80083dc <_printf_common+0xb0>
 8008384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008388:	4641      	mov	r1, r8
 800838a:	4638      	mov	r0, r7
 800838c:	47c8      	blx	r9
 800838e:	3001      	adds	r0, #1
 8008390:	d01e      	beq.n	80083d0 <_printf_common+0xa4>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	6922      	ldr	r2, [r4, #16]
 8008396:	f003 0306 	and.w	r3, r3, #6
 800839a:	2b04      	cmp	r3, #4
 800839c:	bf02      	ittt	eq
 800839e:	68e5      	ldreq	r5, [r4, #12]
 80083a0:	6833      	ldreq	r3, [r6, #0]
 80083a2:	1aed      	subeq	r5, r5, r3
 80083a4:	68a3      	ldr	r3, [r4, #8]
 80083a6:	bf0c      	ite	eq
 80083a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083ac:	2500      	movne	r5, #0
 80083ae:	4293      	cmp	r3, r2
 80083b0:	bfc4      	itt	gt
 80083b2:	1a9b      	subgt	r3, r3, r2
 80083b4:	18ed      	addgt	r5, r5, r3
 80083b6:	2600      	movs	r6, #0
 80083b8:	341a      	adds	r4, #26
 80083ba:	42b5      	cmp	r5, r6
 80083bc:	d11a      	bne.n	80083f4 <_printf_common+0xc8>
 80083be:	2000      	movs	r0, #0
 80083c0:	e008      	b.n	80083d4 <_printf_common+0xa8>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4652      	mov	r2, sl
 80083c6:	4641      	mov	r1, r8
 80083c8:	4638      	mov	r0, r7
 80083ca:	47c8      	blx	r9
 80083cc:	3001      	adds	r0, #1
 80083ce:	d103      	bne.n	80083d8 <_printf_common+0xac>
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d8:	3501      	adds	r5, #1
 80083da:	e7c6      	b.n	800836a <_printf_common+0x3e>
 80083dc:	18e1      	adds	r1, r4, r3
 80083de:	1c5a      	adds	r2, r3, #1
 80083e0:	2030      	movs	r0, #48	@ 0x30
 80083e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80083e6:	4422      	add	r2, r4
 80083e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80083ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083f0:	3302      	adds	r3, #2
 80083f2:	e7c7      	b.n	8008384 <_printf_common+0x58>
 80083f4:	2301      	movs	r3, #1
 80083f6:	4622      	mov	r2, r4
 80083f8:	4641      	mov	r1, r8
 80083fa:	4638      	mov	r0, r7
 80083fc:	47c8      	blx	r9
 80083fe:	3001      	adds	r0, #1
 8008400:	d0e6      	beq.n	80083d0 <_printf_common+0xa4>
 8008402:	3601      	adds	r6, #1
 8008404:	e7d9      	b.n	80083ba <_printf_common+0x8e>
	...

08008408 <_printf_i>:
 8008408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	7e0f      	ldrb	r7, [r1, #24]
 800840e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008410:	2f78      	cmp	r7, #120	@ 0x78
 8008412:	4691      	mov	r9, r2
 8008414:	4680      	mov	r8, r0
 8008416:	460c      	mov	r4, r1
 8008418:	469a      	mov	sl, r3
 800841a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800841e:	d807      	bhi.n	8008430 <_printf_i+0x28>
 8008420:	2f62      	cmp	r7, #98	@ 0x62
 8008422:	d80a      	bhi.n	800843a <_printf_i+0x32>
 8008424:	2f00      	cmp	r7, #0
 8008426:	f000 80d1 	beq.w	80085cc <_printf_i+0x1c4>
 800842a:	2f58      	cmp	r7, #88	@ 0x58
 800842c:	f000 80b8 	beq.w	80085a0 <_printf_i+0x198>
 8008430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008438:	e03a      	b.n	80084b0 <_printf_i+0xa8>
 800843a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800843e:	2b15      	cmp	r3, #21
 8008440:	d8f6      	bhi.n	8008430 <_printf_i+0x28>
 8008442:	a101      	add	r1, pc, #4	@ (adr r1, 8008448 <_printf_i+0x40>)
 8008444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008448:	080084a1 	.word	0x080084a1
 800844c:	080084b5 	.word	0x080084b5
 8008450:	08008431 	.word	0x08008431
 8008454:	08008431 	.word	0x08008431
 8008458:	08008431 	.word	0x08008431
 800845c:	08008431 	.word	0x08008431
 8008460:	080084b5 	.word	0x080084b5
 8008464:	08008431 	.word	0x08008431
 8008468:	08008431 	.word	0x08008431
 800846c:	08008431 	.word	0x08008431
 8008470:	08008431 	.word	0x08008431
 8008474:	080085b3 	.word	0x080085b3
 8008478:	080084df 	.word	0x080084df
 800847c:	0800856d 	.word	0x0800856d
 8008480:	08008431 	.word	0x08008431
 8008484:	08008431 	.word	0x08008431
 8008488:	080085d5 	.word	0x080085d5
 800848c:	08008431 	.word	0x08008431
 8008490:	080084df 	.word	0x080084df
 8008494:	08008431 	.word	0x08008431
 8008498:	08008431 	.word	0x08008431
 800849c:	08008575 	.word	0x08008575
 80084a0:	6833      	ldr	r3, [r6, #0]
 80084a2:	1d1a      	adds	r2, r3, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6032      	str	r2, [r6, #0]
 80084a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084b0:	2301      	movs	r3, #1
 80084b2:	e09c      	b.n	80085ee <_printf_i+0x1e6>
 80084b4:	6833      	ldr	r3, [r6, #0]
 80084b6:	6820      	ldr	r0, [r4, #0]
 80084b8:	1d19      	adds	r1, r3, #4
 80084ba:	6031      	str	r1, [r6, #0]
 80084bc:	0606      	lsls	r6, r0, #24
 80084be:	d501      	bpl.n	80084c4 <_printf_i+0xbc>
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	e003      	b.n	80084cc <_printf_i+0xc4>
 80084c4:	0645      	lsls	r5, r0, #25
 80084c6:	d5fb      	bpl.n	80084c0 <_printf_i+0xb8>
 80084c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80084cc:	2d00      	cmp	r5, #0
 80084ce:	da03      	bge.n	80084d8 <_printf_i+0xd0>
 80084d0:	232d      	movs	r3, #45	@ 0x2d
 80084d2:	426d      	negs	r5, r5
 80084d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084d8:	4858      	ldr	r0, [pc, #352]	@ (800863c <_printf_i+0x234>)
 80084da:	230a      	movs	r3, #10
 80084dc:	e011      	b.n	8008502 <_printf_i+0xfa>
 80084de:	6821      	ldr	r1, [r4, #0]
 80084e0:	6833      	ldr	r3, [r6, #0]
 80084e2:	0608      	lsls	r0, r1, #24
 80084e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80084e8:	d402      	bmi.n	80084f0 <_printf_i+0xe8>
 80084ea:	0649      	lsls	r1, r1, #25
 80084ec:	bf48      	it	mi
 80084ee:	b2ad      	uxthmi	r5, r5
 80084f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80084f2:	4852      	ldr	r0, [pc, #328]	@ (800863c <_printf_i+0x234>)
 80084f4:	6033      	str	r3, [r6, #0]
 80084f6:	bf14      	ite	ne
 80084f8:	230a      	movne	r3, #10
 80084fa:	2308      	moveq	r3, #8
 80084fc:	2100      	movs	r1, #0
 80084fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008502:	6866      	ldr	r6, [r4, #4]
 8008504:	60a6      	str	r6, [r4, #8]
 8008506:	2e00      	cmp	r6, #0
 8008508:	db05      	blt.n	8008516 <_printf_i+0x10e>
 800850a:	6821      	ldr	r1, [r4, #0]
 800850c:	432e      	orrs	r6, r5
 800850e:	f021 0104 	bic.w	r1, r1, #4
 8008512:	6021      	str	r1, [r4, #0]
 8008514:	d04b      	beq.n	80085ae <_printf_i+0x1a6>
 8008516:	4616      	mov	r6, r2
 8008518:	fbb5 f1f3 	udiv	r1, r5, r3
 800851c:	fb03 5711 	mls	r7, r3, r1, r5
 8008520:	5dc7      	ldrb	r7, [r0, r7]
 8008522:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008526:	462f      	mov	r7, r5
 8008528:	42bb      	cmp	r3, r7
 800852a:	460d      	mov	r5, r1
 800852c:	d9f4      	bls.n	8008518 <_printf_i+0x110>
 800852e:	2b08      	cmp	r3, #8
 8008530:	d10b      	bne.n	800854a <_printf_i+0x142>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	07df      	lsls	r7, r3, #31
 8008536:	d508      	bpl.n	800854a <_printf_i+0x142>
 8008538:	6923      	ldr	r3, [r4, #16]
 800853a:	6861      	ldr	r1, [r4, #4]
 800853c:	4299      	cmp	r1, r3
 800853e:	bfde      	ittt	le
 8008540:	2330      	movle	r3, #48	@ 0x30
 8008542:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008546:	f106 36ff 	addle.w	r6, r6, #4294967295
 800854a:	1b92      	subs	r2, r2, r6
 800854c:	6122      	str	r2, [r4, #16]
 800854e:	f8cd a000 	str.w	sl, [sp]
 8008552:	464b      	mov	r3, r9
 8008554:	aa03      	add	r2, sp, #12
 8008556:	4621      	mov	r1, r4
 8008558:	4640      	mov	r0, r8
 800855a:	f7ff fee7 	bl	800832c <_printf_common>
 800855e:	3001      	adds	r0, #1
 8008560:	d14a      	bne.n	80085f8 <_printf_i+0x1f0>
 8008562:	f04f 30ff 	mov.w	r0, #4294967295
 8008566:	b004      	add	sp, #16
 8008568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	f043 0320 	orr.w	r3, r3, #32
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	4832      	ldr	r0, [pc, #200]	@ (8008640 <_printf_i+0x238>)
 8008576:	2778      	movs	r7, #120	@ 0x78
 8008578:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	6831      	ldr	r1, [r6, #0]
 8008580:	061f      	lsls	r7, r3, #24
 8008582:	f851 5b04 	ldr.w	r5, [r1], #4
 8008586:	d402      	bmi.n	800858e <_printf_i+0x186>
 8008588:	065f      	lsls	r7, r3, #25
 800858a:	bf48      	it	mi
 800858c:	b2ad      	uxthmi	r5, r5
 800858e:	6031      	str	r1, [r6, #0]
 8008590:	07d9      	lsls	r1, r3, #31
 8008592:	bf44      	itt	mi
 8008594:	f043 0320 	orrmi.w	r3, r3, #32
 8008598:	6023      	strmi	r3, [r4, #0]
 800859a:	b11d      	cbz	r5, 80085a4 <_printf_i+0x19c>
 800859c:	2310      	movs	r3, #16
 800859e:	e7ad      	b.n	80084fc <_printf_i+0xf4>
 80085a0:	4826      	ldr	r0, [pc, #152]	@ (800863c <_printf_i+0x234>)
 80085a2:	e7e9      	b.n	8008578 <_printf_i+0x170>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	f023 0320 	bic.w	r3, r3, #32
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	e7f6      	b.n	800859c <_printf_i+0x194>
 80085ae:	4616      	mov	r6, r2
 80085b0:	e7bd      	b.n	800852e <_printf_i+0x126>
 80085b2:	6833      	ldr	r3, [r6, #0]
 80085b4:	6825      	ldr	r5, [r4, #0]
 80085b6:	6961      	ldr	r1, [r4, #20]
 80085b8:	1d18      	adds	r0, r3, #4
 80085ba:	6030      	str	r0, [r6, #0]
 80085bc:	062e      	lsls	r6, r5, #24
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	d501      	bpl.n	80085c6 <_printf_i+0x1be>
 80085c2:	6019      	str	r1, [r3, #0]
 80085c4:	e002      	b.n	80085cc <_printf_i+0x1c4>
 80085c6:	0668      	lsls	r0, r5, #25
 80085c8:	d5fb      	bpl.n	80085c2 <_printf_i+0x1ba>
 80085ca:	8019      	strh	r1, [r3, #0]
 80085cc:	2300      	movs	r3, #0
 80085ce:	6123      	str	r3, [r4, #16]
 80085d0:	4616      	mov	r6, r2
 80085d2:	e7bc      	b.n	800854e <_printf_i+0x146>
 80085d4:	6833      	ldr	r3, [r6, #0]
 80085d6:	1d1a      	adds	r2, r3, #4
 80085d8:	6032      	str	r2, [r6, #0]
 80085da:	681e      	ldr	r6, [r3, #0]
 80085dc:	6862      	ldr	r2, [r4, #4]
 80085de:	2100      	movs	r1, #0
 80085e0:	4630      	mov	r0, r6
 80085e2:	f7f7 fe7d 	bl	80002e0 <memchr>
 80085e6:	b108      	cbz	r0, 80085ec <_printf_i+0x1e4>
 80085e8:	1b80      	subs	r0, r0, r6
 80085ea:	6060      	str	r0, [r4, #4]
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	2300      	movs	r3, #0
 80085f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085f6:	e7aa      	b.n	800854e <_printf_i+0x146>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	4632      	mov	r2, r6
 80085fc:	4649      	mov	r1, r9
 80085fe:	4640      	mov	r0, r8
 8008600:	47d0      	blx	sl
 8008602:	3001      	adds	r0, #1
 8008604:	d0ad      	beq.n	8008562 <_printf_i+0x15a>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	079b      	lsls	r3, r3, #30
 800860a:	d413      	bmi.n	8008634 <_printf_i+0x22c>
 800860c:	68e0      	ldr	r0, [r4, #12]
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	4298      	cmp	r0, r3
 8008612:	bfb8      	it	lt
 8008614:	4618      	movlt	r0, r3
 8008616:	e7a6      	b.n	8008566 <_printf_i+0x15e>
 8008618:	2301      	movs	r3, #1
 800861a:	4632      	mov	r2, r6
 800861c:	4649      	mov	r1, r9
 800861e:	4640      	mov	r0, r8
 8008620:	47d0      	blx	sl
 8008622:	3001      	adds	r0, #1
 8008624:	d09d      	beq.n	8008562 <_printf_i+0x15a>
 8008626:	3501      	adds	r5, #1
 8008628:	68e3      	ldr	r3, [r4, #12]
 800862a:	9903      	ldr	r1, [sp, #12]
 800862c:	1a5b      	subs	r3, r3, r1
 800862e:	42ab      	cmp	r3, r5
 8008630:	dcf2      	bgt.n	8008618 <_printf_i+0x210>
 8008632:	e7eb      	b.n	800860c <_printf_i+0x204>
 8008634:	2500      	movs	r5, #0
 8008636:	f104 0619 	add.w	r6, r4, #25
 800863a:	e7f5      	b.n	8008628 <_printf_i+0x220>
 800863c:	0800cdae 	.word	0x0800cdae
 8008640:	0800cdbf 	.word	0x0800cdbf

08008644 <_scanf_float>:
 8008644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008648:	b087      	sub	sp, #28
 800864a:	4691      	mov	r9, r2
 800864c:	9303      	str	r3, [sp, #12]
 800864e:	688b      	ldr	r3, [r1, #8]
 8008650:	1e5a      	subs	r2, r3, #1
 8008652:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008656:	bf81      	itttt	hi
 8008658:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800865c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008660:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008664:	608b      	strhi	r3, [r1, #8]
 8008666:	680b      	ldr	r3, [r1, #0]
 8008668:	460a      	mov	r2, r1
 800866a:	f04f 0500 	mov.w	r5, #0
 800866e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008672:	f842 3b1c 	str.w	r3, [r2], #28
 8008676:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800867a:	4680      	mov	r8, r0
 800867c:	460c      	mov	r4, r1
 800867e:	bf98      	it	ls
 8008680:	f04f 0b00 	movls.w	fp, #0
 8008684:	9201      	str	r2, [sp, #4]
 8008686:	4616      	mov	r6, r2
 8008688:	46aa      	mov	sl, r5
 800868a:	462f      	mov	r7, r5
 800868c:	9502      	str	r5, [sp, #8]
 800868e:	68a2      	ldr	r2, [r4, #8]
 8008690:	b15a      	cbz	r2, 80086aa <_scanf_float+0x66>
 8008692:	f8d9 3000 	ldr.w	r3, [r9]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b4e      	cmp	r3, #78	@ 0x4e
 800869a:	d863      	bhi.n	8008764 <_scanf_float+0x120>
 800869c:	2b40      	cmp	r3, #64	@ 0x40
 800869e:	d83b      	bhi.n	8008718 <_scanf_float+0xd4>
 80086a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80086a4:	b2c8      	uxtb	r0, r1
 80086a6:	280e      	cmp	r0, #14
 80086a8:	d939      	bls.n	800871e <_scanf_float+0xda>
 80086aa:	b11f      	cbz	r7, 80086b4 <_scanf_float+0x70>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086b2:	6023      	str	r3, [r4, #0]
 80086b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086b8:	f1ba 0f01 	cmp.w	sl, #1
 80086bc:	f200 8114 	bhi.w	80088e8 <_scanf_float+0x2a4>
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	429e      	cmp	r6, r3
 80086c4:	f200 8105 	bhi.w	80088d2 <_scanf_float+0x28e>
 80086c8:	2001      	movs	r0, #1
 80086ca:	b007      	add	sp, #28
 80086cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80086d4:	2a0d      	cmp	r2, #13
 80086d6:	d8e8      	bhi.n	80086aa <_scanf_float+0x66>
 80086d8:	a101      	add	r1, pc, #4	@ (adr r1, 80086e0 <_scanf_float+0x9c>)
 80086da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086de:	bf00      	nop
 80086e0:	08008829 	.word	0x08008829
 80086e4:	080086ab 	.word	0x080086ab
 80086e8:	080086ab 	.word	0x080086ab
 80086ec:	080086ab 	.word	0x080086ab
 80086f0:	08008885 	.word	0x08008885
 80086f4:	0800885f 	.word	0x0800885f
 80086f8:	080086ab 	.word	0x080086ab
 80086fc:	080086ab 	.word	0x080086ab
 8008700:	08008837 	.word	0x08008837
 8008704:	080086ab 	.word	0x080086ab
 8008708:	080086ab 	.word	0x080086ab
 800870c:	080086ab 	.word	0x080086ab
 8008710:	080086ab 	.word	0x080086ab
 8008714:	080087f3 	.word	0x080087f3
 8008718:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800871c:	e7da      	b.n	80086d4 <_scanf_float+0x90>
 800871e:	290e      	cmp	r1, #14
 8008720:	d8c3      	bhi.n	80086aa <_scanf_float+0x66>
 8008722:	a001      	add	r0, pc, #4	@ (adr r0, 8008728 <_scanf_float+0xe4>)
 8008724:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008728:	080087e3 	.word	0x080087e3
 800872c:	080086ab 	.word	0x080086ab
 8008730:	080087e3 	.word	0x080087e3
 8008734:	08008873 	.word	0x08008873
 8008738:	080086ab 	.word	0x080086ab
 800873c:	08008785 	.word	0x08008785
 8008740:	080087c9 	.word	0x080087c9
 8008744:	080087c9 	.word	0x080087c9
 8008748:	080087c9 	.word	0x080087c9
 800874c:	080087c9 	.word	0x080087c9
 8008750:	080087c9 	.word	0x080087c9
 8008754:	080087c9 	.word	0x080087c9
 8008758:	080087c9 	.word	0x080087c9
 800875c:	080087c9 	.word	0x080087c9
 8008760:	080087c9 	.word	0x080087c9
 8008764:	2b6e      	cmp	r3, #110	@ 0x6e
 8008766:	d809      	bhi.n	800877c <_scanf_float+0x138>
 8008768:	2b60      	cmp	r3, #96	@ 0x60
 800876a:	d8b1      	bhi.n	80086d0 <_scanf_float+0x8c>
 800876c:	2b54      	cmp	r3, #84	@ 0x54
 800876e:	d07b      	beq.n	8008868 <_scanf_float+0x224>
 8008770:	2b59      	cmp	r3, #89	@ 0x59
 8008772:	d19a      	bne.n	80086aa <_scanf_float+0x66>
 8008774:	2d07      	cmp	r5, #7
 8008776:	d198      	bne.n	80086aa <_scanf_float+0x66>
 8008778:	2508      	movs	r5, #8
 800877a:	e02f      	b.n	80087dc <_scanf_float+0x198>
 800877c:	2b74      	cmp	r3, #116	@ 0x74
 800877e:	d073      	beq.n	8008868 <_scanf_float+0x224>
 8008780:	2b79      	cmp	r3, #121	@ 0x79
 8008782:	e7f6      	b.n	8008772 <_scanf_float+0x12e>
 8008784:	6821      	ldr	r1, [r4, #0]
 8008786:	05c8      	lsls	r0, r1, #23
 8008788:	d51e      	bpl.n	80087c8 <_scanf_float+0x184>
 800878a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800878e:	6021      	str	r1, [r4, #0]
 8008790:	3701      	adds	r7, #1
 8008792:	f1bb 0f00 	cmp.w	fp, #0
 8008796:	d003      	beq.n	80087a0 <_scanf_float+0x15c>
 8008798:	3201      	adds	r2, #1
 800879a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800879e:	60a2      	str	r2, [r4, #8]
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	3301      	adds	r3, #1
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f8c9 3004 	str.w	r3, [r9, #4]
 80087b8:	f340 8082 	ble.w	80088c0 <_scanf_float+0x27c>
 80087bc:	f8d9 3000 	ldr.w	r3, [r9]
 80087c0:	3301      	adds	r3, #1
 80087c2:	f8c9 3000 	str.w	r3, [r9]
 80087c6:	e762      	b.n	800868e <_scanf_float+0x4a>
 80087c8:	eb1a 0105 	adds.w	r1, sl, r5
 80087cc:	f47f af6d 	bne.w	80086aa <_scanf_float+0x66>
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80087d6:	6022      	str	r2, [r4, #0]
 80087d8:	460d      	mov	r5, r1
 80087da:	468a      	mov	sl, r1
 80087dc:	f806 3b01 	strb.w	r3, [r6], #1
 80087e0:	e7de      	b.n	80087a0 <_scanf_float+0x15c>
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	0610      	lsls	r0, r2, #24
 80087e6:	f57f af60 	bpl.w	80086aa <_scanf_float+0x66>
 80087ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087ee:	6022      	str	r2, [r4, #0]
 80087f0:	e7f4      	b.n	80087dc <_scanf_float+0x198>
 80087f2:	f1ba 0f00 	cmp.w	sl, #0
 80087f6:	d10c      	bne.n	8008812 <_scanf_float+0x1ce>
 80087f8:	b977      	cbnz	r7, 8008818 <_scanf_float+0x1d4>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008800:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008804:	d108      	bne.n	8008818 <_scanf_float+0x1d4>
 8008806:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	f04f 0a01 	mov.w	sl, #1
 8008810:	e7e4      	b.n	80087dc <_scanf_float+0x198>
 8008812:	f1ba 0f02 	cmp.w	sl, #2
 8008816:	d050      	beq.n	80088ba <_scanf_float+0x276>
 8008818:	2d01      	cmp	r5, #1
 800881a:	d002      	beq.n	8008822 <_scanf_float+0x1de>
 800881c:	2d04      	cmp	r5, #4
 800881e:	f47f af44 	bne.w	80086aa <_scanf_float+0x66>
 8008822:	3501      	adds	r5, #1
 8008824:	b2ed      	uxtb	r5, r5
 8008826:	e7d9      	b.n	80087dc <_scanf_float+0x198>
 8008828:	f1ba 0f01 	cmp.w	sl, #1
 800882c:	f47f af3d 	bne.w	80086aa <_scanf_float+0x66>
 8008830:	f04f 0a02 	mov.w	sl, #2
 8008834:	e7d2      	b.n	80087dc <_scanf_float+0x198>
 8008836:	b975      	cbnz	r5, 8008856 <_scanf_float+0x212>
 8008838:	2f00      	cmp	r7, #0
 800883a:	f47f af37 	bne.w	80086ac <_scanf_float+0x68>
 800883e:	6822      	ldr	r2, [r4, #0]
 8008840:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008844:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008848:	f040 80fc 	bne.w	8008a44 <_scanf_float+0x400>
 800884c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008850:	6022      	str	r2, [r4, #0]
 8008852:	2501      	movs	r5, #1
 8008854:	e7c2      	b.n	80087dc <_scanf_float+0x198>
 8008856:	2d03      	cmp	r5, #3
 8008858:	d0e3      	beq.n	8008822 <_scanf_float+0x1de>
 800885a:	2d05      	cmp	r5, #5
 800885c:	e7df      	b.n	800881e <_scanf_float+0x1da>
 800885e:	2d02      	cmp	r5, #2
 8008860:	f47f af23 	bne.w	80086aa <_scanf_float+0x66>
 8008864:	2503      	movs	r5, #3
 8008866:	e7b9      	b.n	80087dc <_scanf_float+0x198>
 8008868:	2d06      	cmp	r5, #6
 800886a:	f47f af1e 	bne.w	80086aa <_scanf_float+0x66>
 800886e:	2507      	movs	r5, #7
 8008870:	e7b4      	b.n	80087dc <_scanf_float+0x198>
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	0591      	lsls	r1, r2, #22
 8008876:	f57f af18 	bpl.w	80086aa <_scanf_float+0x66>
 800887a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800887e:	6022      	str	r2, [r4, #0]
 8008880:	9702      	str	r7, [sp, #8]
 8008882:	e7ab      	b.n	80087dc <_scanf_float+0x198>
 8008884:	6822      	ldr	r2, [r4, #0]
 8008886:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800888a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800888e:	d005      	beq.n	800889c <_scanf_float+0x258>
 8008890:	0550      	lsls	r0, r2, #21
 8008892:	f57f af0a 	bpl.w	80086aa <_scanf_float+0x66>
 8008896:	2f00      	cmp	r7, #0
 8008898:	f000 80d4 	beq.w	8008a44 <_scanf_float+0x400>
 800889c:	0591      	lsls	r1, r2, #22
 800889e:	bf58      	it	pl
 80088a0:	9902      	ldrpl	r1, [sp, #8]
 80088a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088a6:	bf58      	it	pl
 80088a8:	1a79      	subpl	r1, r7, r1
 80088aa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80088ae:	bf58      	it	pl
 80088b0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80088b4:	6022      	str	r2, [r4, #0]
 80088b6:	2700      	movs	r7, #0
 80088b8:	e790      	b.n	80087dc <_scanf_float+0x198>
 80088ba:	f04f 0a03 	mov.w	sl, #3
 80088be:	e78d      	b.n	80087dc <_scanf_float+0x198>
 80088c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80088c4:	4649      	mov	r1, r9
 80088c6:	4640      	mov	r0, r8
 80088c8:	4798      	blx	r3
 80088ca:	2800      	cmp	r0, #0
 80088cc:	f43f aedf 	beq.w	800868e <_scanf_float+0x4a>
 80088d0:	e6eb      	b.n	80086aa <_scanf_float+0x66>
 80088d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088da:	464a      	mov	r2, r9
 80088dc:	4640      	mov	r0, r8
 80088de:	4798      	blx	r3
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	3b01      	subs	r3, #1
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	e6eb      	b.n	80086c0 <_scanf_float+0x7c>
 80088e8:	1e6b      	subs	r3, r5, #1
 80088ea:	2b06      	cmp	r3, #6
 80088ec:	d824      	bhi.n	8008938 <_scanf_float+0x2f4>
 80088ee:	2d02      	cmp	r5, #2
 80088f0:	d836      	bhi.n	8008960 <_scanf_float+0x31c>
 80088f2:	9b01      	ldr	r3, [sp, #4]
 80088f4:	429e      	cmp	r6, r3
 80088f6:	f67f aee7 	bls.w	80086c8 <_scanf_float+0x84>
 80088fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008902:	464a      	mov	r2, r9
 8008904:	4640      	mov	r0, r8
 8008906:	4798      	blx	r3
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	3b01      	subs	r3, #1
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	e7f0      	b.n	80088f2 <_scanf_float+0x2ae>
 8008910:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008914:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008918:	464a      	mov	r2, r9
 800891a:	4640      	mov	r0, r8
 800891c:	4798      	blx	r3
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	3b01      	subs	r3, #1
 8008922:	6123      	str	r3, [r4, #16]
 8008924:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008928:	fa5f fa8a 	uxtb.w	sl, sl
 800892c:	f1ba 0f02 	cmp.w	sl, #2
 8008930:	d1ee      	bne.n	8008910 <_scanf_float+0x2cc>
 8008932:	3d03      	subs	r5, #3
 8008934:	b2ed      	uxtb	r5, r5
 8008936:	1b76      	subs	r6, r6, r5
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	05da      	lsls	r2, r3, #23
 800893c:	d530      	bpl.n	80089a0 <_scanf_float+0x35c>
 800893e:	055b      	lsls	r3, r3, #21
 8008940:	d511      	bpl.n	8008966 <_scanf_float+0x322>
 8008942:	9b01      	ldr	r3, [sp, #4]
 8008944:	429e      	cmp	r6, r3
 8008946:	f67f aebf 	bls.w	80086c8 <_scanf_float+0x84>
 800894a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800894e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008952:	464a      	mov	r2, r9
 8008954:	4640      	mov	r0, r8
 8008956:	4798      	blx	r3
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	3b01      	subs	r3, #1
 800895c:	6123      	str	r3, [r4, #16]
 800895e:	e7f0      	b.n	8008942 <_scanf_float+0x2fe>
 8008960:	46aa      	mov	sl, r5
 8008962:	46b3      	mov	fp, r6
 8008964:	e7de      	b.n	8008924 <_scanf_float+0x2e0>
 8008966:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	2965      	cmp	r1, #101	@ 0x65
 800896e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008972:	f106 35ff 	add.w	r5, r6, #4294967295
 8008976:	6123      	str	r3, [r4, #16]
 8008978:	d00c      	beq.n	8008994 <_scanf_float+0x350>
 800897a:	2945      	cmp	r1, #69	@ 0x45
 800897c:	d00a      	beq.n	8008994 <_scanf_float+0x350>
 800897e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008982:	464a      	mov	r2, r9
 8008984:	4640      	mov	r0, r8
 8008986:	4798      	blx	r3
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800898e:	3b01      	subs	r3, #1
 8008990:	1eb5      	subs	r5, r6, #2
 8008992:	6123      	str	r3, [r4, #16]
 8008994:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008998:	464a      	mov	r2, r9
 800899a:	4640      	mov	r0, r8
 800899c:	4798      	blx	r3
 800899e:	462e      	mov	r6, r5
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	f012 0210 	ands.w	r2, r2, #16
 80089a6:	d001      	beq.n	80089ac <_scanf_float+0x368>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e68e      	b.n	80086ca <_scanf_float+0x86>
 80089ac:	7032      	strb	r2, [r6, #0]
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b8:	d123      	bne.n	8008a02 <_scanf_float+0x3be>
 80089ba:	9b02      	ldr	r3, [sp, #8]
 80089bc:	429f      	cmp	r7, r3
 80089be:	d00a      	beq.n	80089d6 <_scanf_float+0x392>
 80089c0:	1bda      	subs	r2, r3, r7
 80089c2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80089c6:	429e      	cmp	r6, r3
 80089c8:	bf28      	it	cs
 80089ca:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80089ce:	491e      	ldr	r1, [pc, #120]	@ (8008a48 <_scanf_float+0x404>)
 80089d0:	4630      	mov	r0, r6
 80089d2:	f000 f96f 	bl	8008cb4 <siprintf>
 80089d6:	9901      	ldr	r1, [sp, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	4640      	mov	r0, r8
 80089dc:	f002 fc2e 	bl	800b23c <_strtod_r>
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	6821      	ldr	r1, [r4, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f011 0f02 	tst.w	r1, #2
 80089ea:	f103 0204 	add.w	r2, r3, #4
 80089ee:	d015      	beq.n	8008a1c <_scanf_float+0x3d8>
 80089f0:	9903      	ldr	r1, [sp, #12]
 80089f2:	600a      	str	r2, [r1, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	ed83 0b00 	vstr	d0, [r3]
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	3301      	adds	r3, #1
 80089fe:	60e3      	str	r3, [r4, #12]
 8008a00:	e7d2      	b.n	80089a8 <_scanf_float+0x364>
 8008a02:	9b04      	ldr	r3, [sp, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0e6      	beq.n	80089d6 <_scanf_float+0x392>
 8008a08:	9905      	ldr	r1, [sp, #20]
 8008a0a:	230a      	movs	r3, #10
 8008a0c:	3101      	adds	r1, #1
 8008a0e:	4640      	mov	r0, r8
 8008a10:	f002 fc94 	bl	800b33c <_strtol_r>
 8008a14:	9b04      	ldr	r3, [sp, #16]
 8008a16:	9e05      	ldr	r6, [sp, #20]
 8008a18:	1ac2      	subs	r2, r0, r3
 8008a1a:	e7d2      	b.n	80089c2 <_scanf_float+0x37e>
 8008a1c:	f011 0f04 	tst.w	r1, #4
 8008a20:	9903      	ldr	r1, [sp, #12]
 8008a22:	600a      	str	r2, [r1, #0]
 8008a24:	d1e6      	bne.n	80089f4 <_scanf_float+0x3b0>
 8008a26:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a2e:	681d      	ldr	r5, [r3, #0]
 8008a30:	d705      	bvc.n	8008a3e <_scanf_float+0x3fa>
 8008a32:	4806      	ldr	r0, [pc, #24]	@ (8008a4c <_scanf_float+0x408>)
 8008a34:	f000 fab8 	bl	8008fa8 <nanf>
 8008a38:	ed85 0a00 	vstr	s0, [r5]
 8008a3c:	e7dd      	b.n	80089fa <_scanf_float+0x3b6>
 8008a3e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008a42:	e7f9      	b.n	8008a38 <_scanf_float+0x3f4>
 8008a44:	2700      	movs	r7, #0
 8008a46:	e635      	b.n	80086b4 <_scanf_float+0x70>
 8008a48:	0800cdd0 	.word	0x0800cdd0
 8008a4c:	0800cf11 	.word	0x0800cf11

08008a50 <std>:
 8008a50:	2300      	movs	r3, #0
 8008a52:	b510      	push	{r4, lr}
 8008a54:	4604      	mov	r4, r0
 8008a56:	e9c0 3300 	strd	r3, r3, [r0]
 8008a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a5e:	6083      	str	r3, [r0, #8]
 8008a60:	8181      	strh	r1, [r0, #12]
 8008a62:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a64:	81c2      	strh	r2, [r0, #14]
 8008a66:	6183      	str	r3, [r0, #24]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	2208      	movs	r2, #8
 8008a6c:	305c      	adds	r0, #92	@ 0x5c
 8008a6e:	f000 fa1b 	bl	8008ea8 <memset>
 8008a72:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa8 <std+0x58>)
 8008a74:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a76:	4b0d      	ldr	r3, [pc, #52]	@ (8008aac <std+0x5c>)
 8008a78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab0 <std+0x60>)
 8008a7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab4 <std+0x64>)
 8008a80:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a82:	4b0d      	ldr	r3, [pc, #52]	@ (8008ab8 <std+0x68>)
 8008a84:	6224      	str	r4, [r4, #32]
 8008a86:	429c      	cmp	r4, r3
 8008a88:	d006      	beq.n	8008a98 <std+0x48>
 8008a8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a8e:	4294      	cmp	r4, r2
 8008a90:	d002      	beq.n	8008a98 <std+0x48>
 8008a92:	33d0      	adds	r3, #208	@ 0xd0
 8008a94:	429c      	cmp	r4, r3
 8008a96:	d105      	bne.n	8008aa4 <std+0x54>
 8008a98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	f000 ba7e 	b.w	8008fa0 <__retarget_lock_init_recursive>
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	bf00      	nop
 8008aa8:	08008cf9 	.word	0x08008cf9
 8008aac:	08008d1b 	.word	0x08008d1b
 8008ab0:	08008d53 	.word	0x08008d53
 8008ab4:	08008d77 	.word	0x08008d77
 8008ab8:	240004e4 	.word	0x240004e4

08008abc <stdio_exit_handler>:
 8008abc:	4a02      	ldr	r2, [pc, #8]	@ (8008ac8 <stdio_exit_handler+0xc>)
 8008abe:	4903      	ldr	r1, [pc, #12]	@ (8008acc <stdio_exit_handler+0x10>)
 8008ac0:	4803      	ldr	r0, [pc, #12]	@ (8008ad0 <stdio_exit_handler+0x14>)
 8008ac2:	f000 b869 	b.w	8008b98 <_fwalk_sglue>
 8008ac6:	bf00      	nop
 8008ac8:	24000020 	.word	0x24000020
 8008acc:	0800b97d 	.word	0x0800b97d
 8008ad0:	24000030 	.word	0x24000030

08008ad4 <cleanup_stdio>:
 8008ad4:	6841      	ldr	r1, [r0, #4]
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <cleanup_stdio+0x34>)
 8008ad8:	4299      	cmp	r1, r3
 8008ada:	b510      	push	{r4, lr}
 8008adc:	4604      	mov	r4, r0
 8008ade:	d001      	beq.n	8008ae4 <cleanup_stdio+0x10>
 8008ae0:	f002 ff4c 	bl	800b97c <_fflush_r>
 8008ae4:	68a1      	ldr	r1, [r4, #8]
 8008ae6:	4b09      	ldr	r3, [pc, #36]	@ (8008b0c <cleanup_stdio+0x38>)
 8008ae8:	4299      	cmp	r1, r3
 8008aea:	d002      	beq.n	8008af2 <cleanup_stdio+0x1e>
 8008aec:	4620      	mov	r0, r4
 8008aee:	f002 ff45 	bl	800b97c <_fflush_r>
 8008af2:	68e1      	ldr	r1, [r4, #12]
 8008af4:	4b06      	ldr	r3, [pc, #24]	@ (8008b10 <cleanup_stdio+0x3c>)
 8008af6:	4299      	cmp	r1, r3
 8008af8:	d004      	beq.n	8008b04 <cleanup_stdio+0x30>
 8008afa:	4620      	mov	r0, r4
 8008afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b00:	f002 bf3c 	b.w	800b97c <_fflush_r>
 8008b04:	bd10      	pop	{r4, pc}
 8008b06:	bf00      	nop
 8008b08:	240004e4 	.word	0x240004e4
 8008b0c:	2400054c 	.word	0x2400054c
 8008b10:	240005b4 	.word	0x240005b4

08008b14 <global_stdio_init.part.0>:
 8008b14:	b510      	push	{r4, lr}
 8008b16:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <global_stdio_init.part.0+0x30>)
 8008b18:	4c0b      	ldr	r4, [pc, #44]	@ (8008b48 <global_stdio_init.part.0+0x34>)
 8008b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8008b4c <global_stdio_init.part.0+0x38>)
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	4620      	mov	r0, r4
 8008b20:	2200      	movs	r2, #0
 8008b22:	2104      	movs	r1, #4
 8008b24:	f7ff ff94 	bl	8008a50 <std>
 8008b28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	2109      	movs	r1, #9
 8008b30:	f7ff ff8e 	bl	8008a50 <std>
 8008b34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b38:	2202      	movs	r2, #2
 8008b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b3e:	2112      	movs	r1, #18
 8008b40:	f7ff bf86 	b.w	8008a50 <std>
 8008b44:	2400061c 	.word	0x2400061c
 8008b48:	240004e4 	.word	0x240004e4
 8008b4c:	08008abd 	.word	0x08008abd

08008b50 <__sfp_lock_acquire>:
 8008b50:	4801      	ldr	r0, [pc, #4]	@ (8008b58 <__sfp_lock_acquire+0x8>)
 8008b52:	f000 ba26 	b.w	8008fa2 <__retarget_lock_acquire_recursive>
 8008b56:	bf00      	nop
 8008b58:	24000625 	.word	0x24000625

08008b5c <__sfp_lock_release>:
 8008b5c:	4801      	ldr	r0, [pc, #4]	@ (8008b64 <__sfp_lock_release+0x8>)
 8008b5e:	f000 ba21 	b.w	8008fa4 <__retarget_lock_release_recursive>
 8008b62:	bf00      	nop
 8008b64:	24000625 	.word	0x24000625

08008b68 <__sinit>:
 8008b68:	b510      	push	{r4, lr}
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	f7ff fff0 	bl	8008b50 <__sfp_lock_acquire>
 8008b70:	6a23      	ldr	r3, [r4, #32]
 8008b72:	b11b      	cbz	r3, 8008b7c <__sinit+0x14>
 8008b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b78:	f7ff bff0 	b.w	8008b5c <__sfp_lock_release>
 8008b7c:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <__sinit+0x28>)
 8008b7e:	6223      	str	r3, [r4, #32]
 8008b80:	4b04      	ldr	r3, [pc, #16]	@ (8008b94 <__sinit+0x2c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1f5      	bne.n	8008b74 <__sinit+0xc>
 8008b88:	f7ff ffc4 	bl	8008b14 <global_stdio_init.part.0>
 8008b8c:	e7f2      	b.n	8008b74 <__sinit+0xc>
 8008b8e:	bf00      	nop
 8008b90:	08008ad5 	.word	0x08008ad5
 8008b94:	2400061c 	.word	0x2400061c

08008b98 <_fwalk_sglue>:
 8008b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	4688      	mov	r8, r1
 8008ba0:	4614      	mov	r4, r2
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ba8:	f1b9 0901 	subs.w	r9, r9, #1
 8008bac:	d505      	bpl.n	8008bba <_fwalk_sglue+0x22>
 8008bae:	6824      	ldr	r4, [r4, #0]
 8008bb0:	2c00      	cmp	r4, #0
 8008bb2:	d1f7      	bne.n	8008ba4 <_fwalk_sglue+0xc>
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bba:	89ab      	ldrh	r3, [r5, #12]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d907      	bls.n	8008bd0 <_fwalk_sglue+0x38>
 8008bc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	d003      	beq.n	8008bd0 <_fwalk_sglue+0x38>
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4638      	mov	r0, r7
 8008bcc:	47c0      	blx	r8
 8008bce:	4306      	orrs	r6, r0
 8008bd0:	3568      	adds	r5, #104	@ 0x68
 8008bd2:	e7e9      	b.n	8008ba8 <_fwalk_sglue+0x10>

08008bd4 <iprintf>:
 8008bd4:	b40f      	push	{r0, r1, r2, r3}
 8008bd6:	b507      	push	{r0, r1, r2, lr}
 8008bd8:	4906      	ldr	r1, [pc, #24]	@ (8008bf4 <iprintf+0x20>)
 8008bda:	ab04      	add	r3, sp, #16
 8008bdc:	6808      	ldr	r0, [r1, #0]
 8008bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be2:	6881      	ldr	r1, [r0, #8]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	f002 fd2d 	bl	800b644 <_vfiprintf_r>
 8008bea:	b003      	add	sp, #12
 8008bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bf0:	b004      	add	sp, #16
 8008bf2:	4770      	bx	lr
 8008bf4:	2400002c 	.word	0x2400002c

08008bf8 <_puts_r>:
 8008bf8:	6a03      	ldr	r3, [r0, #32]
 8008bfa:	b570      	push	{r4, r5, r6, lr}
 8008bfc:	6884      	ldr	r4, [r0, #8]
 8008bfe:	4605      	mov	r5, r0
 8008c00:	460e      	mov	r6, r1
 8008c02:	b90b      	cbnz	r3, 8008c08 <_puts_r+0x10>
 8008c04:	f7ff ffb0 	bl	8008b68 <__sinit>
 8008c08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c0a:	07db      	lsls	r3, r3, #31
 8008c0c:	d405      	bmi.n	8008c1a <_puts_r+0x22>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	0598      	lsls	r0, r3, #22
 8008c12:	d402      	bmi.n	8008c1a <_puts_r+0x22>
 8008c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c16:	f000 f9c4 	bl	8008fa2 <__retarget_lock_acquire_recursive>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	0719      	lsls	r1, r3, #28
 8008c1e:	d502      	bpl.n	8008c26 <_puts_r+0x2e>
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d135      	bne.n	8008c92 <_puts_r+0x9a>
 8008c26:	4621      	mov	r1, r4
 8008c28:	4628      	mov	r0, r5
 8008c2a:	f000 f8e7 	bl	8008dfc <__swsetup_r>
 8008c2e:	b380      	cbz	r0, 8008c92 <_puts_r+0x9a>
 8008c30:	f04f 35ff 	mov.w	r5, #4294967295
 8008c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c36:	07da      	lsls	r2, r3, #31
 8008c38:	d405      	bmi.n	8008c46 <_puts_r+0x4e>
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	059b      	lsls	r3, r3, #22
 8008c3e:	d402      	bmi.n	8008c46 <_puts_r+0x4e>
 8008c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c42:	f000 f9af 	bl	8008fa4 <__retarget_lock_release_recursive>
 8008c46:	4628      	mov	r0, r5
 8008c48:	bd70      	pop	{r4, r5, r6, pc}
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da04      	bge.n	8008c58 <_puts_r+0x60>
 8008c4e:	69a2      	ldr	r2, [r4, #24]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	dc17      	bgt.n	8008c84 <_puts_r+0x8c>
 8008c54:	290a      	cmp	r1, #10
 8008c56:	d015      	beq.n	8008c84 <_puts_r+0x8c>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	6022      	str	r2, [r4, #0]
 8008c5e:	7019      	strb	r1, [r3, #0]
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c66:	3b01      	subs	r3, #1
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	2900      	cmp	r1, #0
 8008c6c:	d1ed      	bne.n	8008c4a <_puts_r+0x52>
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da11      	bge.n	8008c96 <_puts_r+0x9e>
 8008c72:	4622      	mov	r2, r4
 8008c74:	210a      	movs	r1, #10
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 f881 	bl	8008d7e <__swbuf_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d0d7      	beq.n	8008c30 <_puts_r+0x38>
 8008c80:	250a      	movs	r5, #10
 8008c82:	e7d7      	b.n	8008c34 <_puts_r+0x3c>
 8008c84:	4622      	mov	r2, r4
 8008c86:	4628      	mov	r0, r5
 8008c88:	f000 f879 	bl	8008d7e <__swbuf_r>
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d1e7      	bne.n	8008c60 <_puts_r+0x68>
 8008c90:	e7ce      	b.n	8008c30 <_puts_r+0x38>
 8008c92:	3e01      	subs	r6, #1
 8008c94:	e7e4      	b.n	8008c60 <_puts_r+0x68>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	e7ee      	b.n	8008c80 <_puts_r+0x88>
	...

08008ca4 <puts>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	@ (8008cb0 <puts+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f7ff bfa5 	b.w	8008bf8 <_puts_r>
 8008cae:	bf00      	nop
 8008cb0:	2400002c 	.word	0x2400002c

08008cb4 <siprintf>:
 8008cb4:	b40e      	push	{r1, r2, r3}
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	b09d      	sub	sp, #116	@ 0x74
 8008cba:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008cbc:	9002      	str	r0, [sp, #8]
 8008cbe:	9006      	str	r0, [sp, #24]
 8008cc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008cc4:	480a      	ldr	r0, [pc, #40]	@ (8008cf0 <siprintf+0x3c>)
 8008cc6:	9107      	str	r1, [sp, #28]
 8008cc8:	9104      	str	r1, [sp, #16]
 8008cca:	490a      	ldr	r1, [pc, #40]	@ (8008cf4 <siprintf+0x40>)
 8008ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd0:	9105      	str	r1, [sp, #20]
 8008cd2:	2400      	movs	r4, #0
 8008cd4:	a902      	add	r1, sp, #8
 8008cd6:	6800      	ldr	r0, [r0, #0]
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008cdc:	f002 fb8c 	bl	800b3f8 <_svfiprintf_r>
 8008ce0:	9b02      	ldr	r3, [sp, #8]
 8008ce2:	701c      	strb	r4, [r3, #0]
 8008ce4:	b01d      	add	sp, #116	@ 0x74
 8008ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cea:	b003      	add	sp, #12
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	2400002c 	.word	0x2400002c
 8008cf4:	ffff0208 	.word	0xffff0208

08008cf8 <__sread>:
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d00:	f000 f900 	bl	8008f04 <_read_r>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	bfab      	itete	ge
 8008d08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d0c:	181b      	addge	r3, r3, r0
 8008d0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d12:	bfac      	ite	ge
 8008d14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d16:	81a3      	strhlt	r3, [r4, #12]
 8008d18:	bd10      	pop	{r4, pc}

08008d1a <__swrite>:
 8008d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1e:	461f      	mov	r7, r3
 8008d20:	898b      	ldrh	r3, [r1, #12]
 8008d22:	05db      	lsls	r3, r3, #23
 8008d24:	4605      	mov	r5, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	4616      	mov	r6, r2
 8008d2a:	d505      	bpl.n	8008d38 <__swrite+0x1e>
 8008d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d30:	2302      	movs	r3, #2
 8008d32:	2200      	movs	r2, #0
 8008d34:	f000 f8d4 	bl	8008ee0 <_lseek_r>
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	4632      	mov	r2, r6
 8008d46:	463b      	mov	r3, r7
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4e:	f000 b8eb 	b.w	8008f28 <_write_r>

08008d52 <__sseek>:
 8008d52:	b510      	push	{r4, lr}
 8008d54:	460c      	mov	r4, r1
 8008d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5a:	f000 f8c1 	bl	8008ee0 <_lseek_r>
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	bf15      	itete	ne
 8008d64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d6e:	81a3      	strheq	r3, [r4, #12]
 8008d70:	bf18      	it	ne
 8008d72:	81a3      	strhne	r3, [r4, #12]
 8008d74:	bd10      	pop	{r4, pc}

08008d76 <__sclose>:
 8008d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7a:	f000 b8a1 	b.w	8008ec0 <_close_r>

08008d7e <__swbuf_r>:
 8008d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d80:	460e      	mov	r6, r1
 8008d82:	4614      	mov	r4, r2
 8008d84:	4605      	mov	r5, r0
 8008d86:	b118      	cbz	r0, 8008d90 <__swbuf_r+0x12>
 8008d88:	6a03      	ldr	r3, [r0, #32]
 8008d8a:	b90b      	cbnz	r3, 8008d90 <__swbuf_r+0x12>
 8008d8c:	f7ff feec 	bl	8008b68 <__sinit>
 8008d90:	69a3      	ldr	r3, [r4, #24]
 8008d92:	60a3      	str	r3, [r4, #8]
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	071a      	lsls	r2, r3, #28
 8008d98:	d501      	bpl.n	8008d9e <__swbuf_r+0x20>
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	b943      	cbnz	r3, 8008db0 <__swbuf_r+0x32>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	f000 f82b 	bl	8008dfc <__swsetup_r>
 8008da6:	b118      	cbz	r0, 8008db0 <__swbuf_r+0x32>
 8008da8:	f04f 37ff 	mov.w	r7, #4294967295
 8008dac:	4638      	mov	r0, r7
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	6922      	ldr	r2, [r4, #16]
 8008db4:	1a98      	subs	r0, r3, r2
 8008db6:	6963      	ldr	r3, [r4, #20]
 8008db8:	b2f6      	uxtb	r6, r6
 8008dba:	4283      	cmp	r3, r0
 8008dbc:	4637      	mov	r7, r6
 8008dbe:	dc05      	bgt.n	8008dcc <__swbuf_r+0x4e>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f002 fdda 	bl	800b97c <_fflush_r>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d1ed      	bne.n	8008da8 <__swbuf_r+0x2a>
 8008dcc:	68a3      	ldr	r3, [r4, #8]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	60a3      	str	r3, [r4, #8]
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	1c5a      	adds	r2, r3, #1
 8008dd6:	6022      	str	r2, [r4, #0]
 8008dd8:	701e      	strb	r6, [r3, #0]
 8008dda:	6962      	ldr	r2, [r4, #20]
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d004      	beq.n	8008dec <__swbuf_r+0x6e>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	07db      	lsls	r3, r3, #31
 8008de6:	d5e1      	bpl.n	8008dac <__swbuf_r+0x2e>
 8008de8:	2e0a      	cmp	r6, #10
 8008dea:	d1df      	bne.n	8008dac <__swbuf_r+0x2e>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f002 fdc4 	bl	800b97c <_fflush_r>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d0d9      	beq.n	8008dac <__swbuf_r+0x2e>
 8008df8:	e7d6      	b.n	8008da8 <__swbuf_r+0x2a>
	...

08008dfc <__swsetup_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4b29      	ldr	r3, [pc, #164]	@ (8008ea4 <__swsetup_r+0xa8>)
 8008e00:	4605      	mov	r5, r0
 8008e02:	6818      	ldr	r0, [r3, #0]
 8008e04:	460c      	mov	r4, r1
 8008e06:	b118      	cbz	r0, 8008e10 <__swsetup_r+0x14>
 8008e08:	6a03      	ldr	r3, [r0, #32]
 8008e0a:	b90b      	cbnz	r3, 8008e10 <__swsetup_r+0x14>
 8008e0c:	f7ff feac 	bl	8008b68 <__sinit>
 8008e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e14:	0719      	lsls	r1, r3, #28
 8008e16:	d422      	bmi.n	8008e5e <__swsetup_r+0x62>
 8008e18:	06da      	lsls	r2, r3, #27
 8008e1a:	d407      	bmi.n	8008e2c <__swsetup_r+0x30>
 8008e1c:	2209      	movs	r2, #9
 8008e1e:	602a      	str	r2, [r5, #0]
 8008e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2a:	e033      	b.n	8008e94 <__swsetup_r+0x98>
 8008e2c:	0758      	lsls	r0, r3, #29
 8008e2e:	d512      	bpl.n	8008e56 <__swsetup_r+0x5a>
 8008e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e32:	b141      	cbz	r1, 8008e46 <__swsetup_r+0x4a>
 8008e34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	d002      	beq.n	8008e42 <__swsetup_r+0x46>
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f000 fea1 	bl	8009b84 <_free_r>
 8008e42:	2300      	movs	r3, #0
 8008e44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	6063      	str	r3, [r4, #4]
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f043 0308 	orr.w	r3, r3, #8
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	b94b      	cbnz	r3, 8008e76 <__swsetup_r+0x7a>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e6c:	d003      	beq.n	8008e76 <__swsetup_r+0x7a>
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4628      	mov	r0, r5
 8008e72:	f002 fdd1 	bl	800ba18 <__smakebuf_r>
 8008e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e7a:	f013 0201 	ands.w	r2, r3, #1
 8008e7e:	d00a      	beq.n	8008e96 <__swsetup_r+0x9a>
 8008e80:	2200      	movs	r2, #0
 8008e82:	60a2      	str	r2, [r4, #8]
 8008e84:	6962      	ldr	r2, [r4, #20]
 8008e86:	4252      	negs	r2, r2
 8008e88:	61a2      	str	r2, [r4, #24]
 8008e8a:	6922      	ldr	r2, [r4, #16]
 8008e8c:	b942      	cbnz	r2, 8008ea0 <__swsetup_r+0xa4>
 8008e8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e92:	d1c5      	bne.n	8008e20 <__swsetup_r+0x24>
 8008e94:	bd38      	pop	{r3, r4, r5, pc}
 8008e96:	0799      	lsls	r1, r3, #30
 8008e98:	bf58      	it	pl
 8008e9a:	6962      	ldrpl	r2, [r4, #20]
 8008e9c:	60a2      	str	r2, [r4, #8]
 8008e9e:	e7f4      	b.n	8008e8a <__swsetup_r+0x8e>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e7f7      	b.n	8008e94 <__swsetup_r+0x98>
 8008ea4:	2400002c 	.word	0x2400002c

08008ea8 <memset>:
 8008ea8:	4402      	add	r2, r0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d100      	bne.n	8008eb2 <memset+0xa>
 8008eb0:	4770      	bx	lr
 8008eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008eb6:	e7f9      	b.n	8008eac <memset+0x4>

08008eb8 <_localeconv_r>:
 8008eb8:	4800      	ldr	r0, [pc, #0]	@ (8008ebc <_localeconv_r+0x4>)
 8008eba:	4770      	bx	lr
 8008ebc:	2400016c 	.word	0x2400016c

08008ec0 <_close_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	@ (8008edc <_close_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7fa f985 	bl	80031da <_close>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_close_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_close_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	24000620 	.word	0x24000620

08008ee0 <_lseek_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	@ (8008f00 <_lseek_r+0x20>)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f7fa f99a 	bl	8003228 <_lseek>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_lseek_r+0x1e>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_lseek_r+0x1e>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	24000620 	.word	0x24000620

08008f04 <_read_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d07      	ldr	r5, [pc, #28]	@ (8008f24 <_read_r+0x20>)
 8008f08:	4604      	mov	r4, r0
 8008f0a:	4608      	mov	r0, r1
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	2200      	movs	r2, #0
 8008f10:	602a      	str	r2, [r5, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	f7fa f944 	bl	80031a0 <_read>
 8008f18:	1c43      	adds	r3, r0, #1
 8008f1a:	d102      	bne.n	8008f22 <_read_r+0x1e>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	b103      	cbz	r3, 8008f22 <_read_r+0x1e>
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	bd38      	pop	{r3, r4, r5, pc}
 8008f24:	24000620 	.word	0x24000620

08008f28 <_write_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	4d07      	ldr	r5, [pc, #28]	@ (8008f48 <_write_r+0x20>)
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	4608      	mov	r0, r1
 8008f30:	4611      	mov	r1, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	602a      	str	r2, [r5, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	f7f9 fcd8 	bl	80028ec <_write>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_write_r+0x1e>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_write_r+0x1e>
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	24000620 	.word	0x24000620

08008f4c <__errno>:
 8008f4c:	4b01      	ldr	r3, [pc, #4]	@ (8008f54 <__errno+0x8>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	2400002c 	.word	0x2400002c

08008f58 <__libc_init_array>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	4d0d      	ldr	r5, [pc, #52]	@ (8008f90 <__libc_init_array+0x38>)
 8008f5c:	4c0d      	ldr	r4, [pc, #52]	@ (8008f94 <__libc_init_array+0x3c>)
 8008f5e:	1b64      	subs	r4, r4, r5
 8008f60:	10a4      	asrs	r4, r4, #2
 8008f62:	2600      	movs	r6, #0
 8008f64:	42a6      	cmp	r6, r4
 8008f66:	d109      	bne.n	8008f7c <__libc_init_array+0x24>
 8008f68:	4d0b      	ldr	r5, [pc, #44]	@ (8008f98 <__libc_init_array+0x40>)
 8008f6a:	4c0c      	ldr	r4, [pc, #48]	@ (8008f9c <__libc_init_array+0x44>)
 8008f6c:	f003 fa22 	bl	800c3b4 <_init>
 8008f70:	1b64      	subs	r4, r4, r5
 8008f72:	10a4      	asrs	r4, r4, #2
 8008f74:	2600      	movs	r6, #0
 8008f76:	42a6      	cmp	r6, r4
 8008f78:	d105      	bne.n	8008f86 <__libc_init_array+0x2e>
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f80:	4798      	blx	r3
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7ee      	b.n	8008f64 <__libc_init_array+0xc>
 8008f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8a:	4798      	blx	r3
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	e7f2      	b.n	8008f76 <__libc_init_array+0x1e>
 8008f90:	0800d1cc 	.word	0x0800d1cc
 8008f94:	0800d1cc 	.word	0x0800d1cc
 8008f98:	0800d1cc 	.word	0x0800d1cc
 8008f9c:	0800d1d0 	.word	0x0800d1d0

08008fa0 <__retarget_lock_init_recursive>:
 8008fa0:	4770      	bx	lr

08008fa2 <__retarget_lock_acquire_recursive>:
 8008fa2:	4770      	bx	lr

08008fa4 <__retarget_lock_release_recursive>:
 8008fa4:	4770      	bx	lr
	...

08008fa8 <nanf>:
 8008fa8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008fb0 <nanf+0x8>
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	7fc00000 	.word	0x7fc00000

08008fb4 <quorem>:
 8008fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	6903      	ldr	r3, [r0, #16]
 8008fba:	690c      	ldr	r4, [r1, #16]
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	db7e      	blt.n	80090c0 <quorem+0x10c>
 8008fc2:	3c01      	subs	r4, #1
 8008fc4:	f101 0814 	add.w	r8, r1, #20
 8008fc8:	00a3      	lsls	r3, r4, #2
 8008fca:	f100 0514 	add.w	r5, r0, #20
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fe6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fea:	d32e      	bcc.n	800904a <quorem+0x96>
 8008fec:	f04f 0a00 	mov.w	sl, #0
 8008ff0:	46c4      	mov	ip, r8
 8008ff2:	46ae      	mov	lr, r5
 8008ff4:	46d3      	mov	fp, sl
 8008ff6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ffa:	b298      	uxth	r0, r3
 8008ffc:	fb06 a000 	mla	r0, r6, r0, sl
 8009000:	0c02      	lsrs	r2, r0, #16
 8009002:	0c1b      	lsrs	r3, r3, #16
 8009004:	fb06 2303 	mla	r3, r6, r3, r2
 8009008:	f8de 2000 	ldr.w	r2, [lr]
 800900c:	b280      	uxth	r0, r0
 800900e:	b292      	uxth	r2, r2
 8009010:	1a12      	subs	r2, r2, r0
 8009012:	445a      	add	r2, fp
 8009014:	f8de 0000 	ldr.w	r0, [lr]
 8009018:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800901c:	b29b      	uxth	r3, r3
 800901e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009022:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009026:	b292      	uxth	r2, r2
 8009028:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800902c:	45e1      	cmp	r9, ip
 800902e:	f84e 2b04 	str.w	r2, [lr], #4
 8009032:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009036:	d2de      	bcs.n	8008ff6 <quorem+0x42>
 8009038:	9b00      	ldr	r3, [sp, #0]
 800903a:	58eb      	ldr	r3, [r5, r3]
 800903c:	b92b      	cbnz	r3, 800904a <quorem+0x96>
 800903e:	9b01      	ldr	r3, [sp, #4]
 8009040:	3b04      	subs	r3, #4
 8009042:	429d      	cmp	r5, r3
 8009044:	461a      	mov	r2, r3
 8009046:	d32f      	bcc.n	80090a8 <quorem+0xf4>
 8009048:	613c      	str	r4, [r7, #16]
 800904a:	4638      	mov	r0, r7
 800904c:	f001 f956 	bl	800a2fc <__mcmp>
 8009050:	2800      	cmp	r0, #0
 8009052:	db25      	blt.n	80090a0 <quorem+0xec>
 8009054:	4629      	mov	r1, r5
 8009056:	2000      	movs	r0, #0
 8009058:	f858 2b04 	ldr.w	r2, [r8], #4
 800905c:	f8d1 c000 	ldr.w	ip, [r1]
 8009060:	fa1f fe82 	uxth.w	lr, r2
 8009064:	fa1f f38c 	uxth.w	r3, ip
 8009068:	eba3 030e 	sub.w	r3, r3, lr
 800906c:	4403      	add	r3, r0
 800906e:	0c12      	lsrs	r2, r2, #16
 8009070:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009074:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800907e:	45c1      	cmp	r9, r8
 8009080:	f841 3b04 	str.w	r3, [r1], #4
 8009084:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009088:	d2e6      	bcs.n	8009058 <quorem+0xa4>
 800908a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800908e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009092:	b922      	cbnz	r2, 800909e <quorem+0xea>
 8009094:	3b04      	subs	r3, #4
 8009096:	429d      	cmp	r5, r3
 8009098:	461a      	mov	r2, r3
 800909a:	d30b      	bcc.n	80090b4 <quorem+0x100>
 800909c:	613c      	str	r4, [r7, #16]
 800909e:	3601      	adds	r6, #1
 80090a0:	4630      	mov	r0, r6
 80090a2:	b003      	add	sp, #12
 80090a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a8:	6812      	ldr	r2, [r2, #0]
 80090aa:	3b04      	subs	r3, #4
 80090ac:	2a00      	cmp	r2, #0
 80090ae:	d1cb      	bne.n	8009048 <quorem+0x94>
 80090b0:	3c01      	subs	r4, #1
 80090b2:	e7c6      	b.n	8009042 <quorem+0x8e>
 80090b4:	6812      	ldr	r2, [r2, #0]
 80090b6:	3b04      	subs	r3, #4
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	d1ef      	bne.n	800909c <quorem+0xe8>
 80090bc:	3c01      	subs	r4, #1
 80090be:	e7ea      	b.n	8009096 <quorem+0xe2>
 80090c0:	2000      	movs	r0, #0
 80090c2:	e7ee      	b.n	80090a2 <quorem+0xee>
 80090c4:	0000      	movs	r0, r0
	...

080090c8 <_dtoa_r>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	ed2d 8b02 	vpush	{d8}
 80090d0:	69c7      	ldr	r7, [r0, #28]
 80090d2:	b091      	sub	sp, #68	@ 0x44
 80090d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090d8:	ec55 4b10 	vmov	r4, r5, d0
 80090dc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80090de:	9107      	str	r1, [sp, #28]
 80090e0:	4681      	mov	r9, r0
 80090e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80090e6:	b97f      	cbnz	r7, 8009108 <_dtoa_r+0x40>
 80090e8:	2010      	movs	r0, #16
 80090ea:	f000 fd95 	bl	8009c18 <malloc>
 80090ee:	4602      	mov	r2, r0
 80090f0:	f8c9 001c 	str.w	r0, [r9, #28]
 80090f4:	b920      	cbnz	r0, 8009100 <_dtoa_r+0x38>
 80090f6:	4ba0      	ldr	r3, [pc, #640]	@ (8009378 <_dtoa_r+0x2b0>)
 80090f8:	21ef      	movs	r1, #239	@ 0xef
 80090fa:	48a0      	ldr	r0, [pc, #640]	@ (800937c <_dtoa_r+0x2b4>)
 80090fc:	f002 fd3c 	bl	800bb78 <__assert_func>
 8009100:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009104:	6007      	str	r7, [r0, #0]
 8009106:	60c7      	str	r7, [r0, #12]
 8009108:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800910c:	6819      	ldr	r1, [r3, #0]
 800910e:	b159      	cbz	r1, 8009128 <_dtoa_r+0x60>
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	604a      	str	r2, [r1, #4]
 8009114:	2301      	movs	r3, #1
 8009116:	4093      	lsls	r3, r2
 8009118:	608b      	str	r3, [r1, #8]
 800911a:	4648      	mov	r0, r9
 800911c:	f000 fe72 	bl	8009e04 <_Bfree>
 8009120:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	1e2b      	subs	r3, r5, #0
 800912a:	bfbb      	ittet	lt
 800912c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009130:	9303      	strlt	r3, [sp, #12]
 8009132:	2300      	movge	r3, #0
 8009134:	2201      	movlt	r2, #1
 8009136:	bfac      	ite	ge
 8009138:	6033      	strge	r3, [r6, #0]
 800913a:	6032      	strlt	r2, [r6, #0]
 800913c:	4b90      	ldr	r3, [pc, #576]	@ (8009380 <_dtoa_r+0x2b8>)
 800913e:	9e03      	ldr	r6, [sp, #12]
 8009140:	43b3      	bics	r3, r6
 8009142:	d110      	bne.n	8009166 <_dtoa_r+0x9e>
 8009144:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009146:	f242 730f 	movw	r3, #9999	@ 0x270f
 800914a:	6013      	str	r3, [r2, #0]
 800914c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009150:	4323      	orrs	r3, r4
 8009152:	f000 84e6 	beq.w	8009b22 <_dtoa_r+0xa5a>
 8009156:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009158:	4f8a      	ldr	r7, [pc, #552]	@ (8009384 <_dtoa_r+0x2bc>)
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 84e8 	beq.w	8009b30 <_dtoa_r+0xa68>
 8009160:	1cfb      	adds	r3, r7, #3
 8009162:	f000 bce3 	b.w	8009b2c <_dtoa_r+0xa64>
 8009166:	ed9d 8b02 	vldr	d8, [sp, #8]
 800916a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800916e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009172:	d10a      	bne.n	800918a <_dtoa_r+0xc2>
 8009174:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009176:	2301      	movs	r3, #1
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800917c:	b113      	cbz	r3, 8009184 <_dtoa_r+0xbc>
 800917e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009180:	4b81      	ldr	r3, [pc, #516]	@ (8009388 <_dtoa_r+0x2c0>)
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	4f81      	ldr	r7, [pc, #516]	@ (800938c <_dtoa_r+0x2c4>)
 8009186:	f000 bcd3 	b.w	8009b30 <_dtoa_r+0xa68>
 800918a:	aa0e      	add	r2, sp, #56	@ 0x38
 800918c:	a90f      	add	r1, sp, #60	@ 0x3c
 800918e:	4648      	mov	r0, r9
 8009190:	eeb0 0b48 	vmov.f64	d0, d8
 8009194:	f001 f9d2 	bl	800a53c <__d2b>
 8009198:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800919c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800919e:	9001      	str	r0, [sp, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d045      	beq.n	8009230 <_dtoa_r+0x168>
 80091a4:	eeb0 7b48 	vmov.f64	d7, d8
 80091a8:	ee18 1a90 	vmov	r1, s17
 80091ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80091b0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80091b4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80091b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80091bc:	2500      	movs	r5, #0
 80091be:	ee07 1a90 	vmov	s15, r1
 80091c2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80091c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009360 <_dtoa_r+0x298>
 80091ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80091ce:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009368 <_dtoa_r+0x2a0>
 80091d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80091d6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009370 <_dtoa_r+0x2a8>
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80091e2:	eeb0 7b46 	vmov.f64	d7, d6
 80091e6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80091ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80091ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80091f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f6:	ee16 8a90 	vmov	r8, s13
 80091fa:	d508      	bpl.n	800920e <_dtoa_r+0x146>
 80091fc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009200:	eeb4 6b47 	vcmp.f64	d6, d7
 8009204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009208:	bf18      	it	ne
 800920a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800920e:	f1b8 0f16 	cmp.w	r8, #22
 8009212:	d82b      	bhi.n	800926c <_dtoa_r+0x1a4>
 8009214:	495e      	ldr	r1, [pc, #376]	@ (8009390 <_dtoa_r+0x2c8>)
 8009216:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800921a:	ed91 7b00 	vldr	d7, [r1]
 800921e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009226:	d501      	bpl.n	800922c <_dtoa_r+0x164>
 8009228:	f108 38ff 	add.w	r8, r8, #4294967295
 800922c:	2100      	movs	r1, #0
 800922e:	e01e      	b.n	800926e <_dtoa_r+0x1a6>
 8009230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009232:	4413      	add	r3, r2
 8009234:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009238:	2920      	cmp	r1, #32
 800923a:	bfc1      	itttt	gt
 800923c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009240:	408e      	lslgt	r6, r1
 8009242:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009246:	fa24 f101 	lsrgt.w	r1, r4, r1
 800924a:	bfd6      	itet	le
 800924c:	f1c1 0120 	rsble	r1, r1, #32
 8009250:	4331      	orrgt	r1, r6
 8009252:	fa04 f101 	lslle.w	r1, r4, r1
 8009256:	ee07 1a90 	vmov	s15, r1
 800925a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800925e:	3b01      	subs	r3, #1
 8009260:	ee17 1a90 	vmov	r1, s15
 8009264:	2501      	movs	r5, #1
 8009266:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800926a:	e7a8      	b.n	80091be <_dtoa_r+0xf6>
 800926c:	2101      	movs	r1, #1
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	1e53      	subs	r3, r2, #1
 8009272:	9306      	str	r3, [sp, #24]
 8009274:	bf45      	ittet	mi
 8009276:	f1c2 0301 	rsbmi	r3, r2, #1
 800927a:	9304      	strmi	r3, [sp, #16]
 800927c:	2300      	movpl	r3, #0
 800927e:	2300      	movmi	r3, #0
 8009280:	bf4c      	ite	mi
 8009282:	9306      	strmi	r3, [sp, #24]
 8009284:	9304      	strpl	r3, [sp, #16]
 8009286:	f1b8 0f00 	cmp.w	r8, #0
 800928a:	910c      	str	r1, [sp, #48]	@ 0x30
 800928c:	db18      	blt.n	80092c0 <_dtoa_r+0x1f8>
 800928e:	9b06      	ldr	r3, [sp, #24]
 8009290:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009294:	4443      	add	r3, r8
 8009296:	9306      	str	r3, [sp, #24]
 8009298:	2300      	movs	r3, #0
 800929a:	9a07      	ldr	r2, [sp, #28]
 800929c:	2a09      	cmp	r2, #9
 800929e:	d845      	bhi.n	800932c <_dtoa_r+0x264>
 80092a0:	2a05      	cmp	r2, #5
 80092a2:	bfc4      	itt	gt
 80092a4:	3a04      	subgt	r2, #4
 80092a6:	9207      	strgt	r2, [sp, #28]
 80092a8:	9a07      	ldr	r2, [sp, #28]
 80092aa:	f1a2 0202 	sub.w	r2, r2, #2
 80092ae:	bfcc      	ite	gt
 80092b0:	2400      	movgt	r4, #0
 80092b2:	2401      	movle	r4, #1
 80092b4:	2a03      	cmp	r2, #3
 80092b6:	d844      	bhi.n	8009342 <_dtoa_r+0x27a>
 80092b8:	e8df f002 	tbb	[pc, r2]
 80092bc:	0b173634 	.word	0x0b173634
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	2200      	movs	r2, #0
 80092c4:	eba3 0308 	sub.w	r3, r3, r8
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	920a      	str	r2, [sp, #40]	@ 0x28
 80092cc:	f1c8 0300 	rsb	r3, r8, #0
 80092d0:	e7e3      	b.n	800929a <_dtoa_r+0x1d2>
 80092d2:	2201      	movs	r2, #1
 80092d4:	9208      	str	r2, [sp, #32]
 80092d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092d8:	eb08 0b02 	add.w	fp, r8, r2
 80092dc:	f10b 0a01 	add.w	sl, fp, #1
 80092e0:	4652      	mov	r2, sl
 80092e2:	2a01      	cmp	r2, #1
 80092e4:	bfb8      	it	lt
 80092e6:	2201      	movlt	r2, #1
 80092e8:	e006      	b.n	80092f8 <_dtoa_r+0x230>
 80092ea:	2201      	movs	r2, #1
 80092ec:	9208      	str	r2, [sp, #32]
 80092ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	dd29      	ble.n	8009348 <_dtoa_r+0x280>
 80092f4:	4693      	mov	fp, r2
 80092f6:	4692      	mov	sl, r2
 80092f8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80092fc:	2100      	movs	r1, #0
 80092fe:	2004      	movs	r0, #4
 8009300:	f100 0614 	add.w	r6, r0, #20
 8009304:	4296      	cmp	r6, r2
 8009306:	d926      	bls.n	8009356 <_dtoa_r+0x28e>
 8009308:	6079      	str	r1, [r7, #4]
 800930a:	4648      	mov	r0, r9
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	f000 fd39 	bl	8009d84 <_Balloc>
 8009312:	9b05      	ldr	r3, [sp, #20]
 8009314:	4607      	mov	r7, r0
 8009316:	2800      	cmp	r0, #0
 8009318:	d13e      	bne.n	8009398 <_dtoa_r+0x2d0>
 800931a:	4b1e      	ldr	r3, [pc, #120]	@ (8009394 <_dtoa_r+0x2cc>)
 800931c:	4602      	mov	r2, r0
 800931e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009322:	e6ea      	b.n	80090fa <_dtoa_r+0x32>
 8009324:	2200      	movs	r2, #0
 8009326:	e7e1      	b.n	80092ec <_dtoa_r+0x224>
 8009328:	2200      	movs	r2, #0
 800932a:	e7d3      	b.n	80092d4 <_dtoa_r+0x20c>
 800932c:	2401      	movs	r4, #1
 800932e:	2200      	movs	r2, #0
 8009330:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009334:	f04f 3bff 	mov.w	fp, #4294967295
 8009338:	2100      	movs	r1, #0
 800933a:	46da      	mov	sl, fp
 800933c:	2212      	movs	r2, #18
 800933e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009340:	e7da      	b.n	80092f8 <_dtoa_r+0x230>
 8009342:	2201      	movs	r2, #1
 8009344:	9208      	str	r2, [sp, #32]
 8009346:	e7f5      	b.n	8009334 <_dtoa_r+0x26c>
 8009348:	f04f 0b01 	mov.w	fp, #1
 800934c:	46da      	mov	sl, fp
 800934e:	465a      	mov	r2, fp
 8009350:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009354:	e7d0      	b.n	80092f8 <_dtoa_r+0x230>
 8009356:	3101      	adds	r1, #1
 8009358:	0040      	lsls	r0, r0, #1
 800935a:	e7d1      	b.n	8009300 <_dtoa_r+0x238>
 800935c:	f3af 8000 	nop.w
 8009360:	636f4361 	.word	0x636f4361
 8009364:	3fd287a7 	.word	0x3fd287a7
 8009368:	8b60c8b3 	.word	0x8b60c8b3
 800936c:	3fc68a28 	.word	0x3fc68a28
 8009370:	509f79fb 	.word	0x509f79fb
 8009374:	3fd34413 	.word	0x3fd34413
 8009378:	0800cde2 	.word	0x0800cde2
 800937c:	0800cdf9 	.word	0x0800cdf9
 8009380:	7ff00000 	.word	0x7ff00000
 8009384:	0800cdde 	.word	0x0800cdde
 8009388:	0800cdad 	.word	0x0800cdad
 800938c:	0800cdac 	.word	0x0800cdac
 8009390:	0800cfa8 	.word	0x0800cfa8
 8009394:	0800ce51 	.word	0x0800ce51
 8009398:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800939c:	f1ba 0f0e 	cmp.w	sl, #14
 80093a0:	6010      	str	r0, [r2, #0]
 80093a2:	d86e      	bhi.n	8009482 <_dtoa_r+0x3ba>
 80093a4:	2c00      	cmp	r4, #0
 80093a6:	d06c      	beq.n	8009482 <_dtoa_r+0x3ba>
 80093a8:	f1b8 0f00 	cmp.w	r8, #0
 80093ac:	f340 80b4 	ble.w	8009518 <_dtoa_r+0x450>
 80093b0:	4ac8      	ldr	r2, [pc, #800]	@ (80096d4 <_dtoa_r+0x60c>)
 80093b2:	f008 010f 	and.w	r1, r8, #15
 80093b6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80093ba:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80093be:	ed92 7b00 	vldr	d7, [r2]
 80093c2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80093c6:	f000 809b 	beq.w	8009500 <_dtoa_r+0x438>
 80093ca:	4ac3      	ldr	r2, [pc, #780]	@ (80096d8 <_dtoa_r+0x610>)
 80093cc:	ed92 6b08 	vldr	d6, [r2, #32]
 80093d0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80093d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80093d8:	f001 010f 	and.w	r1, r1, #15
 80093dc:	2203      	movs	r2, #3
 80093de:	48be      	ldr	r0, [pc, #760]	@ (80096d8 <_dtoa_r+0x610>)
 80093e0:	2900      	cmp	r1, #0
 80093e2:	f040 808f 	bne.w	8009504 <_dtoa_r+0x43c>
 80093e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80093ea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80093ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093f2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80093f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093f8:	2900      	cmp	r1, #0
 80093fa:	f000 80b3 	beq.w	8009564 <_dtoa_r+0x49c>
 80093fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009402:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940a:	f140 80ab 	bpl.w	8009564 <_dtoa_r+0x49c>
 800940e:	f1ba 0f00 	cmp.w	sl, #0
 8009412:	f000 80a7 	beq.w	8009564 <_dtoa_r+0x49c>
 8009416:	f1bb 0f00 	cmp.w	fp, #0
 800941a:	dd30      	ble.n	800947e <_dtoa_r+0x3b6>
 800941c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009420:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009424:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009428:	f108 31ff 	add.w	r1, r8, #4294967295
 800942c:	9105      	str	r1, [sp, #20]
 800942e:	3201      	adds	r2, #1
 8009430:	465c      	mov	r4, fp
 8009432:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009436:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800943a:	ee07 2a90 	vmov	s15, r2
 800943e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009442:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009446:	ee15 2a90 	vmov	r2, s11
 800944a:	ec51 0b15 	vmov	r0, r1, d5
 800944e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009452:	2c00      	cmp	r4, #0
 8009454:	f040 808a 	bne.w	800956c <_dtoa_r+0x4a4>
 8009458:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800945c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009460:	ec41 0b17 	vmov	d7, r0, r1
 8009464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800946c:	f300 826a 	bgt.w	8009944 <_dtoa_r+0x87c>
 8009470:	eeb1 7b47 	vneg.f64	d7, d7
 8009474:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947c:	d423      	bmi.n	80094c6 <_dtoa_r+0x3fe>
 800947e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009482:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009484:	2a00      	cmp	r2, #0
 8009486:	f2c0 8129 	blt.w	80096dc <_dtoa_r+0x614>
 800948a:	f1b8 0f0e 	cmp.w	r8, #14
 800948e:	f300 8125 	bgt.w	80096dc <_dtoa_r+0x614>
 8009492:	4b90      	ldr	r3, [pc, #576]	@ (80096d4 <_dtoa_r+0x60c>)
 8009494:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009498:	ed93 6b00 	vldr	d6, [r3]
 800949c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f280 80c8 	bge.w	8009634 <_dtoa_r+0x56c>
 80094a4:	f1ba 0f00 	cmp.w	sl, #0
 80094a8:	f300 80c4 	bgt.w	8009634 <_dtoa_r+0x56c>
 80094ac:	d10b      	bne.n	80094c6 <_dtoa_r+0x3fe>
 80094ae:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80094b2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80094b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80094be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c2:	f2c0 823c 	blt.w	800993e <_dtoa_r+0x876>
 80094c6:	2400      	movs	r4, #0
 80094c8:	4625      	mov	r5, r4
 80094ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094cc:	43db      	mvns	r3, r3
 80094ce:	9305      	str	r3, [sp, #20]
 80094d0:	463e      	mov	r6, r7
 80094d2:	f04f 0800 	mov.w	r8, #0
 80094d6:	4621      	mov	r1, r4
 80094d8:	4648      	mov	r0, r9
 80094da:	f000 fc93 	bl	8009e04 <_Bfree>
 80094de:	2d00      	cmp	r5, #0
 80094e0:	f000 80a2 	beq.w	8009628 <_dtoa_r+0x560>
 80094e4:	f1b8 0f00 	cmp.w	r8, #0
 80094e8:	d005      	beq.n	80094f6 <_dtoa_r+0x42e>
 80094ea:	45a8      	cmp	r8, r5
 80094ec:	d003      	beq.n	80094f6 <_dtoa_r+0x42e>
 80094ee:	4641      	mov	r1, r8
 80094f0:	4648      	mov	r0, r9
 80094f2:	f000 fc87 	bl	8009e04 <_Bfree>
 80094f6:	4629      	mov	r1, r5
 80094f8:	4648      	mov	r0, r9
 80094fa:	f000 fc83 	bl	8009e04 <_Bfree>
 80094fe:	e093      	b.n	8009628 <_dtoa_r+0x560>
 8009500:	2202      	movs	r2, #2
 8009502:	e76c      	b.n	80093de <_dtoa_r+0x316>
 8009504:	07cc      	lsls	r4, r1, #31
 8009506:	d504      	bpl.n	8009512 <_dtoa_r+0x44a>
 8009508:	ed90 6b00 	vldr	d6, [r0]
 800950c:	3201      	adds	r2, #1
 800950e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009512:	1049      	asrs	r1, r1, #1
 8009514:	3008      	adds	r0, #8
 8009516:	e763      	b.n	80093e0 <_dtoa_r+0x318>
 8009518:	d022      	beq.n	8009560 <_dtoa_r+0x498>
 800951a:	f1c8 0100 	rsb	r1, r8, #0
 800951e:	4a6d      	ldr	r2, [pc, #436]	@ (80096d4 <_dtoa_r+0x60c>)
 8009520:	f001 000f 	and.w	r0, r1, #15
 8009524:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009528:	ed92 7b00 	vldr	d7, [r2]
 800952c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009534:	4868      	ldr	r0, [pc, #416]	@ (80096d8 <_dtoa_r+0x610>)
 8009536:	1109      	asrs	r1, r1, #4
 8009538:	2400      	movs	r4, #0
 800953a:	2202      	movs	r2, #2
 800953c:	b929      	cbnz	r1, 800954a <_dtoa_r+0x482>
 800953e:	2c00      	cmp	r4, #0
 8009540:	f43f af57 	beq.w	80093f2 <_dtoa_r+0x32a>
 8009544:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009548:	e753      	b.n	80093f2 <_dtoa_r+0x32a>
 800954a:	07ce      	lsls	r6, r1, #31
 800954c:	d505      	bpl.n	800955a <_dtoa_r+0x492>
 800954e:	ed90 6b00 	vldr	d6, [r0]
 8009552:	3201      	adds	r2, #1
 8009554:	2401      	movs	r4, #1
 8009556:	ee27 7b06 	vmul.f64	d7, d7, d6
 800955a:	1049      	asrs	r1, r1, #1
 800955c:	3008      	adds	r0, #8
 800955e:	e7ed      	b.n	800953c <_dtoa_r+0x474>
 8009560:	2202      	movs	r2, #2
 8009562:	e746      	b.n	80093f2 <_dtoa_r+0x32a>
 8009564:	f8cd 8014 	str.w	r8, [sp, #20]
 8009568:	4654      	mov	r4, sl
 800956a:	e762      	b.n	8009432 <_dtoa_r+0x36a>
 800956c:	4a59      	ldr	r2, [pc, #356]	@ (80096d4 <_dtoa_r+0x60c>)
 800956e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009572:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009576:	9a08      	ldr	r2, [sp, #32]
 8009578:	ec41 0b17 	vmov	d7, r0, r1
 800957c:	443c      	add	r4, r7
 800957e:	b34a      	cbz	r2, 80095d4 <_dtoa_r+0x50c>
 8009580:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009584:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009588:	463e      	mov	r6, r7
 800958a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800958e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009592:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009596:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800959a:	ee14 2a90 	vmov	r2, s9
 800959e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80095a2:	3230      	adds	r2, #48	@ 0x30
 80095a4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80095a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b0:	f806 2b01 	strb.w	r2, [r6], #1
 80095b4:	d438      	bmi.n	8009628 <_dtoa_r+0x560>
 80095b6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80095ba:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80095be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c2:	d46e      	bmi.n	80096a2 <_dtoa_r+0x5da>
 80095c4:	42a6      	cmp	r6, r4
 80095c6:	f43f af5a 	beq.w	800947e <_dtoa_r+0x3b6>
 80095ca:	ee27 7b03 	vmul.f64	d7, d7, d3
 80095ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 80095d2:	e7e0      	b.n	8009596 <_dtoa_r+0x4ce>
 80095d4:	4621      	mov	r1, r4
 80095d6:	463e      	mov	r6, r7
 80095d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095dc:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80095e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80095e4:	ee14 2a90 	vmov	r2, s9
 80095e8:	3230      	adds	r2, #48	@ 0x30
 80095ea:	f806 2b01 	strb.w	r2, [r6], #1
 80095ee:	42a6      	cmp	r6, r4
 80095f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80095f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80095f8:	d119      	bne.n	800962e <_dtoa_r+0x566>
 80095fa:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80095fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009602:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960a:	dc4a      	bgt.n	80096a2 <_dtoa_r+0x5da>
 800960c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009610:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009618:	f57f af31 	bpl.w	800947e <_dtoa_r+0x3b6>
 800961c:	460e      	mov	r6, r1
 800961e:	3901      	subs	r1, #1
 8009620:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009624:	2b30      	cmp	r3, #48	@ 0x30
 8009626:	d0f9      	beq.n	800961c <_dtoa_r+0x554>
 8009628:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800962c:	e027      	b.n	800967e <_dtoa_r+0x5b6>
 800962e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009632:	e7d5      	b.n	80095e0 <_dtoa_r+0x518>
 8009634:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009638:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800963c:	463e      	mov	r6, r7
 800963e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009642:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009646:	ee15 3a10 	vmov	r3, s10
 800964a:	3330      	adds	r3, #48	@ 0x30
 800964c:	f806 3b01 	strb.w	r3, [r6], #1
 8009650:	1bf3      	subs	r3, r6, r7
 8009652:	459a      	cmp	sl, r3
 8009654:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009658:	eea3 7b46 	vfms.f64	d7, d3, d6
 800965c:	d132      	bne.n	80096c4 <_dtoa_r+0x5fc>
 800965e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009662:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800966a:	dc18      	bgt.n	800969e <_dtoa_r+0x5d6>
 800966c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009674:	d103      	bne.n	800967e <_dtoa_r+0x5b6>
 8009676:	ee15 3a10 	vmov	r3, s10
 800967a:	07db      	lsls	r3, r3, #31
 800967c:	d40f      	bmi.n	800969e <_dtoa_r+0x5d6>
 800967e:	9901      	ldr	r1, [sp, #4]
 8009680:	4648      	mov	r0, r9
 8009682:	f000 fbbf 	bl	8009e04 <_Bfree>
 8009686:	2300      	movs	r3, #0
 8009688:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800968a:	7033      	strb	r3, [r6, #0]
 800968c:	f108 0301 	add.w	r3, r8, #1
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 824b 	beq.w	8009b30 <_dtoa_r+0xa68>
 800969a:	601e      	str	r6, [r3, #0]
 800969c:	e248      	b.n	8009b30 <_dtoa_r+0xa68>
 800969e:	f8cd 8014 	str.w	r8, [sp, #20]
 80096a2:	4633      	mov	r3, r6
 80096a4:	461e      	mov	r6, r3
 80096a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096aa:	2a39      	cmp	r2, #57	@ 0x39
 80096ac:	d106      	bne.n	80096bc <_dtoa_r+0x5f4>
 80096ae:	429f      	cmp	r7, r3
 80096b0:	d1f8      	bne.n	80096a4 <_dtoa_r+0x5dc>
 80096b2:	9a05      	ldr	r2, [sp, #20]
 80096b4:	3201      	adds	r2, #1
 80096b6:	9205      	str	r2, [sp, #20]
 80096b8:	2230      	movs	r2, #48	@ 0x30
 80096ba:	703a      	strb	r2, [r7, #0]
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	3201      	adds	r2, #1
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e7b1      	b.n	8009628 <_dtoa_r+0x560>
 80096c4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d0:	d1b5      	bne.n	800963e <_dtoa_r+0x576>
 80096d2:	e7d4      	b.n	800967e <_dtoa_r+0x5b6>
 80096d4:	0800cfa8 	.word	0x0800cfa8
 80096d8:	0800cf80 	.word	0x0800cf80
 80096dc:	9908      	ldr	r1, [sp, #32]
 80096de:	2900      	cmp	r1, #0
 80096e0:	f000 80e9 	beq.w	80098b6 <_dtoa_r+0x7ee>
 80096e4:	9907      	ldr	r1, [sp, #28]
 80096e6:	2901      	cmp	r1, #1
 80096e8:	f300 80cb 	bgt.w	8009882 <_dtoa_r+0x7ba>
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	f000 80c4 	beq.w	800987a <_dtoa_r+0x7b2>
 80096f2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80096f6:	9e04      	ldr	r6, [sp, #16]
 80096f8:	461c      	mov	r4, r3
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	9b04      	ldr	r3, [sp, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	9b06      	ldr	r3, [sp, #24]
 8009704:	2101      	movs	r1, #1
 8009706:	4413      	add	r3, r2
 8009708:	4648      	mov	r0, r9
 800970a:	9306      	str	r3, [sp, #24]
 800970c:	f000 fc78 	bl	800a000 <__i2b>
 8009710:	9b05      	ldr	r3, [sp, #20]
 8009712:	4605      	mov	r5, r0
 8009714:	b166      	cbz	r6, 8009730 <_dtoa_r+0x668>
 8009716:	9a06      	ldr	r2, [sp, #24]
 8009718:	2a00      	cmp	r2, #0
 800971a:	dd09      	ble.n	8009730 <_dtoa_r+0x668>
 800971c:	42b2      	cmp	r2, r6
 800971e:	9904      	ldr	r1, [sp, #16]
 8009720:	bfa8      	it	ge
 8009722:	4632      	movge	r2, r6
 8009724:	1a89      	subs	r1, r1, r2
 8009726:	9104      	str	r1, [sp, #16]
 8009728:	9906      	ldr	r1, [sp, #24]
 800972a:	1ab6      	subs	r6, r6, r2
 800972c:	1a8a      	subs	r2, r1, r2
 800972e:	9206      	str	r2, [sp, #24]
 8009730:	b30b      	cbz	r3, 8009776 <_dtoa_r+0x6ae>
 8009732:	9a08      	ldr	r2, [sp, #32]
 8009734:	2a00      	cmp	r2, #0
 8009736:	f000 80c5 	beq.w	80098c4 <_dtoa_r+0x7fc>
 800973a:	2c00      	cmp	r4, #0
 800973c:	f000 80bf 	beq.w	80098be <_dtoa_r+0x7f6>
 8009740:	4629      	mov	r1, r5
 8009742:	4622      	mov	r2, r4
 8009744:	4648      	mov	r0, r9
 8009746:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009748:	f000 fd12 	bl	800a170 <__pow5mult>
 800974c:	9a01      	ldr	r2, [sp, #4]
 800974e:	4601      	mov	r1, r0
 8009750:	4605      	mov	r5, r0
 8009752:	4648      	mov	r0, r9
 8009754:	f000 fc6a 	bl	800a02c <__multiply>
 8009758:	9901      	ldr	r1, [sp, #4]
 800975a:	9005      	str	r0, [sp, #20]
 800975c:	4648      	mov	r0, r9
 800975e:	f000 fb51 	bl	8009e04 <_Bfree>
 8009762:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009764:	1b1b      	subs	r3, r3, r4
 8009766:	f000 80b0 	beq.w	80098ca <_dtoa_r+0x802>
 800976a:	9905      	ldr	r1, [sp, #20]
 800976c:	461a      	mov	r2, r3
 800976e:	4648      	mov	r0, r9
 8009770:	f000 fcfe 	bl	800a170 <__pow5mult>
 8009774:	9001      	str	r0, [sp, #4]
 8009776:	2101      	movs	r1, #1
 8009778:	4648      	mov	r0, r9
 800977a:	f000 fc41 	bl	800a000 <__i2b>
 800977e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009780:	4604      	mov	r4, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 81da 	beq.w	8009b3c <_dtoa_r+0xa74>
 8009788:	461a      	mov	r2, r3
 800978a:	4601      	mov	r1, r0
 800978c:	4648      	mov	r0, r9
 800978e:	f000 fcef 	bl	800a170 <__pow5mult>
 8009792:	9b07      	ldr	r3, [sp, #28]
 8009794:	2b01      	cmp	r3, #1
 8009796:	4604      	mov	r4, r0
 8009798:	f300 80a0 	bgt.w	80098dc <_dtoa_r+0x814>
 800979c:	9b02      	ldr	r3, [sp, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f040 8096 	bne.w	80098d0 <_dtoa_r+0x808>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	f040 8092 	bne.w	80098d4 <_dtoa_r+0x80c>
 80097b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80097b4:	0d12      	lsrs	r2, r2, #20
 80097b6:	0512      	lsls	r2, r2, #20
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	f000 808d 	beq.w	80098d8 <_dtoa_r+0x810>
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	3301      	adds	r3, #1
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	9b06      	ldr	r3, [sp, #24]
 80097c6:	3301      	adds	r3, #1
 80097c8:	9306      	str	r3, [sp, #24]
 80097ca:	2301      	movs	r3, #1
 80097cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 81b9 	beq.w	8009b48 <_dtoa_r+0xa80>
 80097d6:	6922      	ldr	r2, [r4, #16]
 80097d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80097dc:	6910      	ldr	r0, [r2, #16]
 80097de:	f000 fbc3 	bl	8009f68 <__hi0bits>
 80097e2:	f1c0 0020 	rsb	r0, r0, #32
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	4418      	add	r0, r3
 80097ea:	f010 001f 	ands.w	r0, r0, #31
 80097ee:	f000 8081 	beq.w	80098f4 <_dtoa_r+0x82c>
 80097f2:	f1c0 0220 	rsb	r2, r0, #32
 80097f6:	2a04      	cmp	r2, #4
 80097f8:	dd73      	ble.n	80098e2 <_dtoa_r+0x81a>
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	f1c0 001c 	rsb	r0, r0, #28
 8009800:	4403      	add	r3, r0
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	9b06      	ldr	r3, [sp, #24]
 8009806:	4406      	add	r6, r0
 8009808:	4403      	add	r3, r0
 800980a:	9306      	str	r3, [sp, #24]
 800980c:	9b04      	ldr	r3, [sp, #16]
 800980e:	2b00      	cmp	r3, #0
 8009810:	dd05      	ble.n	800981e <_dtoa_r+0x756>
 8009812:	9901      	ldr	r1, [sp, #4]
 8009814:	461a      	mov	r2, r3
 8009816:	4648      	mov	r0, r9
 8009818:	f000 fd04 	bl	800a224 <__lshift>
 800981c:	9001      	str	r0, [sp, #4]
 800981e:	9b06      	ldr	r3, [sp, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	dd05      	ble.n	8009830 <_dtoa_r+0x768>
 8009824:	4621      	mov	r1, r4
 8009826:	461a      	mov	r2, r3
 8009828:	4648      	mov	r0, r9
 800982a:	f000 fcfb 	bl	800a224 <__lshift>
 800982e:	4604      	mov	r4, r0
 8009830:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009832:	2b00      	cmp	r3, #0
 8009834:	d060      	beq.n	80098f8 <_dtoa_r+0x830>
 8009836:	9801      	ldr	r0, [sp, #4]
 8009838:	4621      	mov	r1, r4
 800983a:	f000 fd5f 	bl	800a2fc <__mcmp>
 800983e:	2800      	cmp	r0, #0
 8009840:	da5a      	bge.n	80098f8 <_dtoa_r+0x830>
 8009842:	f108 33ff 	add.w	r3, r8, #4294967295
 8009846:	9305      	str	r3, [sp, #20]
 8009848:	9901      	ldr	r1, [sp, #4]
 800984a:	2300      	movs	r3, #0
 800984c:	220a      	movs	r2, #10
 800984e:	4648      	mov	r0, r9
 8009850:	f000 fafa 	bl	8009e48 <__multadd>
 8009854:	9b08      	ldr	r3, [sp, #32]
 8009856:	9001      	str	r0, [sp, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 8177 	beq.w	8009b4c <_dtoa_r+0xa84>
 800985e:	4629      	mov	r1, r5
 8009860:	2300      	movs	r3, #0
 8009862:	220a      	movs	r2, #10
 8009864:	4648      	mov	r0, r9
 8009866:	f000 faef 	bl	8009e48 <__multadd>
 800986a:	f1bb 0f00 	cmp.w	fp, #0
 800986e:	4605      	mov	r5, r0
 8009870:	dc6e      	bgt.n	8009950 <_dtoa_r+0x888>
 8009872:	9b07      	ldr	r3, [sp, #28]
 8009874:	2b02      	cmp	r3, #2
 8009876:	dc48      	bgt.n	800990a <_dtoa_r+0x842>
 8009878:	e06a      	b.n	8009950 <_dtoa_r+0x888>
 800987a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800987c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009880:	e739      	b.n	80096f6 <_dtoa_r+0x62e>
 8009882:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009886:	42a3      	cmp	r3, r4
 8009888:	db07      	blt.n	800989a <_dtoa_r+0x7d2>
 800988a:	f1ba 0f00 	cmp.w	sl, #0
 800988e:	eba3 0404 	sub.w	r4, r3, r4
 8009892:	db0b      	blt.n	80098ac <_dtoa_r+0x7e4>
 8009894:	9e04      	ldr	r6, [sp, #16]
 8009896:	4652      	mov	r2, sl
 8009898:	e72f      	b.n	80096fa <_dtoa_r+0x632>
 800989a:	1ae2      	subs	r2, r4, r3
 800989c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800989e:	9e04      	ldr	r6, [sp, #16]
 80098a0:	4413      	add	r3, r2
 80098a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a4:	4652      	mov	r2, sl
 80098a6:	4623      	mov	r3, r4
 80098a8:	2400      	movs	r4, #0
 80098aa:	e726      	b.n	80096fa <_dtoa_r+0x632>
 80098ac:	9a04      	ldr	r2, [sp, #16]
 80098ae:	eba2 060a 	sub.w	r6, r2, sl
 80098b2:	2200      	movs	r2, #0
 80098b4:	e721      	b.n	80096fa <_dtoa_r+0x632>
 80098b6:	9e04      	ldr	r6, [sp, #16]
 80098b8:	9d08      	ldr	r5, [sp, #32]
 80098ba:	461c      	mov	r4, r3
 80098bc:	e72a      	b.n	8009714 <_dtoa_r+0x64c>
 80098be:	9a01      	ldr	r2, [sp, #4]
 80098c0:	9205      	str	r2, [sp, #20]
 80098c2:	e752      	b.n	800976a <_dtoa_r+0x6a2>
 80098c4:	9901      	ldr	r1, [sp, #4]
 80098c6:	461a      	mov	r2, r3
 80098c8:	e751      	b.n	800976e <_dtoa_r+0x6a6>
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	e752      	b.n	8009776 <_dtoa_r+0x6ae>
 80098d0:	2300      	movs	r3, #0
 80098d2:	e77b      	b.n	80097cc <_dtoa_r+0x704>
 80098d4:	9b02      	ldr	r3, [sp, #8]
 80098d6:	e779      	b.n	80097cc <_dtoa_r+0x704>
 80098d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80098da:	e778      	b.n	80097ce <_dtoa_r+0x706>
 80098dc:	2300      	movs	r3, #0
 80098de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098e0:	e779      	b.n	80097d6 <_dtoa_r+0x70e>
 80098e2:	d093      	beq.n	800980c <_dtoa_r+0x744>
 80098e4:	9b04      	ldr	r3, [sp, #16]
 80098e6:	321c      	adds	r2, #28
 80098e8:	4413      	add	r3, r2
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	9b06      	ldr	r3, [sp, #24]
 80098ee:	4416      	add	r6, r2
 80098f0:	4413      	add	r3, r2
 80098f2:	e78a      	b.n	800980a <_dtoa_r+0x742>
 80098f4:	4602      	mov	r2, r0
 80098f6:	e7f5      	b.n	80098e4 <_dtoa_r+0x81c>
 80098f8:	f1ba 0f00 	cmp.w	sl, #0
 80098fc:	f8cd 8014 	str.w	r8, [sp, #20]
 8009900:	46d3      	mov	fp, sl
 8009902:	dc21      	bgt.n	8009948 <_dtoa_r+0x880>
 8009904:	9b07      	ldr	r3, [sp, #28]
 8009906:	2b02      	cmp	r3, #2
 8009908:	dd1e      	ble.n	8009948 <_dtoa_r+0x880>
 800990a:	f1bb 0f00 	cmp.w	fp, #0
 800990e:	f47f addc 	bne.w	80094ca <_dtoa_r+0x402>
 8009912:	4621      	mov	r1, r4
 8009914:	465b      	mov	r3, fp
 8009916:	2205      	movs	r2, #5
 8009918:	4648      	mov	r0, r9
 800991a:	f000 fa95 	bl	8009e48 <__multadd>
 800991e:	4601      	mov	r1, r0
 8009920:	4604      	mov	r4, r0
 8009922:	9801      	ldr	r0, [sp, #4]
 8009924:	f000 fcea 	bl	800a2fc <__mcmp>
 8009928:	2800      	cmp	r0, #0
 800992a:	f77f adce 	ble.w	80094ca <_dtoa_r+0x402>
 800992e:	463e      	mov	r6, r7
 8009930:	2331      	movs	r3, #49	@ 0x31
 8009932:	f806 3b01 	strb.w	r3, [r6], #1
 8009936:	9b05      	ldr	r3, [sp, #20]
 8009938:	3301      	adds	r3, #1
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	e5c9      	b.n	80094d2 <_dtoa_r+0x40a>
 800993e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009942:	4654      	mov	r4, sl
 8009944:	4625      	mov	r5, r4
 8009946:	e7f2      	b.n	800992e <_dtoa_r+0x866>
 8009948:	9b08      	ldr	r3, [sp, #32]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 8102 	beq.w	8009b54 <_dtoa_r+0xa8c>
 8009950:	2e00      	cmp	r6, #0
 8009952:	dd05      	ble.n	8009960 <_dtoa_r+0x898>
 8009954:	4629      	mov	r1, r5
 8009956:	4632      	mov	r2, r6
 8009958:	4648      	mov	r0, r9
 800995a:	f000 fc63 	bl	800a224 <__lshift>
 800995e:	4605      	mov	r5, r0
 8009960:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d058      	beq.n	8009a18 <_dtoa_r+0x950>
 8009966:	6869      	ldr	r1, [r5, #4]
 8009968:	4648      	mov	r0, r9
 800996a:	f000 fa0b 	bl	8009d84 <_Balloc>
 800996e:	4606      	mov	r6, r0
 8009970:	b928      	cbnz	r0, 800997e <_dtoa_r+0x8b6>
 8009972:	4b82      	ldr	r3, [pc, #520]	@ (8009b7c <_dtoa_r+0xab4>)
 8009974:	4602      	mov	r2, r0
 8009976:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800997a:	f7ff bbbe 	b.w	80090fa <_dtoa_r+0x32>
 800997e:	692a      	ldr	r2, [r5, #16]
 8009980:	3202      	adds	r2, #2
 8009982:	0092      	lsls	r2, r2, #2
 8009984:	f105 010c 	add.w	r1, r5, #12
 8009988:	300c      	adds	r0, #12
 800998a:	f002 f8df 	bl	800bb4c <memcpy>
 800998e:	2201      	movs	r2, #1
 8009990:	4631      	mov	r1, r6
 8009992:	4648      	mov	r0, r9
 8009994:	f000 fc46 	bl	800a224 <__lshift>
 8009998:	1c7b      	adds	r3, r7, #1
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	eb07 030b 	add.w	r3, r7, fp
 80099a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a2:	9b02      	ldr	r3, [sp, #8]
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	46a8      	mov	r8, r5
 80099aa:	9308      	str	r3, [sp, #32]
 80099ac:	4605      	mov	r5, r0
 80099ae:	9b04      	ldr	r3, [sp, #16]
 80099b0:	9801      	ldr	r0, [sp, #4]
 80099b2:	4621      	mov	r1, r4
 80099b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80099b8:	f7ff fafc 	bl	8008fb4 <quorem>
 80099bc:	4641      	mov	r1, r8
 80099be:	9002      	str	r0, [sp, #8]
 80099c0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80099c4:	9801      	ldr	r0, [sp, #4]
 80099c6:	f000 fc99 	bl	800a2fc <__mcmp>
 80099ca:	462a      	mov	r2, r5
 80099cc:	9006      	str	r0, [sp, #24]
 80099ce:	4621      	mov	r1, r4
 80099d0:	4648      	mov	r0, r9
 80099d2:	f000 fcaf 	bl	800a334 <__mdiff>
 80099d6:	68c2      	ldr	r2, [r0, #12]
 80099d8:	4606      	mov	r6, r0
 80099da:	b9fa      	cbnz	r2, 8009a1c <_dtoa_r+0x954>
 80099dc:	4601      	mov	r1, r0
 80099de:	9801      	ldr	r0, [sp, #4]
 80099e0:	f000 fc8c 	bl	800a2fc <__mcmp>
 80099e4:	4602      	mov	r2, r0
 80099e6:	4631      	mov	r1, r6
 80099e8:	4648      	mov	r0, r9
 80099ea:	920a      	str	r2, [sp, #40]	@ 0x28
 80099ec:	f000 fa0a 	bl	8009e04 <_Bfree>
 80099f0:	9b07      	ldr	r3, [sp, #28]
 80099f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099f4:	9e04      	ldr	r6, [sp, #16]
 80099f6:	ea42 0103 	orr.w	r1, r2, r3
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	4319      	orrs	r1, r3
 80099fe:	d10f      	bne.n	8009a20 <_dtoa_r+0x958>
 8009a00:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009a04:	d028      	beq.n	8009a58 <_dtoa_r+0x990>
 8009a06:	9b06      	ldr	r3, [sp, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	dd02      	ble.n	8009a12 <_dtoa_r+0x94a>
 8009a0c:	9b02      	ldr	r3, [sp, #8]
 8009a0e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009a12:	f88b a000 	strb.w	sl, [fp]
 8009a16:	e55e      	b.n	80094d6 <_dtoa_r+0x40e>
 8009a18:	4628      	mov	r0, r5
 8009a1a:	e7bd      	b.n	8009998 <_dtoa_r+0x8d0>
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	e7e2      	b.n	80099e6 <_dtoa_r+0x91e>
 8009a20:	9b06      	ldr	r3, [sp, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	db04      	blt.n	8009a30 <_dtoa_r+0x968>
 8009a26:	9907      	ldr	r1, [sp, #28]
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	9908      	ldr	r1, [sp, #32]
 8009a2c:	430b      	orrs	r3, r1
 8009a2e:	d120      	bne.n	8009a72 <_dtoa_r+0x9aa>
 8009a30:	2a00      	cmp	r2, #0
 8009a32:	ddee      	ble.n	8009a12 <_dtoa_r+0x94a>
 8009a34:	9901      	ldr	r1, [sp, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	4648      	mov	r0, r9
 8009a3a:	f000 fbf3 	bl	800a224 <__lshift>
 8009a3e:	4621      	mov	r1, r4
 8009a40:	9001      	str	r0, [sp, #4]
 8009a42:	f000 fc5b 	bl	800a2fc <__mcmp>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	dc03      	bgt.n	8009a52 <_dtoa_r+0x98a>
 8009a4a:	d1e2      	bne.n	8009a12 <_dtoa_r+0x94a>
 8009a4c:	f01a 0f01 	tst.w	sl, #1
 8009a50:	d0df      	beq.n	8009a12 <_dtoa_r+0x94a>
 8009a52:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009a56:	d1d9      	bne.n	8009a0c <_dtoa_r+0x944>
 8009a58:	2339      	movs	r3, #57	@ 0x39
 8009a5a:	f88b 3000 	strb.w	r3, [fp]
 8009a5e:	4633      	mov	r3, r6
 8009a60:	461e      	mov	r6, r3
 8009a62:	3b01      	subs	r3, #1
 8009a64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a68:	2a39      	cmp	r2, #57	@ 0x39
 8009a6a:	d052      	beq.n	8009b12 <_dtoa_r+0xa4a>
 8009a6c:	3201      	adds	r2, #1
 8009a6e:	701a      	strb	r2, [r3, #0]
 8009a70:	e531      	b.n	80094d6 <_dtoa_r+0x40e>
 8009a72:	2a00      	cmp	r2, #0
 8009a74:	dd07      	ble.n	8009a86 <_dtoa_r+0x9be>
 8009a76:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009a7a:	d0ed      	beq.n	8009a58 <_dtoa_r+0x990>
 8009a7c:	f10a 0301 	add.w	r3, sl, #1
 8009a80:	f88b 3000 	strb.w	r3, [fp]
 8009a84:	e527      	b.n	80094d6 <_dtoa_r+0x40e>
 8009a86:	9b04      	ldr	r3, [sp, #16]
 8009a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a8a:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d029      	beq.n	8009ae6 <_dtoa_r+0xa1e>
 8009a92:	9901      	ldr	r1, [sp, #4]
 8009a94:	2300      	movs	r3, #0
 8009a96:	220a      	movs	r2, #10
 8009a98:	4648      	mov	r0, r9
 8009a9a:	f000 f9d5 	bl	8009e48 <__multadd>
 8009a9e:	45a8      	cmp	r8, r5
 8009aa0:	9001      	str	r0, [sp, #4]
 8009aa2:	f04f 0300 	mov.w	r3, #0
 8009aa6:	f04f 020a 	mov.w	r2, #10
 8009aaa:	4641      	mov	r1, r8
 8009aac:	4648      	mov	r0, r9
 8009aae:	d107      	bne.n	8009ac0 <_dtoa_r+0x9f8>
 8009ab0:	f000 f9ca 	bl	8009e48 <__multadd>
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	9b04      	ldr	r3, [sp, #16]
 8009aba:	3301      	adds	r3, #1
 8009abc:	9304      	str	r3, [sp, #16]
 8009abe:	e776      	b.n	80099ae <_dtoa_r+0x8e6>
 8009ac0:	f000 f9c2 	bl	8009e48 <__multadd>
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	2300      	movs	r3, #0
 8009aca:	220a      	movs	r2, #10
 8009acc:	4648      	mov	r0, r9
 8009ace:	f000 f9bb 	bl	8009e48 <__multadd>
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	e7f0      	b.n	8009ab8 <_dtoa_r+0x9f0>
 8009ad6:	f1bb 0f00 	cmp.w	fp, #0
 8009ada:	bfcc      	ite	gt
 8009adc:	465e      	movgt	r6, fp
 8009ade:	2601      	movle	r6, #1
 8009ae0:	443e      	add	r6, r7
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	9901      	ldr	r1, [sp, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	4648      	mov	r0, r9
 8009aec:	f000 fb9a 	bl	800a224 <__lshift>
 8009af0:	4621      	mov	r1, r4
 8009af2:	9001      	str	r0, [sp, #4]
 8009af4:	f000 fc02 	bl	800a2fc <__mcmp>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	dcb0      	bgt.n	8009a5e <_dtoa_r+0x996>
 8009afc:	d102      	bne.n	8009b04 <_dtoa_r+0xa3c>
 8009afe:	f01a 0f01 	tst.w	sl, #1
 8009b02:	d1ac      	bne.n	8009a5e <_dtoa_r+0x996>
 8009b04:	4633      	mov	r3, r6
 8009b06:	461e      	mov	r6, r3
 8009b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b0c:	2a30      	cmp	r2, #48	@ 0x30
 8009b0e:	d0fa      	beq.n	8009b06 <_dtoa_r+0xa3e>
 8009b10:	e4e1      	b.n	80094d6 <_dtoa_r+0x40e>
 8009b12:	429f      	cmp	r7, r3
 8009b14:	d1a4      	bne.n	8009a60 <_dtoa_r+0x998>
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	9305      	str	r3, [sp, #20]
 8009b1c:	2331      	movs	r3, #49	@ 0x31
 8009b1e:	703b      	strb	r3, [r7, #0]
 8009b20:	e4d9      	b.n	80094d6 <_dtoa_r+0x40e>
 8009b22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009b24:	4f16      	ldr	r7, [pc, #88]	@ (8009b80 <_dtoa_r+0xab8>)
 8009b26:	b11b      	cbz	r3, 8009b30 <_dtoa_r+0xa68>
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	4638      	mov	r0, r7
 8009b32:	b011      	add	sp, #68	@ 0x44
 8009b34:	ecbd 8b02 	vpop	{d8}
 8009b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	f77f ae2c 	ble.w	800979c <_dtoa_r+0x6d4>
 8009b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b48:	2001      	movs	r0, #1
 8009b4a:	e64c      	b.n	80097e6 <_dtoa_r+0x71e>
 8009b4c:	f1bb 0f00 	cmp.w	fp, #0
 8009b50:	f77f aed8 	ble.w	8009904 <_dtoa_r+0x83c>
 8009b54:	463e      	mov	r6, r7
 8009b56:	9801      	ldr	r0, [sp, #4]
 8009b58:	4621      	mov	r1, r4
 8009b5a:	f7ff fa2b 	bl	8008fb4 <quorem>
 8009b5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009b62:	f806 ab01 	strb.w	sl, [r6], #1
 8009b66:	1bf2      	subs	r2, r6, r7
 8009b68:	4593      	cmp	fp, r2
 8009b6a:	ddb4      	ble.n	8009ad6 <_dtoa_r+0xa0e>
 8009b6c:	9901      	ldr	r1, [sp, #4]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	220a      	movs	r2, #10
 8009b72:	4648      	mov	r0, r9
 8009b74:	f000 f968 	bl	8009e48 <__multadd>
 8009b78:	9001      	str	r0, [sp, #4]
 8009b7a:	e7ec      	b.n	8009b56 <_dtoa_r+0xa8e>
 8009b7c:	0800ce51 	.word	0x0800ce51
 8009b80:	0800cdd5 	.word	0x0800cdd5

08009b84 <_free_r>:
 8009b84:	b538      	push	{r3, r4, r5, lr}
 8009b86:	4605      	mov	r5, r0
 8009b88:	2900      	cmp	r1, #0
 8009b8a:	d041      	beq.n	8009c10 <_free_r+0x8c>
 8009b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b90:	1f0c      	subs	r4, r1, #4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	bfb8      	it	lt
 8009b96:	18e4      	addlt	r4, r4, r3
 8009b98:	f000 f8e8 	bl	8009d6c <__malloc_lock>
 8009b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c14 <_free_r+0x90>)
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	b933      	cbnz	r3, 8009bb0 <_free_r+0x2c>
 8009ba2:	6063      	str	r3, [r4, #4]
 8009ba4:	6014      	str	r4, [r2, #0]
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bac:	f000 b8e4 	b.w	8009d78 <__malloc_unlock>
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	d908      	bls.n	8009bc6 <_free_r+0x42>
 8009bb4:	6820      	ldr	r0, [r4, #0]
 8009bb6:	1821      	adds	r1, r4, r0
 8009bb8:	428b      	cmp	r3, r1
 8009bba:	bf01      	itttt	eq
 8009bbc:	6819      	ldreq	r1, [r3, #0]
 8009bbe:	685b      	ldreq	r3, [r3, #4]
 8009bc0:	1809      	addeq	r1, r1, r0
 8009bc2:	6021      	streq	r1, [r4, #0]
 8009bc4:	e7ed      	b.n	8009ba2 <_free_r+0x1e>
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	b10b      	cbz	r3, 8009bd0 <_free_r+0x4c>
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	d9fa      	bls.n	8009bc6 <_free_r+0x42>
 8009bd0:	6811      	ldr	r1, [r2, #0]
 8009bd2:	1850      	adds	r0, r2, r1
 8009bd4:	42a0      	cmp	r0, r4
 8009bd6:	d10b      	bne.n	8009bf0 <_free_r+0x6c>
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	4401      	add	r1, r0
 8009bdc:	1850      	adds	r0, r2, r1
 8009bde:	4283      	cmp	r3, r0
 8009be0:	6011      	str	r1, [r2, #0]
 8009be2:	d1e0      	bne.n	8009ba6 <_free_r+0x22>
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	6053      	str	r3, [r2, #4]
 8009bea:	4408      	add	r0, r1
 8009bec:	6010      	str	r0, [r2, #0]
 8009bee:	e7da      	b.n	8009ba6 <_free_r+0x22>
 8009bf0:	d902      	bls.n	8009bf8 <_free_r+0x74>
 8009bf2:	230c      	movs	r3, #12
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	e7d6      	b.n	8009ba6 <_free_r+0x22>
 8009bf8:	6820      	ldr	r0, [r4, #0]
 8009bfa:	1821      	adds	r1, r4, r0
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf04      	itt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	6063      	str	r3, [r4, #4]
 8009c06:	bf04      	itt	eq
 8009c08:	1809      	addeq	r1, r1, r0
 8009c0a:	6021      	streq	r1, [r4, #0]
 8009c0c:	6054      	str	r4, [r2, #4]
 8009c0e:	e7ca      	b.n	8009ba6 <_free_r+0x22>
 8009c10:	bd38      	pop	{r3, r4, r5, pc}
 8009c12:	bf00      	nop
 8009c14:	2400062c 	.word	0x2400062c

08009c18 <malloc>:
 8009c18:	4b02      	ldr	r3, [pc, #8]	@ (8009c24 <malloc+0xc>)
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	f000 b825 	b.w	8009c6c <_malloc_r>
 8009c22:	bf00      	nop
 8009c24:	2400002c 	.word	0x2400002c

08009c28 <sbrk_aligned>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8009c68 <sbrk_aligned+0x40>)
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	6831      	ldr	r1, [r6, #0]
 8009c30:	4605      	mov	r5, r0
 8009c32:	b911      	cbnz	r1, 8009c3a <sbrk_aligned+0x12>
 8009c34:	f001 ff7a 	bl	800bb2c <_sbrk_r>
 8009c38:	6030      	str	r0, [r6, #0]
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f001 ff75 	bl	800bb2c <_sbrk_r>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	d103      	bne.n	8009c4e <sbrk_aligned+0x26>
 8009c46:	f04f 34ff 	mov.w	r4, #4294967295
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	bd70      	pop	{r4, r5, r6, pc}
 8009c4e:	1cc4      	adds	r4, r0, #3
 8009c50:	f024 0403 	bic.w	r4, r4, #3
 8009c54:	42a0      	cmp	r0, r4
 8009c56:	d0f8      	beq.n	8009c4a <sbrk_aligned+0x22>
 8009c58:	1a21      	subs	r1, r4, r0
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f001 ff66 	bl	800bb2c <_sbrk_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	d1f2      	bne.n	8009c4a <sbrk_aligned+0x22>
 8009c64:	e7ef      	b.n	8009c46 <sbrk_aligned+0x1e>
 8009c66:	bf00      	nop
 8009c68:	24000628 	.word	0x24000628

08009c6c <_malloc_r>:
 8009c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c70:	1ccd      	adds	r5, r1, #3
 8009c72:	f025 0503 	bic.w	r5, r5, #3
 8009c76:	3508      	adds	r5, #8
 8009c78:	2d0c      	cmp	r5, #12
 8009c7a:	bf38      	it	cc
 8009c7c:	250c      	movcc	r5, #12
 8009c7e:	2d00      	cmp	r5, #0
 8009c80:	4606      	mov	r6, r0
 8009c82:	db01      	blt.n	8009c88 <_malloc_r+0x1c>
 8009c84:	42a9      	cmp	r1, r5
 8009c86:	d904      	bls.n	8009c92 <_malloc_r+0x26>
 8009c88:	230c      	movs	r3, #12
 8009c8a:	6033      	str	r3, [r6, #0]
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d68 <_malloc_r+0xfc>
 8009c96:	f000 f869 	bl	8009d6c <__malloc_lock>
 8009c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c9e:	461c      	mov	r4, r3
 8009ca0:	bb44      	cbnz	r4, 8009cf4 <_malloc_r+0x88>
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f7ff ffbf 	bl	8009c28 <sbrk_aligned>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	4604      	mov	r4, r0
 8009cae:	d158      	bne.n	8009d62 <_malloc_r+0xf6>
 8009cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8009cb4:	4627      	mov	r7, r4
 8009cb6:	2f00      	cmp	r7, #0
 8009cb8:	d143      	bne.n	8009d42 <_malloc_r+0xd6>
 8009cba:	2c00      	cmp	r4, #0
 8009cbc:	d04b      	beq.n	8009d56 <_malloc_r+0xea>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	4639      	mov	r1, r7
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	eb04 0903 	add.w	r9, r4, r3
 8009cc8:	f001 ff30 	bl	800bb2c <_sbrk_r>
 8009ccc:	4581      	cmp	r9, r0
 8009cce:	d142      	bne.n	8009d56 <_malloc_r+0xea>
 8009cd0:	6821      	ldr	r1, [r4, #0]
 8009cd2:	1a6d      	subs	r5, r5, r1
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7ff ffa6 	bl	8009c28 <sbrk_aligned>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d03a      	beq.n	8009d56 <_malloc_r+0xea>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	442b      	add	r3, r5
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	bb62      	cbnz	r2, 8009d48 <_malloc_r+0xdc>
 8009cee:	f8c8 7000 	str.w	r7, [r8]
 8009cf2:	e00f      	b.n	8009d14 <_malloc_r+0xa8>
 8009cf4:	6822      	ldr	r2, [r4, #0]
 8009cf6:	1b52      	subs	r2, r2, r5
 8009cf8:	d420      	bmi.n	8009d3c <_malloc_r+0xd0>
 8009cfa:	2a0b      	cmp	r2, #11
 8009cfc:	d917      	bls.n	8009d2e <_malloc_r+0xc2>
 8009cfe:	1961      	adds	r1, r4, r5
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	6025      	str	r5, [r4, #0]
 8009d04:	bf18      	it	ne
 8009d06:	6059      	strne	r1, [r3, #4]
 8009d08:	6863      	ldr	r3, [r4, #4]
 8009d0a:	bf08      	it	eq
 8009d0c:	f8c8 1000 	streq.w	r1, [r8]
 8009d10:	5162      	str	r2, [r4, r5]
 8009d12:	604b      	str	r3, [r1, #4]
 8009d14:	4630      	mov	r0, r6
 8009d16:	f000 f82f 	bl	8009d78 <__malloc_unlock>
 8009d1a:	f104 000b 	add.w	r0, r4, #11
 8009d1e:	1d23      	adds	r3, r4, #4
 8009d20:	f020 0007 	bic.w	r0, r0, #7
 8009d24:	1ac2      	subs	r2, r0, r3
 8009d26:	bf1c      	itt	ne
 8009d28:	1a1b      	subne	r3, r3, r0
 8009d2a:	50a3      	strne	r3, [r4, r2]
 8009d2c:	e7af      	b.n	8009c8e <_malloc_r+0x22>
 8009d2e:	6862      	ldr	r2, [r4, #4]
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	bf0c      	ite	eq
 8009d34:	f8c8 2000 	streq.w	r2, [r8]
 8009d38:	605a      	strne	r2, [r3, #4]
 8009d3a:	e7eb      	b.n	8009d14 <_malloc_r+0xa8>
 8009d3c:	4623      	mov	r3, r4
 8009d3e:	6864      	ldr	r4, [r4, #4]
 8009d40:	e7ae      	b.n	8009ca0 <_malloc_r+0x34>
 8009d42:	463c      	mov	r4, r7
 8009d44:	687f      	ldr	r7, [r7, #4]
 8009d46:	e7b6      	b.n	8009cb6 <_malloc_r+0x4a>
 8009d48:	461a      	mov	r2, r3
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	d1fb      	bne.n	8009d48 <_malloc_r+0xdc>
 8009d50:	2300      	movs	r3, #0
 8009d52:	6053      	str	r3, [r2, #4]
 8009d54:	e7de      	b.n	8009d14 <_malloc_r+0xa8>
 8009d56:	230c      	movs	r3, #12
 8009d58:	6033      	str	r3, [r6, #0]
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f000 f80c 	bl	8009d78 <__malloc_unlock>
 8009d60:	e794      	b.n	8009c8c <_malloc_r+0x20>
 8009d62:	6005      	str	r5, [r0, #0]
 8009d64:	e7d6      	b.n	8009d14 <_malloc_r+0xa8>
 8009d66:	bf00      	nop
 8009d68:	2400062c 	.word	0x2400062c

08009d6c <__malloc_lock>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	@ (8009d74 <__malloc_lock+0x8>)
 8009d6e:	f7ff b918 	b.w	8008fa2 <__retarget_lock_acquire_recursive>
 8009d72:	bf00      	nop
 8009d74:	24000624 	.word	0x24000624

08009d78 <__malloc_unlock>:
 8009d78:	4801      	ldr	r0, [pc, #4]	@ (8009d80 <__malloc_unlock+0x8>)
 8009d7a:	f7ff b913 	b.w	8008fa4 <__retarget_lock_release_recursive>
 8009d7e:	bf00      	nop
 8009d80:	24000624 	.word	0x24000624

08009d84 <_Balloc>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	69c6      	ldr	r6, [r0, #28]
 8009d88:	4604      	mov	r4, r0
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	b976      	cbnz	r6, 8009dac <_Balloc+0x28>
 8009d8e:	2010      	movs	r0, #16
 8009d90:	f7ff ff42 	bl	8009c18 <malloc>
 8009d94:	4602      	mov	r2, r0
 8009d96:	61e0      	str	r0, [r4, #28]
 8009d98:	b920      	cbnz	r0, 8009da4 <_Balloc+0x20>
 8009d9a:	4b18      	ldr	r3, [pc, #96]	@ (8009dfc <_Balloc+0x78>)
 8009d9c:	4818      	ldr	r0, [pc, #96]	@ (8009e00 <_Balloc+0x7c>)
 8009d9e:	216b      	movs	r1, #107	@ 0x6b
 8009da0:	f001 feea 	bl	800bb78 <__assert_func>
 8009da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009da8:	6006      	str	r6, [r0, #0]
 8009daa:	60c6      	str	r6, [r0, #12]
 8009dac:	69e6      	ldr	r6, [r4, #28]
 8009dae:	68f3      	ldr	r3, [r6, #12]
 8009db0:	b183      	cbz	r3, 8009dd4 <_Balloc+0x50>
 8009db2:	69e3      	ldr	r3, [r4, #28]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dba:	b9b8      	cbnz	r0, 8009dec <_Balloc+0x68>
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8009dc2:	1d72      	adds	r2, r6, #5
 8009dc4:	0092      	lsls	r2, r2, #2
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f001 fef4 	bl	800bbb4 <_calloc_r>
 8009dcc:	b160      	cbz	r0, 8009de8 <_Balloc+0x64>
 8009dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dd2:	e00e      	b.n	8009df2 <_Balloc+0x6e>
 8009dd4:	2221      	movs	r2, #33	@ 0x21
 8009dd6:	2104      	movs	r1, #4
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f001 feeb 	bl	800bbb4 <_calloc_r>
 8009dde:	69e3      	ldr	r3, [r4, #28]
 8009de0:	60f0      	str	r0, [r6, #12]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e4      	bne.n	8009db2 <_Balloc+0x2e>
 8009de8:	2000      	movs	r0, #0
 8009dea:	bd70      	pop	{r4, r5, r6, pc}
 8009dec:	6802      	ldr	r2, [r0, #0]
 8009dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009df2:	2300      	movs	r3, #0
 8009df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009df8:	e7f7      	b.n	8009dea <_Balloc+0x66>
 8009dfa:	bf00      	nop
 8009dfc:	0800cde2 	.word	0x0800cde2
 8009e00:	0800ce62 	.word	0x0800ce62

08009e04 <_Bfree>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	69c6      	ldr	r6, [r0, #28]
 8009e08:	4605      	mov	r5, r0
 8009e0a:	460c      	mov	r4, r1
 8009e0c:	b976      	cbnz	r6, 8009e2c <_Bfree+0x28>
 8009e0e:	2010      	movs	r0, #16
 8009e10:	f7ff ff02 	bl	8009c18 <malloc>
 8009e14:	4602      	mov	r2, r0
 8009e16:	61e8      	str	r0, [r5, #28]
 8009e18:	b920      	cbnz	r0, 8009e24 <_Bfree+0x20>
 8009e1a:	4b09      	ldr	r3, [pc, #36]	@ (8009e40 <_Bfree+0x3c>)
 8009e1c:	4809      	ldr	r0, [pc, #36]	@ (8009e44 <_Bfree+0x40>)
 8009e1e:	218f      	movs	r1, #143	@ 0x8f
 8009e20:	f001 feaa 	bl	800bb78 <__assert_func>
 8009e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e28:	6006      	str	r6, [r0, #0]
 8009e2a:	60c6      	str	r6, [r0, #12]
 8009e2c:	b13c      	cbz	r4, 8009e3e <_Bfree+0x3a>
 8009e2e:	69eb      	ldr	r3, [r5, #28]
 8009e30:	6862      	ldr	r2, [r4, #4]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e38:	6021      	str	r1, [r4, #0]
 8009e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e3e:	bd70      	pop	{r4, r5, r6, pc}
 8009e40:	0800cde2 	.word	0x0800cde2
 8009e44:	0800ce62 	.word	0x0800ce62

08009e48 <__multadd>:
 8009e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e4c:	690d      	ldr	r5, [r1, #16]
 8009e4e:	4607      	mov	r7, r0
 8009e50:	460c      	mov	r4, r1
 8009e52:	461e      	mov	r6, r3
 8009e54:	f101 0c14 	add.w	ip, r1, #20
 8009e58:	2000      	movs	r0, #0
 8009e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8009e5e:	b299      	uxth	r1, r3
 8009e60:	fb02 6101 	mla	r1, r2, r1, r6
 8009e64:	0c1e      	lsrs	r6, r3, #16
 8009e66:	0c0b      	lsrs	r3, r1, #16
 8009e68:	fb02 3306 	mla	r3, r2, r6, r3
 8009e6c:	b289      	uxth	r1, r1
 8009e6e:	3001      	adds	r0, #1
 8009e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e74:	4285      	cmp	r5, r0
 8009e76:	f84c 1b04 	str.w	r1, [ip], #4
 8009e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e7e:	dcec      	bgt.n	8009e5a <__multadd+0x12>
 8009e80:	b30e      	cbz	r6, 8009ec6 <__multadd+0x7e>
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	42ab      	cmp	r3, r5
 8009e86:	dc19      	bgt.n	8009ebc <__multadd+0x74>
 8009e88:	6861      	ldr	r1, [r4, #4]
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	3101      	adds	r1, #1
 8009e8e:	f7ff ff79 	bl	8009d84 <_Balloc>
 8009e92:	4680      	mov	r8, r0
 8009e94:	b928      	cbnz	r0, 8009ea2 <__multadd+0x5a>
 8009e96:	4602      	mov	r2, r0
 8009e98:	4b0c      	ldr	r3, [pc, #48]	@ (8009ecc <__multadd+0x84>)
 8009e9a:	480d      	ldr	r0, [pc, #52]	@ (8009ed0 <__multadd+0x88>)
 8009e9c:	21ba      	movs	r1, #186	@ 0xba
 8009e9e:	f001 fe6b 	bl	800bb78 <__assert_func>
 8009ea2:	6922      	ldr	r2, [r4, #16]
 8009ea4:	3202      	adds	r2, #2
 8009ea6:	f104 010c 	add.w	r1, r4, #12
 8009eaa:	0092      	lsls	r2, r2, #2
 8009eac:	300c      	adds	r0, #12
 8009eae:	f001 fe4d 	bl	800bb4c <memcpy>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4638      	mov	r0, r7
 8009eb6:	f7ff ffa5 	bl	8009e04 <_Bfree>
 8009eba:	4644      	mov	r4, r8
 8009ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	615e      	str	r6, [r3, #20]
 8009ec4:	6125      	str	r5, [r4, #16]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ecc:	0800ce51 	.word	0x0800ce51
 8009ed0:	0800ce62 	.word	0x0800ce62

08009ed4 <__s2b>:
 8009ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed8:	460c      	mov	r4, r1
 8009eda:	4615      	mov	r5, r2
 8009edc:	461f      	mov	r7, r3
 8009ede:	2209      	movs	r2, #9
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ee8:	2100      	movs	r1, #0
 8009eea:	2201      	movs	r2, #1
 8009eec:	429a      	cmp	r2, r3
 8009eee:	db09      	blt.n	8009f04 <__s2b+0x30>
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f7ff ff47 	bl	8009d84 <_Balloc>
 8009ef6:	b940      	cbnz	r0, 8009f0a <__s2b+0x36>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	4b19      	ldr	r3, [pc, #100]	@ (8009f60 <__s2b+0x8c>)
 8009efc:	4819      	ldr	r0, [pc, #100]	@ (8009f64 <__s2b+0x90>)
 8009efe:	21d3      	movs	r1, #211	@ 0xd3
 8009f00:	f001 fe3a 	bl	800bb78 <__assert_func>
 8009f04:	0052      	lsls	r2, r2, #1
 8009f06:	3101      	adds	r1, #1
 8009f08:	e7f0      	b.n	8009eec <__s2b+0x18>
 8009f0a:	9b08      	ldr	r3, [sp, #32]
 8009f0c:	6143      	str	r3, [r0, #20]
 8009f0e:	2d09      	cmp	r5, #9
 8009f10:	f04f 0301 	mov.w	r3, #1
 8009f14:	6103      	str	r3, [r0, #16]
 8009f16:	dd16      	ble.n	8009f46 <__s2b+0x72>
 8009f18:	f104 0909 	add.w	r9, r4, #9
 8009f1c:	46c8      	mov	r8, r9
 8009f1e:	442c      	add	r4, r5
 8009f20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f24:	4601      	mov	r1, r0
 8009f26:	3b30      	subs	r3, #48	@ 0x30
 8009f28:	220a      	movs	r2, #10
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7ff ff8c 	bl	8009e48 <__multadd>
 8009f30:	45a0      	cmp	r8, r4
 8009f32:	d1f5      	bne.n	8009f20 <__s2b+0x4c>
 8009f34:	f1a5 0408 	sub.w	r4, r5, #8
 8009f38:	444c      	add	r4, r9
 8009f3a:	1b2d      	subs	r5, r5, r4
 8009f3c:	1963      	adds	r3, r4, r5
 8009f3e:	42bb      	cmp	r3, r7
 8009f40:	db04      	blt.n	8009f4c <__s2b+0x78>
 8009f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f46:	340a      	adds	r4, #10
 8009f48:	2509      	movs	r5, #9
 8009f4a:	e7f6      	b.n	8009f3a <__s2b+0x66>
 8009f4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f50:	4601      	mov	r1, r0
 8009f52:	3b30      	subs	r3, #48	@ 0x30
 8009f54:	220a      	movs	r2, #10
 8009f56:	4630      	mov	r0, r6
 8009f58:	f7ff ff76 	bl	8009e48 <__multadd>
 8009f5c:	e7ee      	b.n	8009f3c <__s2b+0x68>
 8009f5e:	bf00      	nop
 8009f60:	0800ce51 	.word	0x0800ce51
 8009f64:	0800ce62 	.word	0x0800ce62

08009f68 <__hi0bits>:
 8009f68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	bf36      	itet	cc
 8009f70:	0403      	lslcc	r3, r0, #16
 8009f72:	2000      	movcs	r0, #0
 8009f74:	2010      	movcc	r0, #16
 8009f76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f7a:	bf3c      	itt	cc
 8009f7c:	021b      	lslcc	r3, r3, #8
 8009f7e:	3008      	addcc	r0, #8
 8009f80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f84:	bf3c      	itt	cc
 8009f86:	011b      	lslcc	r3, r3, #4
 8009f88:	3004      	addcc	r0, #4
 8009f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f8e:	bf3c      	itt	cc
 8009f90:	009b      	lslcc	r3, r3, #2
 8009f92:	3002      	addcc	r0, #2
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	db05      	blt.n	8009fa4 <__hi0bits+0x3c>
 8009f98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f9c:	f100 0001 	add.w	r0, r0, #1
 8009fa0:	bf08      	it	eq
 8009fa2:	2020      	moveq	r0, #32
 8009fa4:	4770      	bx	lr

08009fa6 <__lo0bits>:
 8009fa6:	6803      	ldr	r3, [r0, #0]
 8009fa8:	4602      	mov	r2, r0
 8009faa:	f013 0007 	ands.w	r0, r3, #7
 8009fae:	d00b      	beq.n	8009fc8 <__lo0bits+0x22>
 8009fb0:	07d9      	lsls	r1, r3, #31
 8009fb2:	d421      	bmi.n	8009ff8 <__lo0bits+0x52>
 8009fb4:	0798      	lsls	r0, r3, #30
 8009fb6:	bf49      	itett	mi
 8009fb8:	085b      	lsrmi	r3, r3, #1
 8009fba:	089b      	lsrpl	r3, r3, #2
 8009fbc:	2001      	movmi	r0, #1
 8009fbe:	6013      	strmi	r3, [r2, #0]
 8009fc0:	bf5c      	itt	pl
 8009fc2:	6013      	strpl	r3, [r2, #0]
 8009fc4:	2002      	movpl	r0, #2
 8009fc6:	4770      	bx	lr
 8009fc8:	b299      	uxth	r1, r3
 8009fca:	b909      	cbnz	r1, 8009fd0 <__lo0bits+0x2a>
 8009fcc:	0c1b      	lsrs	r3, r3, #16
 8009fce:	2010      	movs	r0, #16
 8009fd0:	b2d9      	uxtb	r1, r3
 8009fd2:	b909      	cbnz	r1, 8009fd8 <__lo0bits+0x32>
 8009fd4:	3008      	adds	r0, #8
 8009fd6:	0a1b      	lsrs	r3, r3, #8
 8009fd8:	0719      	lsls	r1, r3, #28
 8009fda:	bf04      	itt	eq
 8009fdc:	091b      	lsreq	r3, r3, #4
 8009fde:	3004      	addeq	r0, #4
 8009fe0:	0799      	lsls	r1, r3, #30
 8009fe2:	bf04      	itt	eq
 8009fe4:	089b      	lsreq	r3, r3, #2
 8009fe6:	3002      	addeq	r0, #2
 8009fe8:	07d9      	lsls	r1, r3, #31
 8009fea:	d403      	bmi.n	8009ff4 <__lo0bits+0x4e>
 8009fec:	085b      	lsrs	r3, r3, #1
 8009fee:	f100 0001 	add.w	r0, r0, #1
 8009ff2:	d003      	beq.n	8009ffc <__lo0bits+0x56>
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	4770      	bx	lr
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	4770      	bx	lr
 8009ffc:	2020      	movs	r0, #32
 8009ffe:	4770      	bx	lr

0800a000 <__i2b>:
 800a000:	b510      	push	{r4, lr}
 800a002:	460c      	mov	r4, r1
 800a004:	2101      	movs	r1, #1
 800a006:	f7ff febd 	bl	8009d84 <_Balloc>
 800a00a:	4602      	mov	r2, r0
 800a00c:	b928      	cbnz	r0, 800a01a <__i2b+0x1a>
 800a00e:	4b05      	ldr	r3, [pc, #20]	@ (800a024 <__i2b+0x24>)
 800a010:	4805      	ldr	r0, [pc, #20]	@ (800a028 <__i2b+0x28>)
 800a012:	f240 1145 	movw	r1, #325	@ 0x145
 800a016:	f001 fdaf 	bl	800bb78 <__assert_func>
 800a01a:	2301      	movs	r3, #1
 800a01c:	6144      	str	r4, [r0, #20]
 800a01e:	6103      	str	r3, [r0, #16]
 800a020:	bd10      	pop	{r4, pc}
 800a022:	bf00      	nop
 800a024:	0800ce51 	.word	0x0800ce51
 800a028:	0800ce62 	.word	0x0800ce62

0800a02c <__multiply>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	4617      	mov	r7, r2
 800a032:	690a      	ldr	r2, [r1, #16]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	429a      	cmp	r2, r3
 800a038:	bfa8      	it	ge
 800a03a:	463b      	movge	r3, r7
 800a03c:	4689      	mov	r9, r1
 800a03e:	bfa4      	itt	ge
 800a040:	460f      	movge	r7, r1
 800a042:	4699      	movge	r9, r3
 800a044:	693d      	ldr	r5, [r7, #16]
 800a046:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	eb05 060a 	add.w	r6, r5, sl
 800a052:	42b3      	cmp	r3, r6
 800a054:	b085      	sub	sp, #20
 800a056:	bfb8      	it	lt
 800a058:	3101      	addlt	r1, #1
 800a05a:	f7ff fe93 	bl	8009d84 <_Balloc>
 800a05e:	b930      	cbnz	r0, 800a06e <__multiply+0x42>
 800a060:	4602      	mov	r2, r0
 800a062:	4b41      	ldr	r3, [pc, #260]	@ (800a168 <__multiply+0x13c>)
 800a064:	4841      	ldr	r0, [pc, #260]	@ (800a16c <__multiply+0x140>)
 800a066:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a06a:	f001 fd85 	bl	800bb78 <__assert_func>
 800a06e:	f100 0414 	add.w	r4, r0, #20
 800a072:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a076:	4623      	mov	r3, r4
 800a078:	2200      	movs	r2, #0
 800a07a:	4573      	cmp	r3, lr
 800a07c:	d320      	bcc.n	800a0c0 <__multiply+0x94>
 800a07e:	f107 0814 	add.w	r8, r7, #20
 800a082:	f109 0114 	add.w	r1, r9, #20
 800a086:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a08a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a08e:	9302      	str	r3, [sp, #8]
 800a090:	1beb      	subs	r3, r5, r7
 800a092:	3b15      	subs	r3, #21
 800a094:	f023 0303 	bic.w	r3, r3, #3
 800a098:	3304      	adds	r3, #4
 800a09a:	3715      	adds	r7, #21
 800a09c:	42bd      	cmp	r5, r7
 800a09e:	bf38      	it	cc
 800a0a0:	2304      	movcc	r3, #4
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	9b02      	ldr	r3, [sp, #8]
 800a0a6:	9103      	str	r1, [sp, #12]
 800a0a8:	428b      	cmp	r3, r1
 800a0aa:	d80c      	bhi.n	800a0c6 <__multiply+0x9a>
 800a0ac:	2e00      	cmp	r6, #0
 800a0ae:	dd03      	ble.n	800a0b8 <__multiply+0x8c>
 800a0b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d055      	beq.n	800a164 <__multiply+0x138>
 800a0b8:	6106      	str	r6, [r0, #16]
 800a0ba:	b005      	add	sp, #20
 800a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c0:	f843 2b04 	str.w	r2, [r3], #4
 800a0c4:	e7d9      	b.n	800a07a <__multiply+0x4e>
 800a0c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a0ca:	f1ba 0f00 	cmp.w	sl, #0
 800a0ce:	d01f      	beq.n	800a110 <__multiply+0xe4>
 800a0d0:	46c4      	mov	ip, r8
 800a0d2:	46a1      	mov	r9, r4
 800a0d4:	2700      	movs	r7, #0
 800a0d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0da:	f8d9 3000 	ldr.w	r3, [r9]
 800a0de:	fa1f fb82 	uxth.w	fp, r2
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0e8:	443b      	add	r3, r7
 800a0ea:	f8d9 7000 	ldr.w	r7, [r9]
 800a0ee:	0c12      	lsrs	r2, r2, #16
 800a0f0:	0c3f      	lsrs	r7, r7, #16
 800a0f2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a0f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a100:	4565      	cmp	r5, ip
 800a102:	f849 3b04 	str.w	r3, [r9], #4
 800a106:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a10a:	d8e4      	bhi.n	800a0d6 <__multiply+0xaa>
 800a10c:	9b01      	ldr	r3, [sp, #4]
 800a10e:	50e7      	str	r7, [r4, r3]
 800a110:	9b03      	ldr	r3, [sp, #12]
 800a112:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a116:	3104      	adds	r1, #4
 800a118:	f1b9 0f00 	cmp.w	r9, #0
 800a11c:	d020      	beq.n	800a160 <__multiply+0x134>
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	4647      	mov	r7, r8
 800a122:	46a4      	mov	ip, r4
 800a124:	f04f 0a00 	mov.w	sl, #0
 800a128:	f8b7 b000 	ldrh.w	fp, [r7]
 800a12c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a130:	fb09 220b 	mla	r2, r9, fp, r2
 800a134:	4452      	add	r2, sl
 800a136:	b29b      	uxth	r3, r3
 800a138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a13c:	f84c 3b04 	str.w	r3, [ip], #4
 800a140:	f857 3b04 	ldr.w	r3, [r7], #4
 800a144:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a148:	f8bc 3000 	ldrh.w	r3, [ip]
 800a14c:	fb09 330a 	mla	r3, r9, sl, r3
 800a150:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a154:	42bd      	cmp	r5, r7
 800a156:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a15a:	d8e5      	bhi.n	800a128 <__multiply+0xfc>
 800a15c:	9a01      	ldr	r2, [sp, #4]
 800a15e:	50a3      	str	r3, [r4, r2]
 800a160:	3404      	adds	r4, #4
 800a162:	e79f      	b.n	800a0a4 <__multiply+0x78>
 800a164:	3e01      	subs	r6, #1
 800a166:	e7a1      	b.n	800a0ac <__multiply+0x80>
 800a168:	0800ce51 	.word	0x0800ce51
 800a16c:	0800ce62 	.word	0x0800ce62

0800a170 <__pow5mult>:
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a174:	4615      	mov	r5, r2
 800a176:	f012 0203 	ands.w	r2, r2, #3
 800a17a:	4607      	mov	r7, r0
 800a17c:	460e      	mov	r6, r1
 800a17e:	d007      	beq.n	800a190 <__pow5mult+0x20>
 800a180:	4c25      	ldr	r4, [pc, #148]	@ (800a218 <__pow5mult+0xa8>)
 800a182:	3a01      	subs	r2, #1
 800a184:	2300      	movs	r3, #0
 800a186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a18a:	f7ff fe5d 	bl	8009e48 <__multadd>
 800a18e:	4606      	mov	r6, r0
 800a190:	10ad      	asrs	r5, r5, #2
 800a192:	d03d      	beq.n	800a210 <__pow5mult+0xa0>
 800a194:	69fc      	ldr	r4, [r7, #28]
 800a196:	b97c      	cbnz	r4, 800a1b8 <__pow5mult+0x48>
 800a198:	2010      	movs	r0, #16
 800a19a:	f7ff fd3d 	bl	8009c18 <malloc>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	61f8      	str	r0, [r7, #28]
 800a1a2:	b928      	cbnz	r0, 800a1b0 <__pow5mult+0x40>
 800a1a4:	4b1d      	ldr	r3, [pc, #116]	@ (800a21c <__pow5mult+0xac>)
 800a1a6:	481e      	ldr	r0, [pc, #120]	@ (800a220 <__pow5mult+0xb0>)
 800a1a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a1ac:	f001 fce4 	bl	800bb78 <__assert_func>
 800a1b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1b4:	6004      	str	r4, [r0, #0]
 800a1b6:	60c4      	str	r4, [r0, #12]
 800a1b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a1bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1c0:	b94c      	cbnz	r4, 800a1d6 <__pow5mult+0x66>
 800a1c2:	f240 2171 	movw	r1, #625	@ 0x271
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f7ff ff1a 	bl	800a000 <__i2b>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	6003      	str	r3, [r0, #0]
 800a1d6:	f04f 0900 	mov.w	r9, #0
 800a1da:	07eb      	lsls	r3, r5, #31
 800a1dc:	d50a      	bpl.n	800a1f4 <__pow5mult+0x84>
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	f7ff ff22 	bl	800a02c <__multiply>
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4680      	mov	r8, r0
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f7ff fe09 	bl	8009e04 <_Bfree>
 800a1f2:	4646      	mov	r6, r8
 800a1f4:	106d      	asrs	r5, r5, #1
 800a1f6:	d00b      	beq.n	800a210 <__pow5mult+0xa0>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	b938      	cbnz	r0, 800a20c <__pow5mult+0x9c>
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	4621      	mov	r1, r4
 800a200:	4638      	mov	r0, r7
 800a202:	f7ff ff13 	bl	800a02c <__multiply>
 800a206:	6020      	str	r0, [r4, #0]
 800a208:	f8c0 9000 	str.w	r9, [r0]
 800a20c:	4604      	mov	r4, r0
 800a20e:	e7e4      	b.n	800a1da <__pow5mult+0x6a>
 800a210:	4630      	mov	r0, r6
 800a212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a216:	bf00      	nop
 800a218:	0800cf74 	.word	0x0800cf74
 800a21c:	0800cde2 	.word	0x0800cde2
 800a220:	0800ce62 	.word	0x0800ce62

0800a224 <__lshift>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	460c      	mov	r4, r1
 800a22a:	6849      	ldr	r1, [r1, #4]
 800a22c:	6923      	ldr	r3, [r4, #16]
 800a22e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a232:	68a3      	ldr	r3, [r4, #8]
 800a234:	4607      	mov	r7, r0
 800a236:	4691      	mov	r9, r2
 800a238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a23c:	f108 0601 	add.w	r6, r8, #1
 800a240:	42b3      	cmp	r3, r6
 800a242:	db0b      	blt.n	800a25c <__lshift+0x38>
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff fd9d 	bl	8009d84 <_Balloc>
 800a24a:	4605      	mov	r5, r0
 800a24c:	b948      	cbnz	r0, 800a262 <__lshift+0x3e>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b28      	ldr	r3, [pc, #160]	@ (800a2f4 <__lshift+0xd0>)
 800a252:	4829      	ldr	r0, [pc, #164]	@ (800a2f8 <__lshift+0xd4>)
 800a254:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a258:	f001 fc8e 	bl	800bb78 <__assert_func>
 800a25c:	3101      	adds	r1, #1
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	e7ee      	b.n	800a240 <__lshift+0x1c>
 800a262:	2300      	movs	r3, #0
 800a264:	f100 0114 	add.w	r1, r0, #20
 800a268:	f100 0210 	add.w	r2, r0, #16
 800a26c:	4618      	mov	r0, r3
 800a26e:	4553      	cmp	r3, sl
 800a270:	db33      	blt.n	800a2da <__lshift+0xb6>
 800a272:	6920      	ldr	r0, [r4, #16]
 800a274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a278:	f104 0314 	add.w	r3, r4, #20
 800a27c:	f019 091f 	ands.w	r9, r9, #31
 800a280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a284:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a288:	d02b      	beq.n	800a2e2 <__lshift+0xbe>
 800a28a:	f1c9 0e20 	rsb	lr, r9, #32
 800a28e:	468a      	mov	sl, r1
 800a290:	2200      	movs	r2, #0
 800a292:	6818      	ldr	r0, [r3, #0]
 800a294:	fa00 f009 	lsl.w	r0, r0, r9
 800a298:	4310      	orrs	r0, r2
 800a29a:	f84a 0b04 	str.w	r0, [sl], #4
 800a29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a2:	459c      	cmp	ip, r3
 800a2a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2a8:	d8f3      	bhi.n	800a292 <__lshift+0x6e>
 800a2aa:	ebac 0304 	sub.w	r3, ip, r4
 800a2ae:	3b15      	subs	r3, #21
 800a2b0:	f023 0303 	bic.w	r3, r3, #3
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	f104 0015 	add.w	r0, r4, #21
 800a2ba:	4560      	cmp	r0, ip
 800a2bc:	bf88      	it	hi
 800a2be:	2304      	movhi	r3, #4
 800a2c0:	50ca      	str	r2, [r1, r3]
 800a2c2:	b10a      	cbz	r2, 800a2c8 <__lshift+0xa4>
 800a2c4:	f108 0602 	add.w	r6, r8, #2
 800a2c8:	3e01      	subs	r6, #1
 800a2ca:	4638      	mov	r0, r7
 800a2cc:	612e      	str	r6, [r5, #16]
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	f7ff fd98 	bl	8009e04 <_Bfree>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2de:	3301      	adds	r3, #1
 800a2e0:	e7c5      	b.n	800a26e <__lshift+0x4a>
 800a2e2:	3904      	subs	r1, #4
 800a2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2ec:	459c      	cmp	ip, r3
 800a2ee:	d8f9      	bhi.n	800a2e4 <__lshift+0xc0>
 800a2f0:	e7ea      	b.n	800a2c8 <__lshift+0xa4>
 800a2f2:	bf00      	nop
 800a2f4:	0800ce51 	.word	0x0800ce51
 800a2f8:	0800ce62 	.word	0x0800ce62

0800a2fc <__mcmp>:
 800a2fc:	690a      	ldr	r2, [r1, #16]
 800a2fe:	4603      	mov	r3, r0
 800a300:	6900      	ldr	r0, [r0, #16]
 800a302:	1a80      	subs	r0, r0, r2
 800a304:	b530      	push	{r4, r5, lr}
 800a306:	d10e      	bne.n	800a326 <__mcmp+0x2a>
 800a308:	3314      	adds	r3, #20
 800a30a:	3114      	adds	r1, #20
 800a30c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a310:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a31c:	4295      	cmp	r5, r2
 800a31e:	d003      	beq.n	800a328 <__mcmp+0x2c>
 800a320:	d205      	bcs.n	800a32e <__mcmp+0x32>
 800a322:	f04f 30ff 	mov.w	r0, #4294967295
 800a326:	bd30      	pop	{r4, r5, pc}
 800a328:	42a3      	cmp	r3, r4
 800a32a:	d3f3      	bcc.n	800a314 <__mcmp+0x18>
 800a32c:	e7fb      	b.n	800a326 <__mcmp+0x2a>
 800a32e:	2001      	movs	r0, #1
 800a330:	e7f9      	b.n	800a326 <__mcmp+0x2a>
	...

0800a334 <__mdiff>:
 800a334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a338:	4689      	mov	r9, r1
 800a33a:	4606      	mov	r6, r0
 800a33c:	4611      	mov	r1, r2
 800a33e:	4648      	mov	r0, r9
 800a340:	4614      	mov	r4, r2
 800a342:	f7ff ffdb 	bl	800a2fc <__mcmp>
 800a346:	1e05      	subs	r5, r0, #0
 800a348:	d112      	bne.n	800a370 <__mdiff+0x3c>
 800a34a:	4629      	mov	r1, r5
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff fd19 	bl	8009d84 <_Balloc>
 800a352:	4602      	mov	r2, r0
 800a354:	b928      	cbnz	r0, 800a362 <__mdiff+0x2e>
 800a356:	4b3f      	ldr	r3, [pc, #252]	@ (800a454 <__mdiff+0x120>)
 800a358:	f240 2137 	movw	r1, #567	@ 0x237
 800a35c:	483e      	ldr	r0, [pc, #248]	@ (800a458 <__mdiff+0x124>)
 800a35e:	f001 fc0b 	bl	800bb78 <__assert_func>
 800a362:	2301      	movs	r3, #1
 800a364:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a368:	4610      	mov	r0, r2
 800a36a:	b003      	add	sp, #12
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	bfbc      	itt	lt
 800a372:	464b      	movlt	r3, r9
 800a374:	46a1      	movlt	r9, r4
 800a376:	4630      	mov	r0, r6
 800a378:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a37c:	bfba      	itte	lt
 800a37e:	461c      	movlt	r4, r3
 800a380:	2501      	movlt	r5, #1
 800a382:	2500      	movge	r5, #0
 800a384:	f7ff fcfe 	bl	8009d84 <_Balloc>
 800a388:	4602      	mov	r2, r0
 800a38a:	b918      	cbnz	r0, 800a394 <__mdiff+0x60>
 800a38c:	4b31      	ldr	r3, [pc, #196]	@ (800a454 <__mdiff+0x120>)
 800a38e:	f240 2145 	movw	r1, #581	@ 0x245
 800a392:	e7e3      	b.n	800a35c <__mdiff+0x28>
 800a394:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a398:	6926      	ldr	r6, [r4, #16]
 800a39a:	60c5      	str	r5, [r0, #12]
 800a39c:	f109 0310 	add.w	r3, r9, #16
 800a3a0:	f109 0514 	add.w	r5, r9, #20
 800a3a4:	f104 0e14 	add.w	lr, r4, #20
 800a3a8:	f100 0b14 	add.w	fp, r0, #20
 800a3ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a3b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a3b4:	9301      	str	r3, [sp, #4]
 800a3b6:	46d9      	mov	r9, fp
 800a3b8:	f04f 0c00 	mov.w	ip, #0
 800a3bc:	9b01      	ldr	r3, [sp, #4]
 800a3be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a3c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	fa1f f38a 	uxth.w	r3, sl
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	b283      	uxth	r3, r0
 800a3d0:	1acb      	subs	r3, r1, r3
 800a3d2:	0c00      	lsrs	r0, r0, #16
 800a3d4:	4463      	add	r3, ip
 800a3d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a3da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3e4:	4576      	cmp	r6, lr
 800a3e6:	f849 3b04 	str.w	r3, [r9], #4
 800a3ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3ee:	d8e5      	bhi.n	800a3bc <__mdiff+0x88>
 800a3f0:	1b33      	subs	r3, r6, r4
 800a3f2:	3b15      	subs	r3, #21
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	3415      	adds	r4, #21
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	42a6      	cmp	r6, r4
 800a3fe:	bf38      	it	cc
 800a400:	2304      	movcc	r3, #4
 800a402:	441d      	add	r5, r3
 800a404:	445b      	add	r3, fp
 800a406:	461e      	mov	r6, r3
 800a408:	462c      	mov	r4, r5
 800a40a:	4544      	cmp	r4, r8
 800a40c:	d30e      	bcc.n	800a42c <__mdiff+0xf8>
 800a40e:	f108 0103 	add.w	r1, r8, #3
 800a412:	1b49      	subs	r1, r1, r5
 800a414:	f021 0103 	bic.w	r1, r1, #3
 800a418:	3d03      	subs	r5, #3
 800a41a:	45a8      	cmp	r8, r5
 800a41c:	bf38      	it	cc
 800a41e:	2100      	movcc	r1, #0
 800a420:	440b      	add	r3, r1
 800a422:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a426:	b191      	cbz	r1, 800a44e <__mdiff+0x11a>
 800a428:	6117      	str	r7, [r2, #16]
 800a42a:	e79d      	b.n	800a368 <__mdiff+0x34>
 800a42c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a430:	46e6      	mov	lr, ip
 800a432:	0c08      	lsrs	r0, r1, #16
 800a434:	fa1c fc81 	uxtah	ip, ip, r1
 800a438:	4471      	add	r1, lr
 800a43a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a43e:	b289      	uxth	r1, r1
 800a440:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a444:	f846 1b04 	str.w	r1, [r6], #4
 800a448:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a44c:	e7dd      	b.n	800a40a <__mdiff+0xd6>
 800a44e:	3f01      	subs	r7, #1
 800a450:	e7e7      	b.n	800a422 <__mdiff+0xee>
 800a452:	bf00      	nop
 800a454:	0800ce51 	.word	0x0800ce51
 800a458:	0800ce62 	.word	0x0800ce62

0800a45c <__ulp>:
 800a45c:	b082      	sub	sp, #8
 800a45e:	ed8d 0b00 	vstr	d0, [sp]
 800a462:	9a01      	ldr	r2, [sp, #4]
 800a464:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a4 <__ulp+0x48>)
 800a466:	4013      	ands	r3, r2
 800a468:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	dc08      	bgt.n	800a482 <__ulp+0x26>
 800a470:	425b      	negs	r3, r3
 800a472:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a476:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a47a:	da04      	bge.n	800a486 <__ulp+0x2a>
 800a47c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a480:	4113      	asrs	r3, r2
 800a482:	2200      	movs	r2, #0
 800a484:	e008      	b.n	800a498 <__ulp+0x3c>
 800a486:	f1a2 0314 	sub.w	r3, r2, #20
 800a48a:	2b1e      	cmp	r3, #30
 800a48c:	bfda      	itte	le
 800a48e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a492:	40da      	lsrle	r2, r3
 800a494:	2201      	movgt	r2, #1
 800a496:	2300      	movs	r3, #0
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	ec41 0b10 	vmov	d0, r0, r1
 800a4a0:	b002      	add	sp, #8
 800a4a2:	4770      	bx	lr
 800a4a4:	7ff00000 	.word	0x7ff00000

0800a4a8 <__b2d>:
 800a4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ac:	6906      	ldr	r6, [r0, #16]
 800a4ae:	f100 0814 	add.w	r8, r0, #20
 800a4b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a4b6:	1f37      	subs	r7, r6, #4
 800a4b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f7ff fd53 	bl	8009f68 <__hi0bits>
 800a4c2:	f1c0 0320 	rsb	r3, r0, #32
 800a4c6:	280a      	cmp	r0, #10
 800a4c8:	600b      	str	r3, [r1, #0]
 800a4ca:	491b      	ldr	r1, [pc, #108]	@ (800a538 <__b2d+0x90>)
 800a4cc:	dc15      	bgt.n	800a4fa <__b2d+0x52>
 800a4ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800a4d2:	fa22 f30c 	lsr.w	r3, r2, ip
 800a4d6:	45b8      	cmp	r8, r7
 800a4d8:	ea43 0501 	orr.w	r5, r3, r1
 800a4dc:	bf34      	ite	cc
 800a4de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4e2:	2300      	movcs	r3, #0
 800a4e4:	3015      	adds	r0, #21
 800a4e6:	fa02 f000 	lsl.w	r0, r2, r0
 800a4ea:	fa23 f30c 	lsr.w	r3, r3, ip
 800a4ee:	4303      	orrs	r3, r0
 800a4f0:	461c      	mov	r4, r3
 800a4f2:	ec45 4b10 	vmov	d0, r4, r5
 800a4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fa:	45b8      	cmp	r8, r7
 800a4fc:	bf3a      	itte	cc
 800a4fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a502:	f1a6 0708 	subcc.w	r7, r6, #8
 800a506:	2300      	movcs	r3, #0
 800a508:	380b      	subs	r0, #11
 800a50a:	d012      	beq.n	800a532 <__b2d+0x8a>
 800a50c:	f1c0 0120 	rsb	r1, r0, #32
 800a510:	fa23 f401 	lsr.w	r4, r3, r1
 800a514:	4082      	lsls	r2, r0
 800a516:	4322      	orrs	r2, r4
 800a518:	4547      	cmp	r7, r8
 800a51a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a51e:	bf8c      	ite	hi
 800a520:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a524:	2200      	movls	r2, #0
 800a526:	4083      	lsls	r3, r0
 800a528:	40ca      	lsrs	r2, r1
 800a52a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a52e:	4313      	orrs	r3, r2
 800a530:	e7de      	b.n	800a4f0 <__b2d+0x48>
 800a532:	ea42 0501 	orr.w	r5, r2, r1
 800a536:	e7db      	b.n	800a4f0 <__b2d+0x48>
 800a538:	3ff00000 	.word	0x3ff00000

0800a53c <__d2b>:
 800a53c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a540:	460f      	mov	r7, r1
 800a542:	2101      	movs	r1, #1
 800a544:	ec59 8b10 	vmov	r8, r9, d0
 800a548:	4616      	mov	r6, r2
 800a54a:	f7ff fc1b 	bl	8009d84 <_Balloc>
 800a54e:	4604      	mov	r4, r0
 800a550:	b930      	cbnz	r0, 800a560 <__d2b+0x24>
 800a552:	4602      	mov	r2, r0
 800a554:	4b23      	ldr	r3, [pc, #140]	@ (800a5e4 <__d2b+0xa8>)
 800a556:	4824      	ldr	r0, [pc, #144]	@ (800a5e8 <__d2b+0xac>)
 800a558:	f240 310f 	movw	r1, #783	@ 0x30f
 800a55c:	f001 fb0c 	bl	800bb78 <__assert_func>
 800a560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a568:	b10d      	cbz	r5, 800a56e <__d2b+0x32>
 800a56a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	f1b8 0300 	subs.w	r3, r8, #0
 800a574:	d023      	beq.n	800a5be <__d2b+0x82>
 800a576:	4668      	mov	r0, sp
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	f7ff fd14 	bl	8009fa6 <__lo0bits>
 800a57e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a582:	b1d0      	cbz	r0, 800a5ba <__d2b+0x7e>
 800a584:	f1c0 0320 	rsb	r3, r0, #32
 800a588:	fa02 f303 	lsl.w	r3, r2, r3
 800a58c:	430b      	orrs	r3, r1
 800a58e:	40c2      	lsrs	r2, r0
 800a590:	6163      	str	r3, [r4, #20]
 800a592:	9201      	str	r2, [sp, #4]
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	61a3      	str	r3, [r4, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bf0c      	ite	eq
 800a59c:	2201      	moveq	r2, #1
 800a59e:	2202      	movne	r2, #2
 800a5a0:	6122      	str	r2, [r4, #16]
 800a5a2:	b1a5      	cbz	r5, 800a5ce <__d2b+0x92>
 800a5a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5a8:	4405      	add	r5, r0
 800a5aa:	603d      	str	r5, [r7, #0]
 800a5ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5b0:	6030      	str	r0, [r6, #0]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	b003      	add	sp, #12
 800a5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	6161      	str	r1, [r4, #20]
 800a5bc:	e7ea      	b.n	800a594 <__d2b+0x58>
 800a5be:	a801      	add	r0, sp, #4
 800a5c0:	f7ff fcf1 	bl	8009fa6 <__lo0bits>
 800a5c4:	9b01      	ldr	r3, [sp, #4]
 800a5c6:	6163      	str	r3, [r4, #20]
 800a5c8:	3020      	adds	r0, #32
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	e7e8      	b.n	800a5a0 <__d2b+0x64>
 800a5ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5d6:	6038      	str	r0, [r7, #0]
 800a5d8:	6918      	ldr	r0, [r3, #16]
 800a5da:	f7ff fcc5 	bl	8009f68 <__hi0bits>
 800a5de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5e2:	e7e5      	b.n	800a5b0 <__d2b+0x74>
 800a5e4:	0800ce51 	.word	0x0800ce51
 800a5e8:	0800ce62 	.word	0x0800ce62

0800a5ec <__ratio>:
 800a5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	4688      	mov	r8, r1
 800a5f2:	4669      	mov	r1, sp
 800a5f4:	4681      	mov	r9, r0
 800a5f6:	f7ff ff57 	bl	800a4a8 <__b2d>
 800a5fa:	a901      	add	r1, sp, #4
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	ec55 4b10 	vmov	r4, r5, d0
 800a602:	f7ff ff51 	bl	800a4a8 <__b2d>
 800a606:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a60a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a60e:	1ad2      	subs	r2, r2, r3
 800a610:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a614:	1a5b      	subs	r3, r3, r1
 800a616:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a61a:	ec57 6b10 	vmov	r6, r7, d0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bfd6      	itet	le
 800a622:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a626:	462a      	movgt	r2, r5
 800a628:	463a      	movle	r2, r7
 800a62a:	46ab      	mov	fp, r5
 800a62c:	46a2      	mov	sl, r4
 800a62e:	bfce      	itee	gt
 800a630:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a634:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a638:	ee00 3a90 	vmovle	s1, r3
 800a63c:	ec4b ab17 	vmov	d7, sl, fp
 800a640:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a644:	b003      	add	sp, #12
 800a646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a64a <__copybits>:
 800a64a:	3901      	subs	r1, #1
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	1149      	asrs	r1, r1, #5
 800a650:	6914      	ldr	r4, [r2, #16]
 800a652:	3101      	adds	r1, #1
 800a654:	f102 0314 	add.w	r3, r2, #20
 800a658:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a65c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a660:	1f05      	subs	r5, r0, #4
 800a662:	42a3      	cmp	r3, r4
 800a664:	d30c      	bcc.n	800a680 <__copybits+0x36>
 800a666:	1aa3      	subs	r3, r4, r2
 800a668:	3b11      	subs	r3, #17
 800a66a:	f023 0303 	bic.w	r3, r3, #3
 800a66e:	3211      	adds	r2, #17
 800a670:	42a2      	cmp	r2, r4
 800a672:	bf88      	it	hi
 800a674:	2300      	movhi	r3, #0
 800a676:	4418      	add	r0, r3
 800a678:	2300      	movs	r3, #0
 800a67a:	4288      	cmp	r0, r1
 800a67c:	d305      	bcc.n	800a68a <__copybits+0x40>
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	f853 6b04 	ldr.w	r6, [r3], #4
 800a684:	f845 6f04 	str.w	r6, [r5, #4]!
 800a688:	e7eb      	b.n	800a662 <__copybits+0x18>
 800a68a:	f840 3b04 	str.w	r3, [r0], #4
 800a68e:	e7f4      	b.n	800a67a <__copybits+0x30>

0800a690 <__any_on>:
 800a690:	f100 0214 	add.w	r2, r0, #20
 800a694:	6900      	ldr	r0, [r0, #16]
 800a696:	114b      	asrs	r3, r1, #5
 800a698:	4298      	cmp	r0, r3
 800a69a:	b510      	push	{r4, lr}
 800a69c:	db11      	blt.n	800a6c2 <__any_on+0x32>
 800a69e:	dd0a      	ble.n	800a6b6 <__any_on+0x26>
 800a6a0:	f011 011f 	ands.w	r1, r1, #31
 800a6a4:	d007      	beq.n	800a6b6 <__any_on+0x26>
 800a6a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6aa:	fa24 f001 	lsr.w	r0, r4, r1
 800a6ae:	fa00 f101 	lsl.w	r1, r0, r1
 800a6b2:	428c      	cmp	r4, r1
 800a6b4:	d10b      	bne.n	800a6ce <__any_on+0x3e>
 800a6b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d803      	bhi.n	800a6c6 <__any_on+0x36>
 800a6be:	2000      	movs	r0, #0
 800a6c0:	bd10      	pop	{r4, pc}
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	e7f7      	b.n	800a6b6 <__any_on+0x26>
 800a6c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6ca:	2900      	cmp	r1, #0
 800a6cc:	d0f5      	beq.n	800a6ba <__any_on+0x2a>
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	e7f6      	b.n	800a6c0 <__any_on+0x30>

0800a6d2 <sulp>:
 800a6d2:	b570      	push	{r4, r5, r6, lr}
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	4616      	mov	r6, r2
 800a6da:	ec45 4b10 	vmov	d0, r4, r5
 800a6de:	f7ff febd 	bl	800a45c <__ulp>
 800a6e2:	b17e      	cbz	r6, 800a704 <sulp+0x32>
 800a6e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a6e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dd09      	ble.n	800a704 <sulp+0x32>
 800a6f0:	051b      	lsls	r3, r3, #20
 800a6f2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a6fc:	ec41 0b17 	vmov	d7, r0, r1
 800a700:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a704:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a708 <_strtod_l>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	ed2d 8b0a 	vpush	{d8-d12}
 800a710:	b097      	sub	sp, #92	@ 0x5c
 800a712:	4688      	mov	r8, r1
 800a714:	920e      	str	r2, [sp, #56]	@ 0x38
 800a716:	2200      	movs	r2, #0
 800a718:	9212      	str	r2, [sp, #72]	@ 0x48
 800a71a:	9005      	str	r0, [sp, #20]
 800a71c:	f04f 0a00 	mov.w	sl, #0
 800a720:	f04f 0b00 	mov.w	fp, #0
 800a724:	460a      	mov	r2, r1
 800a726:	9211      	str	r2, [sp, #68]	@ 0x44
 800a728:	7811      	ldrb	r1, [r2, #0]
 800a72a:	292b      	cmp	r1, #43	@ 0x2b
 800a72c:	d04c      	beq.n	800a7c8 <_strtod_l+0xc0>
 800a72e:	d839      	bhi.n	800a7a4 <_strtod_l+0x9c>
 800a730:	290d      	cmp	r1, #13
 800a732:	d833      	bhi.n	800a79c <_strtod_l+0x94>
 800a734:	2908      	cmp	r1, #8
 800a736:	d833      	bhi.n	800a7a0 <_strtod_l+0x98>
 800a738:	2900      	cmp	r1, #0
 800a73a:	d03c      	beq.n	800a7b6 <_strtod_l+0xae>
 800a73c:	2200      	movs	r2, #0
 800a73e:	9208      	str	r2, [sp, #32]
 800a740:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a742:	782a      	ldrb	r2, [r5, #0]
 800a744:	2a30      	cmp	r2, #48	@ 0x30
 800a746:	f040 80b7 	bne.w	800a8b8 <_strtod_l+0x1b0>
 800a74a:	786a      	ldrb	r2, [r5, #1]
 800a74c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a750:	2a58      	cmp	r2, #88	@ 0x58
 800a752:	d170      	bne.n	800a836 <_strtod_l+0x12e>
 800a754:	9302      	str	r3, [sp, #8]
 800a756:	9b08      	ldr	r3, [sp, #32]
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	ab12      	add	r3, sp, #72	@ 0x48
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	4a90      	ldr	r2, [pc, #576]	@ (800a9a0 <_strtod_l+0x298>)
 800a760:	9805      	ldr	r0, [sp, #20]
 800a762:	ab13      	add	r3, sp, #76	@ 0x4c
 800a764:	a911      	add	r1, sp, #68	@ 0x44
 800a766:	f001 faa1 	bl	800bcac <__gethex>
 800a76a:	f010 060f 	ands.w	r6, r0, #15
 800a76e:	4604      	mov	r4, r0
 800a770:	d005      	beq.n	800a77e <_strtod_l+0x76>
 800a772:	2e06      	cmp	r6, #6
 800a774:	d12a      	bne.n	800a7cc <_strtod_l+0xc4>
 800a776:	3501      	adds	r5, #1
 800a778:	2300      	movs	r3, #0
 800a77a:	9511      	str	r5, [sp, #68]	@ 0x44
 800a77c:	9308      	str	r3, [sp, #32]
 800a77e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a780:	2b00      	cmp	r3, #0
 800a782:	f040 8537 	bne.w	800b1f4 <_strtod_l+0xaec>
 800a786:	9b08      	ldr	r3, [sp, #32]
 800a788:	ec4b ab10 	vmov	d0, sl, fp
 800a78c:	b1cb      	cbz	r3, 800a7c2 <_strtod_l+0xba>
 800a78e:	eeb1 0b40 	vneg.f64	d0, d0
 800a792:	b017      	add	sp, #92	@ 0x5c
 800a794:	ecbd 8b0a 	vpop	{d8-d12}
 800a798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79c:	2920      	cmp	r1, #32
 800a79e:	d1cd      	bne.n	800a73c <_strtod_l+0x34>
 800a7a0:	3201      	adds	r2, #1
 800a7a2:	e7c0      	b.n	800a726 <_strtod_l+0x1e>
 800a7a4:	292d      	cmp	r1, #45	@ 0x2d
 800a7a6:	d1c9      	bne.n	800a73c <_strtod_l+0x34>
 800a7a8:	2101      	movs	r1, #1
 800a7aa:	9108      	str	r1, [sp, #32]
 800a7ac:	1c51      	adds	r1, r2, #1
 800a7ae:	9111      	str	r1, [sp, #68]	@ 0x44
 800a7b0:	7852      	ldrb	r2, [r2, #1]
 800a7b2:	2a00      	cmp	r2, #0
 800a7b4:	d1c4      	bne.n	800a740 <_strtod_l+0x38>
 800a7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7b8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f040 8517 	bne.w	800b1f0 <_strtod_l+0xae8>
 800a7c2:	ec4b ab10 	vmov	d0, sl, fp
 800a7c6:	e7e4      	b.n	800a792 <_strtod_l+0x8a>
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	e7ee      	b.n	800a7aa <_strtod_l+0xa2>
 800a7cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a7ce:	b13a      	cbz	r2, 800a7e0 <_strtod_l+0xd8>
 800a7d0:	2135      	movs	r1, #53	@ 0x35
 800a7d2:	a814      	add	r0, sp, #80	@ 0x50
 800a7d4:	f7ff ff39 	bl	800a64a <__copybits>
 800a7d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a7da:	9805      	ldr	r0, [sp, #20]
 800a7dc:	f7ff fb12 	bl	8009e04 <_Bfree>
 800a7e0:	1e73      	subs	r3, r6, #1
 800a7e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d806      	bhi.n	800a7f6 <_strtod_l+0xee>
 800a7e8:	e8df f003 	tbb	[pc, r3]
 800a7ec:	201d0314 	.word	0x201d0314
 800a7f0:	14          	.byte	0x14
 800a7f1:	00          	.byte	0x00
 800a7f2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a7f6:	05e3      	lsls	r3, r4, #23
 800a7f8:	bf48      	it	mi
 800a7fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a7fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a802:	0d1b      	lsrs	r3, r3, #20
 800a804:	051b      	lsls	r3, r3, #20
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1b9      	bne.n	800a77e <_strtod_l+0x76>
 800a80a:	f7fe fb9f 	bl	8008f4c <__errno>
 800a80e:	2322      	movs	r3, #34	@ 0x22
 800a810:	6003      	str	r3, [r0, #0]
 800a812:	e7b4      	b.n	800a77e <_strtod_l+0x76>
 800a814:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a818:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a81c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a820:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a824:	e7e7      	b.n	800a7f6 <_strtod_l+0xee>
 800a826:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a9a8 <_strtod_l+0x2a0>
 800a82a:	e7e4      	b.n	800a7f6 <_strtod_l+0xee>
 800a82c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a830:	f04f 3aff 	mov.w	sl, #4294967295
 800a834:	e7df      	b.n	800a7f6 <_strtod_l+0xee>
 800a836:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	9211      	str	r2, [sp, #68]	@ 0x44
 800a83c:	785b      	ldrb	r3, [r3, #1]
 800a83e:	2b30      	cmp	r3, #48	@ 0x30
 800a840:	d0f9      	beq.n	800a836 <_strtod_l+0x12e>
 800a842:	2b00      	cmp	r3, #0
 800a844:	d09b      	beq.n	800a77e <_strtod_l+0x76>
 800a846:	2301      	movs	r3, #1
 800a848:	9307      	str	r3, [sp, #28]
 800a84a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a84c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a84e:	2300      	movs	r3, #0
 800a850:	9306      	str	r3, [sp, #24]
 800a852:	4699      	mov	r9, r3
 800a854:	461d      	mov	r5, r3
 800a856:	220a      	movs	r2, #10
 800a858:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a85a:	7804      	ldrb	r4, [r0, #0]
 800a85c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a860:	b2d9      	uxtb	r1, r3
 800a862:	2909      	cmp	r1, #9
 800a864:	d92a      	bls.n	800a8bc <_strtod_l+0x1b4>
 800a866:	494f      	ldr	r1, [pc, #316]	@ (800a9a4 <_strtod_l+0x29c>)
 800a868:	2201      	movs	r2, #1
 800a86a:	f001 f92b 	bl	800bac4 <strncmp>
 800a86e:	b398      	cbz	r0, 800a8d8 <_strtod_l+0x1d0>
 800a870:	2000      	movs	r0, #0
 800a872:	4622      	mov	r2, r4
 800a874:	462b      	mov	r3, r5
 800a876:	4607      	mov	r7, r0
 800a878:	4601      	mov	r1, r0
 800a87a:	2a65      	cmp	r2, #101	@ 0x65
 800a87c:	d001      	beq.n	800a882 <_strtod_l+0x17a>
 800a87e:	2a45      	cmp	r2, #69	@ 0x45
 800a880:	d118      	bne.n	800a8b4 <_strtod_l+0x1ac>
 800a882:	b91b      	cbnz	r3, 800a88c <_strtod_l+0x184>
 800a884:	9b07      	ldr	r3, [sp, #28]
 800a886:	4303      	orrs	r3, r0
 800a888:	d095      	beq.n	800a7b6 <_strtod_l+0xae>
 800a88a:	2300      	movs	r3, #0
 800a88c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a890:	f108 0201 	add.w	r2, r8, #1
 800a894:	9211      	str	r2, [sp, #68]	@ 0x44
 800a896:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a89a:	2a2b      	cmp	r2, #43	@ 0x2b
 800a89c:	d074      	beq.n	800a988 <_strtod_l+0x280>
 800a89e:	2a2d      	cmp	r2, #45	@ 0x2d
 800a8a0:	d07a      	beq.n	800a998 <_strtod_l+0x290>
 800a8a2:	f04f 0e00 	mov.w	lr, #0
 800a8a6:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a8aa:	2c09      	cmp	r4, #9
 800a8ac:	f240 8082 	bls.w	800a9b4 <_strtod_l+0x2ac>
 800a8b0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a8b4:	2400      	movs	r4, #0
 800a8b6:	e09d      	b.n	800a9f4 <_strtod_l+0x2ec>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	e7c5      	b.n	800a848 <_strtod_l+0x140>
 800a8bc:	2d08      	cmp	r5, #8
 800a8be:	bfc8      	it	gt
 800a8c0:	9906      	ldrgt	r1, [sp, #24]
 800a8c2:	f100 0001 	add.w	r0, r0, #1
 800a8c6:	bfca      	itet	gt
 800a8c8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a8cc:	fb02 3909 	mlale	r9, r2, r9, r3
 800a8d0:	9306      	strgt	r3, [sp, #24]
 800a8d2:	3501      	adds	r5, #1
 800a8d4:	9011      	str	r0, [sp, #68]	@ 0x44
 800a8d6:	e7bf      	b.n	800a858 <_strtod_l+0x150>
 800a8d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	9211      	str	r2, [sp, #68]	@ 0x44
 800a8de:	785a      	ldrb	r2, [r3, #1]
 800a8e0:	b3bd      	cbz	r5, 800a952 <_strtod_l+0x24a>
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	462b      	mov	r3, r5
 800a8e6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a8ea:	2909      	cmp	r1, #9
 800a8ec:	d912      	bls.n	800a914 <_strtod_l+0x20c>
 800a8ee:	2101      	movs	r1, #1
 800a8f0:	e7c3      	b.n	800a87a <_strtod_l+0x172>
 800a8f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8f4:	1c5a      	adds	r2, r3, #1
 800a8f6:	9211      	str	r2, [sp, #68]	@ 0x44
 800a8f8:	785a      	ldrb	r2, [r3, #1]
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	2a30      	cmp	r2, #48	@ 0x30
 800a8fe:	d0f8      	beq.n	800a8f2 <_strtod_l+0x1ea>
 800a900:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a904:	2b08      	cmp	r3, #8
 800a906:	f200 847a 	bhi.w	800b1fe <_strtod_l+0xaf6>
 800a90a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a90c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a90e:	4607      	mov	r7, r0
 800a910:	2000      	movs	r0, #0
 800a912:	4603      	mov	r3, r0
 800a914:	3a30      	subs	r2, #48	@ 0x30
 800a916:	f100 0101 	add.w	r1, r0, #1
 800a91a:	d014      	beq.n	800a946 <_strtod_l+0x23e>
 800a91c:	440f      	add	r7, r1
 800a91e:	469c      	mov	ip, r3
 800a920:	f04f 0e0a 	mov.w	lr, #10
 800a924:	f10c 0401 	add.w	r4, ip, #1
 800a928:	1ae6      	subs	r6, r4, r3
 800a92a:	42b1      	cmp	r1, r6
 800a92c:	dc13      	bgt.n	800a956 <_strtod_l+0x24e>
 800a92e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a932:	1819      	adds	r1, r3, r0
 800a934:	2908      	cmp	r1, #8
 800a936:	f103 0301 	add.w	r3, r3, #1
 800a93a:	4403      	add	r3, r0
 800a93c:	dc19      	bgt.n	800a972 <_strtod_l+0x26a>
 800a93e:	210a      	movs	r1, #10
 800a940:	fb01 2909 	mla	r9, r1, r9, r2
 800a944:	2100      	movs	r1, #0
 800a946:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a948:	1c50      	adds	r0, r2, #1
 800a94a:	9011      	str	r0, [sp, #68]	@ 0x44
 800a94c:	7852      	ldrb	r2, [r2, #1]
 800a94e:	4608      	mov	r0, r1
 800a950:	e7c9      	b.n	800a8e6 <_strtod_l+0x1de>
 800a952:	4628      	mov	r0, r5
 800a954:	e7d2      	b.n	800a8fc <_strtod_l+0x1f4>
 800a956:	f1bc 0f08 	cmp.w	ip, #8
 800a95a:	dc03      	bgt.n	800a964 <_strtod_l+0x25c>
 800a95c:	fb0e f909 	mul.w	r9, lr, r9
 800a960:	46a4      	mov	ip, r4
 800a962:	e7df      	b.n	800a924 <_strtod_l+0x21c>
 800a964:	2c10      	cmp	r4, #16
 800a966:	bfde      	ittt	le
 800a968:	9e06      	ldrle	r6, [sp, #24]
 800a96a:	fb0e f606 	mulle.w	r6, lr, r6
 800a96e:	9606      	strle	r6, [sp, #24]
 800a970:	e7f6      	b.n	800a960 <_strtod_l+0x258>
 800a972:	290f      	cmp	r1, #15
 800a974:	bfdf      	itttt	le
 800a976:	9806      	ldrle	r0, [sp, #24]
 800a978:	210a      	movle	r1, #10
 800a97a:	fb01 2200 	mlale	r2, r1, r0, r2
 800a97e:	9206      	strle	r2, [sp, #24]
 800a980:	e7e0      	b.n	800a944 <_strtod_l+0x23c>
 800a982:	2700      	movs	r7, #0
 800a984:	2101      	movs	r1, #1
 800a986:	e77d      	b.n	800a884 <_strtod_l+0x17c>
 800a988:	f04f 0e00 	mov.w	lr, #0
 800a98c:	f108 0202 	add.w	r2, r8, #2
 800a990:	9211      	str	r2, [sp, #68]	@ 0x44
 800a992:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a996:	e786      	b.n	800a8a6 <_strtod_l+0x19e>
 800a998:	f04f 0e01 	mov.w	lr, #1
 800a99c:	e7f6      	b.n	800a98c <_strtod_l+0x284>
 800a99e:	bf00      	nop
 800a9a0:	0800d084 	.word	0x0800d084
 800a9a4:	0800cebb 	.word	0x0800cebb
 800a9a8:	7ff00000 	.word	0x7ff00000
 800a9ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a9ae:	1c54      	adds	r4, r2, #1
 800a9b0:	9411      	str	r4, [sp, #68]	@ 0x44
 800a9b2:	7852      	ldrb	r2, [r2, #1]
 800a9b4:	2a30      	cmp	r2, #48	@ 0x30
 800a9b6:	d0f9      	beq.n	800a9ac <_strtod_l+0x2a4>
 800a9b8:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a9bc:	2c08      	cmp	r4, #8
 800a9be:	f63f af79 	bhi.w	800a8b4 <_strtod_l+0x1ac>
 800a9c2:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a9c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a9c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a9cc:	1c54      	adds	r4, r2, #1
 800a9ce:	9411      	str	r4, [sp, #68]	@ 0x44
 800a9d0:	7852      	ldrb	r2, [r2, #1]
 800a9d2:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800a9d6:	2e09      	cmp	r6, #9
 800a9d8:	d937      	bls.n	800aa4a <_strtod_l+0x342>
 800a9da:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a9dc:	1ba4      	subs	r4, r4, r6
 800a9de:	2c08      	cmp	r4, #8
 800a9e0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a9e4:	dc02      	bgt.n	800a9ec <_strtod_l+0x2e4>
 800a9e6:	4564      	cmp	r4, ip
 800a9e8:	bfa8      	it	ge
 800a9ea:	4664      	movge	r4, ip
 800a9ec:	f1be 0f00 	cmp.w	lr, #0
 800a9f0:	d000      	beq.n	800a9f4 <_strtod_l+0x2ec>
 800a9f2:	4264      	negs	r4, r4
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d14d      	bne.n	800aa94 <_strtod_l+0x38c>
 800a9f8:	9b07      	ldr	r3, [sp, #28]
 800a9fa:	4318      	orrs	r0, r3
 800a9fc:	f47f aebf 	bne.w	800a77e <_strtod_l+0x76>
 800aa00:	2900      	cmp	r1, #0
 800aa02:	f47f aed8 	bne.w	800a7b6 <_strtod_l+0xae>
 800aa06:	2a69      	cmp	r2, #105	@ 0x69
 800aa08:	d027      	beq.n	800aa5a <_strtod_l+0x352>
 800aa0a:	dc24      	bgt.n	800aa56 <_strtod_l+0x34e>
 800aa0c:	2a49      	cmp	r2, #73	@ 0x49
 800aa0e:	d024      	beq.n	800aa5a <_strtod_l+0x352>
 800aa10:	2a4e      	cmp	r2, #78	@ 0x4e
 800aa12:	f47f aed0 	bne.w	800a7b6 <_strtod_l+0xae>
 800aa16:	4997      	ldr	r1, [pc, #604]	@ (800ac74 <_strtod_l+0x56c>)
 800aa18:	a811      	add	r0, sp, #68	@ 0x44
 800aa1a:	f001 fb69 	bl	800c0f0 <__match>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f43f aec9 	beq.w	800a7b6 <_strtod_l+0xae>
 800aa24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	2b28      	cmp	r3, #40	@ 0x28
 800aa2a:	d12d      	bne.n	800aa88 <_strtod_l+0x380>
 800aa2c:	4992      	ldr	r1, [pc, #584]	@ (800ac78 <_strtod_l+0x570>)
 800aa2e:	aa14      	add	r2, sp, #80	@ 0x50
 800aa30:	a811      	add	r0, sp, #68	@ 0x44
 800aa32:	f001 fb71 	bl	800c118 <__hexnan>
 800aa36:	2805      	cmp	r0, #5
 800aa38:	d126      	bne.n	800aa88 <_strtod_l+0x380>
 800aa3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aa3c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800aa40:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aa44:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aa48:	e699      	b.n	800a77e <_strtod_l+0x76>
 800aa4a:	240a      	movs	r4, #10
 800aa4c:	fb04 2c0c 	mla	ip, r4, ip, r2
 800aa50:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800aa54:	e7b9      	b.n	800a9ca <_strtod_l+0x2c2>
 800aa56:	2a6e      	cmp	r2, #110	@ 0x6e
 800aa58:	e7db      	b.n	800aa12 <_strtod_l+0x30a>
 800aa5a:	4988      	ldr	r1, [pc, #544]	@ (800ac7c <_strtod_l+0x574>)
 800aa5c:	a811      	add	r0, sp, #68	@ 0x44
 800aa5e:	f001 fb47 	bl	800c0f0 <__match>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f43f aea7 	beq.w	800a7b6 <_strtod_l+0xae>
 800aa68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa6a:	4985      	ldr	r1, [pc, #532]	@ (800ac80 <_strtod_l+0x578>)
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	a811      	add	r0, sp, #68	@ 0x44
 800aa70:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa72:	f001 fb3d 	bl	800c0f0 <__match>
 800aa76:	b910      	cbnz	r0, 800aa7e <_strtod_l+0x376>
 800aa78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa7e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800ac94 <_strtod_l+0x58c>
 800aa82:	f04f 0a00 	mov.w	sl, #0
 800aa86:	e67a      	b.n	800a77e <_strtod_l+0x76>
 800aa88:	487e      	ldr	r0, [pc, #504]	@ (800ac84 <_strtod_l+0x57c>)
 800aa8a:	f001 f86d 	bl	800bb68 <nan>
 800aa8e:	ec5b ab10 	vmov	sl, fp, d0
 800aa92:	e674      	b.n	800a77e <_strtod_l+0x76>
 800aa94:	ee07 9a90 	vmov	s15, r9
 800aa98:	1be2      	subs	r2, r4, r7
 800aa9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	bf08      	it	eq
 800aaa2:	461d      	moveq	r5, r3
 800aaa4:	2b10      	cmp	r3, #16
 800aaa6:	9209      	str	r2, [sp, #36]	@ 0x24
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	bfa8      	it	ge
 800aaac:	2210      	movge	r2, #16
 800aaae:	2b09      	cmp	r3, #9
 800aab0:	ec5b ab17 	vmov	sl, fp, d7
 800aab4:	dc15      	bgt.n	800aae2 <_strtod_l+0x3da>
 800aab6:	1be1      	subs	r1, r4, r7
 800aab8:	2900      	cmp	r1, #0
 800aaba:	f43f ae60 	beq.w	800a77e <_strtod_l+0x76>
 800aabe:	eba4 0107 	sub.w	r1, r4, r7
 800aac2:	dd72      	ble.n	800abaa <_strtod_l+0x4a2>
 800aac4:	2916      	cmp	r1, #22
 800aac6:	dc59      	bgt.n	800ab7c <_strtod_l+0x474>
 800aac8:	4b6f      	ldr	r3, [pc, #444]	@ (800ac88 <_strtod_l+0x580>)
 800aaca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aacc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aad0:	ed93 7b00 	vldr	d7, [r3]
 800aad4:	ec4b ab16 	vmov	d6, sl, fp
 800aad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aadc:	ec5b ab17 	vmov	sl, fp, d7
 800aae0:	e64d      	b.n	800a77e <_strtod_l+0x76>
 800aae2:	4969      	ldr	r1, [pc, #420]	@ (800ac88 <_strtod_l+0x580>)
 800aae4:	eddd 6a06 	vldr	s13, [sp, #24]
 800aae8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aaec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800aaf0:	2b0f      	cmp	r3, #15
 800aaf2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800aaf6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aafa:	ec5b ab16 	vmov	sl, fp, d6
 800aafe:	ddda      	ble.n	800aab6 <_strtod_l+0x3ae>
 800ab00:	1a9a      	subs	r2, r3, r2
 800ab02:	1be1      	subs	r1, r4, r7
 800ab04:	440a      	add	r2, r1
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	f340 8094 	ble.w	800ac34 <_strtod_l+0x52c>
 800ab0c:	f012 000f 	ands.w	r0, r2, #15
 800ab10:	d00a      	beq.n	800ab28 <_strtod_l+0x420>
 800ab12:	495d      	ldr	r1, [pc, #372]	@ (800ac88 <_strtod_l+0x580>)
 800ab14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ab18:	ed91 7b00 	vldr	d7, [r1]
 800ab1c:	ec4b ab16 	vmov	d6, sl, fp
 800ab20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab24:	ec5b ab17 	vmov	sl, fp, d7
 800ab28:	f032 020f 	bics.w	r2, r2, #15
 800ab2c:	d073      	beq.n	800ac16 <_strtod_l+0x50e>
 800ab2e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800ab32:	dd47      	ble.n	800abc4 <_strtod_l+0x4bc>
 800ab34:	2400      	movs	r4, #0
 800ab36:	4625      	mov	r5, r4
 800ab38:	9407      	str	r4, [sp, #28]
 800ab3a:	4626      	mov	r6, r4
 800ab3c:	9a05      	ldr	r2, [sp, #20]
 800ab3e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ac94 <_strtod_l+0x58c>
 800ab42:	2322      	movs	r3, #34	@ 0x22
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	f04f 0a00 	mov.w	sl, #0
 800ab4a:	9b07      	ldr	r3, [sp, #28]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f43f ae16 	beq.w	800a77e <_strtod_l+0x76>
 800ab52:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ab54:	9805      	ldr	r0, [sp, #20]
 800ab56:	f7ff f955 	bl	8009e04 <_Bfree>
 800ab5a:	9805      	ldr	r0, [sp, #20]
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	f7ff f951 	bl	8009e04 <_Bfree>
 800ab62:	9805      	ldr	r0, [sp, #20]
 800ab64:	4629      	mov	r1, r5
 800ab66:	f7ff f94d 	bl	8009e04 <_Bfree>
 800ab6a:	9907      	ldr	r1, [sp, #28]
 800ab6c:	9805      	ldr	r0, [sp, #20]
 800ab6e:	f7ff f949 	bl	8009e04 <_Bfree>
 800ab72:	9805      	ldr	r0, [sp, #20]
 800ab74:	4621      	mov	r1, r4
 800ab76:	f7ff f945 	bl	8009e04 <_Bfree>
 800ab7a:	e600      	b.n	800a77e <_strtod_l+0x76>
 800ab7c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ab80:	1be0      	subs	r0, r4, r7
 800ab82:	4281      	cmp	r1, r0
 800ab84:	dbbc      	blt.n	800ab00 <_strtod_l+0x3f8>
 800ab86:	4a40      	ldr	r2, [pc, #256]	@ (800ac88 <_strtod_l+0x580>)
 800ab88:	f1c3 030f 	rsb	r3, r3, #15
 800ab8c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ab90:	ed91 7b00 	vldr	d7, [r1]
 800ab94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab96:	ec4b ab16 	vmov	d6, sl, fp
 800ab9a:	1acb      	subs	r3, r1, r3
 800ab9c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800aba0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aba4:	ed92 6b00 	vldr	d6, [r2]
 800aba8:	e796      	b.n	800aad8 <_strtod_l+0x3d0>
 800abaa:	3116      	adds	r1, #22
 800abac:	dba8      	blt.n	800ab00 <_strtod_l+0x3f8>
 800abae:	4b36      	ldr	r3, [pc, #216]	@ (800ac88 <_strtod_l+0x580>)
 800abb0:	1b3c      	subs	r4, r7, r4
 800abb2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800abb6:	ed94 7b00 	vldr	d7, [r4]
 800abba:	ec4b ab16 	vmov	d6, sl, fp
 800abbe:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800abc2:	e78b      	b.n	800aadc <_strtod_l+0x3d4>
 800abc4:	2000      	movs	r0, #0
 800abc6:	ec4b ab17 	vmov	d7, sl, fp
 800abca:	4e30      	ldr	r6, [pc, #192]	@ (800ac8c <_strtod_l+0x584>)
 800abcc:	1112      	asrs	r2, r2, #4
 800abce:	4601      	mov	r1, r0
 800abd0:	2a01      	cmp	r2, #1
 800abd2:	dc23      	bgt.n	800ac1c <_strtod_l+0x514>
 800abd4:	b108      	cbz	r0, 800abda <_strtod_l+0x4d2>
 800abd6:	ec5b ab17 	vmov	sl, fp, d7
 800abda:	4a2c      	ldr	r2, [pc, #176]	@ (800ac8c <_strtod_l+0x584>)
 800abdc:	482c      	ldr	r0, [pc, #176]	@ (800ac90 <_strtod_l+0x588>)
 800abde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800abe2:	ed92 7b00 	vldr	d7, [r2]
 800abe6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800abea:	ec4b ab16 	vmov	d6, sl, fp
 800abee:	4a29      	ldr	r2, [pc, #164]	@ (800ac94 <_strtod_l+0x58c>)
 800abf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abf4:	ee17 1a90 	vmov	r1, s15
 800abf8:	400a      	ands	r2, r1
 800abfa:	4282      	cmp	r2, r0
 800abfc:	ec5b ab17 	vmov	sl, fp, d7
 800ac00:	d898      	bhi.n	800ab34 <_strtod_l+0x42c>
 800ac02:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ac06:	4282      	cmp	r2, r0
 800ac08:	bf86      	itte	hi
 800ac0a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ac98 <_strtod_l+0x590>
 800ac0e:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac12:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ac16:	2200      	movs	r2, #0
 800ac18:	9206      	str	r2, [sp, #24]
 800ac1a:	e076      	b.n	800ad0a <_strtod_l+0x602>
 800ac1c:	f012 0f01 	tst.w	r2, #1
 800ac20:	d004      	beq.n	800ac2c <_strtod_l+0x524>
 800ac22:	ed96 6b00 	vldr	d6, [r6]
 800ac26:	2001      	movs	r0, #1
 800ac28:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac2c:	3101      	adds	r1, #1
 800ac2e:	1052      	asrs	r2, r2, #1
 800ac30:	3608      	adds	r6, #8
 800ac32:	e7cd      	b.n	800abd0 <_strtod_l+0x4c8>
 800ac34:	d0ef      	beq.n	800ac16 <_strtod_l+0x50e>
 800ac36:	4252      	negs	r2, r2
 800ac38:	f012 000f 	ands.w	r0, r2, #15
 800ac3c:	d00a      	beq.n	800ac54 <_strtod_l+0x54c>
 800ac3e:	4912      	ldr	r1, [pc, #72]	@ (800ac88 <_strtod_l+0x580>)
 800ac40:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ac44:	ed91 7b00 	vldr	d7, [r1]
 800ac48:	ec4b ab16 	vmov	d6, sl, fp
 800ac4c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ac50:	ec5b ab17 	vmov	sl, fp, d7
 800ac54:	1112      	asrs	r2, r2, #4
 800ac56:	d0de      	beq.n	800ac16 <_strtod_l+0x50e>
 800ac58:	2a1f      	cmp	r2, #31
 800ac5a:	dd1f      	ble.n	800ac9c <_strtod_l+0x594>
 800ac5c:	2400      	movs	r4, #0
 800ac5e:	4625      	mov	r5, r4
 800ac60:	9407      	str	r4, [sp, #28]
 800ac62:	4626      	mov	r6, r4
 800ac64:	9a05      	ldr	r2, [sp, #20]
 800ac66:	2322      	movs	r3, #34	@ 0x22
 800ac68:	f04f 0a00 	mov.w	sl, #0
 800ac6c:	f04f 0b00 	mov.w	fp, #0
 800ac70:	6013      	str	r3, [r2, #0]
 800ac72:	e76a      	b.n	800ab4a <_strtod_l+0x442>
 800ac74:	0800cda9 	.word	0x0800cda9
 800ac78:	0800d070 	.word	0x0800d070
 800ac7c:	0800cda1 	.word	0x0800cda1
 800ac80:	0800cdd8 	.word	0x0800cdd8
 800ac84:	0800cf11 	.word	0x0800cf11
 800ac88:	0800cfa8 	.word	0x0800cfa8
 800ac8c:	0800cf80 	.word	0x0800cf80
 800ac90:	7ca00000 	.word	0x7ca00000
 800ac94:	7ff00000 	.word	0x7ff00000
 800ac98:	7fefffff 	.word	0x7fefffff
 800ac9c:	f012 0110 	ands.w	r1, r2, #16
 800aca0:	bf18      	it	ne
 800aca2:	216a      	movne	r1, #106	@ 0x6a
 800aca4:	9106      	str	r1, [sp, #24]
 800aca6:	ec4b ab17 	vmov	d7, sl, fp
 800acaa:	49af      	ldr	r1, [pc, #700]	@ (800af68 <_strtod_l+0x860>)
 800acac:	2000      	movs	r0, #0
 800acae:	07d6      	lsls	r6, r2, #31
 800acb0:	d504      	bpl.n	800acbc <_strtod_l+0x5b4>
 800acb2:	ed91 6b00 	vldr	d6, [r1]
 800acb6:	2001      	movs	r0, #1
 800acb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acbc:	1052      	asrs	r2, r2, #1
 800acbe:	f101 0108 	add.w	r1, r1, #8
 800acc2:	d1f4      	bne.n	800acae <_strtod_l+0x5a6>
 800acc4:	b108      	cbz	r0, 800acca <_strtod_l+0x5c2>
 800acc6:	ec5b ab17 	vmov	sl, fp, d7
 800acca:	9a06      	ldr	r2, [sp, #24]
 800accc:	b1b2      	cbz	r2, 800acfc <_strtod_l+0x5f4>
 800acce:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800acd2:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	4658      	mov	r0, fp
 800acda:	dd0f      	ble.n	800acfc <_strtod_l+0x5f4>
 800acdc:	2a1f      	cmp	r2, #31
 800acde:	dd55      	ble.n	800ad8c <_strtod_l+0x684>
 800ace0:	2a34      	cmp	r2, #52	@ 0x34
 800ace2:	bfde      	ittt	le
 800ace4:	f04f 32ff 	movle.w	r2, #4294967295
 800ace8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800acec:	408a      	lslle	r2, r1
 800acee:	f04f 0a00 	mov.w	sl, #0
 800acf2:	bfcc      	ite	gt
 800acf4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800acf8:	ea02 0b00 	andle.w	fp, r2, r0
 800acfc:	ec4b ab17 	vmov	d7, sl, fp
 800ad00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad08:	d0a8      	beq.n	800ac5c <_strtod_l+0x554>
 800ad0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad0c:	9805      	ldr	r0, [sp, #20]
 800ad0e:	f8cd 9000 	str.w	r9, [sp]
 800ad12:	462a      	mov	r2, r5
 800ad14:	f7ff f8de 	bl	8009ed4 <__s2b>
 800ad18:	9007      	str	r0, [sp, #28]
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	f43f af0a 	beq.w	800ab34 <_strtod_l+0x42c>
 800ad20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad22:	1b3f      	subs	r7, r7, r4
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	bfb4      	ite	lt
 800ad28:	463b      	movlt	r3, r7
 800ad2a:	2300      	movge	r3, #0
 800ad2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad30:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800af58 <_strtod_l+0x850>
 800ad34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ad38:	2400      	movs	r4, #0
 800ad3a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad3c:	4625      	mov	r5, r4
 800ad3e:	9b07      	ldr	r3, [sp, #28]
 800ad40:	9805      	ldr	r0, [sp, #20]
 800ad42:	6859      	ldr	r1, [r3, #4]
 800ad44:	f7ff f81e 	bl	8009d84 <_Balloc>
 800ad48:	4606      	mov	r6, r0
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	f43f aef6 	beq.w	800ab3c <_strtod_l+0x434>
 800ad50:	9b07      	ldr	r3, [sp, #28]
 800ad52:	691a      	ldr	r2, [r3, #16]
 800ad54:	ec4b ab19 	vmov	d9, sl, fp
 800ad58:	3202      	adds	r2, #2
 800ad5a:	f103 010c 	add.w	r1, r3, #12
 800ad5e:	0092      	lsls	r2, r2, #2
 800ad60:	300c      	adds	r0, #12
 800ad62:	f000 fef3 	bl	800bb4c <memcpy>
 800ad66:	eeb0 0b49 	vmov.f64	d0, d9
 800ad6a:	9805      	ldr	r0, [sp, #20]
 800ad6c:	aa14      	add	r2, sp, #80	@ 0x50
 800ad6e:	a913      	add	r1, sp, #76	@ 0x4c
 800ad70:	f7ff fbe4 	bl	800a53c <__d2b>
 800ad74:	9012      	str	r0, [sp, #72]	@ 0x48
 800ad76:	2800      	cmp	r0, #0
 800ad78:	f43f aee0 	beq.w	800ab3c <_strtod_l+0x434>
 800ad7c:	9805      	ldr	r0, [sp, #20]
 800ad7e:	2101      	movs	r1, #1
 800ad80:	f7ff f93e 	bl	800a000 <__i2b>
 800ad84:	4605      	mov	r5, r0
 800ad86:	b940      	cbnz	r0, 800ad9a <_strtod_l+0x692>
 800ad88:	2500      	movs	r5, #0
 800ad8a:	e6d7      	b.n	800ab3c <_strtod_l+0x434>
 800ad8c:	f04f 31ff 	mov.w	r1, #4294967295
 800ad90:	fa01 f202 	lsl.w	r2, r1, r2
 800ad94:	ea02 0a0a 	and.w	sl, r2, sl
 800ad98:	e7b0      	b.n	800acfc <_strtod_l+0x5f4>
 800ad9a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ad9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad9e:	2f00      	cmp	r7, #0
 800ada0:	bfab      	itete	ge
 800ada2:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ada4:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ada6:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800adaa:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800adae:	bfac      	ite	ge
 800adb0:	eb07 0903 	addge.w	r9, r7, r3
 800adb4:	eba3 0807 	sublt.w	r8, r3, r7
 800adb8:	9b06      	ldr	r3, [sp, #24]
 800adba:	1aff      	subs	r7, r7, r3
 800adbc:	4417      	add	r7, r2
 800adbe:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800adc2:	4a6a      	ldr	r2, [pc, #424]	@ (800af6c <_strtod_l+0x864>)
 800adc4:	3f01      	subs	r7, #1
 800adc6:	4297      	cmp	r7, r2
 800adc8:	da51      	bge.n	800ae6e <_strtod_l+0x766>
 800adca:	1bd1      	subs	r1, r2, r7
 800adcc:	291f      	cmp	r1, #31
 800adce:	eba3 0301 	sub.w	r3, r3, r1
 800add2:	f04f 0201 	mov.w	r2, #1
 800add6:	dc3e      	bgt.n	800ae56 <_strtod_l+0x74e>
 800add8:	408a      	lsls	r2, r1
 800adda:	920c      	str	r2, [sp, #48]	@ 0x30
 800addc:	2200      	movs	r2, #0
 800adde:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ade0:	eb09 0703 	add.w	r7, r9, r3
 800ade4:	4498      	add	r8, r3
 800ade6:	9b06      	ldr	r3, [sp, #24]
 800ade8:	45b9      	cmp	r9, r7
 800adea:	4498      	add	r8, r3
 800adec:	464b      	mov	r3, r9
 800adee:	bfa8      	it	ge
 800adf0:	463b      	movge	r3, r7
 800adf2:	4543      	cmp	r3, r8
 800adf4:	bfa8      	it	ge
 800adf6:	4643      	movge	r3, r8
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	bfc2      	ittt	gt
 800adfc:	1aff      	subgt	r7, r7, r3
 800adfe:	eba8 0803 	subgt.w	r8, r8, r3
 800ae02:	eba9 0903 	subgt.w	r9, r9, r3
 800ae06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dd16      	ble.n	800ae3a <_strtod_l+0x732>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	9805      	ldr	r0, [sp, #20]
 800ae10:	461a      	mov	r2, r3
 800ae12:	f7ff f9ad 	bl	800a170 <__pow5mult>
 800ae16:	4605      	mov	r5, r0
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d0b5      	beq.n	800ad88 <_strtod_l+0x680>
 800ae1c:	4601      	mov	r1, r0
 800ae1e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae20:	9805      	ldr	r0, [sp, #20]
 800ae22:	f7ff f903 	bl	800a02c <__multiply>
 800ae26:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	f43f ae87 	beq.w	800ab3c <_strtod_l+0x434>
 800ae2e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae30:	9805      	ldr	r0, [sp, #20]
 800ae32:	f7fe ffe7 	bl	8009e04 <_Bfree>
 800ae36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae38:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae3a:	2f00      	cmp	r7, #0
 800ae3c:	dc1b      	bgt.n	800ae76 <_strtod_l+0x76e>
 800ae3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dd21      	ble.n	800ae88 <_strtod_l+0x780>
 800ae44:	4631      	mov	r1, r6
 800ae46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae48:	9805      	ldr	r0, [sp, #20]
 800ae4a:	f7ff f991 	bl	800a170 <__pow5mult>
 800ae4e:	4606      	mov	r6, r0
 800ae50:	b9d0      	cbnz	r0, 800ae88 <_strtod_l+0x780>
 800ae52:	2600      	movs	r6, #0
 800ae54:	e672      	b.n	800ab3c <_strtod_l+0x434>
 800ae56:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ae5a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ae5e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ae62:	37e2      	adds	r7, #226	@ 0xe2
 800ae64:	fa02 f107 	lsl.w	r1, r2, r7
 800ae68:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae6a:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae6c:	e7b8      	b.n	800ade0 <_strtod_l+0x6d8>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae72:	2201      	movs	r2, #1
 800ae74:	e7f9      	b.n	800ae6a <_strtod_l+0x762>
 800ae76:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae78:	9805      	ldr	r0, [sp, #20]
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	f7ff f9d2 	bl	800a224 <__lshift>
 800ae80:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d1db      	bne.n	800ae3e <_strtod_l+0x736>
 800ae86:	e659      	b.n	800ab3c <_strtod_l+0x434>
 800ae88:	f1b8 0f00 	cmp.w	r8, #0
 800ae8c:	dd07      	ble.n	800ae9e <_strtod_l+0x796>
 800ae8e:	4631      	mov	r1, r6
 800ae90:	9805      	ldr	r0, [sp, #20]
 800ae92:	4642      	mov	r2, r8
 800ae94:	f7ff f9c6 	bl	800a224 <__lshift>
 800ae98:	4606      	mov	r6, r0
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d0d9      	beq.n	800ae52 <_strtod_l+0x74a>
 800ae9e:	f1b9 0f00 	cmp.w	r9, #0
 800aea2:	dd08      	ble.n	800aeb6 <_strtod_l+0x7ae>
 800aea4:	4629      	mov	r1, r5
 800aea6:	9805      	ldr	r0, [sp, #20]
 800aea8:	464a      	mov	r2, r9
 800aeaa:	f7ff f9bb 	bl	800a224 <__lshift>
 800aeae:	4605      	mov	r5, r0
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f43f ae43 	beq.w	800ab3c <_strtod_l+0x434>
 800aeb6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aeb8:	9805      	ldr	r0, [sp, #20]
 800aeba:	4632      	mov	r2, r6
 800aebc:	f7ff fa3a 	bl	800a334 <__mdiff>
 800aec0:	4604      	mov	r4, r0
 800aec2:	2800      	cmp	r0, #0
 800aec4:	f43f ae3a 	beq.w	800ab3c <_strtod_l+0x434>
 800aec8:	2300      	movs	r3, #0
 800aeca:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800aece:	60c3      	str	r3, [r0, #12]
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7ff fa13 	bl	800a2fc <__mcmp>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	da4c      	bge.n	800af74 <_strtod_l+0x86c>
 800aeda:	ea58 080a 	orrs.w	r8, r8, sl
 800aede:	d172      	bne.n	800afc6 <_strtod_l+0x8be>
 800aee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d16e      	bne.n	800afc6 <_strtod_l+0x8be>
 800aee8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aeec:	0d1b      	lsrs	r3, r3, #20
 800aeee:	051b      	lsls	r3, r3, #20
 800aef0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aef4:	d967      	bls.n	800afc6 <_strtod_l+0x8be>
 800aef6:	6963      	ldr	r3, [r4, #20]
 800aef8:	b913      	cbnz	r3, 800af00 <_strtod_l+0x7f8>
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	dd62      	ble.n	800afc6 <_strtod_l+0x8be>
 800af00:	4621      	mov	r1, r4
 800af02:	2201      	movs	r2, #1
 800af04:	9805      	ldr	r0, [sp, #20]
 800af06:	f7ff f98d 	bl	800a224 <__lshift>
 800af0a:	4629      	mov	r1, r5
 800af0c:	4604      	mov	r4, r0
 800af0e:	f7ff f9f5 	bl	800a2fc <__mcmp>
 800af12:	2800      	cmp	r0, #0
 800af14:	dd57      	ble.n	800afc6 <_strtod_l+0x8be>
 800af16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af1a:	9a06      	ldr	r2, [sp, #24]
 800af1c:	0d1b      	lsrs	r3, r3, #20
 800af1e:	051b      	lsls	r3, r3, #20
 800af20:	2a00      	cmp	r2, #0
 800af22:	d06e      	beq.n	800b002 <_strtod_l+0x8fa>
 800af24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800af28:	d86b      	bhi.n	800b002 <_strtod_l+0x8fa>
 800af2a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800af2e:	f67f ae99 	bls.w	800ac64 <_strtod_l+0x55c>
 800af32:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800af60 <_strtod_l+0x858>
 800af36:	ec4b ab16 	vmov	d6, sl, fp
 800af3a:	4b0d      	ldr	r3, [pc, #52]	@ (800af70 <_strtod_l+0x868>)
 800af3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800af40:	ee17 2a90 	vmov	r2, s15
 800af44:	4013      	ands	r3, r2
 800af46:	ec5b ab17 	vmov	sl, fp, d7
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f47f ae01 	bne.w	800ab52 <_strtod_l+0x44a>
 800af50:	9a05      	ldr	r2, [sp, #20]
 800af52:	2322      	movs	r3, #34	@ 0x22
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	e5fc      	b.n	800ab52 <_strtod_l+0x44a>
 800af58:	ffc00000 	.word	0xffc00000
 800af5c:	41dfffff 	.word	0x41dfffff
 800af60:	00000000 	.word	0x00000000
 800af64:	39500000 	.word	0x39500000
 800af68:	0800d098 	.word	0x0800d098
 800af6c:	fffffc02 	.word	0xfffffc02
 800af70:	7ff00000 	.word	0x7ff00000
 800af74:	46d9      	mov	r9, fp
 800af76:	d15d      	bne.n	800b034 <_strtod_l+0x92c>
 800af78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af7c:	f1b8 0f00 	cmp.w	r8, #0
 800af80:	d02a      	beq.n	800afd8 <_strtod_l+0x8d0>
 800af82:	4aa9      	ldr	r2, [pc, #676]	@ (800b228 <_strtod_l+0xb20>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d12a      	bne.n	800afde <_strtod_l+0x8d6>
 800af88:	9b06      	ldr	r3, [sp, #24]
 800af8a:	4652      	mov	r2, sl
 800af8c:	b1fb      	cbz	r3, 800afce <_strtod_l+0x8c6>
 800af8e:	4ba7      	ldr	r3, [pc, #668]	@ (800b22c <_strtod_l+0xb24>)
 800af90:	ea0b 0303 	and.w	r3, fp, r3
 800af94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af98:	f04f 31ff 	mov.w	r1, #4294967295
 800af9c:	d81a      	bhi.n	800afd4 <_strtod_l+0x8cc>
 800af9e:	0d1b      	lsrs	r3, r3, #20
 800afa0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800afa4:	fa01 f303 	lsl.w	r3, r1, r3
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d118      	bne.n	800afde <_strtod_l+0x8d6>
 800afac:	4ba0      	ldr	r3, [pc, #640]	@ (800b230 <_strtod_l+0xb28>)
 800afae:	4599      	cmp	r9, r3
 800afb0:	d102      	bne.n	800afb8 <_strtod_l+0x8b0>
 800afb2:	3201      	adds	r2, #1
 800afb4:	f43f adc2 	beq.w	800ab3c <_strtod_l+0x434>
 800afb8:	4b9c      	ldr	r3, [pc, #624]	@ (800b22c <_strtod_l+0xb24>)
 800afba:	ea09 0303 	and.w	r3, r9, r3
 800afbe:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800afc2:	f04f 0a00 	mov.w	sl, #0
 800afc6:	9b06      	ldr	r3, [sp, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1b2      	bne.n	800af32 <_strtod_l+0x82a>
 800afcc:	e5c1      	b.n	800ab52 <_strtod_l+0x44a>
 800afce:	f04f 33ff 	mov.w	r3, #4294967295
 800afd2:	e7e9      	b.n	800afa8 <_strtod_l+0x8a0>
 800afd4:	460b      	mov	r3, r1
 800afd6:	e7e7      	b.n	800afa8 <_strtod_l+0x8a0>
 800afd8:	ea53 030a 	orrs.w	r3, r3, sl
 800afdc:	d09b      	beq.n	800af16 <_strtod_l+0x80e>
 800afde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe0:	b1c3      	cbz	r3, 800b014 <_strtod_l+0x90c>
 800afe2:	ea13 0f09 	tst.w	r3, r9
 800afe6:	d0ee      	beq.n	800afc6 <_strtod_l+0x8be>
 800afe8:	9a06      	ldr	r2, [sp, #24]
 800afea:	4650      	mov	r0, sl
 800afec:	4659      	mov	r1, fp
 800afee:	f1b8 0f00 	cmp.w	r8, #0
 800aff2:	d013      	beq.n	800b01c <_strtod_l+0x914>
 800aff4:	f7ff fb6d 	bl	800a6d2 <sulp>
 800aff8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800affc:	ec5b ab17 	vmov	sl, fp, d7
 800b000:	e7e1      	b.n	800afc6 <_strtod_l+0x8be>
 800b002:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b006:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b00a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b00e:	f04f 3aff 	mov.w	sl, #4294967295
 800b012:	e7d8      	b.n	800afc6 <_strtod_l+0x8be>
 800b014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b016:	ea13 0f0a 	tst.w	r3, sl
 800b01a:	e7e4      	b.n	800afe6 <_strtod_l+0x8de>
 800b01c:	f7ff fb59 	bl	800a6d2 <sulp>
 800b020:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b024:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02c:	ec5b ab10 	vmov	sl, fp, d0
 800b030:	d1c9      	bne.n	800afc6 <_strtod_l+0x8be>
 800b032:	e617      	b.n	800ac64 <_strtod_l+0x55c>
 800b034:	4629      	mov	r1, r5
 800b036:	4620      	mov	r0, r4
 800b038:	f7ff fad8 	bl	800a5ec <__ratio>
 800b03c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b040:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b048:	d85d      	bhi.n	800b106 <_strtod_l+0x9fe>
 800b04a:	f1b8 0f00 	cmp.w	r8, #0
 800b04e:	d164      	bne.n	800b11a <_strtod_l+0xa12>
 800b050:	f1ba 0f00 	cmp.w	sl, #0
 800b054:	d14b      	bne.n	800b0ee <_strtod_l+0x9e6>
 800b056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b05a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d160      	bne.n	800b124 <_strtod_l+0xa1c>
 800b062:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b066:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06e:	d401      	bmi.n	800b074 <_strtod_l+0x96c>
 800b070:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b074:	eeb1 ab48 	vneg.f64	d10, d8
 800b078:	486c      	ldr	r0, [pc, #432]	@ (800b22c <_strtod_l+0xb24>)
 800b07a:	496e      	ldr	r1, [pc, #440]	@ (800b234 <_strtod_l+0xb2c>)
 800b07c:	ea09 0700 	and.w	r7, r9, r0
 800b080:	428f      	cmp	r7, r1
 800b082:	ec53 2b1a 	vmov	r2, r3, d10
 800b086:	d17d      	bne.n	800b184 <_strtod_l+0xa7c>
 800b088:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b08c:	ec4b ab1c 	vmov	d12, sl, fp
 800b090:	eeb0 0b4c 	vmov.f64	d0, d12
 800b094:	f7ff f9e2 	bl	800a45c <__ulp>
 800b098:	4864      	ldr	r0, [pc, #400]	@ (800b22c <_strtod_l+0xb24>)
 800b09a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b09e:	ee1c 3a90 	vmov	r3, s25
 800b0a2:	4a65      	ldr	r2, [pc, #404]	@ (800b238 <_strtod_l+0xb30>)
 800b0a4:	ea03 0100 	and.w	r1, r3, r0
 800b0a8:	4291      	cmp	r1, r2
 800b0aa:	ec5b ab1c 	vmov	sl, fp, d12
 800b0ae:	d93c      	bls.n	800b12a <_strtod_l+0xa22>
 800b0b0:	ee19 2a90 	vmov	r2, s19
 800b0b4:	4b5e      	ldr	r3, [pc, #376]	@ (800b230 <_strtod_l+0xb28>)
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d104      	bne.n	800b0c4 <_strtod_l+0x9bc>
 800b0ba:	ee19 3a10 	vmov	r3, s18
 800b0be:	3301      	adds	r3, #1
 800b0c0:	f43f ad3c 	beq.w	800ab3c <_strtod_l+0x434>
 800b0c4:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800b230 <_strtod_l+0xb28>
 800b0c8:	f04f 3aff 	mov.w	sl, #4294967295
 800b0cc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	f7fe fe98 	bl	8009e04 <_Bfree>
 800b0d4:	9805      	ldr	r0, [sp, #20]
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	f7fe fe94 	bl	8009e04 <_Bfree>
 800b0dc:	9805      	ldr	r0, [sp, #20]
 800b0de:	4629      	mov	r1, r5
 800b0e0:	f7fe fe90 	bl	8009e04 <_Bfree>
 800b0e4:	9805      	ldr	r0, [sp, #20]
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	f7fe fe8c 	bl	8009e04 <_Bfree>
 800b0ec:	e627      	b.n	800ad3e <_strtod_l+0x636>
 800b0ee:	f1ba 0f01 	cmp.w	sl, #1
 800b0f2:	d103      	bne.n	800b0fc <_strtod_l+0x9f4>
 800b0f4:	f1bb 0f00 	cmp.w	fp, #0
 800b0f8:	f43f adb4 	beq.w	800ac64 <_strtod_l+0x55c>
 800b0fc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b100:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b104:	e7b8      	b.n	800b078 <_strtod_l+0x970>
 800b106:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b10a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b10e:	f1b8 0f00 	cmp.w	r8, #0
 800b112:	d0af      	beq.n	800b074 <_strtod_l+0x96c>
 800b114:	eeb0 ab48 	vmov.f64	d10, d8
 800b118:	e7ae      	b.n	800b078 <_strtod_l+0x970>
 800b11a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b11e:	eeb0 8b4a 	vmov.f64	d8, d10
 800b122:	e7a9      	b.n	800b078 <_strtod_l+0x970>
 800b124:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b128:	e7a6      	b.n	800b078 <_strtod_l+0x970>
 800b12a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b12e:	9b06      	ldr	r3, [sp, #24]
 800b130:	46d9      	mov	r9, fp
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1ca      	bne.n	800b0cc <_strtod_l+0x9c4>
 800b136:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b13a:	0d1b      	lsrs	r3, r3, #20
 800b13c:	051b      	lsls	r3, r3, #20
 800b13e:	429f      	cmp	r7, r3
 800b140:	d1c4      	bne.n	800b0cc <_strtod_l+0x9c4>
 800b142:	ec51 0b18 	vmov	r0, r1, d8
 800b146:	f7f5 fadf 	bl	8000708 <__aeabi_d2lz>
 800b14a:	f7f5 faaf 	bl	80006ac <__aeabi_l2d>
 800b14e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800b152:	ec41 0b17 	vmov	d7, r0, r1
 800b156:	ea49 090a 	orr.w	r9, r9, sl
 800b15a:	ea59 0908 	orrs.w	r9, r9, r8
 800b15e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b162:	d03c      	beq.n	800b1de <_strtod_l+0xad6>
 800b164:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b210 <_strtod_l+0xb08>
 800b168:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b170:	f53f acef 	bmi.w	800ab52 <_strtod_l+0x44a>
 800b174:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800b218 <_strtod_l+0xb10>
 800b178:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b180:	dda4      	ble.n	800b0cc <_strtod_l+0x9c4>
 800b182:	e4e6      	b.n	800ab52 <_strtod_l+0x44a>
 800b184:	9906      	ldr	r1, [sp, #24]
 800b186:	b1e1      	cbz	r1, 800b1c2 <_strtod_l+0xaba>
 800b188:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800b18c:	d819      	bhi.n	800b1c2 <_strtod_l+0xaba>
 800b18e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b196:	d811      	bhi.n	800b1bc <_strtod_l+0xab4>
 800b198:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b19c:	ee18 3a10 	vmov	r3, s16
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	bf38      	it	cc
 800b1a4:	2301      	movcc	r3, #1
 800b1a6:	ee08 3a10 	vmov	s16, r3
 800b1aa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b1ae:	f1b8 0f00 	cmp.w	r8, #0
 800b1b2:	d111      	bne.n	800b1d8 <_strtod_l+0xad0>
 800b1b4:	eeb1 7b48 	vneg.f64	d7, d8
 800b1b8:	ec53 2b17 	vmov	r2, r3, d7
 800b1bc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800b1c0:	1bcb      	subs	r3, r1, r7
 800b1c2:	eeb0 0b49 	vmov.f64	d0, d9
 800b1c6:	ec43 2b1a 	vmov	d10, r2, r3
 800b1ca:	f7ff f947 	bl	800a45c <__ulp>
 800b1ce:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800b1d2:	ec5b ab19 	vmov	sl, fp, d9
 800b1d6:	e7aa      	b.n	800b12e <_strtod_l+0xa26>
 800b1d8:	eeb0 7b48 	vmov.f64	d7, d8
 800b1dc:	e7ec      	b.n	800b1b8 <_strtod_l+0xab0>
 800b1de:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b220 <_strtod_l+0xb18>
 800b1e2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	f57f af6f 	bpl.w	800b0cc <_strtod_l+0x9c4>
 800b1ee:	e4b0      	b.n	800ab52 <_strtod_l+0x44a>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9308      	str	r3, [sp, #32]
 800b1f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1f8:	6013      	str	r3, [r2, #0]
 800b1fa:	f7ff bac4 	b.w	800a786 <_strtod_l+0x7e>
 800b1fe:	2a65      	cmp	r2, #101	@ 0x65
 800b200:	f43f abbf 	beq.w	800a982 <_strtod_l+0x27a>
 800b204:	2a45      	cmp	r2, #69	@ 0x45
 800b206:	f43f abbc 	beq.w	800a982 <_strtod_l+0x27a>
 800b20a:	2101      	movs	r1, #1
 800b20c:	f7ff bbf4 	b.w	800a9f8 <_strtod_l+0x2f0>
 800b210:	94a03595 	.word	0x94a03595
 800b214:	3fdfffff 	.word	0x3fdfffff
 800b218:	35afe535 	.word	0x35afe535
 800b21c:	3fe00000 	.word	0x3fe00000
 800b220:	94a03595 	.word	0x94a03595
 800b224:	3fcfffff 	.word	0x3fcfffff
 800b228:	000fffff 	.word	0x000fffff
 800b22c:	7ff00000 	.word	0x7ff00000
 800b230:	7fefffff 	.word	0x7fefffff
 800b234:	7fe00000 	.word	0x7fe00000
 800b238:	7c9fffff 	.word	0x7c9fffff

0800b23c <_strtod_r>:
 800b23c:	4b01      	ldr	r3, [pc, #4]	@ (800b244 <_strtod_r+0x8>)
 800b23e:	f7ff ba63 	b.w	800a708 <_strtod_l>
 800b242:	bf00      	nop
 800b244:	2400007c 	.word	0x2400007c

0800b248 <_strtol_l.isra.0>:
 800b248:	2b24      	cmp	r3, #36	@ 0x24
 800b24a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24e:	4686      	mov	lr, r0
 800b250:	4690      	mov	r8, r2
 800b252:	d801      	bhi.n	800b258 <_strtol_l.isra.0+0x10>
 800b254:	2b01      	cmp	r3, #1
 800b256:	d106      	bne.n	800b266 <_strtol_l.isra.0+0x1e>
 800b258:	f7fd fe78 	bl	8008f4c <__errno>
 800b25c:	2316      	movs	r3, #22
 800b25e:	6003      	str	r3, [r0, #0]
 800b260:	2000      	movs	r0, #0
 800b262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b266:	4834      	ldr	r0, [pc, #208]	@ (800b338 <_strtol_l.isra.0+0xf0>)
 800b268:	460d      	mov	r5, r1
 800b26a:	462a      	mov	r2, r5
 800b26c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b270:	5d06      	ldrb	r6, [r0, r4]
 800b272:	f016 0608 	ands.w	r6, r6, #8
 800b276:	d1f8      	bne.n	800b26a <_strtol_l.isra.0+0x22>
 800b278:	2c2d      	cmp	r4, #45	@ 0x2d
 800b27a:	d110      	bne.n	800b29e <_strtol_l.isra.0+0x56>
 800b27c:	782c      	ldrb	r4, [r5, #0]
 800b27e:	2601      	movs	r6, #1
 800b280:	1c95      	adds	r5, r2, #2
 800b282:	f033 0210 	bics.w	r2, r3, #16
 800b286:	d115      	bne.n	800b2b4 <_strtol_l.isra.0+0x6c>
 800b288:	2c30      	cmp	r4, #48	@ 0x30
 800b28a:	d10d      	bne.n	800b2a8 <_strtol_l.isra.0+0x60>
 800b28c:	782a      	ldrb	r2, [r5, #0]
 800b28e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b292:	2a58      	cmp	r2, #88	@ 0x58
 800b294:	d108      	bne.n	800b2a8 <_strtol_l.isra.0+0x60>
 800b296:	786c      	ldrb	r4, [r5, #1]
 800b298:	3502      	adds	r5, #2
 800b29a:	2310      	movs	r3, #16
 800b29c:	e00a      	b.n	800b2b4 <_strtol_l.isra.0+0x6c>
 800b29e:	2c2b      	cmp	r4, #43	@ 0x2b
 800b2a0:	bf04      	itt	eq
 800b2a2:	782c      	ldrbeq	r4, [r5, #0]
 800b2a4:	1c95      	addeq	r5, r2, #2
 800b2a6:	e7ec      	b.n	800b282 <_strtol_l.isra.0+0x3a>
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d1f6      	bne.n	800b29a <_strtol_l.isra.0+0x52>
 800b2ac:	2c30      	cmp	r4, #48	@ 0x30
 800b2ae:	bf14      	ite	ne
 800b2b0:	230a      	movne	r3, #10
 800b2b2:	2308      	moveq	r3, #8
 800b2b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b2b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b2bc:	2200      	movs	r2, #0
 800b2be:	fbbc f9f3 	udiv	r9, ip, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	fb03 ca19 	mls	sl, r3, r9, ip
 800b2c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b2cc:	2f09      	cmp	r7, #9
 800b2ce:	d80f      	bhi.n	800b2f0 <_strtol_l.isra.0+0xa8>
 800b2d0:	463c      	mov	r4, r7
 800b2d2:	42a3      	cmp	r3, r4
 800b2d4:	dd1b      	ble.n	800b30e <_strtol_l.isra.0+0xc6>
 800b2d6:	1c57      	adds	r7, r2, #1
 800b2d8:	d007      	beq.n	800b2ea <_strtol_l.isra.0+0xa2>
 800b2da:	4581      	cmp	r9, r0
 800b2dc:	d314      	bcc.n	800b308 <_strtol_l.isra.0+0xc0>
 800b2de:	d101      	bne.n	800b2e4 <_strtol_l.isra.0+0x9c>
 800b2e0:	45a2      	cmp	sl, r4
 800b2e2:	db11      	blt.n	800b308 <_strtol_l.isra.0+0xc0>
 800b2e4:	fb00 4003 	mla	r0, r0, r3, r4
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2ee:	e7eb      	b.n	800b2c8 <_strtol_l.isra.0+0x80>
 800b2f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b2f4:	2f19      	cmp	r7, #25
 800b2f6:	d801      	bhi.n	800b2fc <_strtol_l.isra.0+0xb4>
 800b2f8:	3c37      	subs	r4, #55	@ 0x37
 800b2fa:	e7ea      	b.n	800b2d2 <_strtol_l.isra.0+0x8a>
 800b2fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b300:	2f19      	cmp	r7, #25
 800b302:	d804      	bhi.n	800b30e <_strtol_l.isra.0+0xc6>
 800b304:	3c57      	subs	r4, #87	@ 0x57
 800b306:	e7e4      	b.n	800b2d2 <_strtol_l.isra.0+0x8a>
 800b308:	f04f 32ff 	mov.w	r2, #4294967295
 800b30c:	e7ed      	b.n	800b2ea <_strtol_l.isra.0+0xa2>
 800b30e:	1c53      	adds	r3, r2, #1
 800b310:	d108      	bne.n	800b324 <_strtol_l.isra.0+0xdc>
 800b312:	2322      	movs	r3, #34	@ 0x22
 800b314:	f8ce 3000 	str.w	r3, [lr]
 800b318:	4660      	mov	r0, ip
 800b31a:	f1b8 0f00 	cmp.w	r8, #0
 800b31e:	d0a0      	beq.n	800b262 <_strtol_l.isra.0+0x1a>
 800b320:	1e69      	subs	r1, r5, #1
 800b322:	e006      	b.n	800b332 <_strtol_l.isra.0+0xea>
 800b324:	b106      	cbz	r6, 800b328 <_strtol_l.isra.0+0xe0>
 800b326:	4240      	negs	r0, r0
 800b328:	f1b8 0f00 	cmp.w	r8, #0
 800b32c:	d099      	beq.n	800b262 <_strtol_l.isra.0+0x1a>
 800b32e:	2a00      	cmp	r2, #0
 800b330:	d1f6      	bne.n	800b320 <_strtol_l.isra.0+0xd8>
 800b332:	f8c8 1000 	str.w	r1, [r8]
 800b336:	e794      	b.n	800b262 <_strtol_l.isra.0+0x1a>
 800b338:	0800d0c1 	.word	0x0800d0c1

0800b33c <_strtol_r>:
 800b33c:	f7ff bf84 	b.w	800b248 <_strtol_l.isra.0>

0800b340 <__ssputs_r>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	688e      	ldr	r6, [r1, #8]
 800b346:	461f      	mov	r7, r3
 800b348:	42be      	cmp	r6, r7
 800b34a:	680b      	ldr	r3, [r1, #0]
 800b34c:	4682      	mov	sl, r0
 800b34e:	460c      	mov	r4, r1
 800b350:	4690      	mov	r8, r2
 800b352:	d82d      	bhi.n	800b3b0 <__ssputs_r+0x70>
 800b354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b358:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b35c:	d026      	beq.n	800b3ac <__ssputs_r+0x6c>
 800b35e:	6965      	ldr	r5, [r4, #20]
 800b360:	6909      	ldr	r1, [r1, #16]
 800b362:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b366:	eba3 0901 	sub.w	r9, r3, r1
 800b36a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b36e:	1c7b      	adds	r3, r7, #1
 800b370:	444b      	add	r3, r9
 800b372:	106d      	asrs	r5, r5, #1
 800b374:	429d      	cmp	r5, r3
 800b376:	bf38      	it	cc
 800b378:	461d      	movcc	r5, r3
 800b37a:	0553      	lsls	r3, r2, #21
 800b37c:	d527      	bpl.n	800b3ce <__ssputs_r+0x8e>
 800b37e:	4629      	mov	r1, r5
 800b380:	f7fe fc74 	bl	8009c6c <_malloc_r>
 800b384:	4606      	mov	r6, r0
 800b386:	b360      	cbz	r0, 800b3e2 <__ssputs_r+0xa2>
 800b388:	6921      	ldr	r1, [r4, #16]
 800b38a:	464a      	mov	r2, r9
 800b38c:	f000 fbde 	bl	800bb4c <memcpy>
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b39a:	81a3      	strh	r3, [r4, #12]
 800b39c:	6126      	str	r6, [r4, #16]
 800b39e:	6165      	str	r5, [r4, #20]
 800b3a0:	444e      	add	r6, r9
 800b3a2:	eba5 0509 	sub.w	r5, r5, r9
 800b3a6:	6026      	str	r6, [r4, #0]
 800b3a8:	60a5      	str	r5, [r4, #8]
 800b3aa:	463e      	mov	r6, r7
 800b3ac:	42be      	cmp	r6, r7
 800b3ae:	d900      	bls.n	800b3b2 <__ssputs_r+0x72>
 800b3b0:	463e      	mov	r6, r7
 800b3b2:	6820      	ldr	r0, [r4, #0]
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4641      	mov	r1, r8
 800b3b8:	f000 fb6a 	bl	800ba90 <memmove>
 800b3bc:	68a3      	ldr	r3, [r4, #8]
 800b3be:	1b9b      	subs	r3, r3, r6
 800b3c0:	60a3      	str	r3, [r4, #8]
 800b3c2:	6823      	ldr	r3, [r4, #0]
 800b3c4:	4433      	add	r3, r6
 800b3c6:	6023      	str	r3, [r4, #0]
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ce:	462a      	mov	r2, r5
 800b3d0:	f000 ff4f 	bl	800c272 <_realloc_r>
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	d1e0      	bne.n	800b39c <__ssputs_r+0x5c>
 800b3da:	6921      	ldr	r1, [r4, #16]
 800b3dc:	4650      	mov	r0, sl
 800b3de:	f7fe fbd1 	bl	8009b84 <_free_r>
 800b3e2:	230c      	movs	r3, #12
 800b3e4:	f8ca 3000 	str.w	r3, [sl]
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	e7e9      	b.n	800b3ca <__ssputs_r+0x8a>
	...

0800b3f8 <_svfiprintf_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	4698      	mov	r8, r3
 800b3fe:	898b      	ldrh	r3, [r1, #12]
 800b400:	061b      	lsls	r3, r3, #24
 800b402:	b09d      	sub	sp, #116	@ 0x74
 800b404:	4607      	mov	r7, r0
 800b406:	460d      	mov	r5, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	d510      	bpl.n	800b42e <_svfiprintf_r+0x36>
 800b40c:	690b      	ldr	r3, [r1, #16]
 800b40e:	b973      	cbnz	r3, 800b42e <_svfiprintf_r+0x36>
 800b410:	2140      	movs	r1, #64	@ 0x40
 800b412:	f7fe fc2b 	bl	8009c6c <_malloc_r>
 800b416:	6028      	str	r0, [r5, #0]
 800b418:	6128      	str	r0, [r5, #16]
 800b41a:	b930      	cbnz	r0, 800b42a <_svfiprintf_r+0x32>
 800b41c:	230c      	movs	r3, #12
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	b01d      	add	sp, #116	@ 0x74
 800b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42a:	2340      	movs	r3, #64	@ 0x40
 800b42c:	616b      	str	r3, [r5, #20]
 800b42e:	2300      	movs	r3, #0
 800b430:	9309      	str	r3, [sp, #36]	@ 0x24
 800b432:	2320      	movs	r3, #32
 800b434:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b438:	f8cd 800c 	str.w	r8, [sp, #12]
 800b43c:	2330      	movs	r3, #48	@ 0x30
 800b43e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5dc <_svfiprintf_r+0x1e4>
 800b442:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b446:	f04f 0901 	mov.w	r9, #1
 800b44a:	4623      	mov	r3, r4
 800b44c:	469a      	mov	sl, r3
 800b44e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b452:	b10a      	cbz	r2, 800b458 <_svfiprintf_r+0x60>
 800b454:	2a25      	cmp	r2, #37	@ 0x25
 800b456:	d1f9      	bne.n	800b44c <_svfiprintf_r+0x54>
 800b458:	ebba 0b04 	subs.w	fp, sl, r4
 800b45c:	d00b      	beq.n	800b476 <_svfiprintf_r+0x7e>
 800b45e:	465b      	mov	r3, fp
 800b460:	4622      	mov	r2, r4
 800b462:	4629      	mov	r1, r5
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff ff6b 	bl	800b340 <__ssputs_r>
 800b46a:	3001      	adds	r0, #1
 800b46c:	f000 80a7 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b470:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b472:	445a      	add	r2, fp
 800b474:	9209      	str	r2, [sp, #36]	@ 0x24
 800b476:	f89a 3000 	ldrb.w	r3, [sl]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 809f 	beq.w	800b5be <_svfiprintf_r+0x1c6>
 800b480:	2300      	movs	r3, #0
 800b482:	f04f 32ff 	mov.w	r2, #4294967295
 800b486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b48a:	f10a 0a01 	add.w	sl, sl, #1
 800b48e:	9304      	str	r3, [sp, #16]
 800b490:	9307      	str	r3, [sp, #28]
 800b492:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b496:	931a      	str	r3, [sp, #104]	@ 0x68
 800b498:	4654      	mov	r4, sl
 800b49a:	2205      	movs	r2, #5
 800b49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a0:	484e      	ldr	r0, [pc, #312]	@ (800b5dc <_svfiprintf_r+0x1e4>)
 800b4a2:	f7f4 ff1d 	bl	80002e0 <memchr>
 800b4a6:	9a04      	ldr	r2, [sp, #16]
 800b4a8:	b9d8      	cbnz	r0, 800b4e2 <_svfiprintf_r+0xea>
 800b4aa:	06d0      	lsls	r0, r2, #27
 800b4ac:	bf44      	itt	mi
 800b4ae:	2320      	movmi	r3, #32
 800b4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4b4:	0711      	lsls	r1, r2, #28
 800b4b6:	bf44      	itt	mi
 800b4b8:	232b      	movmi	r3, #43	@ 0x2b
 800b4ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4be:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4c4:	d015      	beq.n	800b4f2 <_svfiprintf_r+0xfa>
 800b4c6:	9a07      	ldr	r2, [sp, #28]
 800b4c8:	4654      	mov	r4, sl
 800b4ca:	2000      	movs	r0, #0
 800b4cc:	f04f 0c0a 	mov.w	ip, #10
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4d6:	3b30      	subs	r3, #48	@ 0x30
 800b4d8:	2b09      	cmp	r3, #9
 800b4da:	d94b      	bls.n	800b574 <_svfiprintf_r+0x17c>
 800b4dc:	b1b0      	cbz	r0, 800b50c <_svfiprintf_r+0x114>
 800b4de:	9207      	str	r2, [sp, #28]
 800b4e0:	e014      	b.n	800b50c <_svfiprintf_r+0x114>
 800b4e2:	eba0 0308 	sub.w	r3, r0, r8
 800b4e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	46a2      	mov	sl, r4
 800b4f0:	e7d2      	b.n	800b498 <_svfiprintf_r+0xa0>
 800b4f2:	9b03      	ldr	r3, [sp, #12]
 800b4f4:	1d19      	adds	r1, r3, #4
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	9103      	str	r1, [sp, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bfbb      	ittet	lt
 800b4fe:	425b      	neglt	r3, r3
 800b500:	f042 0202 	orrlt.w	r2, r2, #2
 800b504:	9307      	strge	r3, [sp, #28]
 800b506:	9307      	strlt	r3, [sp, #28]
 800b508:	bfb8      	it	lt
 800b50a:	9204      	strlt	r2, [sp, #16]
 800b50c:	7823      	ldrb	r3, [r4, #0]
 800b50e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b510:	d10a      	bne.n	800b528 <_svfiprintf_r+0x130>
 800b512:	7863      	ldrb	r3, [r4, #1]
 800b514:	2b2a      	cmp	r3, #42	@ 0x2a
 800b516:	d132      	bne.n	800b57e <_svfiprintf_r+0x186>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	1d1a      	adds	r2, r3, #4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	9203      	str	r2, [sp, #12]
 800b520:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b524:	3402      	adds	r4, #2
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b5ec <_svfiprintf_r+0x1f4>
 800b52c:	7821      	ldrb	r1, [r4, #0]
 800b52e:	2203      	movs	r2, #3
 800b530:	4650      	mov	r0, sl
 800b532:	f7f4 fed5 	bl	80002e0 <memchr>
 800b536:	b138      	cbz	r0, 800b548 <_svfiprintf_r+0x150>
 800b538:	9b04      	ldr	r3, [sp, #16]
 800b53a:	eba0 000a 	sub.w	r0, r0, sl
 800b53e:	2240      	movs	r2, #64	@ 0x40
 800b540:	4082      	lsls	r2, r0
 800b542:	4313      	orrs	r3, r2
 800b544:	3401      	adds	r4, #1
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b54c:	4824      	ldr	r0, [pc, #144]	@ (800b5e0 <_svfiprintf_r+0x1e8>)
 800b54e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b552:	2206      	movs	r2, #6
 800b554:	f7f4 fec4 	bl	80002e0 <memchr>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d036      	beq.n	800b5ca <_svfiprintf_r+0x1d2>
 800b55c:	4b21      	ldr	r3, [pc, #132]	@ (800b5e4 <_svfiprintf_r+0x1ec>)
 800b55e:	bb1b      	cbnz	r3, 800b5a8 <_svfiprintf_r+0x1b0>
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	3307      	adds	r3, #7
 800b564:	f023 0307 	bic.w	r3, r3, #7
 800b568:	3308      	adds	r3, #8
 800b56a:	9303      	str	r3, [sp, #12]
 800b56c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b56e:	4433      	add	r3, r6
 800b570:	9309      	str	r3, [sp, #36]	@ 0x24
 800b572:	e76a      	b.n	800b44a <_svfiprintf_r+0x52>
 800b574:	fb0c 3202 	mla	r2, ip, r2, r3
 800b578:	460c      	mov	r4, r1
 800b57a:	2001      	movs	r0, #1
 800b57c:	e7a8      	b.n	800b4d0 <_svfiprintf_r+0xd8>
 800b57e:	2300      	movs	r3, #0
 800b580:	3401      	adds	r4, #1
 800b582:	9305      	str	r3, [sp, #20]
 800b584:	4619      	mov	r1, r3
 800b586:	f04f 0c0a 	mov.w	ip, #10
 800b58a:	4620      	mov	r0, r4
 800b58c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b590:	3a30      	subs	r2, #48	@ 0x30
 800b592:	2a09      	cmp	r2, #9
 800b594:	d903      	bls.n	800b59e <_svfiprintf_r+0x1a6>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0c6      	beq.n	800b528 <_svfiprintf_r+0x130>
 800b59a:	9105      	str	r1, [sp, #20]
 800b59c:	e7c4      	b.n	800b528 <_svfiprintf_r+0x130>
 800b59e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e7f0      	b.n	800b58a <_svfiprintf_r+0x192>
 800b5a8:	ab03      	add	r3, sp, #12
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e8 <_svfiprintf_r+0x1f0>)
 800b5b0:	a904      	add	r1, sp, #16
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	f7fc fca0 	bl	8007ef8 <_printf_float>
 800b5b8:	1c42      	adds	r2, r0, #1
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	d1d6      	bne.n	800b56c <_svfiprintf_r+0x174>
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	065b      	lsls	r3, r3, #25
 800b5c2:	f53f af2d 	bmi.w	800b420 <_svfiprintf_r+0x28>
 800b5c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5c8:	e72c      	b.n	800b424 <_svfiprintf_r+0x2c>
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	462a      	mov	r2, r5
 800b5d0:	4b05      	ldr	r3, [pc, #20]	@ (800b5e8 <_svfiprintf_r+0x1f0>)
 800b5d2:	a904      	add	r1, sp, #16
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f7fc ff17 	bl	8008408 <_printf_i>
 800b5da:	e7ed      	b.n	800b5b8 <_svfiprintf_r+0x1c0>
 800b5dc:	0800cebd 	.word	0x0800cebd
 800b5e0:	0800cec7 	.word	0x0800cec7
 800b5e4:	08007ef9 	.word	0x08007ef9
 800b5e8:	0800b341 	.word	0x0800b341
 800b5ec:	0800cec3 	.word	0x0800cec3

0800b5f0 <__sfputc_r>:
 800b5f0:	6893      	ldr	r3, [r2, #8]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	b410      	push	{r4}
 800b5f8:	6093      	str	r3, [r2, #8]
 800b5fa:	da08      	bge.n	800b60e <__sfputc_r+0x1e>
 800b5fc:	6994      	ldr	r4, [r2, #24]
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	db01      	blt.n	800b606 <__sfputc_r+0x16>
 800b602:	290a      	cmp	r1, #10
 800b604:	d103      	bne.n	800b60e <__sfputc_r+0x1e>
 800b606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b60a:	f7fd bbb8 	b.w	8008d7e <__swbuf_r>
 800b60e:	6813      	ldr	r3, [r2, #0]
 800b610:	1c58      	adds	r0, r3, #1
 800b612:	6010      	str	r0, [r2, #0]
 800b614:	7019      	strb	r1, [r3, #0]
 800b616:	4608      	mov	r0, r1
 800b618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <__sfputs_r>:
 800b61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b620:	4606      	mov	r6, r0
 800b622:	460f      	mov	r7, r1
 800b624:	4614      	mov	r4, r2
 800b626:	18d5      	adds	r5, r2, r3
 800b628:	42ac      	cmp	r4, r5
 800b62a:	d101      	bne.n	800b630 <__sfputs_r+0x12>
 800b62c:	2000      	movs	r0, #0
 800b62e:	e007      	b.n	800b640 <__sfputs_r+0x22>
 800b630:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b634:	463a      	mov	r2, r7
 800b636:	4630      	mov	r0, r6
 800b638:	f7ff ffda 	bl	800b5f0 <__sfputc_r>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d1f3      	bne.n	800b628 <__sfputs_r+0xa>
 800b640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b644 <_vfiprintf_r>:
 800b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	460d      	mov	r5, r1
 800b64a:	b09d      	sub	sp, #116	@ 0x74
 800b64c:	4614      	mov	r4, r2
 800b64e:	4698      	mov	r8, r3
 800b650:	4606      	mov	r6, r0
 800b652:	b118      	cbz	r0, 800b65c <_vfiprintf_r+0x18>
 800b654:	6a03      	ldr	r3, [r0, #32]
 800b656:	b90b      	cbnz	r3, 800b65c <_vfiprintf_r+0x18>
 800b658:	f7fd fa86 	bl	8008b68 <__sinit>
 800b65c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b65e:	07d9      	lsls	r1, r3, #31
 800b660:	d405      	bmi.n	800b66e <_vfiprintf_r+0x2a>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	059a      	lsls	r2, r3, #22
 800b666:	d402      	bmi.n	800b66e <_vfiprintf_r+0x2a>
 800b668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b66a:	f7fd fc9a 	bl	8008fa2 <__retarget_lock_acquire_recursive>
 800b66e:	89ab      	ldrh	r3, [r5, #12]
 800b670:	071b      	lsls	r3, r3, #28
 800b672:	d501      	bpl.n	800b678 <_vfiprintf_r+0x34>
 800b674:	692b      	ldr	r3, [r5, #16]
 800b676:	b99b      	cbnz	r3, 800b6a0 <_vfiprintf_r+0x5c>
 800b678:	4629      	mov	r1, r5
 800b67a:	4630      	mov	r0, r6
 800b67c:	f7fd fbbe 	bl	8008dfc <__swsetup_r>
 800b680:	b170      	cbz	r0, 800b6a0 <_vfiprintf_r+0x5c>
 800b682:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b684:	07dc      	lsls	r4, r3, #31
 800b686:	d504      	bpl.n	800b692 <_vfiprintf_r+0x4e>
 800b688:	f04f 30ff 	mov.w	r0, #4294967295
 800b68c:	b01d      	add	sp, #116	@ 0x74
 800b68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b692:	89ab      	ldrh	r3, [r5, #12]
 800b694:	0598      	lsls	r0, r3, #22
 800b696:	d4f7      	bmi.n	800b688 <_vfiprintf_r+0x44>
 800b698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b69a:	f7fd fc83 	bl	8008fa4 <__retarget_lock_release_recursive>
 800b69e:	e7f3      	b.n	800b688 <_vfiprintf_r+0x44>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a4:	2320      	movs	r3, #32
 800b6a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ae:	2330      	movs	r3, #48	@ 0x30
 800b6b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b860 <_vfiprintf_r+0x21c>
 800b6b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b6b8:	f04f 0901 	mov.w	r9, #1
 800b6bc:	4623      	mov	r3, r4
 800b6be:	469a      	mov	sl, r3
 800b6c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c4:	b10a      	cbz	r2, 800b6ca <_vfiprintf_r+0x86>
 800b6c6:	2a25      	cmp	r2, #37	@ 0x25
 800b6c8:	d1f9      	bne.n	800b6be <_vfiprintf_r+0x7a>
 800b6ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ce:	d00b      	beq.n	800b6e8 <_vfiprintf_r+0xa4>
 800b6d0:	465b      	mov	r3, fp
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7ff ffa1 	bl	800b61e <__sfputs_r>
 800b6dc:	3001      	adds	r0, #1
 800b6de:	f000 80a7 	beq.w	800b830 <_vfiprintf_r+0x1ec>
 800b6e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6e4:	445a      	add	r2, fp
 800b6e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f000 809f 	beq.w	800b830 <_vfiprintf_r+0x1ec>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6fc:	f10a 0a01 	add.w	sl, sl, #1
 800b700:	9304      	str	r3, [sp, #16]
 800b702:	9307      	str	r3, [sp, #28]
 800b704:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b708:	931a      	str	r3, [sp, #104]	@ 0x68
 800b70a:	4654      	mov	r4, sl
 800b70c:	2205      	movs	r2, #5
 800b70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b712:	4853      	ldr	r0, [pc, #332]	@ (800b860 <_vfiprintf_r+0x21c>)
 800b714:	f7f4 fde4 	bl	80002e0 <memchr>
 800b718:	9a04      	ldr	r2, [sp, #16]
 800b71a:	b9d8      	cbnz	r0, 800b754 <_vfiprintf_r+0x110>
 800b71c:	06d1      	lsls	r1, r2, #27
 800b71e:	bf44      	itt	mi
 800b720:	2320      	movmi	r3, #32
 800b722:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b726:	0713      	lsls	r3, r2, #28
 800b728:	bf44      	itt	mi
 800b72a:	232b      	movmi	r3, #43	@ 0x2b
 800b72c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b730:	f89a 3000 	ldrb.w	r3, [sl]
 800b734:	2b2a      	cmp	r3, #42	@ 0x2a
 800b736:	d015      	beq.n	800b764 <_vfiprintf_r+0x120>
 800b738:	9a07      	ldr	r2, [sp, #28]
 800b73a:	4654      	mov	r4, sl
 800b73c:	2000      	movs	r0, #0
 800b73e:	f04f 0c0a 	mov.w	ip, #10
 800b742:	4621      	mov	r1, r4
 800b744:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b748:	3b30      	subs	r3, #48	@ 0x30
 800b74a:	2b09      	cmp	r3, #9
 800b74c:	d94b      	bls.n	800b7e6 <_vfiprintf_r+0x1a2>
 800b74e:	b1b0      	cbz	r0, 800b77e <_vfiprintf_r+0x13a>
 800b750:	9207      	str	r2, [sp, #28]
 800b752:	e014      	b.n	800b77e <_vfiprintf_r+0x13a>
 800b754:	eba0 0308 	sub.w	r3, r0, r8
 800b758:	fa09 f303 	lsl.w	r3, r9, r3
 800b75c:	4313      	orrs	r3, r2
 800b75e:	9304      	str	r3, [sp, #16]
 800b760:	46a2      	mov	sl, r4
 800b762:	e7d2      	b.n	800b70a <_vfiprintf_r+0xc6>
 800b764:	9b03      	ldr	r3, [sp, #12]
 800b766:	1d19      	adds	r1, r3, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	9103      	str	r1, [sp, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bfbb      	ittet	lt
 800b770:	425b      	neglt	r3, r3
 800b772:	f042 0202 	orrlt.w	r2, r2, #2
 800b776:	9307      	strge	r3, [sp, #28]
 800b778:	9307      	strlt	r3, [sp, #28]
 800b77a:	bfb8      	it	lt
 800b77c:	9204      	strlt	r2, [sp, #16]
 800b77e:	7823      	ldrb	r3, [r4, #0]
 800b780:	2b2e      	cmp	r3, #46	@ 0x2e
 800b782:	d10a      	bne.n	800b79a <_vfiprintf_r+0x156>
 800b784:	7863      	ldrb	r3, [r4, #1]
 800b786:	2b2a      	cmp	r3, #42	@ 0x2a
 800b788:	d132      	bne.n	800b7f0 <_vfiprintf_r+0x1ac>
 800b78a:	9b03      	ldr	r3, [sp, #12]
 800b78c:	1d1a      	adds	r2, r3, #4
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	9203      	str	r2, [sp, #12]
 800b792:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b796:	3402      	adds	r4, #2
 800b798:	9305      	str	r3, [sp, #20]
 800b79a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b870 <_vfiprintf_r+0x22c>
 800b79e:	7821      	ldrb	r1, [r4, #0]
 800b7a0:	2203      	movs	r2, #3
 800b7a2:	4650      	mov	r0, sl
 800b7a4:	f7f4 fd9c 	bl	80002e0 <memchr>
 800b7a8:	b138      	cbz	r0, 800b7ba <_vfiprintf_r+0x176>
 800b7aa:	9b04      	ldr	r3, [sp, #16]
 800b7ac:	eba0 000a 	sub.w	r0, r0, sl
 800b7b0:	2240      	movs	r2, #64	@ 0x40
 800b7b2:	4082      	lsls	r2, r0
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	3401      	adds	r4, #1
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7be:	4829      	ldr	r0, [pc, #164]	@ (800b864 <_vfiprintf_r+0x220>)
 800b7c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b7c4:	2206      	movs	r2, #6
 800b7c6:	f7f4 fd8b 	bl	80002e0 <memchr>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d03f      	beq.n	800b84e <_vfiprintf_r+0x20a>
 800b7ce:	4b26      	ldr	r3, [pc, #152]	@ (800b868 <_vfiprintf_r+0x224>)
 800b7d0:	bb1b      	cbnz	r3, 800b81a <_vfiprintf_r+0x1d6>
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	3307      	adds	r3, #7
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	3308      	adds	r3, #8
 800b7dc:	9303      	str	r3, [sp, #12]
 800b7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7e0:	443b      	add	r3, r7
 800b7e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7e4:	e76a      	b.n	800b6bc <_vfiprintf_r+0x78>
 800b7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	2001      	movs	r0, #1
 800b7ee:	e7a8      	b.n	800b742 <_vfiprintf_r+0xfe>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	3401      	adds	r4, #1
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	f04f 0c0a 	mov.w	ip, #10
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b802:	3a30      	subs	r2, #48	@ 0x30
 800b804:	2a09      	cmp	r2, #9
 800b806:	d903      	bls.n	800b810 <_vfiprintf_r+0x1cc>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d0c6      	beq.n	800b79a <_vfiprintf_r+0x156>
 800b80c:	9105      	str	r1, [sp, #20]
 800b80e:	e7c4      	b.n	800b79a <_vfiprintf_r+0x156>
 800b810:	fb0c 2101 	mla	r1, ip, r1, r2
 800b814:	4604      	mov	r4, r0
 800b816:	2301      	movs	r3, #1
 800b818:	e7f0      	b.n	800b7fc <_vfiprintf_r+0x1b8>
 800b81a:	ab03      	add	r3, sp, #12
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	462a      	mov	r2, r5
 800b820:	4b12      	ldr	r3, [pc, #72]	@ (800b86c <_vfiprintf_r+0x228>)
 800b822:	a904      	add	r1, sp, #16
 800b824:	4630      	mov	r0, r6
 800b826:	f7fc fb67 	bl	8007ef8 <_printf_float>
 800b82a:	4607      	mov	r7, r0
 800b82c:	1c78      	adds	r0, r7, #1
 800b82e:	d1d6      	bne.n	800b7de <_vfiprintf_r+0x19a>
 800b830:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b832:	07d9      	lsls	r1, r3, #31
 800b834:	d405      	bmi.n	800b842 <_vfiprintf_r+0x1fe>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	059a      	lsls	r2, r3, #22
 800b83a:	d402      	bmi.n	800b842 <_vfiprintf_r+0x1fe>
 800b83c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b83e:	f7fd fbb1 	bl	8008fa4 <__retarget_lock_release_recursive>
 800b842:	89ab      	ldrh	r3, [r5, #12]
 800b844:	065b      	lsls	r3, r3, #25
 800b846:	f53f af1f 	bmi.w	800b688 <_vfiprintf_r+0x44>
 800b84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b84c:	e71e      	b.n	800b68c <_vfiprintf_r+0x48>
 800b84e:	ab03      	add	r3, sp, #12
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	462a      	mov	r2, r5
 800b854:	4b05      	ldr	r3, [pc, #20]	@ (800b86c <_vfiprintf_r+0x228>)
 800b856:	a904      	add	r1, sp, #16
 800b858:	4630      	mov	r0, r6
 800b85a:	f7fc fdd5 	bl	8008408 <_printf_i>
 800b85e:	e7e4      	b.n	800b82a <_vfiprintf_r+0x1e6>
 800b860:	0800cebd 	.word	0x0800cebd
 800b864:	0800cec7 	.word	0x0800cec7
 800b868:	08007ef9 	.word	0x08007ef9
 800b86c:	0800b61f 	.word	0x0800b61f
 800b870:	0800cec3 	.word	0x0800cec3

0800b874 <__sflush_r>:
 800b874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87c:	0716      	lsls	r6, r2, #28
 800b87e:	4605      	mov	r5, r0
 800b880:	460c      	mov	r4, r1
 800b882:	d454      	bmi.n	800b92e <__sflush_r+0xba>
 800b884:	684b      	ldr	r3, [r1, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	dc02      	bgt.n	800b890 <__sflush_r+0x1c>
 800b88a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dd48      	ble.n	800b922 <__sflush_r+0xae>
 800b890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b892:	2e00      	cmp	r6, #0
 800b894:	d045      	beq.n	800b922 <__sflush_r+0xae>
 800b896:	2300      	movs	r3, #0
 800b898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b89c:	682f      	ldr	r7, [r5, #0]
 800b89e:	6a21      	ldr	r1, [r4, #32]
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	d030      	beq.n	800b906 <__sflush_r+0x92>
 800b8a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8a6:	89a3      	ldrh	r3, [r4, #12]
 800b8a8:	0759      	lsls	r1, r3, #29
 800b8aa:	d505      	bpl.n	800b8b8 <__sflush_r+0x44>
 800b8ac:	6863      	ldr	r3, [r4, #4]
 800b8ae:	1ad2      	subs	r2, r2, r3
 800b8b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8b2:	b10b      	cbz	r3, 800b8b8 <__sflush_r+0x44>
 800b8b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8b6:	1ad2      	subs	r2, r2, r3
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8bc:	6a21      	ldr	r1, [r4, #32]
 800b8be:	4628      	mov	r0, r5
 800b8c0:	47b0      	blx	r6
 800b8c2:	1c43      	adds	r3, r0, #1
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	d106      	bne.n	800b8d6 <__sflush_r+0x62>
 800b8c8:	6829      	ldr	r1, [r5, #0]
 800b8ca:	291d      	cmp	r1, #29
 800b8cc:	d82b      	bhi.n	800b926 <__sflush_r+0xb2>
 800b8ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b978 <__sflush_r+0x104>)
 800b8d0:	40ca      	lsrs	r2, r1
 800b8d2:	07d6      	lsls	r6, r2, #31
 800b8d4:	d527      	bpl.n	800b926 <__sflush_r+0xb2>
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	6062      	str	r2, [r4, #4]
 800b8da:	04d9      	lsls	r1, r3, #19
 800b8dc:	6922      	ldr	r2, [r4, #16]
 800b8de:	6022      	str	r2, [r4, #0]
 800b8e0:	d504      	bpl.n	800b8ec <__sflush_r+0x78>
 800b8e2:	1c42      	adds	r2, r0, #1
 800b8e4:	d101      	bne.n	800b8ea <__sflush_r+0x76>
 800b8e6:	682b      	ldr	r3, [r5, #0]
 800b8e8:	b903      	cbnz	r3, 800b8ec <__sflush_r+0x78>
 800b8ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800b8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8ee:	602f      	str	r7, [r5, #0]
 800b8f0:	b1b9      	cbz	r1, 800b922 <__sflush_r+0xae>
 800b8f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8f6:	4299      	cmp	r1, r3
 800b8f8:	d002      	beq.n	800b900 <__sflush_r+0x8c>
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	f7fe f942 	bl	8009b84 <_free_r>
 800b900:	2300      	movs	r3, #0
 800b902:	6363      	str	r3, [r4, #52]	@ 0x34
 800b904:	e00d      	b.n	800b922 <__sflush_r+0xae>
 800b906:	2301      	movs	r3, #1
 800b908:	4628      	mov	r0, r5
 800b90a:	47b0      	blx	r6
 800b90c:	4602      	mov	r2, r0
 800b90e:	1c50      	adds	r0, r2, #1
 800b910:	d1c9      	bne.n	800b8a6 <__sflush_r+0x32>
 800b912:	682b      	ldr	r3, [r5, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d0c6      	beq.n	800b8a6 <__sflush_r+0x32>
 800b918:	2b1d      	cmp	r3, #29
 800b91a:	d001      	beq.n	800b920 <__sflush_r+0xac>
 800b91c:	2b16      	cmp	r3, #22
 800b91e:	d11e      	bne.n	800b95e <__sflush_r+0xea>
 800b920:	602f      	str	r7, [r5, #0]
 800b922:	2000      	movs	r0, #0
 800b924:	e022      	b.n	800b96c <__sflush_r+0xf8>
 800b926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b92a:	b21b      	sxth	r3, r3
 800b92c:	e01b      	b.n	800b966 <__sflush_r+0xf2>
 800b92e:	690f      	ldr	r7, [r1, #16]
 800b930:	2f00      	cmp	r7, #0
 800b932:	d0f6      	beq.n	800b922 <__sflush_r+0xae>
 800b934:	0793      	lsls	r3, r2, #30
 800b936:	680e      	ldr	r6, [r1, #0]
 800b938:	bf08      	it	eq
 800b93a:	694b      	ldreq	r3, [r1, #20]
 800b93c:	600f      	str	r7, [r1, #0]
 800b93e:	bf18      	it	ne
 800b940:	2300      	movne	r3, #0
 800b942:	eba6 0807 	sub.w	r8, r6, r7
 800b946:	608b      	str	r3, [r1, #8]
 800b948:	f1b8 0f00 	cmp.w	r8, #0
 800b94c:	dde9      	ble.n	800b922 <__sflush_r+0xae>
 800b94e:	6a21      	ldr	r1, [r4, #32]
 800b950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b952:	4643      	mov	r3, r8
 800b954:	463a      	mov	r2, r7
 800b956:	4628      	mov	r0, r5
 800b958:	47b0      	blx	r6
 800b95a:	2800      	cmp	r0, #0
 800b95c:	dc08      	bgt.n	800b970 <__sflush_r+0xfc>
 800b95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b966:	81a3      	strh	r3, [r4, #12]
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b970:	4407      	add	r7, r0
 800b972:	eba8 0800 	sub.w	r8, r8, r0
 800b976:	e7e7      	b.n	800b948 <__sflush_r+0xd4>
 800b978:	20400001 	.word	0x20400001

0800b97c <_fflush_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	690b      	ldr	r3, [r1, #16]
 800b980:	4605      	mov	r5, r0
 800b982:	460c      	mov	r4, r1
 800b984:	b913      	cbnz	r3, 800b98c <_fflush_r+0x10>
 800b986:	2500      	movs	r5, #0
 800b988:	4628      	mov	r0, r5
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	b118      	cbz	r0, 800b996 <_fflush_r+0x1a>
 800b98e:	6a03      	ldr	r3, [r0, #32]
 800b990:	b90b      	cbnz	r3, 800b996 <_fflush_r+0x1a>
 800b992:	f7fd f8e9 	bl	8008b68 <__sinit>
 800b996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d0f3      	beq.n	800b986 <_fflush_r+0xa>
 800b99e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9a0:	07d0      	lsls	r0, r2, #31
 800b9a2:	d404      	bmi.n	800b9ae <_fflush_r+0x32>
 800b9a4:	0599      	lsls	r1, r3, #22
 800b9a6:	d402      	bmi.n	800b9ae <_fflush_r+0x32>
 800b9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9aa:	f7fd fafa 	bl	8008fa2 <__retarget_lock_acquire_recursive>
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	f7ff ff5f 	bl	800b874 <__sflush_r>
 800b9b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9b8:	07da      	lsls	r2, r3, #31
 800b9ba:	4605      	mov	r5, r0
 800b9bc:	d4e4      	bmi.n	800b988 <_fflush_r+0xc>
 800b9be:	89a3      	ldrh	r3, [r4, #12]
 800b9c0:	059b      	lsls	r3, r3, #22
 800b9c2:	d4e1      	bmi.n	800b988 <_fflush_r+0xc>
 800b9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9c6:	f7fd faed 	bl	8008fa4 <__retarget_lock_release_recursive>
 800b9ca:	e7dd      	b.n	800b988 <_fflush_r+0xc>

0800b9cc <__swhatbuf_r>:
 800b9cc:	b570      	push	{r4, r5, r6, lr}
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d4:	2900      	cmp	r1, #0
 800b9d6:	b096      	sub	sp, #88	@ 0x58
 800b9d8:	4615      	mov	r5, r2
 800b9da:	461e      	mov	r6, r3
 800b9dc:	da0d      	bge.n	800b9fa <__swhatbuf_r+0x2e>
 800b9de:	89a3      	ldrh	r3, [r4, #12]
 800b9e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9e4:	f04f 0100 	mov.w	r1, #0
 800b9e8:	bf14      	ite	ne
 800b9ea:	2340      	movne	r3, #64	@ 0x40
 800b9ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	6031      	str	r1, [r6, #0]
 800b9f4:	602b      	str	r3, [r5, #0]
 800b9f6:	b016      	add	sp, #88	@ 0x58
 800b9f8:	bd70      	pop	{r4, r5, r6, pc}
 800b9fa:	466a      	mov	r2, sp
 800b9fc:	f000 f874 	bl	800bae8 <_fstat_r>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	dbec      	blt.n	800b9de <__swhatbuf_r+0x12>
 800ba04:	9901      	ldr	r1, [sp, #4]
 800ba06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba0e:	4259      	negs	r1, r3
 800ba10:	4159      	adcs	r1, r3
 800ba12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba16:	e7eb      	b.n	800b9f0 <__swhatbuf_r+0x24>

0800ba18 <__smakebuf_r>:
 800ba18:	898b      	ldrh	r3, [r1, #12]
 800ba1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba1c:	079d      	lsls	r5, r3, #30
 800ba1e:	4606      	mov	r6, r0
 800ba20:	460c      	mov	r4, r1
 800ba22:	d507      	bpl.n	800ba34 <__smakebuf_r+0x1c>
 800ba24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	6123      	str	r3, [r4, #16]
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	6163      	str	r3, [r4, #20]
 800ba30:	b003      	add	sp, #12
 800ba32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba34:	ab01      	add	r3, sp, #4
 800ba36:	466a      	mov	r2, sp
 800ba38:	f7ff ffc8 	bl	800b9cc <__swhatbuf_r>
 800ba3c:	9f00      	ldr	r7, [sp, #0]
 800ba3e:	4605      	mov	r5, r0
 800ba40:	4639      	mov	r1, r7
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7fe f912 	bl	8009c6c <_malloc_r>
 800ba48:	b948      	cbnz	r0, 800ba5e <__smakebuf_r+0x46>
 800ba4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba4e:	059a      	lsls	r2, r3, #22
 800ba50:	d4ee      	bmi.n	800ba30 <__smakebuf_r+0x18>
 800ba52:	f023 0303 	bic.w	r3, r3, #3
 800ba56:	f043 0302 	orr.w	r3, r3, #2
 800ba5a:	81a3      	strh	r3, [r4, #12]
 800ba5c:	e7e2      	b.n	800ba24 <__smakebuf_r+0xc>
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	6020      	str	r0, [r4, #0]
 800ba62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba66:	81a3      	strh	r3, [r4, #12]
 800ba68:	9b01      	ldr	r3, [sp, #4]
 800ba6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba6e:	b15b      	cbz	r3, 800ba88 <__smakebuf_r+0x70>
 800ba70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba74:	4630      	mov	r0, r6
 800ba76:	f000 f849 	bl	800bb0c <_isatty_r>
 800ba7a:	b128      	cbz	r0, 800ba88 <__smakebuf_r+0x70>
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	f023 0303 	bic.w	r3, r3, #3
 800ba82:	f043 0301 	orr.w	r3, r3, #1
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	431d      	orrs	r5, r3
 800ba8c:	81a5      	strh	r5, [r4, #12]
 800ba8e:	e7cf      	b.n	800ba30 <__smakebuf_r+0x18>

0800ba90 <memmove>:
 800ba90:	4288      	cmp	r0, r1
 800ba92:	b510      	push	{r4, lr}
 800ba94:	eb01 0402 	add.w	r4, r1, r2
 800ba98:	d902      	bls.n	800baa0 <memmove+0x10>
 800ba9a:	4284      	cmp	r4, r0
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	d807      	bhi.n	800bab0 <memmove+0x20>
 800baa0:	1e43      	subs	r3, r0, #1
 800baa2:	42a1      	cmp	r1, r4
 800baa4:	d008      	beq.n	800bab8 <memmove+0x28>
 800baa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baae:	e7f8      	b.n	800baa2 <memmove+0x12>
 800bab0:	4402      	add	r2, r0
 800bab2:	4601      	mov	r1, r0
 800bab4:	428a      	cmp	r2, r1
 800bab6:	d100      	bne.n	800baba <memmove+0x2a>
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800babe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bac2:	e7f7      	b.n	800bab4 <memmove+0x24>

0800bac4 <strncmp>:
 800bac4:	b510      	push	{r4, lr}
 800bac6:	b16a      	cbz	r2, 800bae4 <strncmp+0x20>
 800bac8:	3901      	subs	r1, #1
 800baca:	1884      	adds	r4, r0, r2
 800bacc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bad0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d103      	bne.n	800bae0 <strncmp+0x1c>
 800bad8:	42a0      	cmp	r0, r4
 800bada:	d001      	beq.n	800bae0 <strncmp+0x1c>
 800badc:	2a00      	cmp	r2, #0
 800bade:	d1f5      	bne.n	800bacc <strncmp+0x8>
 800bae0:	1ad0      	subs	r0, r2, r3
 800bae2:	bd10      	pop	{r4, pc}
 800bae4:	4610      	mov	r0, r2
 800bae6:	e7fc      	b.n	800bae2 <strncmp+0x1e>

0800bae8 <_fstat_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	@ (800bb08 <_fstat_r+0x20>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	4611      	mov	r1, r2
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	f7f7 fb7c 	bl	80031f2 <_fstat>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d102      	bne.n	800bb04 <_fstat_r+0x1c>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	b103      	cbz	r3, 800bb04 <_fstat_r+0x1c>
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	24000620 	.word	0x24000620

0800bb0c <_isatty_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d06      	ldr	r5, [pc, #24]	@ (800bb28 <_isatty_r+0x1c>)
 800bb10:	2300      	movs	r3, #0
 800bb12:	4604      	mov	r4, r0
 800bb14:	4608      	mov	r0, r1
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	f7f7 fb7b 	bl	8003212 <_isatty>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_isatty_r+0x1a>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_isatty_r+0x1a>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	24000620 	.word	0x24000620

0800bb2c <_sbrk_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d06      	ldr	r5, [pc, #24]	@ (800bb48 <_sbrk_r+0x1c>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	602b      	str	r3, [r5, #0]
 800bb38:	f7f7 fb84 	bl	8003244 <_sbrk>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_sbrk_r+0x1a>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_sbrk_r+0x1a>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	24000620 	.word	0x24000620

0800bb4c <memcpy>:
 800bb4c:	440a      	add	r2, r1
 800bb4e:	4291      	cmp	r1, r2
 800bb50:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb54:	d100      	bne.n	800bb58 <memcpy+0xc>
 800bb56:	4770      	bx	lr
 800bb58:	b510      	push	{r4, lr}
 800bb5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb62:	4291      	cmp	r1, r2
 800bb64:	d1f9      	bne.n	800bb5a <memcpy+0xe>
 800bb66:	bd10      	pop	{r4, pc}

0800bb68 <nan>:
 800bb68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb70 <nan+0x8>
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	00000000 	.word	0x00000000
 800bb74:	7ff80000 	.word	0x7ff80000

0800bb78 <__assert_func>:
 800bb78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb7a:	4614      	mov	r4, r2
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b09      	ldr	r3, [pc, #36]	@ (800bba4 <__assert_func+0x2c>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4605      	mov	r5, r0
 800bb84:	68d8      	ldr	r0, [r3, #12]
 800bb86:	b14c      	cbz	r4, 800bb9c <__assert_func+0x24>
 800bb88:	4b07      	ldr	r3, [pc, #28]	@ (800bba8 <__assert_func+0x30>)
 800bb8a:	9100      	str	r1, [sp, #0]
 800bb8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb90:	4906      	ldr	r1, [pc, #24]	@ (800bbac <__assert_func+0x34>)
 800bb92:	462b      	mov	r3, r5
 800bb94:	f000 fba8 	bl	800c2e8 <fiprintf>
 800bb98:	f000 fbb8 	bl	800c30c <abort>
 800bb9c:	4b04      	ldr	r3, [pc, #16]	@ (800bbb0 <__assert_func+0x38>)
 800bb9e:	461c      	mov	r4, r3
 800bba0:	e7f3      	b.n	800bb8a <__assert_func+0x12>
 800bba2:	bf00      	nop
 800bba4:	2400002c 	.word	0x2400002c
 800bba8:	0800ced6 	.word	0x0800ced6
 800bbac:	0800cee3 	.word	0x0800cee3
 800bbb0:	0800cf11 	.word	0x0800cf11

0800bbb4 <_calloc_r>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	fba1 5402 	umull	r5, r4, r1, r2
 800bbba:	b934      	cbnz	r4, 800bbca <_calloc_r+0x16>
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7fe f855 	bl	8009c6c <_malloc_r>
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	b928      	cbnz	r0, 800bbd2 <_calloc_r+0x1e>
 800bbc6:	4630      	mov	r0, r6
 800bbc8:	bd70      	pop	{r4, r5, r6, pc}
 800bbca:	220c      	movs	r2, #12
 800bbcc:	6002      	str	r2, [r0, #0]
 800bbce:	2600      	movs	r6, #0
 800bbd0:	e7f9      	b.n	800bbc6 <_calloc_r+0x12>
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f7fd f967 	bl	8008ea8 <memset>
 800bbda:	e7f4      	b.n	800bbc6 <_calloc_r+0x12>

0800bbdc <rshift>:
 800bbdc:	6903      	ldr	r3, [r0, #16]
 800bbde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbe6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbea:	f100 0414 	add.w	r4, r0, #20
 800bbee:	dd45      	ble.n	800bc7c <rshift+0xa0>
 800bbf0:	f011 011f 	ands.w	r1, r1, #31
 800bbf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bbf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bbfc:	d10c      	bne.n	800bc18 <rshift+0x3c>
 800bbfe:	f100 0710 	add.w	r7, r0, #16
 800bc02:	4629      	mov	r1, r5
 800bc04:	42b1      	cmp	r1, r6
 800bc06:	d334      	bcc.n	800bc72 <rshift+0x96>
 800bc08:	1a9b      	subs	r3, r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	1eea      	subs	r2, r5, #3
 800bc0e:	4296      	cmp	r6, r2
 800bc10:	bf38      	it	cc
 800bc12:	2300      	movcc	r3, #0
 800bc14:	4423      	add	r3, r4
 800bc16:	e015      	b.n	800bc44 <rshift+0x68>
 800bc18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc1c:	f1c1 0820 	rsb	r8, r1, #32
 800bc20:	40cf      	lsrs	r7, r1
 800bc22:	f105 0e04 	add.w	lr, r5, #4
 800bc26:	46a1      	mov	r9, r4
 800bc28:	4576      	cmp	r6, lr
 800bc2a:	46f4      	mov	ip, lr
 800bc2c:	d815      	bhi.n	800bc5a <rshift+0x7e>
 800bc2e:	1a9a      	subs	r2, r3, r2
 800bc30:	0092      	lsls	r2, r2, #2
 800bc32:	3a04      	subs	r2, #4
 800bc34:	3501      	adds	r5, #1
 800bc36:	42ae      	cmp	r6, r5
 800bc38:	bf38      	it	cc
 800bc3a:	2200      	movcc	r2, #0
 800bc3c:	18a3      	adds	r3, r4, r2
 800bc3e:	50a7      	str	r7, [r4, r2]
 800bc40:	b107      	cbz	r7, 800bc44 <rshift+0x68>
 800bc42:	3304      	adds	r3, #4
 800bc44:	1b1a      	subs	r2, r3, r4
 800bc46:	42a3      	cmp	r3, r4
 800bc48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc4c:	bf08      	it	eq
 800bc4e:	2300      	moveq	r3, #0
 800bc50:	6102      	str	r2, [r0, #16]
 800bc52:	bf08      	it	eq
 800bc54:	6143      	streq	r3, [r0, #20]
 800bc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5a:	f8dc c000 	ldr.w	ip, [ip]
 800bc5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc62:	ea4c 0707 	orr.w	r7, ip, r7
 800bc66:	f849 7b04 	str.w	r7, [r9], #4
 800bc6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc6e:	40cf      	lsrs	r7, r1
 800bc70:	e7da      	b.n	800bc28 <rshift+0x4c>
 800bc72:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc76:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc7a:	e7c3      	b.n	800bc04 <rshift+0x28>
 800bc7c:	4623      	mov	r3, r4
 800bc7e:	e7e1      	b.n	800bc44 <rshift+0x68>

0800bc80 <__hexdig_fun>:
 800bc80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc84:	2b09      	cmp	r3, #9
 800bc86:	d802      	bhi.n	800bc8e <__hexdig_fun+0xe>
 800bc88:	3820      	subs	r0, #32
 800bc8a:	b2c0      	uxtb	r0, r0
 800bc8c:	4770      	bx	lr
 800bc8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc92:	2b05      	cmp	r3, #5
 800bc94:	d801      	bhi.n	800bc9a <__hexdig_fun+0x1a>
 800bc96:	3847      	subs	r0, #71	@ 0x47
 800bc98:	e7f7      	b.n	800bc8a <__hexdig_fun+0xa>
 800bc9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc9e:	2b05      	cmp	r3, #5
 800bca0:	d801      	bhi.n	800bca6 <__hexdig_fun+0x26>
 800bca2:	3827      	subs	r0, #39	@ 0x27
 800bca4:	e7f1      	b.n	800bc8a <__hexdig_fun+0xa>
 800bca6:	2000      	movs	r0, #0
 800bca8:	4770      	bx	lr
	...

0800bcac <__gethex>:
 800bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb0:	b085      	sub	sp, #20
 800bcb2:	468a      	mov	sl, r1
 800bcb4:	9302      	str	r3, [sp, #8]
 800bcb6:	680b      	ldr	r3, [r1, #0]
 800bcb8:	9001      	str	r0, [sp, #4]
 800bcba:	4690      	mov	r8, r2
 800bcbc:	1c9c      	adds	r4, r3, #2
 800bcbe:	46a1      	mov	r9, r4
 800bcc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bcc4:	2830      	cmp	r0, #48	@ 0x30
 800bcc6:	d0fa      	beq.n	800bcbe <__gethex+0x12>
 800bcc8:	eba9 0303 	sub.w	r3, r9, r3
 800bccc:	f1a3 0b02 	sub.w	fp, r3, #2
 800bcd0:	f7ff ffd6 	bl	800bc80 <__hexdig_fun>
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d168      	bne.n	800bdac <__gethex+0x100>
 800bcda:	49a0      	ldr	r1, [pc, #640]	@ (800bf5c <__gethex+0x2b0>)
 800bcdc:	2201      	movs	r2, #1
 800bcde:	4648      	mov	r0, r9
 800bce0:	f7ff fef0 	bl	800bac4 <strncmp>
 800bce4:	4607      	mov	r7, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d167      	bne.n	800bdba <__gethex+0x10e>
 800bcea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bcee:	4626      	mov	r6, r4
 800bcf0:	f7ff ffc6 	bl	800bc80 <__hexdig_fun>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d062      	beq.n	800bdbe <__gethex+0x112>
 800bcf8:	4623      	mov	r3, r4
 800bcfa:	7818      	ldrb	r0, [r3, #0]
 800bcfc:	2830      	cmp	r0, #48	@ 0x30
 800bcfe:	4699      	mov	r9, r3
 800bd00:	f103 0301 	add.w	r3, r3, #1
 800bd04:	d0f9      	beq.n	800bcfa <__gethex+0x4e>
 800bd06:	f7ff ffbb 	bl	800bc80 <__hexdig_fun>
 800bd0a:	fab0 f580 	clz	r5, r0
 800bd0e:	096d      	lsrs	r5, r5, #5
 800bd10:	f04f 0b01 	mov.w	fp, #1
 800bd14:	464a      	mov	r2, r9
 800bd16:	4616      	mov	r6, r2
 800bd18:	3201      	adds	r2, #1
 800bd1a:	7830      	ldrb	r0, [r6, #0]
 800bd1c:	f7ff ffb0 	bl	800bc80 <__hexdig_fun>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d1f8      	bne.n	800bd16 <__gethex+0x6a>
 800bd24:	498d      	ldr	r1, [pc, #564]	@ (800bf5c <__gethex+0x2b0>)
 800bd26:	2201      	movs	r2, #1
 800bd28:	4630      	mov	r0, r6
 800bd2a:	f7ff fecb 	bl	800bac4 <strncmp>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	d13f      	bne.n	800bdb2 <__gethex+0x106>
 800bd32:	b944      	cbnz	r4, 800bd46 <__gethex+0x9a>
 800bd34:	1c74      	adds	r4, r6, #1
 800bd36:	4622      	mov	r2, r4
 800bd38:	4616      	mov	r6, r2
 800bd3a:	3201      	adds	r2, #1
 800bd3c:	7830      	ldrb	r0, [r6, #0]
 800bd3e:	f7ff ff9f 	bl	800bc80 <__hexdig_fun>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d1f8      	bne.n	800bd38 <__gethex+0x8c>
 800bd46:	1ba4      	subs	r4, r4, r6
 800bd48:	00a7      	lsls	r7, r4, #2
 800bd4a:	7833      	ldrb	r3, [r6, #0]
 800bd4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bd50:	2b50      	cmp	r3, #80	@ 0x50
 800bd52:	d13e      	bne.n	800bdd2 <__gethex+0x126>
 800bd54:	7873      	ldrb	r3, [r6, #1]
 800bd56:	2b2b      	cmp	r3, #43	@ 0x2b
 800bd58:	d033      	beq.n	800bdc2 <__gethex+0x116>
 800bd5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800bd5c:	d034      	beq.n	800bdc8 <__gethex+0x11c>
 800bd5e:	1c71      	adds	r1, r6, #1
 800bd60:	2400      	movs	r4, #0
 800bd62:	7808      	ldrb	r0, [r1, #0]
 800bd64:	f7ff ff8c 	bl	800bc80 <__hexdig_fun>
 800bd68:	1e43      	subs	r3, r0, #1
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b18      	cmp	r3, #24
 800bd6e:	d830      	bhi.n	800bdd2 <__gethex+0x126>
 800bd70:	f1a0 0210 	sub.w	r2, r0, #16
 800bd74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd78:	f7ff ff82 	bl	800bc80 <__hexdig_fun>
 800bd7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd80:	fa5f fc8c 	uxtb.w	ip, ip
 800bd84:	f1bc 0f18 	cmp.w	ip, #24
 800bd88:	f04f 030a 	mov.w	r3, #10
 800bd8c:	d91e      	bls.n	800bdcc <__gethex+0x120>
 800bd8e:	b104      	cbz	r4, 800bd92 <__gethex+0xe6>
 800bd90:	4252      	negs	r2, r2
 800bd92:	4417      	add	r7, r2
 800bd94:	f8ca 1000 	str.w	r1, [sl]
 800bd98:	b1ed      	cbz	r5, 800bdd6 <__gethex+0x12a>
 800bd9a:	f1bb 0f00 	cmp.w	fp, #0
 800bd9e:	bf0c      	ite	eq
 800bda0:	2506      	moveq	r5, #6
 800bda2:	2500      	movne	r5, #0
 800bda4:	4628      	mov	r0, r5
 800bda6:	b005      	add	sp, #20
 800bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdac:	2500      	movs	r5, #0
 800bdae:	462c      	mov	r4, r5
 800bdb0:	e7b0      	b.n	800bd14 <__gethex+0x68>
 800bdb2:	2c00      	cmp	r4, #0
 800bdb4:	d1c7      	bne.n	800bd46 <__gethex+0x9a>
 800bdb6:	4627      	mov	r7, r4
 800bdb8:	e7c7      	b.n	800bd4a <__gethex+0x9e>
 800bdba:	464e      	mov	r6, r9
 800bdbc:	462f      	mov	r7, r5
 800bdbe:	2501      	movs	r5, #1
 800bdc0:	e7c3      	b.n	800bd4a <__gethex+0x9e>
 800bdc2:	2400      	movs	r4, #0
 800bdc4:	1cb1      	adds	r1, r6, #2
 800bdc6:	e7cc      	b.n	800bd62 <__gethex+0xb6>
 800bdc8:	2401      	movs	r4, #1
 800bdca:	e7fb      	b.n	800bdc4 <__gethex+0x118>
 800bdcc:	fb03 0002 	mla	r0, r3, r2, r0
 800bdd0:	e7ce      	b.n	800bd70 <__gethex+0xc4>
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	e7de      	b.n	800bd94 <__gethex+0xe8>
 800bdd6:	eba6 0309 	sub.w	r3, r6, r9
 800bdda:	3b01      	subs	r3, #1
 800bddc:	4629      	mov	r1, r5
 800bdde:	2b07      	cmp	r3, #7
 800bde0:	dc0a      	bgt.n	800bdf8 <__gethex+0x14c>
 800bde2:	9801      	ldr	r0, [sp, #4]
 800bde4:	f7fd ffce 	bl	8009d84 <_Balloc>
 800bde8:	4604      	mov	r4, r0
 800bdea:	b940      	cbnz	r0, 800bdfe <__gethex+0x152>
 800bdec:	4b5c      	ldr	r3, [pc, #368]	@ (800bf60 <__gethex+0x2b4>)
 800bdee:	4602      	mov	r2, r0
 800bdf0:	21e4      	movs	r1, #228	@ 0xe4
 800bdf2:	485c      	ldr	r0, [pc, #368]	@ (800bf64 <__gethex+0x2b8>)
 800bdf4:	f7ff fec0 	bl	800bb78 <__assert_func>
 800bdf8:	3101      	adds	r1, #1
 800bdfa:	105b      	asrs	r3, r3, #1
 800bdfc:	e7ef      	b.n	800bdde <__gethex+0x132>
 800bdfe:	f100 0a14 	add.w	sl, r0, #20
 800be02:	2300      	movs	r3, #0
 800be04:	4655      	mov	r5, sl
 800be06:	469b      	mov	fp, r3
 800be08:	45b1      	cmp	r9, r6
 800be0a:	d337      	bcc.n	800be7c <__gethex+0x1d0>
 800be0c:	f845 bb04 	str.w	fp, [r5], #4
 800be10:	eba5 050a 	sub.w	r5, r5, sl
 800be14:	10ad      	asrs	r5, r5, #2
 800be16:	6125      	str	r5, [r4, #16]
 800be18:	4658      	mov	r0, fp
 800be1a:	f7fe f8a5 	bl	8009f68 <__hi0bits>
 800be1e:	016d      	lsls	r5, r5, #5
 800be20:	f8d8 6000 	ldr.w	r6, [r8]
 800be24:	1a2d      	subs	r5, r5, r0
 800be26:	42b5      	cmp	r5, r6
 800be28:	dd54      	ble.n	800bed4 <__gethex+0x228>
 800be2a:	1bad      	subs	r5, r5, r6
 800be2c:	4629      	mov	r1, r5
 800be2e:	4620      	mov	r0, r4
 800be30:	f7fe fc2e 	bl	800a690 <__any_on>
 800be34:	4681      	mov	r9, r0
 800be36:	b178      	cbz	r0, 800be58 <__gethex+0x1ac>
 800be38:	1e6b      	subs	r3, r5, #1
 800be3a:	1159      	asrs	r1, r3, #5
 800be3c:	f003 021f 	and.w	r2, r3, #31
 800be40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800be44:	f04f 0901 	mov.w	r9, #1
 800be48:	fa09 f202 	lsl.w	r2, r9, r2
 800be4c:	420a      	tst	r2, r1
 800be4e:	d003      	beq.n	800be58 <__gethex+0x1ac>
 800be50:	454b      	cmp	r3, r9
 800be52:	dc36      	bgt.n	800bec2 <__gethex+0x216>
 800be54:	f04f 0902 	mov.w	r9, #2
 800be58:	4629      	mov	r1, r5
 800be5a:	4620      	mov	r0, r4
 800be5c:	f7ff febe 	bl	800bbdc <rshift>
 800be60:	442f      	add	r7, r5
 800be62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be66:	42bb      	cmp	r3, r7
 800be68:	da42      	bge.n	800bef0 <__gethex+0x244>
 800be6a:	9801      	ldr	r0, [sp, #4]
 800be6c:	4621      	mov	r1, r4
 800be6e:	f7fd ffc9 	bl	8009e04 <_Bfree>
 800be72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be74:	2300      	movs	r3, #0
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	25a3      	movs	r5, #163	@ 0xa3
 800be7a:	e793      	b.n	800bda4 <__gethex+0xf8>
 800be7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be80:	2a2e      	cmp	r2, #46	@ 0x2e
 800be82:	d012      	beq.n	800beaa <__gethex+0x1fe>
 800be84:	2b20      	cmp	r3, #32
 800be86:	d104      	bne.n	800be92 <__gethex+0x1e6>
 800be88:	f845 bb04 	str.w	fp, [r5], #4
 800be8c:	f04f 0b00 	mov.w	fp, #0
 800be90:	465b      	mov	r3, fp
 800be92:	7830      	ldrb	r0, [r6, #0]
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	f7ff fef3 	bl	800bc80 <__hexdig_fun>
 800be9a:	9b03      	ldr	r3, [sp, #12]
 800be9c:	f000 000f 	and.w	r0, r0, #15
 800bea0:	4098      	lsls	r0, r3
 800bea2:	ea4b 0b00 	orr.w	fp, fp, r0
 800bea6:	3304      	adds	r3, #4
 800bea8:	e7ae      	b.n	800be08 <__gethex+0x15c>
 800beaa:	45b1      	cmp	r9, r6
 800beac:	d8ea      	bhi.n	800be84 <__gethex+0x1d8>
 800beae:	492b      	ldr	r1, [pc, #172]	@ (800bf5c <__gethex+0x2b0>)
 800beb0:	9303      	str	r3, [sp, #12]
 800beb2:	2201      	movs	r2, #1
 800beb4:	4630      	mov	r0, r6
 800beb6:	f7ff fe05 	bl	800bac4 <strncmp>
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1e1      	bne.n	800be84 <__gethex+0x1d8>
 800bec0:	e7a2      	b.n	800be08 <__gethex+0x15c>
 800bec2:	1ea9      	subs	r1, r5, #2
 800bec4:	4620      	mov	r0, r4
 800bec6:	f7fe fbe3 	bl	800a690 <__any_on>
 800beca:	2800      	cmp	r0, #0
 800becc:	d0c2      	beq.n	800be54 <__gethex+0x1a8>
 800bece:	f04f 0903 	mov.w	r9, #3
 800bed2:	e7c1      	b.n	800be58 <__gethex+0x1ac>
 800bed4:	da09      	bge.n	800beea <__gethex+0x23e>
 800bed6:	1b75      	subs	r5, r6, r5
 800bed8:	4621      	mov	r1, r4
 800beda:	9801      	ldr	r0, [sp, #4]
 800bedc:	462a      	mov	r2, r5
 800bede:	f7fe f9a1 	bl	800a224 <__lshift>
 800bee2:	1b7f      	subs	r7, r7, r5
 800bee4:	4604      	mov	r4, r0
 800bee6:	f100 0a14 	add.w	sl, r0, #20
 800beea:	f04f 0900 	mov.w	r9, #0
 800beee:	e7b8      	b.n	800be62 <__gethex+0x1b6>
 800bef0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bef4:	42bd      	cmp	r5, r7
 800bef6:	dd6f      	ble.n	800bfd8 <__gethex+0x32c>
 800bef8:	1bed      	subs	r5, r5, r7
 800befa:	42ae      	cmp	r6, r5
 800befc:	dc34      	bgt.n	800bf68 <__gethex+0x2bc>
 800befe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf02:	2b02      	cmp	r3, #2
 800bf04:	d022      	beq.n	800bf4c <__gethex+0x2a0>
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	d024      	beq.n	800bf54 <__gethex+0x2a8>
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d115      	bne.n	800bf3a <__gethex+0x28e>
 800bf0e:	42ae      	cmp	r6, r5
 800bf10:	d113      	bne.n	800bf3a <__gethex+0x28e>
 800bf12:	2e01      	cmp	r6, #1
 800bf14:	d10b      	bne.n	800bf2e <__gethex+0x282>
 800bf16:	9a02      	ldr	r2, [sp, #8]
 800bf18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf1c:	6013      	str	r3, [r2, #0]
 800bf1e:	2301      	movs	r3, #1
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	f8ca 3000 	str.w	r3, [sl]
 800bf26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf28:	2562      	movs	r5, #98	@ 0x62
 800bf2a:	601c      	str	r4, [r3, #0]
 800bf2c:	e73a      	b.n	800bda4 <__gethex+0xf8>
 800bf2e:	1e71      	subs	r1, r6, #1
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7fe fbad 	bl	800a690 <__any_on>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d1ed      	bne.n	800bf16 <__gethex+0x26a>
 800bf3a:	9801      	ldr	r0, [sp, #4]
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	f7fd ff61 	bl	8009e04 <_Bfree>
 800bf42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bf44:	2300      	movs	r3, #0
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	2550      	movs	r5, #80	@ 0x50
 800bf4a:	e72b      	b.n	800bda4 <__gethex+0xf8>
 800bf4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f3      	bne.n	800bf3a <__gethex+0x28e>
 800bf52:	e7e0      	b.n	800bf16 <__gethex+0x26a>
 800bf54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1dd      	bne.n	800bf16 <__gethex+0x26a>
 800bf5a:	e7ee      	b.n	800bf3a <__gethex+0x28e>
 800bf5c:	0800cebb 	.word	0x0800cebb
 800bf60:	0800ce51 	.word	0x0800ce51
 800bf64:	0800cf12 	.word	0x0800cf12
 800bf68:	1e6f      	subs	r7, r5, #1
 800bf6a:	f1b9 0f00 	cmp.w	r9, #0
 800bf6e:	d130      	bne.n	800bfd2 <__gethex+0x326>
 800bf70:	b127      	cbz	r7, 800bf7c <__gethex+0x2d0>
 800bf72:	4639      	mov	r1, r7
 800bf74:	4620      	mov	r0, r4
 800bf76:	f7fe fb8b 	bl	800a690 <__any_on>
 800bf7a:	4681      	mov	r9, r0
 800bf7c:	117a      	asrs	r2, r7, #5
 800bf7e:	2301      	movs	r3, #1
 800bf80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf84:	f007 071f 	and.w	r7, r7, #31
 800bf88:	40bb      	lsls	r3, r7
 800bf8a:	4213      	tst	r3, r2
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	4620      	mov	r0, r4
 800bf90:	bf18      	it	ne
 800bf92:	f049 0902 	orrne.w	r9, r9, #2
 800bf96:	f7ff fe21 	bl	800bbdc <rshift>
 800bf9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf9e:	1b76      	subs	r6, r6, r5
 800bfa0:	2502      	movs	r5, #2
 800bfa2:	f1b9 0f00 	cmp.w	r9, #0
 800bfa6:	d047      	beq.n	800c038 <__gethex+0x38c>
 800bfa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d015      	beq.n	800bfdc <__gethex+0x330>
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d017      	beq.n	800bfe4 <__gethex+0x338>
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d109      	bne.n	800bfcc <__gethex+0x320>
 800bfb8:	f019 0f02 	tst.w	r9, #2
 800bfbc:	d006      	beq.n	800bfcc <__gethex+0x320>
 800bfbe:	f8da 3000 	ldr.w	r3, [sl]
 800bfc2:	ea49 0903 	orr.w	r9, r9, r3
 800bfc6:	f019 0f01 	tst.w	r9, #1
 800bfca:	d10e      	bne.n	800bfea <__gethex+0x33e>
 800bfcc:	f045 0510 	orr.w	r5, r5, #16
 800bfd0:	e032      	b.n	800c038 <__gethex+0x38c>
 800bfd2:	f04f 0901 	mov.w	r9, #1
 800bfd6:	e7d1      	b.n	800bf7c <__gethex+0x2d0>
 800bfd8:	2501      	movs	r5, #1
 800bfda:	e7e2      	b.n	800bfa2 <__gethex+0x2f6>
 800bfdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfde:	f1c3 0301 	rsb	r3, r3, #1
 800bfe2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d0f0      	beq.n	800bfcc <__gethex+0x320>
 800bfea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bfee:	f104 0314 	add.w	r3, r4, #20
 800bff2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bff6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bffa:	f04f 0c00 	mov.w	ip, #0
 800bffe:	4618      	mov	r0, r3
 800c000:	f853 2b04 	ldr.w	r2, [r3], #4
 800c004:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c008:	d01b      	beq.n	800c042 <__gethex+0x396>
 800c00a:	3201      	adds	r2, #1
 800c00c:	6002      	str	r2, [r0, #0]
 800c00e:	2d02      	cmp	r5, #2
 800c010:	f104 0314 	add.w	r3, r4, #20
 800c014:	d13c      	bne.n	800c090 <__gethex+0x3e4>
 800c016:	f8d8 2000 	ldr.w	r2, [r8]
 800c01a:	3a01      	subs	r2, #1
 800c01c:	42b2      	cmp	r2, r6
 800c01e:	d109      	bne.n	800c034 <__gethex+0x388>
 800c020:	1171      	asrs	r1, r6, #5
 800c022:	2201      	movs	r2, #1
 800c024:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c028:	f006 061f 	and.w	r6, r6, #31
 800c02c:	fa02 f606 	lsl.w	r6, r2, r6
 800c030:	421e      	tst	r6, r3
 800c032:	d13a      	bne.n	800c0aa <__gethex+0x3fe>
 800c034:	f045 0520 	orr.w	r5, r5, #32
 800c038:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c03a:	601c      	str	r4, [r3, #0]
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	601f      	str	r7, [r3, #0]
 800c040:	e6b0      	b.n	800bda4 <__gethex+0xf8>
 800c042:	4299      	cmp	r1, r3
 800c044:	f843 cc04 	str.w	ip, [r3, #-4]
 800c048:	d8d9      	bhi.n	800bffe <__gethex+0x352>
 800c04a:	68a3      	ldr	r3, [r4, #8]
 800c04c:	459b      	cmp	fp, r3
 800c04e:	db17      	blt.n	800c080 <__gethex+0x3d4>
 800c050:	6861      	ldr	r1, [r4, #4]
 800c052:	9801      	ldr	r0, [sp, #4]
 800c054:	3101      	adds	r1, #1
 800c056:	f7fd fe95 	bl	8009d84 <_Balloc>
 800c05a:	4681      	mov	r9, r0
 800c05c:	b918      	cbnz	r0, 800c066 <__gethex+0x3ba>
 800c05e:	4b1a      	ldr	r3, [pc, #104]	@ (800c0c8 <__gethex+0x41c>)
 800c060:	4602      	mov	r2, r0
 800c062:	2184      	movs	r1, #132	@ 0x84
 800c064:	e6c5      	b.n	800bdf2 <__gethex+0x146>
 800c066:	6922      	ldr	r2, [r4, #16]
 800c068:	3202      	adds	r2, #2
 800c06a:	f104 010c 	add.w	r1, r4, #12
 800c06e:	0092      	lsls	r2, r2, #2
 800c070:	300c      	adds	r0, #12
 800c072:	f7ff fd6b 	bl	800bb4c <memcpy>
 800c076:	4621      	mov	r1, r4
 800c078:	9801      	ldr	r0, [sp, #4]
 800c07a:	f7fd fec3 	bl	8009e04 <_Bfree>
 800c07e:	464c      	mov	r4, r9
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c088:	6122      	str	r2, [r4, #16]
 800c08a:	2201      	movs	r2, #1
 800c08c:	615a      	str	r2, [r3, #20]
 800c08e:	e7be      	b.n	800c00e <__gethex+0x362>
 800c090:	6922      	ldr	r2, [r4, #16]
 800c092:	455a      	cmp	r2, fp
 800c094:	dd0b      	ble.n	800c0ae <__gethex+0x402>
 800c096:	2101      	movs	r1, #1
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff fd9f 	bl	800bbdc <rshift>
 800c09e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0a2:	3701      	adds	r7, #1
 800c0a4:	42bb      	cmp	r3, r7
 800c0a6:	f6ff aee0 	blt.w	800be6a <__gethex+0x1be>
 800c0aa:	2501      	movs	r5, #1
 800c0ac:	e7c2      	b.n	800c034 <__gethex+0x388>
 800c0ae:	f016 061f 	ands.w	r6, r6, #31
 800c0b2:	d0fa      	beq.n	800c0aa <__gethex+0x3fe>
 800c0b4:	4453      	add	r3, sl
 800c0b6:	f1c6 0620 	rsb	r6, r6, #32
 800c0ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c0be:	f7fd ff53 	bl	8009f68 <__hi0bits>
 800c0c2:	42b0      	cmp	r0, r6
 800c0c4:	dbe7      	blt.n	800c096 <__gethex+0x3ea>
 800c0c6:	e7f0      	b.n	800c0aa <__gethex+0x3fe>
 800c0c8:	0800ce51 	.word	0x0800ce51

0800c0cc <L_shift>:
 800c0cc:	f1c2 0208 	rsb	r2, r2, #8
 800c0d0:	0092      	lsls	r2, r2, #2
 800c0d2:	b570      	push	{r4, r5, r6, lr}
 800c0d4:	f1c2 0620 	rsb	r6, r2, #32
 800c0d8:	6843      	ldr	r3, [r0, #4]
 800c0da:	6804      	ldr	r4, [r0, #0]
 800c0dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c0e0:	432c      	orrs	r4, r5
 800c0e2:	40d3      	lsrs	r3, r2
 800c0e4:	6004      	str	r4, [r0, #0]
 800c0e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0ea:	4288      	cmp	r0, r1
 800c0ec:	d3f4      	bcc.n	800c0d8 <L_shift+0xc>
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}

0800c0f0 <__match>:
 800c0f0:	b530      	push	{r4, r5, lr}
 800c0f2:	6803      	ldr	r3, [r0, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0fa:	b914      	cbnz	r4, 800c102 <__match+0x12>
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	2001      	movs	r0, #1
 800c100:	bd30      	pop	{r4, r5, pc}
 800c102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c106:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c10a:	2d19      	cmp	r5, #25
 800c10c:	bf98      	it	ls
 800c10e:	3220      	addls	r2, #32
 800c110:	42a2      	cmp	r2, r4
 800c112:	d0f0      	beq.n	800c0f6 <__match+0x6>
 800c114:	2000      	movs	r0, #0
 800c116:	e7f3      	b.n	800c100 <__match+0x10>

0800c118 <__hexnan>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	680b      	ldr	r3, [r1, #0]
 800c11e:	6801      	ldr	r1, [r0, #0]
 800c120:	115e      	asrs	r6, r3, #5
 800c122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c126:	f013 031f 	ands.w	r3, r3, #31
 800c12a:	b087      	sub	sp, #28
 800c12c:	bf18      	it	ne
 800c12e:	3604      	addne	r6, #4
 800c130:	2500      	movs	r5, #0
 800c132:	1f37      	subs	r7, r6, #4
 800c134:	4682      	mov	sl, r0
 800c136:	4690      	mov	r8, r2
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c13e:	46b9      	mov	r9, r7
 800c140:	463c      	mov	r4, r7
 800c142:	9502      	str	r5, [sp, #8]
 800c144:	46ab      	mov	fp, r5
 800c146:	784a      	ldrb	r2, [r1, #1]
 800c148:	1c4b      	adds	r3, r1, #1
 800c14a:	9303      	str	r3, [sp, #12]
 800c14c:	b342      	cbz	r2, 800c1a0 <__hexnan+0x88>
 800c14e:	4610      	mov	r0, r2
 800c150:	9105      	str	r1, [sp, #20]
 800c152:	9204      	str	r2, [sp, #16]
 800c154:	f7ff fd94 	bl	800bc80 <__hexdig_fun>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d151      	bne.n	800c200 <__hexnan+0xe8>
 800c15c:	9a04      	ldr	r2, [sp, #16]
 800c15e:	9905      	ldr	r1, [sp, #20]
 800c160:	2a20      	cmp	r2, #32
 800c162:	d818      	bhi.n	800c196 <__hexnan+0x7e>
 800c164:	9b02      	ldr	r3, [sp, #8]
 800c166:	459b      	cmp	fp, r3
 800c168:	dd13      	ble.n	800c192 <__hexnan+0x7a>
 800c16a:	454c      	cmp	r4, r9
 800c16c:	d206      	bcs.n	800c17c <__hexnan+0x64>
 800c16e:	2d07      	cmp	r5, #7
 800c170:	dc04      	bgt.n	800c17c <__hexnan+0x64>
 800c172:	462a      	mov	r2, r5
 800c174:	4649      	mov	r1, r9
 800c176:	4620      	mov	r0, r4
 800c178:	f7ff ffa8 	bl	800c0cc <L_shift>
 800c17c:	4544      	cmp	r4, r8
 800c17e:	d952      	bls.n	800c226 <__hexnan+0x10e>
 800c180:	2300      	movs	r3, #0
 800c182:	f1a4 0904 	sub.w	r9, r4, #4
 800c186:	f844 3c04 	str.w	r3, [r4, #-4]
 800c18a:	f8cd b008 	str.w	fp, [sp, #8]
 800c18e:	464c      	mov	r4, r9
 800c190:	461d      	mov	r5, r3
 800c192:	9903      	ldr	r1, [sp, #12]
 800c194:	e7d7      	b.n	800c146 <__hexnan+0x2e>
 800c196:	2a29      	cmp	r2, #41	@ 0x29
 800c198:	d157      	bne.n	800c24a <__hexnan+0x132>
 800c19a:	3102      	adds	r1, #2
 800c19c:	f8ca 1000 	str.w	r1, [sl]
 800c1a0:	f1bb 0f00 	cmp.w	fp, #0
 800c1a4:	d051      	beq.n	800c24a <__hexnan+0x132>
 800c1a6:	454c      	cmp	r4, r9
 800c1a8:	d206      	bcs.n	800c1b8 <__hexnan+0xa0>
 800c1aa:	2d07      	cmp	r5, #7
 800c1ac:	dc04      	bgt.n	800c1b8 <__hexnan+0xa0>
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f7ff ff8a 	bl	800c0cc <L_shift>
 800c1b8:	4544      	cmp	r4, r8
 800c1ba:	d936      	bls.n	800c22a <__hexnan+0x112>
 800c1bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c1c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c1ca:	429f      	cmp	r7, r3
 800c1cc:	d2f9      	bcs.n	800c1c2 <__hexnan+0xaa>
 800c1ce:	1b3b      	subs	r3, r7, r4
 800c1d0:	f023 0303 	bic.w	r3, r3, #3
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	3401      	adds	r4, #1
 800c1d8:	3e03      	subs	r6, #3
 800c1da:	42b4      	cmp	r4, r6
 800c1dc:	bf88      	it	hi
 800c1de:	2304      	movhi	r3, #4
 800c1e0:	4443      	add	r3, r8
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f843 2b04 	str.w	r2, [r3], #4
 800c1e8:	429f      	cmp	r7, r3
 800c1ea:	d2fb      	bcs.n	800c1e4 <__hexnan+0xcc>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	b91b      	cbnz	r3, 800c1f8 <__hexnan+0xe0>
 800c1f0:	4547      	cmp	r7, r8
 800c1f2:	d128      	bne.n	800c246 <__hexnan+0x12e>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	603b      	str	r3, [r7, #0]
 800c1f8:	2005      	movs	r0, #5
 800c1fa:	b007      	add	sp, #28
 800c1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c200:	3501      	adds	r5, #1
 800c202:	2d08      	cmp	r5, #8
 800c204:	f10b 0b01 	add.w	fp, fp, #1
 800c208:	dd06      	ble.n	800c218 <__hexnan+0x100>
 800c20a:	4544      	cmp	r4, r8
 800c20c:	d9c1      	bls.n	800c192 <__hexnan+0x7a>
 800c20e:	2300      	movs	r3, #0
 800c210:	f844 3c04 	str.w	r3, [r4, #-4]
 800c214:	2501      	movs	r5, #1
 800c216:	3c04      	subs	r4, #4
 800c218:	6822      	ldr	r2, [r4, #0]
 800c21a:	f000 000f 	and.w	r0, r0, #15
 800c21e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c222:	6020      	str	r0, [r4, #0]
 800c224:	e7b5      	b.n	800c192 <__hexnan+0x7a>
 800c226:	2508      	movs	r5, #8
 800c228:	e7b3      	b.n	800c192 <__hexnan+0x7a>
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d0dd      	beq.n	800c1ec <__hexnan+0xd4>
 800c230:	f1c3 0320 	rsb	r3, r3, #32
 800c234:	f04f 32ff 	mov.w	r2, #4294967295
 800c238:	40da      	lsrs	r2, r3
 800c23a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c23e:	4013      	ands	r3, r2
 800c240:	f846 3c04 	str.w	r3, [r6, #-4]
 800c244:	e7d2      	b.n	800c1ec <__hexnan+0xd4>
 800c246:	3f04      	subs	r7, #4
 800c248:	e7d0      	b.n	800c1ec <__hexnan+0xd4>
 800c24a:	2004      	movs	r0, #4
 800c24c:	e7d5      	b.n	800c1fa <__hexnan+0xe2>

0800c24e <__ascii_mbtowc>:
 800c24e:	b082      	sub	sp, #8
 800c250:	b901      	cbnz	r1, 800c254 <__ascii_mbtowc+0x6>
 800c252:	a901      	add	r1, sp, #4
 800c254:	b142      	cbz	r2, 800c268 <__ascii_mbtowc+0x1a>
 800c256:	b14b      	cbz	r3, 800c26c <__ascii_mbtowc+0x1e>
 800c258:	7813      	ldrb	r3, [r2, #0]
 800c25a:	600b      	str	r3, [r1, #0]
 800c25c:	7812      	ldrb	r2, [r2, #0]
 800c25e:	1e10      	subs	r0, r2, #0
 800c260:	bf18      	it	ne
 800c262:	2001      	movne	r0, #1
 800c264:	b002      	add	sp, #8
 800c266:	4770      	bx	lr
 800c268:	4610      	mov	r0, r2
 800c26a:	e7fb      	b.n	800c264 <__ascii_mbtowc+0x16>
 800c26c:	f06f 0001 	mvn.w	r0, #1
 800c270:	e7f8      	b.n	800c264 <__ascii_mbtowc+0x16>

0800c272 <_realloc_r>:
 800c272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c276:	4607      	mov	r7, r0
 800c278:	4614      	mov	r4, r2
 800c27a:	460d      	mov	r5, r1
 800c27c:	b921      	cbnz	r1, 800c288 <_realloc_r+0x16>
 800c27e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c282:	4611      	mov	r1, r2
 800c284:	f7fd bcf2 	b.w	8009c6c <_malloc_r>
 800c288:	b92a      	cbnz	r2, 800c296 <_realloc_r+0x24>
 800c28a:	f7fd fc7b 	bl	8009b84 <_free_r>
 800c28e:	4625      	mov	r5, r4
 800c290:	4628      	mov	r0, r5
 800c292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c296:	f000 f840 	bl	800c31a <_malloc_usable_size_r>
 800c29a:	4284      	cmp	r4, r0
 800c29c:	4606      	mov	r6, r0
 800c29e:	d802      	bhi.n	800c2a6 <_realloc_r+0x34>
 800c2a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2a4:	d8f4      	bhi.n	800c290 <_realloc_r+0x1e>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7fd fcdf 	bl	8009c6c <_malloc_r>
 800c2ae:	4680      	mov	r8, r0
 800c2b0:	b908      	cbnz	r0, 800c2b6 <_realloc_r+0x44>
 800c2b2:	4645      	mov	r5, r8
 800c2b4:	e7ec      	b.n	800c290 <_realloc_r+0x1e>
 800c2b6:	42b4      	cmp	r4, r6
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	bf28      	it	cs
 800c2be:	4632      	movcs	r2, r6
 800c2c0:	f7ff fc44 	bl	800bb4c <memcpy>
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f7fd fc5c 	bl	8009b84 <_free_r>
 800c2cc:	e7f1      	b.n	800c2b2 <_realloc_r+0x40>

0800c2ce <__ascii_wctomb>:
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	b141      	cbz	r1, 800c2e6 <__ascii_wctomb+0x18>
 800c2d4:	2aff      	cmp	r2, #255	@ 0xff
 800c2d6:	d904      	bls.n	800c2e2 <__ascii_wctomb+0x14>
 800c2d8:	228a      	movs	r2, #138	@ 0x8a
 800c2da:	601a      	str	r2, [r3, #0]
 800c2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e0:	4770      	bx	lr
 800c2e2:	700a      	strb	r2, [r1, #0]
 800c2e4:	2001      	movs	r0, #1
 800c2e6:	4770      	bx	lr

0800c2e8 <fiprintf>:
 800c2e8:	b40e      	push	{r1, r2, r3}
 800c2ea:	b503      	push	{r0, r1, lr}
 800c2ec:	4601      	mov	r1, r0
 800c2ee:	ab03      	add	r3, sp, #12
 800c2f0:	4805      	ldr	r0, [pc, #20]	@ (800c308 <fiprintf+0x20>)
 800c2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2f6:	6800      	ldr	r0, [r0, #0]
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	f7ff f9a3 	bl	800b644 <_vfiprintf_r>
 800c2fe:	b002      	add	sp, #8
 800c300:	f85d eb04 	ldr.w	lr, [sp], #4
 800c304:	b003      	add	sp, #12
 800c306:	4770      	bx	lr
 800c308:	2400002c 	.word	0x2400002c

0800c30c <abort>:
 800c30c:	b508      	push	{r3, lr}
 800c30e:	2006      	movs	r0, #6
 800c310:	f000 f834 	bl	800c37c <raise>
 800c314:	2001      	movs	r0, #1
 800c316:	f7f6 ff38 	bl	800318a <_exit>

0800c31a <_malloc_usable_size_r>:
 800c31a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c31e:	1f18      	subs	r0, r3, #4
 800c320:	2b00      	cmp	r3, #0
 800c322:	bfbc      	itt	lt
 800c324:	580b      	ldrlt	r3, [r1, r0]
 800c326:	18c0      	addlt	r0, r0, r3
 800c328:	4770      	bx	lr

0800c32a <_raise_r>:
 800c32a:	291f      	cmp	r1, #31
 800c32c:	b538      	push	{r3, r4, r5, lr}
 800c32e:	4605      	mov	r5, r0
 800c330:	460c      	mov	r4, r1
 800c332:	d904      	bls.n	800c33e <_raise_r+0x14>
 800c334:	2316      	movs	r3, #22
 800c336:	6003      	str	r3, [r0, #0]
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	bd38      	pop	{r3, r4, r5, pc}
 800c33e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c340:	b112      	cbz	r2, 800c348 <_raise_r+0x1e>
 800c342:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c346:	b94b      	cbnz	r3, 800c35c <_raise_r+0x32>
 800c348:	4628      	mov	r0, r5
 800c34a:	f000 f831 	bl	800c3b0 <_getpid_r>
 800c34e:	4622      	mov	r2, r4
 800c350:	4601      	mov	r1, r0
 800c352:	4628      	mov	r0, r5
 800c354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c358:	f000 b818 	b.w	800c38c <_kill_r>
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d00a      	beq.n	800c376 <_raise_r+0x4c>
 800c360:	1c59      	adds	r1, r3, #1
 800c362:	d103      	bne.n	800c36c <_raise_r+0x42>
 800c364:	2316      	movs	r3, #22
 800c366:	6003      	str	r3, [r0, #0]
 800c368:	2001      	movs	r0, #1
 800c36a:	e7e7      	b.n	800c33c <_raise_r+0x12>
 800c36c:	2100      	movs	r1, #0
 800c36e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c372:	4620      	mov	r0, r4
 800c374:	4798      	blx	r3
 800c376:	2000      	movs	r0, #0
 800c378:	e7e0      	b.n	800c33c <_raise_r+0x12>
	...

0800c37c <raise>:
 800c37c:	4b02      	ldr	r3, [pc, #8]	@ (800c388 <raise+0xc>)
 800c37e:	4601      	mov	r1, r0
 800c380:	6818      	ldr	r0, [r3, #0]
 800c382:	f7ff bfd2 	b.w	800c32a <_raise_r>
 800c386:	bf00      	nop
 800c388:	2400002c 	.word	0x2400002c

0800c38c <_kill_r>:
 800c38c:	b538      	push	{r3, r4, r5, lr}
 800c38e:	4d07      	ldr	r5, [pc, #28]	@ (800c3ac <_kill_r+0x20>)
 800c390:	2300      	movs	r3, #0
 800c392:	4604      	mov	r4, r0
 800c394:	4608      	mov	r0, r1
 800c396:	4611      	mov	r1, r2
 800c398:	602b      	str	r3, [r5, #0]
 800c39a:	f7f6 fee6 	bl	800316a <_kill>
 800c39e:	1c43      	adds	r3, r0, #1
 800c3a0:	d102      	bne.n	800c3a8 <_kill_r+0x1c>
 800c3a2:	682b      	ldr	r3, [r5, #0]
 800c3a4:	b103      	cbz	r3, 800c3a8 <_kill_r+0x1c>
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	bd38      	pop	{r3, r4, r5, pc}
 800c3aa:	bf00      	nop
 800c3ac:	24000620 	.word	0x24000620

0800c3b0 <_getpid_r>:
 800c3b0:	f7f6 bed3 	b.w	800315a <_getpid>

0800c3b4 <_init>:
 800c3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3b6:	bf00      	nop
 800c3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ba:	bc08      	pop	{r3}
 800c3bc:	469e      	mov	lr, r3
 800c3be:	4770      	bx	lr

0800c3c0 <_fini>:
 800c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c2:	bf00      	nop
 800c3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3c6:	bc08      	pop	{r3}
 800c3c8:	469e      	mov	lr, r3
 800c3ca:	4770      	bx	lr
