
Multi-sensor_Fusion_and_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d54  0800c368  0800c368  0000d368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d0bc  0800d0bc  0000e0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d0c4  0800d0c4  0000e0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d0c8  0800d0c8  0000e0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  0800d0cc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000448  240001e8  0800d2b4  0000f1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00001700  24000630  0800d2b4  0000f630  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012cd1  00000000  00000000  0000f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cbc  00000000  00000000  00021ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  00024ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b59  00000000  00000000  00025a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000389d5  00000000  00000000  000265e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014c4b  00000000  00000000  0005efb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b6c8  00000000  00000000  00073c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cf2c9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005028  00000000  00000000  001cf30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  001d4334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c34c 	.word	0x0800c34c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800c34c 	.word	0x0800c34c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <BMI088_Accel_CS_Select>:
/**
  * @brief  選取加速度計晶片 (CS1 拉低)
  * @param  None
  * @retval None
  */
static void BMI088_Accel_CS_Select(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS1_BMI088_ACCEL_GPIO_Port, SPI3_nCS1_BMI088_ACCEL_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000782:	4802      	ldr	r0, [pc, #8]	@ (800078c <BMI088_Accel_CS_Select+0x14>)
 8000784:	f003 fa12 	bl	8003bac <HAL_GPIO_WritePin>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	58020c00 	.word	0x58020c00

08000790 <BMI088_Accel_CS_Deselect>:
/**
  * @brief  取消選取加速度計晶片 (CS1 拉高)
  * @param  None
  * @retval None
  */
static void BMI088_Accel_CS_Deselect(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS1_BMI088_ACCEL_GPIO_Port, SPI3_nCS1_BMI088_ACCEL_Pin, GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079a:	4802      	ldr	r0, [pc, #8]	@ (80007a4 <BMI088_Accel_CS_Deselect+0x14>)
 800079c:	f003 fa06 	bl	8003bac <HAL_GPIO_WritePin>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	58020c00 	.word	0x58020c00

080007a8 <BMI088_Gyro_CS_Select>:
/**
  * @brief  選取陀螺儀晶片 (CS2 拉低)
  * @param  None
  * @retval None
  */
static void BMI088_Gyro_CS_Select(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS2_BMI088_GYRO_GPIO_Port, SPI3_nCS2_BMI088_GYRO_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b2:	4802      	ldr	r0, [pc, #8]	@ (80007bc <BMI088_Gyro_CS_Select+0x14>)
 80007b4:	f003 f9fa 	bl	8003bac <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	58020c00 	.word	0x58020c00

080007c0 <BMI088_Gyro_CS_Deselect>:
/**
  * @brief  取消選取陀螺儀晶片 (CS2 拉高)
  * @param  None
  * @retval None
  */
static void BMI088_Gyro_CS_Deselect(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_nCS2_BMI088_GYRO_GPIO_Port, SPI3_nCS2_BMI088_GYRO_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ca:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <BMI088_Gyro_CS_Deselect+0x14>)
 80007cc:	f003 f9ee 	bl	8003bac <HAL_GPIO_WritePin>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00

080007d8 <BMI088_Accel_Write_Byte>:
  * @brief  向加速度計寫入單個位元組
  * @param  reg: 目標暫存器位址
  * @param  data: 要寫入的數據
  * @retval None
  */
static void BMI088_Accel_Write_Byte(uint8_t reg, uint8_t data) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
    BMI088_Accel_CS_Select();
 80007e8:	f7ff ffc6 	bl	8000778 <BMI088_Accel_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 80007ec:	1df9      	adds	r1, r7, #7
 80007ee:	2364      	movs	r3, #100	@ 0x64
 80007f0:	2201      	movs	r2, #1
 80007f2:	4807      	ldr	r0, [pc, #28]	@ (8000810 <BMI088_Accel_Write_Byte+0x38>)
 80007f4:	f006 fd74 	bl	80072e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 80007f8:	1db9      	adds	r1, r7, #6
 80007fa:	2364      	movs	r3, #100	@ 0x64
 80007fc:	2201      	movs	r2, #1
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <BMI088_Accel_Write_Byte+0x38>)
 8000800:	f006 fd6e 	bl	80072e0 <HAL_SPI_Transmit>
    BMI088_Accel_CS_Deselect();
 8000804:	f7ff ffc4 	bl	8000790 <BMI088_Accel_CS_Deselect>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2400041c 	.word	0x2400041c

08000814 <BMI088_Accel_Read_Byte>:
/**
  * @brief  從加速度計讀取單個位元組
  * @param  reg: 目標暫存器位址
  * @retval 讀取到的數據
  */
static uint8_t BMI088_Accel_Read_Byte(uint8_t reg) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
    uint8_t read_buf;
    // SPI 讀取操作時，MSB 需要設為 1
    reg |= 0x80;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000824:	b2db      	uxtb	r3, r3
 8000826:	71fb      	strb	r3, [r7, #7]
    BMI088_Accel_CS_Select();
 8000828:	f7ff ffa6 	bl	8000778 <BMI088_Accel_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 800082c:	1df9      	adds	r1, r7, #7
 800082e:	2364      	movs	r3, #100	@ 0x64
 8000830:	2201      	movs	r2, #1
 8000832:	4808      	ldr	r0, [pc, #32]	@ (8000854 <BMI088_Accel_Read_Byte+0x40>)
 8000834:	f006 fd54 	bl	80072e0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &read_buf, 1, 100);
 8000838:	f107 010f 	add.w	r1, r7, #15
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	2201      	movs	r2, #1
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <BMI088_Accel_Read_Byte+0x40>)
 8000842:	f006 ff3b 	bl	80076bc <HAL_SPI_Receive>
    BMI088_Accel_CS_Deselect();
 8000846:	f7ff ffa3 	bl	8000790 <BMI088_Accel_CS_Deselect>
    return read_buf;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2400041c 	.word	0x2400041c

08000858 <BMI088_Accel_Read_Multi>:
  * @param  reg: 起始暫存器位址
  * @param  data: 存放讀取數據的緩衝區
  * @param  len: 要讀取的位元組長度
  * @retval None
  */
static HAL_StatusTypeDef BMI088_Accel_Read_Multi(uint8_t reg, uint8_t* data, uint16_t len) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	80bb      	strh	r3, [r7, #4]
    reg |= 0x80;
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800086e:	b2db      	uxtb	r3, r3
 8000870:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef SPI_Receive_status;
    BMI088_Accel_CS_Select();
 8000872:	f7ff ff81 	bl	8000778 <BMI088_Accel_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 8000876:	1df9      	adds	r1, r7, #7
 8000878:	2364      	movs	r3, #100	@ 0x64
 800087a:	2201      	movs	r2, #1
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <BMI088_Accel_Read_Multi+0x48>)
 800087e:	f006 fd2f 	bl	80072e0 <HAL_SPI_Transmit>
    SPI_Receive_status = HAL_SPI_Receive(&hspi3, data, len, 100);//儲存狀態以利錯誤處理
 8000882:	88ba      	ldrh	r2, [r7, #4]
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	6839      	ldr	r1, [r7, #0]
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <BMI088_Accel_Read_Multi+0x48>)
 800088a:	f006 ff17 	bl	80076bc <HAL_SPI_Receive>
 800088e:	4603      	mov	r3, r0
 8000890:	73fb      	strb	r3, [r7, #15]
    BMI088_Accel_CS_Deselect();
 8000892:	f7ff ff7d 	bl	8000790 <BMI088_Accel_CS_Deselect>
    return SPI_Receive_status;
 8000896:	7bfb      	ldrb	r3, [r7, #15]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2400041c 	.word	0x2400041c

080008a4 <BMI088_Gyro_Write_Byte>:
  * @brief  向陀螺儀寫入單個位元組
  * @param  reg: 目標暫存器位址
  * @param  data: 要寫入的數據
  * @retval None
  */
static void BMI088_Gyro_Write_Byte(uint8_t reg, uint8_t data) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
    BMI088_Gyro_CS_Select();
 80008b4:	f7ff ff78 	bl	80007a8 <BMI088_Gyro_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 80008b8:	1df9      	adds	r1, r7, #7
 80008ba:	2364      	movs	r3, #100	@ 0x64
 80008bc:	2201      	movs	r2, #1
 80008be:	4807      	ldr	r0, [pc, #28]	@ (80008dc <BMI088_Gyro_Write_Byte+0x38>)
 80008c0:	f006 fd0e 	bl	80072e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 80008c4:	1db9      	adds	r1, r7, #6
 80008c6:	2364      	movs	r3, #100	@ 0x64
 80008c8:	2201      	movs	r2, #1
 80008ca:	4804      	ldr	r0, [pc, #16]	@ (80008dc <BMI088_Gyro_Write_Byte+0x38>)
 80008cc:	f006 fd08 	bl	80072e0 <HAL_SPI_Transmit>
    BMI088_Gyro_CS_Deselect();
 80008d0:	f7ff ff76 	bl	80007c0 <BMI088_Gyro_CS_Deselect>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2400041c 	.word	0x2400041c

080008e0 <BMI088_Gyro_Read_Byte>:
/**
  * @brief  從陀螺儀讀取單個位元組
  * @param  reg: 目標暫存器位址
  * @retval 讀取到的數據
  */
static uint8_t BMI088_Gyro_Read_Byte(uint8_t reg) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
    uint8_t read_buf;
    reg |= 0x80;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	71fb      	strb	r3, [r7, #7]
    BMI088_Gyro_CS_Select();
 80008f4:	f7ff ff58 	bl	80007a8 <BMI088_Gyro_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	2364      	movs	r3, #100	@ 0x64
 80008fc:	2201      	movs	r2, #1
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <BMI088_Gyro_Read_Byte+0x40>)
 8000900:	f006 fcee 	bl	80072e0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &read_buf, 1, 100);
 8000904:	f107 010f 	add.w	r1, r7, #15
 8000908:	2364      	movs	r3, #100	@ 0x64
 800090a:	2201      	movs	r2, #1
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <BMI088_Gyro_Read_Byte+0x40>)
 800090e:	f006 fed5 	bl	80076bc <HAL_SPI_Receive>
    BMI088_Gyro_CS_Deselect();
 8000912:	f7ff ff55 	bl	80007c0 <BMI088_Gyro_CS_Deselect>
    return read_buf;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2400041c 	.word	0x2400041c

08000924 <BMI088_Gyro_Read_Multi>:
  * @param  reg: 起始暫存器位址
  * @param  data: 存放讀取數據的緩衝區
  * @param  len: 要讀取的位元組長度
  * @retval None
  */
static HAL_StatusTypeDef BMI088_Gyro_Read_Multi(uint8_t reg, uint8_t* data, uint16_t len) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	80bb      	strh	r3, [r7, #4]
    reg |= 0x80;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800093a:	b2db      	uxtb	r3, r3
 800093c:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef SPI_Receive_status;
    BMI088_Gyro_CS_Select();
 800093e:	f7ff ff33 	bl	80007a8 <BMI088_Gyro_CS_Select>
    HAL_SPI_Transmit(&hspi3, &reg, 1, 100);
 8000942:	1df9      	adds	r1, r7, #7
 8000944:	2364      	movs	r3, #100	@ 0x64
 8000946:	2201      	movs	r2, #1
 8000948:	4808      	ldr	r0, [pc, #32]	@ (800096c <BMI088_Gyro_Read_Multi+0x48>)
 800094a:	f006 fcc9 	bl	80072e0 <HAL_SPI_Transmit>
    SPI_Receive_status = HAL_SPI_Receive(&hspi3, data, len, 100);
 800094e:	88ba      	ldrh	r2, [r7, #4]
 8000950:	2364      	movs	r3, #100	@ 0x64
 8000952:	6839      	ldr	r1, [r7, #0]
 8000954:	4805      	ldr	r0, [pc, #20]	@ (800096c <BMI088_Gyro_Read_Multi+0x48>)
 8000956:	f006 feb1 	bl	80076bc <HAL_SPI_Receive>
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]
    BMI088_Gyro_CS_Deselect();
 800095e:	f7ff ff2f 	bl	80007c0 <BMI088_Gyro_CS_Deselect>
    return SPI_Receive_status;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2400041c 	.word	0x2400041c

08000970 <BMI088_Init>:
/**
  * @brief  初始化 BMI088 加速度計與陀螺儀
  * @param  None
  * @retval 0: 成功, 1: 加速度計錯誤, 2: 陀螺儀錯誤
  */
uint8_t BMI088_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
    uint8_t chip_id = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	71fb      	strb	r3, [r7, #7]

    // --- 加速度計初始化 ---
    // 1. 檢查晶片 ID
    chip_id = BMI088_Accel_Read_Byte(BMI088_ACC_CHIP_ID_ADDR);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff ff4a 	bl	8000814 <BMI088_Accel_Read_Byte>
 8000980:	4603      	mov	r3, r0
 8000982:	71fb      	strb	r3, [r7, #7]
    if (chip_id!= BMI088_ACC_CHIP_ID) {
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b1e      	cmp	r3, #30
 8000988:	d001      	beq.n	800098e <BMI088_Init+0x1e>
//        printf("Error: ACCEL Chip ID wrong! Get: 0x%02X\r\n", chip_id);
        return SENSOR_INVALID_ID;
 800098a:	2306      	movs	r3, #6
 800098c:	e03d      	b.n	8000a0a <BMI088_Init+0x9a>
    }
//    printf("ACCEL Chip ID OK: 0x%02X\r\n", chip_id);

    // 2. 軟復位
    BMI088_Accel_Write_Byte(BMI088_ACC_SOFTRESET_ADDR, 0xB6);
 800098e:	21b6      	movs	r1, #182	@ 0xb6
 8000990:	207e      	movs	r0, #126	@ 0x7e
 8000992:	f7ff ff21 	bl	80007d8 <BMI088_Accel_Write_Byte>
    HAL_Delay(100); // 等待復位完成， datasheet 建議至少 1ms，這裡給予更長的時間
 8000996:	2064      	movs	r0, #100	@ 0x64
 8000998:	f002 fdcc 	bl	8003534 <HAL_Delay>

    // 3. 電源控制，從 suspend 模式喚醒
    BMI088_Accel_Write_Byte(BMI088_ACC_PWR_CONF_ADDR, 0x00);
 800099c:	2100      	movs	r1, #0
 800099e:	207c      	movs	r0, #124	@ 0x7c
 80009a0:	f7ff ff1a 	bl	80007d8 <BMI088_Accel_Write_Byte>
    HAL_Delay(50);
 80009a4:	2032      	movs	r0, #50	@ 0x32
 80009a6:	f002 fdc5 	bl	8003534 <HAL_Delay>
    // 啟用加速度計
    BMI088_Accel_Write_Byte(BMI088_ACC_PWR_CTRL_ADDR, 0x04);
 80009aa:	2104      	movs	r1, #4
 80009ac:	207d      	movs	r0, #125	@ 0x7d
 80009ae:	f7ff ff13 	bl	80007d8 <BMI088_Accel_Write_Byte>
    HAL_Delay(50);
 80009b2:	2032      	movs	r0, #50	@ 0x32
 80009b4:	f002 fdbe 	bl	8003534 <HAL_Delay>

    // 4. 配置量測參數
    // ODR=100Hz, Normal Bandwidth
    BMI088_Accel_Write_Byte(BMI088_ACC_CONF_ADDR, 0xA8);
 80009b8:	21a8      	movs	r1, #168	@ 0xa8
 80009ba:	2040      	movs	r0, #64	@ 0x40
 80009bc:	f7ff ff0c 	bl	80007d8 <BMI088_Accel_Write_Byte>
    // Range=±3g
    BMI088_Accel_Write_Byte(BMI088_ACC_RANGE_ADDR, 0x00);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2041      	movs	r0, #65	@ 0x41
 80009c4:	f7ff ff08 	bl	80007d8 <BMI088_Accel_Write_Byte>

    // --- 陀螺儀初始化 ---
    // 1. 檢查晶片 ID
    chip_id = BMI088_Gyro_Read_Byte(BMI088_GYRO_CHIP_ID_ADDR);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff89 	bl	80008e0 <BMI088_Gyro_Read_Byte>
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
    if (chip_id!= BMI088_GYRO_CHIP_ID) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d001      	beq.n	80009dc <BMI088_Init+0x6c>
//        printf("Error: GYRO Chip ID wrong! Get: 0x%02X\r\n", chip_id);
        return SENSOR_INVALID_ID;
 80009d8:	2306      	movs	r3, #6
 80009da:	e016      	b.n	8000a0a <BMI088_Init+0x9a>
    }
//    printf("GYRO Chip ID OK: 0x%02X\r\n", chip_id);

    // 2. 軟復位
    BMI088_Gyro_Write_Byte(BMI088_GYRO_SOFTRESET_ADDR, 0xB6);
 80009dc:	21b6      	movs	r1, #182	@ 0xb6
 80009de:	2014      	movs	r0, #20
 80009e0:	f7ff ff60 	bl	80008a4 <BMI088_Gyro_Write_Byte>
    HAL_Delay(100);
 80009e4:	2064      	movs	r0, #100	@ 0x64
 80009e6:	f002 fda5 	bl	8003534 <HAL_Delay>

    // 3. 電源控制，從 suspend 模式喚醒到 normal 模式
    BMI088_Gyro_Write_Byte(BMI088_GYRO_LPM1_ADDR, 0x00);
 80009ea:	2100      	movs	r1, #0
 80009ec:	2011      	movs	r0, #17
 80009ee:	f7ff ff59 	bl	80008a4 <BMI088_Gyro_Write_Byte>
    HAL_Delay(50);
 80009f2:	2032      	movs	r0, #50	@ 0x32
 80009f4:	f002 fd9e 	bl	8003534 <HAL_Delay>

    // 4. 配置量測參數
    // Range=±2000 dps
    BMI088_Gyro_Write_Byte(BMI088_GYRO_RANGE_ADDR, 0x00);
 80009f8:	2100      	movs	r1, #0
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff ff52 	bl	80008a4 <BMI088_Gyro_Write_Byte>
    // ODR=200Hz, Bandwidth=53Hz
    BMI088_Gyro_Write_Byte(BMI088_GYRO_BANDWIDTH_ADDR, 0x8A);
 8000a00:	218a      	movs	r1, #138	@ 0x8a
 8000a02:	2010      	movs	r0, #16
 8000a04:	f7ff ff4e 	bl	80008a4 <BMI088_Gyro_Write_Byte>

//    printf("BMI088 Init Success.\r\n");
    return SENSOR_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <BMI088_Main>:
 * float gyro_dps[3];    // 0:X, 1:Y, 2:Z
 * } bmi088_data;
 *
 */

HAL_StatusTypeDef BMI088_Main(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af04      	add	r7, sp, #16
    uint8_t accel_raw_data[6];
    uint8_t gyro_raw_data[6];
    HAL_StatusTypeDef BMI088_status;
    // 讀取加速度計的 X, Y, Z 軸數據 (共 6 個位元組)
    // 數據順序: X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB
    BMI088_status = BMI088_Accel_Read_Multi(BMI088_ACC_X_LSB_ADDR, accel_raw_data, 6);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2206      	movs	r2, #6
 8000a20:	4619      	mov	r1, r3
 8000a22:	2012      	movs	r0, #18
 8000a24:	f7ff ff18 	bl	8000858 <BMI088_Accel_Read_Multi>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]
    //錯誤處理
    if(BMI088_status != 0)
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <BMI088_Main+0x2c>
    {
    	printf("<BMI-088>Failed to read data! Error Code: %d\r\n",BMI088_status);
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	4619      	mov	r1, r3
 8000a36:	486f      	ldr	r0, [pc, #444]	@ (8000bf4 <BMI088_Main+0x1e0>)
 8000a38:	f008 f898 	bl	8008b6c <iprintf>
    	return SENSOR_COMM_FAIL;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	e0d5      	b.n	8000bec <BMI088_Main+0x1d8>
    }
    // 讀取陀螺儀的 X, Y, Z 軸數據 (共 6 個位元組)
    // 數據順序: X_LSB, X_MSB, Y_LSB, Y_MSB, Z_LSB, Z_MSB
    BMI088_status = BMI088_Gyro_Read_Multi(BMI088_GYRO_RATE_X_LSB_ADDR, gyro_raw_data, 6);
 8000a40:	463b      	mov	r3, r7
 8000a42:	2206      	movs	r2, #6
 8000a44:	4619      	mov	r1, r3
 8000a46:	2002      	movs	r0, #2
 8000a48:	f7ff ff6c 	bl	8000924 <BMI088_Gyro_Read_Multi>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]
    //錯誤處理
    if(BMI088_status != 0)
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d006      	beq.n	8000a64 <BMI088_Main+0x50>
    {
    	printf("<BMI-088>Failed to read data! Error Code: %d\r\n",BMI088_status);
 8000a56:	7bfb      	ldrb	r3, [r7, #15]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4866      	ldr	r0, [pc, #408]	@ (8000bf4 <BMI088_Main+0x1e0>)
 8000a5c:	f008 f886 	bl	8008b6c <iprintf>
    	return SENSOR_COMM_FAIL;
 8000a60:	2304      	movs	r3, #4
 8000a62:	e0c3      	b.n	8000bec <BMI088_Main+0x1d8>
    }
    // --- 數據組合與轉換 ---
    // 修正 #2: 從陣列中正確取出 LSB 和 MSB 進行組合
    // 修正 #3: 將各軸數據存到對應的陣列索引中，避免覆蓋
    // Accel X = MSB 在前, LSB 在後
    bmi088_data.raw_accel[0] = (int16_t)((accel_raw_data[1] << 8) | accel_raw_data[0]);
 8000a64:	7a7b      	ldrb	r3, [r7, #9]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	021b      	lsls	r3, r3, #8
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	7a3b      	ldrb	r3, [r7, #8]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	4b60      	ldr	r3, [pc, #384]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000a76:	801a      	strh	r2, [r3, #0]
    // Accel Y
    bmi088_data.raw_accel[1] = (int16_t)((accel_raw_data[3] << 8) | accel_raw_data[2]);
 8000a78:	7afb      	ldrb	r3, [r7, #11]
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	021b      	lsls	r3, r3, #8
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	7abb      	ldrb	r3, [r7, #10]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	4b5b      	ldr	r3, [pc, #364]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000a8a:	805a      	strh	r2, [r3, #2]
    // Accel Z
    bmi088_data.raw_accel[2] = (int16_t)((accel_raw_data[5] << 8) | accel_raw_data[4]);
 8000a8c:	7b7b      	ldrb	r3, [r7, #13]
 8000a8e:	b21b      	sxth	r3, r3
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	b21a      	sxth	r2, r3
 8000a94:	7b3b      	ldrb	r3, [r7, #12]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b21a      	sxth	r2, r3
 8000a9c:	4b56      	ldr	r3, [pc, #344]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000a9e:	809a      	strh	r2, [r3, #4]

    // Gyro X
    bmi088_data.raw_gyro[0] = (int16_t)((gyro_raw_data[1] << 8) | gyro_raw_data[0]);
 8000aa0:	787b      	ldrb	r3, [r7, #1]
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	b21a      	sxth	r2, r3
 8000aa8:	783b      	ldrb	r3, [r7, #0]
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	4b51      	ldr	r3, [pc, #324]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ab2:	80da      	strh	r2, [r3, #6]
    // Gyro Y
    bmi088_data.raw_gyro[1] = (int16_t)((gyro_raw_data[3] << 8) | gyro_raw_data[2]);
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	78bb      	ldrb	r3, [r7, #2]
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21a      	sxth	r2, r3
 8000ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ac6:	811a      	strh	r2, [r3, #8]
    // Gyro Z
    bmi088_data.raw_gyro[2] = (int16_t)((gyro_raw_data[5] << 8) | gyro_raw_data[4]);
 8000ac8:	797b      	ldrb	r3, [r7, #5]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	b21a      	sxth	r2, r3
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	4b47      	ldr	r3, [pc, #284]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ada:	815a      	strh	r2, [r3, #10]

    // 將原始數據轉換為物理單位 (參考第四章)
    // 加速度計靈敏度 (LSB/g)，範圍 ±3g -> 2^16 / (2 * 3g) = 65536 / 6 ≈ 10922 LSB/g
    // 實際轉換：value_g = raw_value * (3.0f / 32768.0f)
    bmi088_data.accel_g[0] = bmi088_data.raw_accel[0] * (3.0f / 32768.0f);
 8000adc:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aea:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000bfc <BMI088_Main+0x1e8>
 8000aee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af2:	4b41      	ldr	r3, [pc, #260]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000af4:	edc3 7a03 	vstr	s15, [r3, #12]
    bmi088_data.accel_g[1] = bmi088_data.raw_accel[1] * (3.0f / 32768.0f);
 8000af8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000afa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b06:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000bfc <BMI088_Main+0x1e8>
 8000b0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b10:	edc3 7a04 	vstr	s15, [r3, #16]
    bmi088_data.accel_g[2] = bmi088_data.raw_accel[2] * (3.0f / 32768.0f);
 8000b14:	4b38      	ldr	r3, [pc, #224]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b22:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000bfc <BMI088_Main+0x1e8>
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	4b33      	ldr	r3, [pc, #204]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b2c:	edc3 7a05 	vstr	s15, [r3, #20]

    // 陀螺儀靈敏度 (LSB/dps)，範圍 ±2000dps -> 2^16 / (2 * 2000dps) = 65536 / 4000 = 16.384 LSB/(°/s)
    // 實際轉換：value_dps = raw_value / 16.384  或  value_dps = raw_value * (2000.0f / 32768.0f)
    bmi088_data.gyro_dps[0] = bmi088_data.raw_gyro[0] * (2000.0f / 32768.0f);
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b36:	ee07 3a90 	vmov	s15, r3
 8000b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000c00 <BMI088_Main+0x1ec>
 8000b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b46:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b48:	edc3 7a06 	vstr	s15, [r3, #24]
    bmi088_data.gyro_dps[1] = bmi088_data.raw_gyro[1] * (2000.0f / 32768.0f);
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b52:	ee07 3a90 	vmov	s15, r3
 8000b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b5a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000c00 <BMI088_Main+0x1ec>
 8000b5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b64:	edc3 7a07 	vstr	s15, [r3, #28]
    bmi088_data.gyro_dps[2] = bmi088_data.raw_gyro[2] * (2000.0f / 32768.0f);
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b6e:	ee07 3a90 	vmov	s15, r3
 8000b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b76:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000c00 <BMI088_Main+0x1ec>
 8000b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b80:	edc3 7a08 	vstr	s15, [r3, #32]
    // 輸出轉換後的物理單位數據 (修正 printf 的變數)
//    printf("PHY -> ACC(x,y,z)[g]: %8.3f, %8.3f, %8.3f | GYR(x,y,z)[dps]: %8.3f, %8.3f, %8.3f\r\n",
//           bmi088_data.accel_g[0], bmi088_data.accel_g[1], bmi088_data.accel_g[2],
//           bmi088_data.gyro_dps[0], bmi088_data.gyro_dps[1], bmi088_data.gyro_dps[2]);

	printf("<BMI-088> accel_data: %8.3f, %8.3f, %8.3f\r\n", bmi088_data.accel_g[0], bmi088_data.accel_g[1], bmi088_data.accel_g[2]);
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b86:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b8a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b90:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000b9a:	edd3 6a05 	vldr	s13, [r3, #20]
 8000b9e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ba2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ba6:	ed8d 7b00 	vstr	d7, [sp]
 8000baa:	ec53 2b15 	vmov	r2, r3, d5
 8000bae:	4815      	ldr	r0, [pc, #84]	@ (8000c04 <BMI088_Main+0x1f0>)
 8000bb0:	f007 ffdc 	bl	8008b6c <iprintf>
	printf("<BMI-088> gyro_data: %8.3f, %8.3f, %8.3f\r\n", bmi088_data.gyro_dps[0], bmi088_data.gyro_dps[1], bmi088_data.gyro_dps[2]);
 8000bb4:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000bb6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000bc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000bc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <BMI088_Main+0x1e4>)
 8000bca:	edd3 6a08 	vldr	s13, [r3, #32]
 8000bce:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000bd2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000bd6:	ed8d 7b00 	vstr	d7, [sp]
 8000bda:	ec53 2b15 	vmov	r2, r3, d5
 8000bde:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <BMI088_Main+0x1f4>)
 8000be0:	f007 ffc4 	bl	8008b6c <iprintf>
	printf("The data is OK\r\n");
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <BMI088_Main+0x1f8>)
 8000be6:	f008 f829 	bl	8008c3c <puts>
	return SENSOR_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	0800c368 	.word	0x0800c368
 8000bf8:	24000204 	.word	0x24000204
 8000bfc:	38c00000 	.word	0x38c00000
 8000c00:	3d7a0000 	.word	0x3d7a0000
 8000c04:	0800c398 	.word	0x0800c398
 8000c08:	0800c3c4 	.word	0x0800c3c4
 8000c0c:	0800c3f0 	.word	0x0800c3f0

08000c10 <ICM20948_CS_Select>:

/**
 * @brief 選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為低電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Select(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c1c:	4808      	ldr	r0, [pc, #32]	@ (8000c40 <ICM20948_CS_Select+0x30>)
 8000c1e:	f002 ffc5 	bl	8003bac <HAL_GPIO_WritePin>
    // HAL_Delay(1) 太長，但對於基本功能通常可行。若有高速通訊問題可考慮更精確的延遲或移除。
    // 若 SPI 時脈很慢，此延遲可能不需要或可以縮短。
    // 為了確保穩定性，保留一個非常短的延遲或直接移除，取決於 SPI 時脈和硬體特性。
    // 如果 SPI 時脈在 MHz 等級，CPU 指令本身可能就足夠。
    // 這裡保留 HAL_Delay(1) 作為一個保守的選擇，但可以根據實際測試進行優化。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲替代 HAL_Delay(1)
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	e002      	b.n	8000c2e <ICM20948_CS_Select+0x1e>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b09      	cmp	r3, #9
 8000c32:	ddf9      	ble.n	8000c28 <ICM20948_CS_Select+0x18>
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	58020c00 	.word	0x58020c00

08000c44 <ICM20948_CS_Deselect>:

/**
 * @brief 取消選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為高電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Deselect(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c50:	4808      	ldr	r0, [pc, #32]	@ (8000c74 <ICM20948_CS_Deselect+0x30>)
 8000c52:	f002 ffab 	bl	8003bac <HAL_GPIO_WritePin>
    // Datasheet 建議 SCLK 下降沿到 CS 高電位至少 20ns (tCSH)
    // 同上，HAL_Delay(1) 可能過長。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e002      	b.n	8000c62 <ICM20948_CS_Deselect+0x1e>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b09      	cmp	r3, #9
 8000c66:	ddf9      	ble.n	8000c5c <ICM20948_CS_Deselect+0x18>
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	58020c00 	.word	0x58020c00

08000c78 <ICM20948_WriteByte>:
 * @brief 透過 SPI 寫入單一位元組數據至 ICM-20948 指定暫存器。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為0代表寫入)。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_WriteByte(uint8_t reg_addr, uint8_t data) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buffer[2];
    HAL_StatusTypeDef status;

    tx_buffer[0] = reg_addr & 0x7F; // 寫入操作，MSB 為 0
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = data;
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	737b      	strb	r3, [r7, #13]

    ICM20948_CS_Select();
 8000c96:	f7ff ffbb 	bl	8000c10 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, tx_buffer, 2, SPI_TIMEOUT);
 8000c9a:	f107 010c 	add.w	r1, r7, #12
 8000c9e:	2364      	movs	r3, #100	@ 0x64
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	4806      	ldr	r0, [pc, #24]	@ (8000cbc <ICM20948_WriteByte+0x44>)
 8000ca4:	f006 fb1c 	bl	80072e0 <HAL_SPI_Transmit>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	73fb      	strb	r3, [r7, #15]
    ICM20948_CS_Deselect();
 8000cac:	f7ff ffca 	bl	8000c44 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理，例如記錄錯誤或重試
    }
    return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2400030c 	.word	0x2400030c

08000cc0 <ICM20948_ReadByte>:
 * @brief 透過 SPI 從 ICM-20948 指定暫存器讀取單一位元組數據。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadByte(uint8_t reg_addr, uint8_t *pData) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 8000cd6:	f7ff ff9b 	bl	8000c10 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送要讀取的暫存器位址
 8000cda:	f107 010e 	add.w	r1, r7, #14
 8000cde:	2364      	movs	r3, #100	@ 0x64
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <ICM20948_ReadByte+0x50>)
 8000ce4:	f006 fafc 	bl	80072e0 <HAL_SPI_Transmit>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d107      	bne.n	8000d02 <ICM20948_ReadByte+0x42>
        status = HAL_SPI_Receive(&hspi1, pData, 1, SPI_TIMEOUT); // 接收數據
 8000cf2:	2364      	movs	r3, #100	@ 0x64
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <ICM20948_ReadByte+0x50>)
 8000cfa:	f006 fcdf 	bl	80076bc <HAL_SPI_Receive>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 8000d02:	f7ff ff9f 	bl	8000c44 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2400030c 	.word	0x2400030c

08000d14 <ICM20948_ReadBytes>:
 * @param reg_addr: 起始目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @param count:    要讀取的位元組數量。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadBytes(uint8_t reg_addr, uint8_t *pData, uint16_t count) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	4613      	mov	r3, r2
 8000d22:	80bb      	strh	r3, [r7, #4]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 8000d2e:	f7ff ff6f 	bl	8000c10 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送起始暫存器位址
 8000d32:	f107 010e 	add.w	r1, r7, #14
 8000d36:	2364      	movs	r3, #100	@ 0x64
 8000d38:	2201      	movs	r2, #1
 8000d3a:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <ICM20948_ReadBytes+0x54>)
 8000d3c:	f006 fad0 	bl	80072e0 <HAL_SPI_Transmit>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d107      	bne.n	8000d5a <ICM20948_ReadBytes+0x46>
        status = HAL_SPI_Receive(&hspi1, pData, count, SPI_TIMEOUT); // 連續接收多個位元組
 8000d4a:	88ba      	ldrh	r2, [r7, #4]
 8000d4c:	2364      	movs	r3, #100	@ 0x64
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <ICM20948_ReadBytes+0x54>)
 8000d52:	f006 fcb3 	bl	80076bc <HAL_SPI_Receive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 8000d5a:	f7ff ff73 	bl	8000c44 <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2400030c 	.word	0x2400030c

08000d6c <ICM20948_SelectUserBank>:
 * @param bank: 要選擇的庫編號 (0, 1, 2, 或 3)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 * @note  REG_BANK_SEL 暫存器在所有庫中皆可存取。
 * 位元 [5:4] 用於選擇庫: 00 for UB0, 01 for UB1, 10 for UB2, 11 for UB3.
 */
HAL_StatusTypeDef ICM20948_SelectUserBank(uint8_t bank) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    if (bank > 3) {
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d901      	bls.n	8000d80 <ICM20948_SelectUserBank+0x14>
        return HAL_ERROR; // 無效的庫編號
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e007      	b.n	8000d90 <ICM20948_SelectUserBank+0x24>
    // REG_BANK_SEL (0x7F) 的位元 [5:4] (USER_BANK) 控制庫選擇
    // bank 0 -> 0x00
    // bank 1 -> 0x10
    // bank 2 -> 0x20
    // bank 3 -> 0x30
    return ICM20948_WriteByte(ICM20948_REG_BANK_SEL, (bank << 4));
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4619      	mov	r1, r3
 8000d88:	207f      	movs	r0, #127	@ 0x7f
 8000d8a:	f7ff ff75 	bl	8000c78 <ICM20948_WriteByte>
 8000d8e:	4603      	mov	r3, r0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <AK09916_WriteByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，寫入單一位元組數據至 AK09916 磁力計指定暫存器。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_WriteByteViaICM(uint8_t reg_addr, uint8_t data) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t current_bank_sel_val;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 8000da8:	2303      	movs	r3, #3
 8000daa:	73fb      	strb	r3, [r7, #15]
    // status = ICM20948_ReadByte(ICM20948_REG_BANK_SEL, &current_bank_sel_val);
    // if (status != HAL_OK) return status;
    // current_bank_sel_val = (current_bank_sel_val >> 4) & 0x03; // 提取庫號

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ffdc 	bl	8000d6c <ICM20948_SelectUserBank>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <AK09916_WriteByteViaICM+0x2a>
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	e040      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR，不含 R/W 位元，表示寫入)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR); //  R/W bit is 0 for write
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f7ff ff57 	bl	8000c78 <ICM20948_WriteByte>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <AK09916_WriteByteViaICM+0x46>
        ICM20948_SelectUserBank(0); // 嘗試恢復到庫0
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ffc9 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	e032      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    }

    // 3. 設定要寫入的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2004      	movs	r0, #4
 8000de4:	f7ff ff48 	bl	8000c78 <ICM20948_WriteByte>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <AK09916_WriteByteViaICM+0x64>
        ICM20948_SelectUserBank(0);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff ffba 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	e023      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    }

    // 4. 設定要寫入的數據
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_DO, data);
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	2006      	movs	r0, #6
 8000e02:	f7ff ff39 	bl	8000c78 <ICM20948_WriteByte>
 8000e06:	4603      	mov	r3, r0
 8000e08:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d004      	beq.n	8000e1a <AK09916_WriteByteViaICM+0x82>
        ICM20948_SelectUserBank(0);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff ffab 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	e014      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    }

    // 5. 致能 I2C 從裝置 0，並設定為寫入一個位元組，觸發傳輸
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000e1a:	2181      	movs	r1, #129	@ 0x81
 8000e1c:	2005      	movs	r0, #5
 8000e1e:	f7ff ff2b 	bl	8000c78 <ICM20948_WriteByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000e26:	7bbb      	ldrb	r3, [r7, #14]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <AK09916_WriteByteViaICM+0x9e>
        ICM20948_SelectUserBank(0);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff ff9d 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	e006      	b.n	8000e44 <AK09916_WriteByteViaICM+0xac>
    //    理想情況下，應該檢查 I2C_MST_STATUS 暫存器中的 I2C_SLV0_NACK 或 I2C_IF_DONE 位元。
    //    為簡化，這裡使用固定延遲。在實際應用中，需要更可靠的同步機制。
    //    ICM20948 datasheet 7.6節: "The I2C Master interface issues a STOP condition specific to the transaction length."
    //    "The I2C Master interface will stretch the main processor’s clock when an I2C transaction is in progress." (if I2C_MST_P_NSR=1 in I2C_MST_CTRL)
    //    這裡假設 I2C_MST_P_NSR=0 (預設)，所以需要軟體延遲或狀態檢查。
    HAL_Delay(20); // 稍微增加延遲以確保傳輸完成 (這個延遲可能需要調整，取決於 I2C 速度和目標設備)
 8000e36:	2014      	movs	r0, #20
 8000e38:	f002 fb7c 	bl	8003534 <HAL_Delay>
    //    status = ICM20948_ReadByte(0x17, &i2c_mst_status_val); // I2C_MST_STATUS (UB0)
    //    if (status != HAL_OK) return status;
    //    if (i2c_mst_status_val & 0x01) { /* I2C_SLV0_NACK */ return HAL_ERROR; }

    // 操作完成後，建議切換回常用的庫，例如庫 0
    return ICM20948_SelectUserBank(0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff ff95 	bl	8000d6c <ICM20948_SelectUserBank>
 8000e42:	4603      	mov	r3, r0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <AK09916_ReadByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，從 AK09916 磁力計指定暫存器讀取單一位元組數據。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadByteViaICM(uint8_t reg_addr, uint8_t *pData) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t temp_data;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 8000e58:	2303      	movs	r3, #3
 8000e5a:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0; // 外部感測器數據在庫 0
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]

    // 1. 切換到使用者庫 3，設定 I2C 從裝置相關暫存器
    status = ICM20948_SelectUserBank(target_bank);
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff82 	bl	8000d6c <ICM20948_SelectUserBank>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <AK09916_ReadByteViaICM+0x2a>
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	e04a      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR | 0x80，設定 R/W 位元為讀取)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80);
 8000e76:	218c      	movs	r1, #140	@ 0x8c
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f7ff fefd 	bl	8000c78 <ICM20948_WriteByte>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000e82:	7b7b      	ldrb	r3, [r7, #13]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <AK09916_ReadByteViaICM+0x48>
        ICM20948_SelectUserBank(data_read_bank); // 嘗試恢復
 8000e88:	7bbb      	ldrb	r3, [r7, #14]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff6e 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000e90:	7b7b      	ldrb	r3, [r7, #13]
 8000e92:	e03b      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>
    }

    // 3. 設定要讀取的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4619      	mov	r1, r3
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff feed 	bl	8000c78 <ICM20948_WriteByte>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <AK09916_ReadByteViaICM+0x68>
        ICM20948_SelectUserBank(data_read_bank);
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff ff5e 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000eb0:	7b7b      	ldrb	r3, [r7, #13]
 8000eb2:	e02b      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>
    // 4. 致能 I2C 從裝置 0，設定為讀取一個位元組，並觸發讀取
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    //   I2C_SLV0_REG_DIS (bit 5) = 0 (寫入 reg_addr)
    //   I2C_SLV0_BYTE_SW (bit 6) = 0 (預設)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000eb4:	2181      	movs	r1, #129	@ 0x81
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f7ff fede 	bl	8000c78 <ICM20948_WriteByte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000ec0:	7b7b      	ldrb	r3, [r7, #13]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <AK09916_ReadByteViaICM+0x86>
        ICM20948_SelectUserBank(data_read_bank);
 8000ec6:	7bbb      	ldrb	r3, [r7, #14]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff4f 	bl	8000d6c <ICM20948_SelectUserBank>
        return status;
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	e01c      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>
    }

    // 5. 等待 I2C 傳輸完成並數據就緒
    HAL_Delay(5); // 這個延遲可能需要調整，最好是檢查狀態位元
 8000ed2:	2005      	movs	r0, #5
 8000ed4:	f002 fb2e 	bl	8003534 <HAL_Delay>

    // 6. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff46 	bl	8000d6c <ICM20948_SelectUserBank>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000ee4:	7b7b      	ldrb	r3, [r7, #13]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <AK09916_ReadByteViaICM+0xa2>
 8000eea:	7b7b      	ldrb	r3, [r7, #13]
 8000eec:	e00e      	b.n	8000f0c <AK09916_ReadByteViaICM+0xc0>

    // 7. 從 EXT_SLV_SENS_DATA_00 讀取數據
    //    ICM-20948 會自動將從 SLV0 讀到的數據放入 EXT_SLV_SENS_DATA_00 開始的暫存器中
    status = ICM20948_ReadByte(ICM20948_EXT_SLV_SENS_DATA_00, &temp_data);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	203b      	movs	r0, #59	@ 0x3b
 8000ef6:	f7ff fee3 	bl	8000cc0 <ICM20948_ReadByte>
 8000efa:	4603      	mov	r3, r0
 8000efc:	737b      	strb	r3, [r7, #13]
    if (status == HAL_OK) {
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <AK09916_ReadByteViaICM+0xbe>
        *pData = temp_data;
 8000f04:	7b3a      	ldrb	r2, [r7, #12]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8000f0a:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <ICM20948_Init>:

/**
 * @brief 初始化 ICM-20948 感測器 (包括加速計、陀螺儀和磁力計)。
 * @return HAL_StatusTypeDef: 初始化成功則返回 HAL_OK，否則返回 HAL_ERROR。
 */
HAL_StatusTypeDef ICM20948_Init(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	70fb      	strb	r3, [r7, #3]
    uint8_t who_am_i_val = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	70bb      	strb	r3, [r7, #2]
    uint8_t ak09916_wia2_val = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	707b      	strb	r3, [r7, #1]

    // --- 0. 確保 SPI CS 引腳初始為高電位 ---
    ICM20948_CS_Deselect(); // 使用更新後的 CS 控制函式
 8000f26:	f7ff fe8d 	bl	8000c44 <ICM20948_CS_Deselect>
    HAL_Delay(10); // 等待感測器上電穩定
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	f002 fb02 	bl	8003534 <HAL_Delay>

    // --- 1. 選擇使用者庫 0 ---
    status = ICM20948_SelectUserBank(0);
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ff1b 	bl	8000d6c <ICM20948_SelectUserBank>
 8000f36:	4603      	mov	r3, r0
 8000f38:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_ERROR; // 如果切換庫失敗，則初始化失敗
 8000f3a:	78fb      	ldrb	r3, [r7, #3]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <ICM20948_Init+0x30>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e112      	b.n	800116a <ICM20948_Init+0x256>

    // --- 2. 檢查 WHO_AM_I 暫存器 ---
    status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	4619      	mov	r1, r3
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff feb9 	bl	8000cc0 <ICM20948_ReadByte>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK || who_am_i_val != 0xEA) { // 0xEA 是 ICM-20948 的預期值
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <ICM20948_Init+0x4a>
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2bea      	cmp	r3, #234	@ 0xea
 8000f5c:	d024      	beq.n	8000fa8 <ICM20948_Init+0x94>
        // 可以嘗試多次讀取 WHO_AM_I，因為有時第一次通訊可能不穩定
        HAL_Delay(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f002 fae8 	bl	8003534 <HAL_Delay>
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        for (int i = 0; i < 10; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	e00c      	b.n	8000f84 <ICM20948_Init+0x70>
            status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000f6a:	1cbb      	adds	r3, r7, #2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fea6 	bl	8000cc0 <ICM20948_ReadByte>
 8000f74:	4603      	mov	r3, r0
 8000f76:	70fb      	strb	r3, [r7, #3]
            if (status == HAL_OK) {
//                printf("WHO_AM_I: 0x%02X (Attempt %d)\r\n", who_am_i_val, i + 1);
            } else {
//                printf("Read WHO_AM_I FAILED, Status: %d (Attempt %d)\r\n", status, i + 1);
            }
            HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	@ 0x32
 8000f7a:	f002 fadb 	bl	8003534 <HAL_Delay>
        for (int i = 0; i < 10; i++) {
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b09      	cmp	r3, #9
 8000f88:	ddef      	ble.n	8000f6a <ICM20948_Init+0x56>
        }
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000f8a:	1cbb      	adds	r3, r7, #2
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f7ff fe96 	bl	8000cc0 <ICM20948_ReadByte>
 8000f94:	4603      	mov	r3, r0
 8000f96:	70fb      	strb	r3, [r7, #3]
        if (status != HAL_OK || who_am_i_val != 0xEA) {
 8000f98:	78fb      	ldrb	r3, [r7, #3]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <ICM20948_Init+0x90>
 8000f9e:	78bb      	ldrb	r3, [r7, #2]
 8000fa0:	2bea      	cmp	r3, #234	@ 0xea
 8000fa2:	d001      	beq.n	8000fa8 <ICM20948_Init+0x94>
             return SENSOR_INVALID_ID; // 裝置識別失敗
 8000fa4:	2306      	movs	r3, #6
 8000fa6:	e0e0      	b.n	800116a <ICM20948_Init+0x256>
        }
    }

    // --- 3. 重設並喚醒裝置 ---
    // 寫入 0x80 到 PWR_MGMT_1 (DEVICE_RESET = 1)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x80);
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	2006      	movs	r0, #6
 8000fac:	f7ff fe64 	bl	8000c78 <ICM20948_WriteByte>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_PARAM_INVALID;
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <ICM20948_Init+0xaa>
 8000fba:	230c      	movs	r3, #12
 8000fbc:	e0d5      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(100); // 等待重設完成 (Datasheet 建議 100ms)
 8000fbe:	2064      	movs	r0, #100	@ 0x64
 8000fc0:	f002 fab8 	bl	8003534 <HAL_Delay>

    // 從睡眠模式喚醒，並選擇時脈源
    // 寫入 0x01 到 PWR_MGMT_1 (CLKSEL = 1，選擇最佳可用時脈源，通常是內部20MHz振盪器, 自動選擇)
    // SLEEP = 0 (正常模式), TEMP_DIS = 0 (溫度感測器致能)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x01);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2006      	movs	r0, #6
 8000fc8:	f7ff fe56 	bl	8000c78 <ICM20948_WriteByte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_DATA_NOT_READY;
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <ICM20948_Init+0xc6>
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	e0c7      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(50); // 等待時脈穩定
 8000fda:	2032      	movs	r0, #50	@ 0x32
 8000fdc:	f002 faaa 	bl	8003534 <HAL_Delay>

    // --- 4. 配置加速計和陀螺儀 ---
    // 切換到使用者庫 2
    status = ICM20948_SelectUserBank(2);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff fec3 	bl	8000d6c <ICM20948_SelectUserBank>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_CONFIG_FAIL;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <ICM20948_Init+0xe0>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e0ba      	b.n	800116a <ICM20948_Init+0x256>
    // ACCEL_DLPFCFG: 加速計數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±2g, DLPF 致能 (ACCEL_FCHOICE=0), DLPFCFG = 1 (約 246Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // ACCEL_CONFIG = (DLPFCFG << 3) | (ACCEL_FS_SEL << 1) | ACCEL_FCHOICE
    //              = (001 << 3)   | (00 << 1)        | 0
    //              = 0x08
    status = ICM20948_WriteByte(ICM20948_ACCEL_CONFIG, (0x01 << 3) | (0x00 << 1) | 0x00);
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	2014      	movs	r0, #20
 8000ff8:	f7ff fe3e 	bl	8000c78 <ICM20948_WriteByte>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_CONFIG_FAIL; }
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <ICM20948_Init+0xfc>
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff feb0 	bl	8000d6c <ICM20948_SelectUserBank>
 800100c:	2303      	movs	r3, #3
 800100e:	e0ac      	b.n	800116a <ICM20948_Init+0x256>
    current_accel_sensitivity = ACCEL_SENSITIVITY_2G; // 更新當前靈敏度
 8001010:	4b58      	ldr	r3, [pc, #352]	@ (8001174 <ICM20948_Init+0x260>)
 8001012:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001016:	601a      	str	r2, [r3, #0]
    // GYRO_DLPFCFG: 陀螺儀數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±250dps, DLPF 致能 (GYRO_FCHOICE=0), DLPFCFG = 1 (約 196.6Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // GYRO_CONFIG_1 = (DLPFCFG << 3) | (GYRO_FS_SEL << 1) | GYRO_FCHOICE
    //               = (001 << 3)   | (00 << 1)       | 0
    //               = 0x08
    status = ICM20948_WriteByte(ICM20948_GYRO_CONFIG_1, (0x01 << 3) | (0x00 << 1) | 0x00);
 8001018:	2108      	movs	r1, #8
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff fe2c 	bl	8000c78 <ICM20948_WriteByte>
 8001020:	4603      	mov	r3, r0
 8001022:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_CONFIG_FAIL; }
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <ICM20948_Init+0x120>
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fe9e 	bl	8000d6c <ICM20948_SelectUserBank>
 8001030:	2303      	movs	r3, #3
 8001032:	e09a      	b.n	800116a <ICM20948_Init+0x256>
    current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS; // 更新當前靈敏度
 8001034:	4b50      	ldr	r3, [pc, #320]	@ (8001178 <ICM20948_Init+0x264>)
 8001036:	4a51      	ldr	r2, [pc, #324]	@ (800117c <ICM20948_Init+0x268>)
 8001038:	601a      	str	r2, [r3, #0]
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
    // status = ICM20948_WriteByte(ICM20948_ACCEL_SMPLRT_DIV_1, 0x00); // 加速計 ODR 高位元組
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fe96 	bl	8000d6c <ICM20948_SelectUserBank>
 8001040:	4603      	mov	r3, r0
 8001042:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_ERROR;
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <ICM20948_Init+0x13a>
 800104a:	2301      	movs	r3, #1
 800104c:	e08d      	b.n	800116a <ICM20948_Init+0x256>

    // --- 5. 配置 I2C 主機介面以與 AK09916 通訊 ---
    // 致能 I2C 主機模式 (USER_CTRL 的 I2C_MST_EN 位元 (bit 5))
    uint8_t user_ctrl_val;
    status = ICM20948_ReadByte(ICM20948_USER_CTRL, &user_ctrl_val);
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	2003      	movs	r0, #3
 8001054:	f7ff fe34 	bl	8000cc0 <ICM20948_ReadByte>
 8001058:	4603      	mov	r3, r0
 800105a:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_COMM_FAIL;
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <ICM20948_Init+0x152>
 8001062:	2304      	movs	r3, #4
 8001064:	e081      	b.n	800116a <ICM20948_Init+0x256>
    user_ctrl_val |= (1 << 5); // 設定 I2C_MST_EN = 1 (啟用 I2C Master)
 8001066:	783b      	ldrb	r3, [r7, #0]
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	b2db      	uxtb	r3, r3
 800106e:	703b      	strb	r3, [r7, #0]
    user_ctrl_val |= (1 << 4); // 設定 I2C_IF_DIS = 1 (為 SPI 模式禁用 ICM 的 I2C Slave 介面)
 8001070:	783b      	ldrb	r3, [r7, #0]
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	b2db      	uxtb	r3, r3
 8001078:	703b      	strb	r3, [r7, #0]
    // user_ctrl_val &= ~(1 << 6); // 確保 I2C_IF_DIS = 0, 使能SPI和I2C同時工作 (如果需要SPI訪問ICM本身)
    status = ICM20948_WriteByte(ICM20948_USER_CTRL, user_ctrl_val);
 800107a:	783b      	ldrb	r3, [r7, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	2003      	movs	r0, #3
 8001080:	f7ff fdfa 	bl	8000c78 <ICM20948_WriteByte>
 8001084:	4603      	mov	r3, r0
 8001086:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_COMM_FAIL;
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <ICM20948_Init+0x17e>
 800108e:	2304      	movs	r3, #4
 8001090:	e06b      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(500); // 等待 I2C 主機介面穩定
 8001092:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001096:	f002 fa4d 	bl	8003534 <HAL_Delay>

    // 切換到使用者庫 3
    status = ICM20948_SelectUserBank(3);
 800109a:	2003      	movs	r0, #3
 800109c:	f7ff fe66 	bl	8000d6c <ICM20948_SelectUserBank>
 80010a0:	4603      	mov	r3, r0
 80010a2:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_ERROR; }
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <ICM20948_Init+0x1a0>
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fe5e 	bl	8000d6c <ICM20948_SelectUserBank>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e05a      	b.n	800116a <ICM20948_Init+0x256>

    // 設定 I2C 主機時脈頻率 (I2C_MST_CTRL 的 I2C_MST_CLK bits 3:0)
    // 例如，設定為 400kHz (datasheet 建議值 0x07 for 345.6 kHz to 400 kHz)
    // 0x0D for ~100kHz if needed for stability with AK09916
    status = ICM20948_WriteByte(ICM20948_I2C_MST_CTRL, 0x07);
 80010b4:	2107      	movs	r1, #7
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fdde 	bl	8000c78 <ICM20948_WriteByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return SENSOR_COMM_FAIL; }
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <ICM20948_Init+0x1bc>
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fe50 	bl	8000d6c <ICM20948_SelectUserBank>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e04c      	b.n	800116a <ICM20948_Init+0x256>
    HAL_Delay(50);
 80010d0:	2032      	movs	r0, #50	@ 0x32
 80010d2:	f002 fa2f 	bl	8003534 <HAL_Delay>

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fe48 	bl	8000d6c <ICM20948_SelectUserBank>
 80010dc:	4603      	mov	r3, r0
 80010de:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return SENSOR_COMM_FAIL;
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <ICM20948_Init+0x1d6>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e03f      	b.n	800116a <ICM20948_Init+0x256>
//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    // ... (ICM I2C Master 設定完成後)

    // --- 6. 初始化 AK09916 磁力計 ---
    // **先嘗試軟復位 AK09916**
    status = AK09916_WriteByteViaICM(AK09916_CNTL3, 0x01);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2032      	movs	r0, #50	@ 0x32
 80010ee:	f7ff fe53 	bl	8000d98 <AK09916_WriteByteViaICM>
 80010f2:	4603      	mov	r3, r0
 80010f4:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <ICM20948_Init+0x1f8>
        printf("AK09916 Soft Reset FAILED!\r\n");
 80010fc:	4820      	ldr	r0, [pc, #128]	@ (8001180 <ICM20948_Init+0x26c>)
 80010fe:	f007 fd9d 	bl	8008c3c <puts>
        ICM20948_SelectUserBank(0); // 切回 UB0
 8001102:	2000      	movs	r0, #0
 8001104:	f7ff fe32 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_CONFIG_FAIL;
 8001108:	2303      	movs	r3, #3
 800110a:	e02e      	b.n	800116a <ICM20948_Init+0x256>
    }
    HAL_Delay(100); // 等待復位完成
 800110c:	2064      	movs	r0, #100	@ 0x64
 800110e:	f002 fa11 	bl	8003534 <HAL_Delay>
    // status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x00); // Power-down
    // if (status != HAL_OK) { /* 錯誤處理 */ }
    // HAL_Delay(10);

    // **然後再檢查 AK09916 WIA2**
    status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia2_val);
 8001112:	1c7b      	adds	r3, r7, #1
 8001114:	4619      	mov	r1, r3
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff fe98 	bl	8000e4c <AK09916_ReadByteViaICM>
 800111c:	4603      	mov	r3, r0
 800111e:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <ICM20948_Init+0x21c>
//        printf("Reading AK09916 WIA2 FAILED after reset! Status: %d\r\n", status);
        ICM20948_SelectUserBank(0);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fe20 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_INVALID_ID;
 800112c:	2306      	movs	r3, #6
 800112e:	e01c      	b.n	800116a <ICM20948_Init+0x256>
    }
    if (ak09916_wia2_val != 0x09) {
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b09      	cmp	r3, #9
 8001134:	d004      	beq.n	8001140 <ICM20948_Init+0x22c>
//        printf("AK09916 WIA2 is 0x%02X, expected 0x09, after reset!\r\n", ak09916_wia2_val);
        ICM20948_SelectUserBank(0);
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff fe18 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_INVALID_ID; // AK09916 識別失敗
 800113c:	2306      	movs	r3, #6
 800113e:	e014      	b.n	800116a <ICM20948_Init+0x256>
    }
//    printf("AK09916 WIA2 OK: 0x%02X\r\n", ak09916_wia2_val);

    // **如果 WIA2 正確，再設定最終的操作模式**
    status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x08); // 例如連續量測模式 4 (100Hz)
 8001140:	2108      	movs	r1, #8
 8001142:	2031      	movs	r0, #49	@ 0x31
 8001144:	f7ff fe28 	bl	8000d98 <AK09916_WriteByteViaICM>
 8001148:	4603      	mov	r3, r0
 800114a:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <ICM20948_Init+0x24e>
        printf("Setting AK09916 Mode FAILED!\r\n");
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <ICM20948_Init+0x270>)
 8001154:	f007 fd72 	bl	8008c3c <puts>
        ICM20948_SelectUserBank(0);
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fe07 	bl	8000d6c <ICM20948_SelectUserBank>
        return SENSOR_INVALID_ID;
 800115e:	2306      	movs	r3, #6
 8001160:	e003      	b.n	800116a <ICM20948_Init+0x256>
    }
    HAL_Delay(50); // 等待模式設定生效
 8001162:	2032      	movs	r0, #50	@ 0x32
 8001164:	f002 f9e6 	bl	8003534 <HAL_Delay>
    return SENSOR_OK; // 初始化成功
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	24000000 	.word	0x24000000
 8001178:	24000004 	.word	0x24000004
 800117c:	43030000 	.word	0x43030000
 8001180:	0800c400 	.word	0x0800c400
 8001184:	0800c41c 	.word	0x0800c41c

08001188 <ICM20948_ReadAccelGyroRaw>:
 * @brief 從 ICM-20948 讀取加速計和陀螺儀的原始數據。
 * @param pAccel: 指向儲存加速計原始數據的陣列 (int16_t[3])。
 * @param pGyro:  指向儲存陀螺儀原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadAccelGyroRaw(int16_t* pAccel, int16_t* pGyro) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[12]; // 6 bytes for accel (X,Y,Z), 6 bytes for gyro (X,Y,Z)
    HAL_StatusTypeDef status;

    // 1. 確保在使用者庫 0 (感測器數據通常在庫 0)
    status = ICM20948_SelectUserBank(0); // 雖然大部分情況下已在庫0，但確保一下無妨
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fdea 	bl	8000d6c <ICM20948_SelectUserBank>
 8001198:	4603      	mov	r3, r0
 800119a:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <ICM20948_ReadAccelGyroRaw+0x1e>
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	e04e      	b.n	8001244 <ICM20948_ReadAccelGyroRaw+0xbc>

    // 2. 從 ACCEL_XOUT_H (0x2D) 開始連續讀取 12 個位元組的數據
    //    ACCEL_XOUT_H to GYRO_ZOUT_L
    status = ICM20948_ReadBytes(ICM20948_ACCEL_XOUT_H, raw_data, 12);
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	220c      	movs	r2, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	202d      	movs	r0, #45	@ 0x2d
 80011b0:	f7ff fdb0 	bl	8000d14 <ICM20948_ReadBytes>
 80011b4:	4603      	mov	r3, r0
 80011b6:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <ICM20948_ReadAccelGyroRaw+0x3a>
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	e040      	b.n	8001244 <ICM20948_ReadAccelGyroRaw+0xbc>

    // 3. 解析數據 (高位元組在前，大端模式 Big-Endian)
    // 加速計數據
    pAccel[0] = (int16_t)((raw_data[0] << 8) | raw_data[1]);  // Accel X
 80011c2:	7a3b      	ldrb	r3, [r7, #8]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7a7b      	ldrb	r3, [r7, #9]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	801a      	strh	r2, [r3, #0]
    pAccel[1] = (int16_t)((raw_data[2] << 8) | raw_data[3]);  // Accel Y
 80011d6:	7abb      	ldrb	r3, [r7, #10]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b219      	sxth	r1, r3
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3302      	adds	r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	b212      	sxth	r2, r2
 80011ea:	801a      	strh	r2, [r3, #0]
    pAccel[2] = (int16_t)((raw_data[4] << 8) | raw_data[5]);  // Accel Z
 80011ec:	7b3b      	ldrb	r3, [r7, #12]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b219      	sxth	r1, r3
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3304      	adds	r3, #4
 80011fc:	430a      	orrs	r2, r1
 80011fe:	b212      	sxth	r2, r2
 8001200:	801a      	strh	r2, [r3, #0]
    // 陀螺儀數據
    pGyro[0] = (int16_t)((raw_data[6] << 8) | raw_data[7]);   // Gyro X
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	b21b      	sxth	r3, r3
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21a      	sxth	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	801a      	strh	r2, [r3, #0]
    pGyro[1] = (int16_t)((raw_data[8] << 8) | raw_data[9]);   // Gyro Y
 8001216:	7c3b      	ldrb	r3, [r7, #16]
 8001218:	b21b      	sxth	r3, r3
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b219      	sxth	r1, r3
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	b21a      	sxth	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3302      	adds	r3, #2
 8001226:	430a      	orrs	r2, r1
 8001228:	b212      	sxth	r2, r2
 800122a:	801a      	strh	r2, [r3, #0]
    pGyro[2] = (int16_t)((raw_data[10] << 8) | raw_data[11]); // Gyro Z
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	b21b      	sxth	r3, r3
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b219      	sxth	r1, r3
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	b21a      	sxth	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3304      	adds	r3, #4
 800123c:	430a      	orrs	r2, r1
 800123e:	b212      	sxth	r2, r2
 8001240:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <AK09916_ReadBytesViaICM>:
 * @param reg_addr: AK09916 的起始暫存器位址。
 * @param pBuffer:  指向儲存讀取數據的緩衝區。
 * @param count:    要讀取的位元組數量 (AK09916 通常一次讀取 8 bytes: HXL to ST2)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadBytesViaICM(uint8_t reg_addr, uint8_t *pBuffer, uint8_t count) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	4613      	mov	r3, r2
 800125a:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t target_bank = 3;
 800125c:	2303      	movs	r3, #3
 800125e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	73bb      	strb	r3, [r7, #14]

    if (count == 0 || count > 8) { // EXT_SLV_SENS_DATA 暫存器最多支援讀取連續的外部數據長度有限制 (SLV0 可讀取 SLV0_LENG 個 bytes)
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <AK09916_ReadBytesViaICM+0x24>
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	2b08      	cmp	r3, #8
 800126e:	d901      	bls.n	8001274 <AK09916_ReadBytesViaICM+0x28>
                                  // ICM20948 EXT_SLV_SENS_DATA_xx 最多有 24 個 bytes (00-23) 給所有 4 個 slave
                                  // SLV0_LENG 最大值是 15 (0xF)
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e056      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>
    }

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd78 	bl	8000d6c <ICM20948_SelectUserBank>
 800127c:	4603      	mov	r3, r0
 800127e:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <AK09916_ReadBytesViaICM+0x3e>
 8001286:	7b7b      	ldrb	r3, [r7, #13]
 8001288:	e04b      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 2. 設定從裝置位址為讀取模式
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80); // Add R/W bit for read
 800128a:	218c      	movs	r1, #140	@ 0x8c
 800128c:	2003      	movs	r0, #3
 800128e:	f7ff fcf3 	bl	8000c78 <ICM20948_WriteByte>
 8001292:	4603      	mov	r3, r0
 8001294:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <AK09916_ReadBytesViaICM+0x5c>
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fd64 	bl	8000d6c <ICM20948_SelectUserBank>
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	e03c      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 3. 設定要讀取的 AK09916 起始內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4619      	mov	r1, r3
 80012ac:	2004      	movs	r0, #4
 80012ae:	f7ff fce3 	bl	8000c78 <ICM20948_WriteByte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 80012b6:	7b7b      	ldrb	r3, [r7, #13]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <AK09916_ReadBytesViaICM+0x7c>
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd54 	bl	8000d6c <ICM20948_SelectUserBank>
 80012c4:	7b7b      	ldrb	r3, [r7, #13]
 80012c6:	e02c      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 4. 致能 I2C SLV0，設定讀取位元組數量，並觸發事務
    //    I2C_SLV0_EN (bit 7) = 1
    //    I2C_SLV0_LENG (bits 3:0) = count
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | count);
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	2005      	movs	r0, #5
 80012d4:	f7ff fcd0 	bl	8000c78 <ICM20948_WriteByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 80012dc:	7b7b      	ldrb	r3, [r7, #13]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <AK09916_ReadBytesViaICM+0xa2>
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fd41 	bl	8000d6c <ICM20948_SelectUserBank>
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	e019      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 等待 I2C 傳輸完成，這個延遲需要足夠長以完成 'count' 個位元組的讀取
    // 每個位元組大約需要 8/I2C_Clock_Freq + ACK/NACK 時間。
    // 若 I2C 400kHz, 1 byte 約 25us. 8 bytes ~ 200us.
    HAL_Delay(count + 2); // 粗略延遲，最好檢查 I2C_MST_STATUS 或使用中斷
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	3302      	adds	r3, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f91e 	bl	8003534 <HAL_Delay>
                          // (count * 25us / 1000) + 1 ms 作為基本延遲

    // 5. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fd36 	bl	8000d6c <ICM20948_SelectUserBank>
 8001300:	4603      	mov	r3, r0
 8001302:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001304:	7b7b      	ldrb	r3, [r7, #13]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <AK09916_ReadBytesViaICM+0xc2>
 800130a:	7b7b      	ldrb	r3, [r7, #13]
 800130c:	e009      	b.n	8001322 <AK09916_ReadBytesViaICM+0xd6>

    // 6. 從 EXT_SLV_SENS_DATA_00 開始讀取數據
    status = ICM20948_ReadBytes(ICM20948_EXT_SLV_SENS_DATA_00, pBuffer, count);
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	b29b      	uxth	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	203b      	movs	r0, #59	@ 0x3b
 8001318:	f7ff fcfc 	bl	8000d14 <ICM20948_ReadBytes>
 800131c:	4603      	mov	r3, r0
 800131e:	737b      	strb	r3, [r7, #13]
    return status;
 8001320:	7b7b      	ldrb	r3, [r7, #13]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <ICM20948_ReadMagRaw>:
/**
 * @brief 從 ICM-20948 (透過其 I2C 主機從 AK09916) 讀取磁力計的原始數據。
 * @param pMag:   指向儲存磁力計原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadMagRaw(int16_t* pMag) {
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
                           // RSV (0x17) 是保留位元組
    HAL_StatusTypeDef status;
    uint8_t st1_val;

    // 1. 檢查 AK09916 是否有新數據 (DRDY 位元在 ST1 (0x10) 暫存器)
    status = AK09916_ReadByteViaICM(AK09916_ST1, &st1_val);
 8001332:	f107 030b 	add.w	r3, r7, #11
 8001336:	4619      	mov	r1, r3
 8001338:	2010      	movs	r0, #16
 800133a:	f7ff fd87 	bl	8000e4c <AK09916_ReadByteViaICM>
 800133e:	4603      	mov	r3, r0
 8001340:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <ICM20948_ReadMagRaw+0x22>
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	e06d      	b.n	8001428 <ICM20948_ReadMagRaw+0xfe>
//        return HAL_BUSY; // 數據尚未就緒 (Not an error, just not ready)
//    }

    // 2. 從 AK09916_HXL (0x11) 開始讀取 8 個位元組 (HXL to ST2)
    //    讀取 ST2 (0x18) 是為了讓 AK09916 準備下一次量測 (清除 DRDY 狀態並觸發下一次)
    status = AK09916_ReadBytesViaICM(AK09916_HXL, mag_buffer, 8);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2208      	movs	r2, #8
 8001352:	4619      	mov	r1, r3
 8001354:	2011      	movs	r0, #17
 8001356:	f7ff ff79 	bl	800124c <AK09916_ReadBytesViaICM>
 800135a:	4603      	mov	r3, r0
 800135c:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 800135e:	7dfb      	ldrb	r3, [r7, #23]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <ICM20948_ReadMagRaw+0x3e>
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	e05f      	b.n	8001428 <ICM20948_ReadMagRaw+0xfe>

    // 3. 解析數據 (低位元組在前，小端模式 Little-Endian for AK09916)
    pMag[0] = (int16_t)(((uint16_t)mag_buffer[1] << 8) | mag_buffer[0]); // Mag X (HXH, HXL)
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	b21b      	sxth	r3, r3
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	801a      	strh	r2, [r3, #0]
    pMag[1] = (int16_t)(((uint16_t)mag_buffer[3] << 8) | mag_buffer[2]); // Mag Y (HYH, HYL)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b21b      	sxth	r3, r3
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b219      	sxth	r1, r3
 8001384:	7bbb      	ldrb	r3, [r7, #14]
 8001386:	b21a      	sxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3302      	adds	r3, #2
 800138c:	430a      	orrs	r2, r1
 800138e:	b212      	sxth	r2, r2
 8001390:	801a      	strh	r2, [r3, #0]
    pMag[2] = (int16_t)(((uint16_t)mag_buffer[5] << 8) | mag_buffer[4]); // Mag Z (HZH, HZL)
 8001392:	7c7b      	ldrb	r3, [r7, #17]
 8001394:	b21b      	sxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b219      	sxth	r1, r3
 800139a:	7c3b      	ldrb	r3, [r7, #16]
 800139c:	b21a      	sxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	430a      	orrs	r2, r1
 80013a4:	b212      	sxth	r2, r2
 80013a6:	801a      	strh	r2, [r3, #0]
    //!!!如果收到的數值為零，再執行一次。
    if(pMag[0] == 0 & pMag[1] == 0 & pMag[2] == 0){
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3302      	adds	r3, #2
 80013b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d12d      	bne.n	8001426 <ICM20948_ReadMagRaw+0xfc>
    	status = AK09916_ReadBytesViaICM(AK09916_HXL, mag_buffer, 8);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2208      	movs	r2, #8
 80013d0:	4619      	mov	r1, r3
 80013d2:	2011      	movs	r0, #17
 80013d4:	f7ff ff3a 	bl	800124c <AK09916_ReadBytesViaICM>
 80013d8:	4603      	mov	r3, r0
 80013da:	75fb      	strb	r3, [r7, #23]
		if (status != HAL_OK) return status;
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <ICM20948_ReadMagRaw+0xbc>
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	e020      	b.n	8001428 <ICM20948_ReadMagRaw+0xfe>

		// 3. 解析數據 (低位元組在前，小端模式 Little-Endian for AK09916)
		pMag[0] = (int16_t)(((uint16_t)mag_buffer[1] << 8) | mag_buffer[0]); // Mag X (HXH, HXL)
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	021b      	lsls	r3, r3, #8
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	801a      	strh	r2, [r3, #0]
		pMag[1] = (int16_t)(((uint16_t)mag_buffer[3] << 8) | mag_buffer[2]); // Mag Y (HYH, HYL)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b219      	sxth	r1, r3
 8001402:	7bbb      	ldrb	r3, [r7, #14]
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3302      	adds	r3, #2
 800140a:	430a      	orrs	r2, r1
 800140c:	b212      	sxth	r2, r2
 800140e:	801a      	strh	r2, [r3, #0]
		pMag[2] = (int16_t)(((uint16_t)mag_buffer[5] << 8) | mag_buffer[4]); // Mag Z (HZH, HZL)
 8001410:	7c7b      	ldrb	r3, [r7, #17]
 8001412:	b21b      	sxth	r3, r3
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b219      	sxth	r1, r3
 8001418:	7c3b      	ldrb	r3, [r7, #16]
 800141a:	b21a      	sxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3304      	adds	r3, #4
 8001420:	430a      	orrs	r2, r1
 8001422:	b212      	sxth	r2, r2
 8001424:	801a      	strh	r2, [r3, #0]
    // if (mag_buffer[7] & 0x08) { /* Overflow occurred */ }

    // 重要: 讀取 ST2 暫存器後，AK09916 會清除 DRDY (Data Ready) 狀態，
    // 並在下一個量測週期後再次設定 DRDY。

    return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <ICM20948_ConvertAccelRawToG>:
/**
 * @brief 將加速計原始數據轉換為 g (重力加速度)。
 * @param pAccelRaw: 指向加速計原始數據陣列 (int16_t[3])。
 * @param pAccelG:   指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertAccelRawToG(const int16_t* pAccelRaw, float* pAccelG) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    pAccelG[0] = (float)pAccelRaw[0] / current_accel_sensitivity;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <ICM20948_ConvertAccelRawToG+0x78>)
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[1] = (float)pAccelRaw[1] / current_accel_sensitivity;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3302      	adds	r3, #2
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	ee07 3a90 	vmov	s15, r3
 8001464:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <ICM20948_ConvertAccelRawToG+0x78>)
 800146a:	ed93 7a00 	vldr	s14, [r3]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[2] = (float)pAccelRaw[2] / current_accel_sensitivity;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3304      	adds	r3, #4
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <ICM20948_ConvertAccelRawToG+0x78>)
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3308      	adds	r3, #8
 8001494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001498:	edc3 7a00 	vstr	s15, [r3]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	24000000 	.word	0x24000000

080014ac <ICM20948_ConvertGyroRawToDPS>:
/**
 * @brief 將陀螺儀原始數據轉換為 dps (度/秒)。
 * @param pGyroRaw: 指向陀螺儀原始數據陣列 (int16_t[3])。
 * @param pGyroDPS: 指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertGyroRawToDPS(const int16_t* pGyroRaw, float* pGyroDPS) {
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
    pGyroDPS[0] = (float)pGyroRaw[0] / current_gyro_sensitivity;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <ICM20948_ConvertGyroRawToDPS+0x78>)
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[1] = (float)pGyroRaw[1] / current_gyro_sensitivity;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3302      	adds	r3, #2
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <ICM20948_ConvertGyroRawToDPS+0x78>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3304      	adds	r3, #4
 80014ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f2:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[2] = (float)pGyroRaw[2] / current_gyro_sensitivity;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3304      	adds	r3, #4
 80014fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	3308      	adds	r3, #8
 8001510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001514:	edc3 7a00 	vstr	s15, [r3]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	24000004 	.word	0x24000004

08001528 <ICM20948_ConvertMagRawToUT>:
/**
 * @brief 將磁力計原始數據轉換為 µT (微特斯拉)。
 * @param pMagRaw: 指向磁力計原始數據陣列 (int16_t[3])。
 * @param pMagUT:  指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertMagRawToUT(const int16_t* pMagRaw, float* pMagUT) {
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    // AK09916 的靈敏度是固定的 0.15 µT/LSB
    pMagUT[0] = (float)pMagRaw[0] * MAG_SENSITIVITY_UT_LSB;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001540:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800159c <ICM20948_ConvertMagRawToUT+0x74>
 8001544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[1] = (float)pMagRaw[1] * MAG_SENSITIVITY_UT_LSB;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3302      	adds	r3, #2
 8001552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3304      	adds	r3, #4
 8001562:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800159c <ICM20948_ConvertMagRawToUT+0x74>
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[2] = (float)pMagRaw[2] * MAG_SENSITIVITY_UT_LSB;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3304      	adds	r3, #4
 8001572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3308      	adds	r3, #8
 8001582:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800159c <ICM20948_ConvertMagRawToUT+0x74>
 8001586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158a:	edc3 7a00 	vstr	s15, [r3]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	3e19999a 	.word	0x3e19999a

080015a0 <ICM20948_Main>:

void ICM20948_Main(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af04      	add	r7, sp, #16
	//		     與ICM20948_Init(void)同程式搬過來============================Start(磁力計檢查)===========================================//新增ak09916_wia2_val_PART2 != 0x09判斷
			     HAL_StatusTypeDef status = HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
			     uint8_t ak09916_wia2_val_PART2 = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	717b      	strb	r3, [r7, #5]
			     // **然後再檢查 AK09916 WIA2**
			         status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia2_val_PART2);
 80015ae:	1d7b      	adds	r3, r7, #5
 80015b0:	4619      	mov	r1, r3
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fc4a 	bl	8000e4c <AK09916_ReadByteViaICM>
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
			         if (status != HAL_OK) {
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <ICM20948_Main+0x28>
//			             printf("Reading AK09916 WIA2 FAILED after reset! Status: %d\r\n", status);
			             ICM20948_SelectUserBank(0);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fbd2 	bl	8000d6c <ICM20948_SelectUserBank>
	//		             return SENSOR_INVALID_ID;
			         }
			         if (ak09916_wia2_val_PART2 != 0x09) {
 80015c8:	797b      	ldrb	r3, [r7, #5]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d004      	beq.n	80015d8 <ICM20948_Main+0x38>
			             ICM20948_SelectUserBank(0);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fbcc 	bl	8000d6c <ICM20948_SelectUserBank>
			             status = 6;//ak09916_wia2_val_PART2 != 0x09強制status = 6(SENSOR_INVALID_ID)(待修改，須更嚴謹)
 80015d4:	2306      	movs	r3, #6
 80015d6:	71fb      	strb	r3, [r7, #7]
	//		             return SENSOR_INVALID_ID; // AK09916 識別失敗
			         }
	 //		     與ICM20948_Init(void)同程式搬過來==============================END(磁力計檢查)=========================================//新增ak09916_wia2_val_PART2 != 0x09判斷

			         // 讀取加速計和陀螺儀原始數據
		     if (ICM20948_ReadAccelGyroRaw(accel_raw, gyro_raw) == HAL_OK && ak09916_wia2_val_PART2 == 0x09) {
 80015d8:	4946      	ldr	r1, [pc, #280]	@ (80016f4 <ICM20948_Main+0x154>)
 80015da:	4847      	ldr	r0, [pc, #284]	@ (80016f8 <ICM20948_Main+0x158>)
 80015dc:	f7ff fdd4 	bl	8001188 <ICM20948_ReadAccelGyroRaw>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d13e      	bne.n	8001664 <ICM20948_Main+0xc4>
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d13b      	bne.n	8001664 <ICM20948_Main+0xc4>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertAccelRawToG(accel_raw, accel_g);
 80015ec:	4943      	ldr	r1, [pc, #268]	@ (80016fc <ICM20948_Main+0x15c>)
 80015ee:	4842      	ldr	r0, [pc, #264]	@ (80016f8 <ICM20948_Main+0x158>)
 80015f0:	f7ff ff1e 	bl	8001430 <ICM20948_ConvertAccelRawToG>
		       ICM20948_ConvertGyroRawToDPS(gyro_raw, gyro_dps);
 80015f4:	4942      	ldr	r1, [pc, #264]	@ (8001700 <ICM20948_Main+0x160>)
 80015f6:	483f      	ldr	r0, [pc, #252]	@ (80016f4 <ICM20948_Main+0x154>)
 80015f8:	f7ff ff58 	bl	80014ac <ICM20948_ConvertGyroRawToDPS>

		       // 透過 UART 輸出 (或使用除錯器查看變數)
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		              accel_g[0], accel_g[1], accel_g[2]);
 80015fc:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <ICM20948_Main+0x15c>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001602:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		              accel_g[0], accel_g[1], accel_g[2]);
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <ICM20948_Main+0x15c>)
 8001608:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800160c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		              accel_g[0], accel_g[1], accel_g[2]);
 8001610:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <ICM20948_Main+0x15c>)
 8001612:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("<ICM20948>Accel(g): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001616:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800161a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800161e:	ed8d 7b00 	vstr	d7, [sp]
 8001622:	ec53 2b15 	vmov	r2, r3, d5
 8001626:	4837      	ldr	r0, [pc, #220]	@ (8001704 <ICM20948_Main+0x164>)
 8001628:	f007 faa0 	bl	8008b6c <iprintf>
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
					  gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 800162c:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <ICM20948_Main+0x160>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001632:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
					  gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8001636:	4b32      	ldr	r3, [pc, #200]	@ (8001700 <ICM20948_Main+0x160>)
 8001638:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800163c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					  gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <ICM20948_Main+0x160>)
 8001642:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("<ICM20948>Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001646:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800164a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800164e:	ed8d 7b00 	vstr	d7, [sp]
 8001652:	ec53 2b15 	vmov	r2, r3, d5
 8001656:	482c      	ldr	r0, [pc, #176]	@ (8001708 <ICM20948_Main+0x168>)
 8001658:	f007 fa88 	bl	8008b6c <iprintf>
	//	       printf("%s"); // 或 HAL_UART_Transmit(&huartx, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
		       printf("The data is OK\r\n");
 800165c:	482b      	ldr	r0, [pc, #172]	@ (800170c <ICM20948_Main+0x16c>)
 800165e:	f007 faed 	bl	8008c3c <puts>
 8001662:	e004      	b.n	800166e <ICM20948_Main+0xce>
		     } else {
		    	 //讀取 Accel/Gyro 數據失敗
		       printf("<ICM20948>Failed to read data! Error Code: %d\r\n",status);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	4619      	mov	r1, r3
 8001668:	4829      	ldr	r0, [pc, #164]	@ (8001710 <ICM20948_Main+0x170>)
 800166a:	f007 fa7f 	bl	8008b6c <iprintf>
		     }

		     // 讀取磁力計原始數據
		     HAL_Delay(1000); // 每秒讀取一次數據
 800166e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001672:	f001 ff5f 	bl	8003534 <HAL_Delay>
//
		     HAL_StatusTypeDef mag_status = ICM20948_ReadMagRaw(mag_raw);
 8001676:	4827      	ldr	r0, [pc, #156]	@ (8001714 <ICM20948_Main+0x174>)
 8001678:	f7ff fe57 	bl	800132a <ICM20948_ReadMagRaw>
 800167c:	4603      	mov	r3, r0
 800167e:	71bb      	strb	r3, [r7, #6]
		     if (mag_status == HAL_OK && ak09916_wia2_val_PART2 == 0x09)
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d122      	bne.n	80016cc <ICM20948_Main+0x12c>
 8001686:	797b      	ldrb	r3, [r7, #5]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d11f      	bne.n	80016cc <ICM20948_Main+0x12c>
		     {
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertMagRawToUT(mag_raw, mag_uT);
 800168c:	4922      	ldr	r1, [pc, #136]	@ (8001718 <ICM20948_Main+0x178>)
 800168e:	4821      	ldr	r0, [pc, #132]	@ (8001714 <ICM20948_Main+0x174>)
 8001690:	f7ff ff4a 	bl	8001528 <ICM20948_ConvertMagRawToUT>

		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <ICM20948_Main+0x178>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800169a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <ICM20948_Main+0x178>)
 80016a0:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80016a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <ICM20948_Main+0x178>)
 80016aa:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("<ICM20948>Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80016ae:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016b2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80016b6:	ed8d 7b00 	vstr	d7, [sp]
 80016ba:	ec53 2b15 	vmov	r2, r3, d5
 80016be:	4817      	ldr	r0, [pc, #92]	@ (800171c <ICM20948_Main+0x17c>)
 80016c0:	f007 fa54 	bl	8008b6c <iprintf>
	//	       printf("%s");
		       printf("The data is OK\r\n");
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <ICM20948_Main+0x16c>)
 80016c6:	f007 fab9 	bl	8008c3c <puts>
 80016ca:	e00b      	b.n	80016e4 <ICM20948_Main+0x144>
		     } else if (mag_status == HAL_BUSY) {
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d103      	bne.n	80016da <ICM20948_Main+0x13a>
		       //printf("磁力計數據尚未就緒 (DRDY=0)\r\n");
		    	 printf("<ICM20948>(HAL_BUSY DRDY=0)\r\n");
 80016d2:	4813      	ldr	r0, [pc, #76]	@ (8001720 <ICM20948_Main+0x180>)
 80016d4:	f007 fab2 	bl	8008c3c <puts>
 80016d8:	e004      	b.n	80016e4 <ICM20948_Main+0x144>
		       // 這是正常情況，因為磁力計更新速率可能較慢或與主迴圈不同步
		     }
		     else {
		    	 //讀取 Mag 數據失敗!
		       printf("<ICM20948>Failed to read Mag ! Error Code: %d\r\n",status);
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	4619      	mov	r1, r3
 80016de:	4811      	ldr	r0, [pc, #68]	@ (8001724 <ICM20948_Main+0x184>)
 80016e0:	f007 fa44 	bl	8008b6c <iprintf>
		     }

		     HAL_Delay(100); // 每秒讀取一次數據
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f001 ff25 	bl	8003534 <HAL_Delay>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000230 	.word	0x24000230
 80016f8:	24000228 	.word	0x24000228
 80016fc:	24000240 	.word	0x24000240
 8001700:	2400024c 	.word	0x2400024c
 8001704:	0800c43c 	.word	0x0800c43c
 8001708:	0800c46c 	.word	0x0800c46c
 800170c:	0800c49c 	.word	0x0800c49c
 8001710:	0800c4ac 	.word	0x0800c4ac
 8001714:	24000238 	.word	0x24000238
 8001718:	24000258 	.word	0x24000258
 800171c:	0800c4dc 	.word	0x0800c4dc
 8001720:	0800c508 	.word	0x0800c508
 8001724:	0800c528 	.word	0x0800c528

08001728 <icm42688p_select>:

// --- 內部輔助函數 ---
static float current_accel_sensitivity = ACCEL_SENSITIVITY_2G;
static float current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS;
// 選中 ICM-42688-P (nCS 拉低)
static void icm42688p_select(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_NCS_PORT, ICM42688P_NCS_PIN, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001732:	4802      	ldr	r0, [pc, #8]	@ (800173c <icm42688p_select+0x14>)
 8001734:	f002 fa3a 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	58020400 	.word	0x58020400

08001740 <icm42688p_deselect>:

// 取消選中 ICM-42688-P (nCS 拉高)
static void icm42688p_deselect(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_NCS_PORT, ICM42688P_NCS_PIN, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800174a:	4802      	ldr	r0, [pc, #8]	@ (8001754 <icm42688p_deselect+0x14>)
 800174c:	f002 fa2e 	bl	8003bac <HAL_GPIO_WritePin>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	58020400 	.word	0x58020400

08001758 <icm42688p_write_register>:

// 寫入單個暫存器
// 根據 ICM-42688-P SPI 協議, 寫入時, 位址位元組的 MSB (bit 7) 為 0
static HAL_StatusTypeDef icm42688p_write_register(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t value) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
 8001764:	4613      	mov	r3, r2
 8001766:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status1, status2;
    uint8_t command = reg & 0x7F; // 清除 MSB (bit 7) 表示寫入操作
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800176e:	b2db      	uxtb	r3, r3
 8001770:	737b      	strb	r3, [r7, #13]

    icm42688p_select();
 8001772:	f7ff ffd9 	bl	8001728 <icm42688p_select>
    status1 = HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT);
 8001776:	f107 010d 	add.w	r1, r7, #13
 800177a:	2364      	movs	r3, #100	@ 0x64
 800177c:	2201      	movs	r2, #1
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f005 fdae 	bl	80072e0 <HAL_SPI_Transmit>
 8001784:	4603      	mov	r3, r0
 8001786:	73bb      	strb	r3, [r7, #14]
    if (status1 == HAL_OK) {
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <icm42688p_write_register+0x48>
        status2 = HAL_SPI_Transmit(hspi, &value, 1, ICM42688P_SPI_TIMEOUT);
 800178e:	1cb9      	adds	r1, r7, #2
 8001790:	2364      	movs	r3, #100	@ 0x64
 8001792:	2201      	movs	r2, #1
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f005 fda3 	bl	80072e0 <HAL_SPI_Transmit>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e001      	b.n	80017a4 <icm42688p_write_register+0x4c>
    } else {
        status2 = status1; // 如果第一次傳輸失敗，直接返回該狀態
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	73fb      	strb	r3, [r7, #15]
    }
    icm42688p_deselect();
 80017a4:	f7ff ffcc 	bl	8001740 <icm42688p_deselect>

    if (status1!= HAL_OK) return status1;
 80017a8:	7bbb      	ldrb	r3, [r7, #14]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <icm42688p_write_register+0x5a>
 80017ae:	7bbb      	ldrb	r3, [r7, #14]
 80017b0:	e000      	b.n	80017b4 <icm42688p_write_register+0x5c>
    return status2;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <icm42688p_read_register>:

// 讀取單個暫存器
// 根據 ICM-42688-P SPI 協議, 讀取時, 位址位元組的 MSB (bit 7) 為 1
static uint8_t icm42688p_read_register(SPI_HandleTypeDef *hspi, uint8_t reg) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	70fb      	strb	r3, [r7, #3]
    uint8_t command = reg | 0x80; // 設定 MSB (bit 7) 表示讀取操作
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73bb      	strb	r3, [r7, #14]

    icm42688p_select();
 80017d6:	f7ff ffa7 	bl	8001728 <icm42688p_select>
    HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT);
 80017da:	f107 010f 	add.w	r1, r7, #15
 80017de:	2364      	movs	r3, #100	@ 0x64
 80017e0:	2201      	movs	r2, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f005 fd7c 	bl	80072e0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, &data_read, 1, ICM42688P_SPI_TIMEOUT);
 80017e8:	f107 010e 	add.w	r1, r7, #14
 80017ec:	2364      	movs	r3, #100	@ 0x64
 80017ee:	2201      	movs	r2, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f005 ff63 	bl	80076bc <HAL_SPI_Receive>
    icm42688p_deselect();
 80017f6:	f7ff ffa3 	bl	8001740 <icm42688p_deselect>

    return data_read;
 80017fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <icm42688p_read_multiple_registers>:

// 連續讀取多個暫存器
static HAL_StatusTypeDef icm42688p_read_multiple_registers(SPI_HandleTypeDef *hspi, uint8_t start_reg, uint8_t *buffer, uint8_t len) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	461a      	mov	r2, r3
 8001810:	460b      	mov	r3, r1
 8001812:	72fb      	strb	r3, [r7, #11]
 8001814:	4613      	mov	r3, r2
 8001816:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;
    uint8_t command = start_reg | 0x80; // 設定 MSB (bit 7) 表示讀取操作
 8001818:	7afb      	ldrb	r3, [r7, #11]
 800181a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181e:	b2db      	uxtb	r3, r3
 8001820:	75bb      	strb	r3, [r7, #22]

    icm42688p_select();
 8001822:	f7ff ff81 	bl	8001728 <icm42688p_select>
    HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT); // 發送起始位址
 8001826:	f107 0116 	add.w	r1, r7, #22
 800182a:	2364      	movs	r3, #100	@ 0x64
 800182c:	2201      	movs	r2, #1
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f005 fd56 	bl	80072e0 <HAL_SPI_Transmit>
    status = HAL_SPI_Receive(hspi, buffer, len, ICM42688P_SPI_TIMEOUT); // 連續讀取數據
 8001834:	7abb      	ldrb	r3, [r7, #10]
 8001836:	b29a      	uxth	r2, r3
 8001838:	2364      	movs	r3, #100	@ 0x64
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f005 ff3d 	bl	80076bc <HAL_SPI_Receive>
 8001842:	4603      	mov	r3, r0
 8001844:	75fb      	strb	r3, [r7, #23]
    icm42688p_deselect();
 8001846:	f7ff ff7b 	bl	8001740 <icm42688p_deselect>

    return status;
 800184a:	7dfb      	ldrb	r3, [r7, #23]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <icm42688p_set_bank>:

// 切換暫存器庫 (0 for User Bank 0, 1 for User Bank 1, etc.)
static HAL_StatusTypeDef icm42688p_set_bank(SPI_HandleTypeDef *hspi, uint8_t bank) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
    return icm42688p_write_register(hspi, ICM42688P_REG_BANK_SEL, bank);
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	461a      	mov	r2, r3
 8001864:	2176      	movs	r1, #118	@ 0x76
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ff76 	bl	8001758 <icm42688p_write_register>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <icm42688p_init>:

// --- 公開函數實作 ---

// 初始化 ICM-42688-P
uint8_t icm42688p_init(SPI_HandleTypeDef *hspi) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i_value;
    uint8_t temp_reg_val;
    uint8_t test_reg_val;
    icm42688p_deselect(); // 確保 nCS 初始為高電位
 8001880:	f7ff ff5e 	bl	8001740 <icm42688p_deselect>
    HAL_Delay(10); // 感測器上電後短暫延遲
 8001884:	200a      	movs	r0, #10
 8001886:	f001 fe55 	bl	8003534 <HAL_Delay>

    // 1. 切換到 User Bank 0 (大部分配置暫存器位於此)
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 800188a:	2100      	movs	r1, #0
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe1 	bl	8001854 <icm42688p_set_bank>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <icm42688p_init+0x2a>
        printf("ICM Error: Set Bank 0 failed\r\n");
 8001898:	482d      	ldr	r0, [pc, #180]	@ (8001950 <icm42688p_init+0xd8>)
 800189a:	f007 f9cf 	bl	8008c3c <puts>
        return SENSOR_INIT_FAIL; // 返回 0 表示初始化失敗
 800189e:	2302      	movs	r3, #2
 80018a0:	e051      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(100); // 切換 Bank 後延遲(此處數值原為1，某些情況貌似太快導致who_am_i_value = 0x0，初始化失敗，可視情況調整!)
 80018a2:	2064      	movs	r0, #100	@ 0x64
 80018a4:	f001 fe46 	bl	8003534 <HAL_Delay>

    // 2. 讀取 WHO_AM_I 暫存器進行驗證
    who_am_i_value = icm42688p_read_who_am_i(hspi); // 此函數內部已處理 Bank 切換
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f855 	bl	8001958 <icm42688p_read_who_am_i>
 80018ae:	4603      	mov	r3, r0
 80018b0:	73fb      	strb	r3, [r7, #15]
    if (who_am_i_value!= ICM42688P_WHO_AM_I_VALUE) {
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	2b47      	cmp	r3, #71	@ 0x47
 80018b6:	d007      	beq.n	80018c8 <icm42688p_init+0x50>
        printf("ICM Error: WHO_AM_I check failed. Expected 0x%02X, Got 0x%02X\r\n", ICM42688P_WHO_AM_I_VALUE, who_am_i_value);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	461a      	mov	r2, r3
 80018bc:	2147      	movs	r1, #71	@ 0x47
 80018be:	4825      	ldr	r0, [pc, #148]	@ (8001954 <icm42688p_init+0xdc>)
 80018c0:	f007 f954 	bl	8008b6c <iprintf>
        return SENSOR_INVALID_ID;
 80018c4:	2306      	movs	r3, #6
 80018c6:	e03e      	b.n	8001946 <icm42688p_init+0xce>

    // 3. 配置電源管理 PWR_MGMT0 (0x4E)
    //    啟用加速計和陀螺儀，均設為低噪音 (LN) 模式
    //    ACCEL_MODE[1:0] = 11 (LN), GYRO_MODE[1:0] = 11 (LN) -> 0b00001111 = 0x0F

    if (icm42688p_write_register(hspi, ICM42688P_REG_PWR_MGMT0, ICM42688P_PWR_MGMT0_ACCEL_LN | ICM42688P_PWR_MGMT0_GYRO_LN)!= HAL_OK) {
 80018c8:	220f      	movs	r2, #15
 80018ca:	214e      	movs	r1, #78	@ 0x4e
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff43 	bl	8001758 <icm42688p_write_register>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <icm42688p_init+0x64>
        // printf("ICM Error: PWR_MGMT0 config failed\r\n"); // 移至 main.c
        return SENSOR_CONFIG_FAIL;
 80018d8:	2303      	movs	r3, #3
 80018da:	e034      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1); // 模式更改後需要穩定時間 (datasheet 建議 1ms for gyro, 1ms for accel from sleep to LN)
 80018dc:	2001      	movs	r0, #1
 80018de:	f001 fe29 	bl	8003534 <HAL_Delay>
//    test_reg_val = icm42688p_read_register(hspi, ICM42688P_REG_PWR_MGMT0);
//    printf("ICM42688P_REG_PWR_MGMT0: 0x%02X\r\n", test_reg_val);

    // 4. 配置陀螺儀 GYRO_CONFIG0 (0x4F)
    //    設定 ODR = 1kHz (0x06), FS_SEL = ±2000 dps (0x00 << 4)
    if (icm42688p_write_register(hspi, ICM42688P_REG_GYRO_CONFIG0, ICM42688P_GYRO_FS_SEL_2000DPS | ICM42688P_ODR_1KHZ)!= HAL_OK) {
 80018e2:	2206      	movs	r2, #6
 80018e4:	214f      	movs	r1, #79	@ 0x4f
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff36 	bl	8001758 <icm42688p_write_register>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <icm42688p_init+0x7e>
        // printf("ICM Error: GYRO_CONFIG0 failed\r\n"); // 移至 main.c
        return SENSOR_CONFIG_FAIL;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e027      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f001 fe1c 	bl	8003534 <HAL_Delay>

    // 5. 配置加速計 ACCEL_CONFIG0 (0x50)
    //    設定 ODR = 1kHz (0x06), FS_SEL = ±16g (0x00 << 4)
    if (icm42688p_write_register(hspi, ICM42688P_REG_ACCEL_CONFIG0, ICM42688P_ACCEL_FS_SEL_16G | ICM42688P_ODR_1KHZ)!= HAL_OK) {
 80018fc:	2206      	movs	r2, #6
 80018fe:	2150      	movs	r1, #80	@ 0x50
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <icm42688p_write_register>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <icm42688p_init+0x98>
        // printf("ICM Error: ACCEL_CONFIG0 failed\r\n"); // 移至 main.c
        return SENSOR_CONFIG_FAIL;
 800190c:	2303      	movs	r3, #3
 800190e:	e01a      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f001 fe0f 	bl	8003534 <HAL_Delay>

    // 6. (重要) 清除 INT_ASYNC_RESET 位 (INT_CONFIG1, 0x64, bit 4)
    //    根據 datasheet 建議，為確保 INT1/INT2 正常工作，應清除此位
    //    此暫存器位於 User Bank 0
    temp_reg_val = icm42688p_read_register(hspi, ICM42688P_REG_INT_CONFIG1); // 內部已處理 Bank 切換
 8001916:	2164      	movs	r1, #100	@ 0x64
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff4f 	bl	80017bc <icm42688p_read_register>
 800191e:	4603      	mov	r3, r0
 8001920:	73bb      	strb	r3, [r7, #14]
    if (icm42688p_write_register(hspi, ICM42688P_REG_INT_CONFIG1, temp_reg_val & ~ICM42688P_INT_ASYNC_RESET_BIT)!= HAL_OK) {
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	f023 0310 	bic.w	r3, r3, #16
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	2164      	movs	r1, #100	@ 0x64
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff12 	bl	8001758 <icm42688p_write_register>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <icm42688p_init+0xc6>
        // printf("ICM Error: INT_CONFIG1 (clear INT_ASYNC_RESET) failed\r\n"); // 移至 main.c
        return SENSOR_DATA_NOT_READY;
 800193a:	2308      	movs	r3, #8
 800193c:	e003      	b.n	8001946 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 800193e:	2001      	movs	r0, #1
 8001940:	f001 fdf8 	bl	8003534 <HAL_Delay>

    // printf("ICM-42688-P 初始化成功。\r\n"); // 移至 main.c
    return SENSOR_OK; // 返回 1 表示初始化成功
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800c558 	.word	0x0800c558
 8001954:	0800c578 	.word	0x0800c578

08001958 <icm42688p_read_who_am_i>:

// 讀取 WHO_AM_I 暫存器
uint8_t icm42688p_read_who_am_i(SPI_HandleTypeDef *hspi) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    // 確保在 Bank 0 讀取
    // 注意: icm42688p_read_register 內部不處理 bank 切換，調用者需確保 bank 正確
    // 為安全起見，在此處明確設定 bank
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001960:	2100      	movs	r1, #0
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff76 	bl	8001854 <icm42688p_set_bank>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <icm42688p_read_who_am_i+0x1a>
         // 實際應用中應處理此錯誤
//        printf("ICM Error: Set Bank 0 failed in read_who_am_i\r\n");
        return 0; // 返回錯誤值
 800196e:	2300      	movs	r3, #0
 8001970:	e007      	b.n	8001982 <icm42688p_read_who_am_i+0x2a>
    }
    HAL_Delay(10); // Bank 切換後延遲
 8001972:	200a      	movs	r0, #10
 8001974:	f001 fdde 	bl	8003534 <HAL_Delay>
    return icm42688p_read_register(hspi, ICM42688P_REG_WHO_AM_I);
 8001978:	2175      	movs	r1, #117	@ 0x75
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff1e 	bl	80017bc <icm42688p_read_register>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <icm42688p_read_gyro_raw>:

// 讀取陀螺儀原始數據 (3軸)
void icm42688p_read_gyro_raw(SPI_HandleTypeDef *hspi, int16_t* gyro_data) {
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
    uint8_t raw_data_buffer[3]; // 用於儲存 X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // 確保在 Bank 0 讀取
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001994:	2100      	movs	r1, #0
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff5c 	bl	8001854 <icm42688p_set_bank>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <icm42688p_read_gyro_raw+0x30>
//        printf("ICM Error: Set Bank 0 failed in read_gyro_raw\r\n");
        gyro_data[0] = 0; // Gyro X 清零
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	801a      	strh	r2, [r3, #0]
        gyro_data[1] = 0; // Gyro Y 清零
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3302      	adds	r3, #2
 80019ac:	2200      	movs	r2, #0
 80019ae:	801a      	strh	r2, [r3, #0]
        gyro_data[2] = 0; // Gyro Z 清零
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3304      	adds	r3, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
        return;
 80019b8:	e038      	b.n	8001a2c <icm42688p_read_gyro_raw+0xa2>
    }
    HAL_Delay(1); // 短暫延遲確保 Bank 切換完成
 80019ba:	2001      	movs	r0, #1
 80019bc:	f001 fdba 	bl	8003534 <HAL_Delay>

    if(icm42688p_read_multiple_registers(hspi, ICM42688P_REG_GYRO_DATA_X1_UI, raw_data_buffer, 6)!= HAL_OK) {
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	2306      	movs	r3, #6
 80019c6:	2125      	movs	r1, #37	@ 0x25
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff1b 	bl	8001804 <icm42688p_read_multiple_registers>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00b      	beq.n	80019ec <icm42688p_read_gyro_raw+0x62>
//        printf("ICM Error: Failed to read gyro data\r\n");
        gyro_data[0] = 0; // Gyro X 清零
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
        gyro_data[1] = 0; // Gyro Y 清零
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	3302      	adds	r3, #2
 80019de:	2200      	movs	r2, #0
 80019e0:	801a      	strh	r2, [r3, #0]
        gyro_data[2] = 0; // Gyro Z 清零
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2200      	movs	r2, #0
 80019e8:	801a      	strh	r2, [r3, #0]
        return;
 80019ea:	e01f      	b.n	8001a2c <icm42688p_read_gyro_raw+0xa2>
    }

    gyro_data[0] = (int16_t)(raw_data_buffer[0] << 8 | raw_data_buffer[1]); // Gyro X
 80019ec:	7b3b      	ldrb	r3, [r7, #12]
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21a      	sxth	r2, r3
 80019f4:	7b7b      	ldrb	r3, [r7, #13]
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b21a      	sxth	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	801a      	strh	r2, [r3, #0]
    gyro_data[1] = (int16_t)(raw_data_buffer[2] << 8 | raw_data_buffer[4]); // Gyro Y
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b219      	sxth	r1, r3
 8001a08:	7c3b      	ldrb	r3, [r7, #16]
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	3302      	adds	r3, #2
 8001a10:	430a      	orrs	r2, r1
 8001a12:	b212      	sxth	r2, r2
 8001a14:	801a      	strh	r2, [r3, #0]
    gyro_data[2] = (int16_t)(raw_data_buffer[5] << 8 | raw_data_buffer[6]); // Gyro Z
 8001a16:	7c7b      	ldrb	r3, [r7, #17]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	b219      	sxth	r1, r3
 8001a1e:	7cbb      	ldrb	r3, [r7, #18]
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	3304      	adds	r3, #4
 8001a26:	430a      	orrs	r2, r1
 8001a28:	b212      	sxth	r2, r2
 8001a2a:	801a      	strh	r2, [r3, #0]
}
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <icm42688p_read_accel_raw>:

// 讀取加速計原始數據 (3軸)
void icm42688p_read_accel_raw(SPI_HandleTypeDef *hspi, int16_t* accel_data) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
    uint8_t raw_data_buffer[3]; // 用於儲存 X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // 確保在 Bank 0 讀取
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff08 	bl	8001854 <icm42688p_set_bank>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <icm42688p_read_accel_raw+0x30>
//        printf("ICM Error: Set Bank 0 failed in read_accel_raw\r\n");
        accel_data[0] = 0; // Accel X 清零
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
        accel_data[1] = 0; // Accel Y 清零
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	3302      	adds	r3, #2
 8001a54:	2200      	movs	r2, #0
 8001a56:	801a      	strh	r2, [r3, #0]
        accel_data[2] = 0; // Accel Z 清零
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	801a      	strh	r2, [r3, #0]
        return;
 8001a60:	e038      	b.n	8001ad4 <icm42688p_read_accel_raw+0xa2>
    }
    HAL_Delay(1);
 8001a62:	2001      	movs	r0, #1
 8001a64:	f001 fd66 	bl	8003534 <HAL_Delay>

    if(icm42688p_read_multiple_registers(hspi, ICM42688P_REG_ACCEL_DATA_X1_UI, raw_data_buffer, 6)!= HAL_OK) {
 8001a68:	f107 020c 	add.w	r2, r7, #12
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	211f      	movs	r1, #31
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff fec7 	bl	8001804 <icm42688p_read_multiple_registers>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <icm42688p_read_accel_raw+0x62>
//        printf("ICM Error: Failed to read accel data\r\n");
        accel_data[0] = 0; // Accel X 清零
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	801a      	strh	r2, [r3, #0]
        accel_data[1] = 0; // Accel Y 清零
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	3302      	adds	r3, #2
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
        accel_data[2] = 0; // Accel Z 清零
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
        return;
 8001a92:	e01f      	b.n	8001ad4 <icm42688p_read_accel_raw+0xa2>
    }

    accel_data[0] = (int16_t)(raw_data_buffer[0] << 8 | raw_data_buffer[1]); // Accel X
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	7b7b      	ldrb	r3, [r7, #13]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	801a      	strh	r2, [r3, #0]
    accel_data[1] = (int16_t)(raw_data_buffer[2] << 8 | raw_data_buffer[4]); // Accel Y
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	b219      	sxth	r1, r3
 8001ab0:	7c3b      	ldrb	r3, [r7, #16]
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	b212      	sxth	r2, r2
 8001abc:	801a      	strh	r2, [r3, #0]
    accel_data[2] = (int16_t)(raw_data_buffer[5] << 8 | raw_data_buffer[6]); // Accel Z
 8001abe:	7c7b      	ldrb	r3, [r7, #17]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b219      	sxth	r1, r3
 8001ac6:	7cbb      	ldrb	r3, [r7, #18]
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3304      	adds	r3, #4
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	b212      	sxth	r2, r2
 8001ad2:	801a      	strh	r2, [r3, #0]
}
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <ICM42688p_ConvertAccelRawToG>:
/**
 * @brief 將加速計原始數據轉換為 g (重力加速度)。
 * @param pAccelRaw: 指向加速計原始數據陣列 (int16_t[3])。
 * @param pAccelG:   指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM42688p_ConvertAccelRawToG(const int16_t* pAccelRaw, float* pAccelG) {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    pAccelG[0] = (float)pAccelRaw[0] / current_accel_sensitivity;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001af4:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <ICM42688p_ConvertAccelRawToG+0x78>)
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[1] = (float)pAccelRaw[1] / current_accel_sensitivity;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3302      	adds	r3, #2
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <ICM42688p_ConvertAccelRawToG+0x78>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[2] = (float)pAccelRaw[2] / current_accel_sensitivity;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <ICM42688p_ConvertAccelRawToG+0x78>)
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b44:	edc3 7a00 	vstr	s15, [r3]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	24000008 	.word	0x24000008

08001b58 <ICM42688p_ConvertGyroRawToDPS>:
/**
 * @brief 將陀螺儀原始數據轉換為 dps (度/秒)。
 * @param pGyroRaw: 指向陀螺儀原始數據陣列 (int16_t[3])。
 * @param pGyroDPS: 指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM42688p_ConvertGyroRawToDPS(const int16_t* pGyroRaw, float* pGyroDPS) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
    pGyroDPS[0] = (float)pGyroRaw[0] / current_gyro_sensitivity;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <ICM42688p_ConvertGyroRawToDPS+0x78>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[1] = (float)pGyroRaw[1] / current_gyro_sensitivity;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3302      	adds	r3, #2
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <ICM42688p_ConvertGyroRawToDPS+0x78>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[2] = (float)pGyroRaw[2] / current_gyro_sensitivity;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <ICM42688p_ConvertGyroRawToDPS+0x78>)
 8001bb4:	ed93 7a00 	vldr	s14, [r3]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc0:	edc3 7a00 	vstr	s15, [r3]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	2400000c 	.word	0x2400000c

08001bd4 <icp20100_read_register>:
  * @param  hi2c: I2C 控制代碼。
  * @param  reg_addr: 要讀取的暫存器位址。
  * @param  data: 指向儲存讀取數據的緩衝區。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_read_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t *data) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Mem_Read(hi2c, ICP20100_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_TIMEOUT)!= HAL_OK) {
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	2364      	movs	r3, #100	@ 0x64
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2301      	movs	r3, #1
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	21c6      	movs	r1, #198	@ 0xc6
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f002 f9a2 	bl	8003f40 <HAL_I2C_Mem_Read>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <icp20100_read_register+0x32>
        return SENSOR_COMM_FAIL;
 8001c02:	2304      	movs	r3, #4
 8001c04:	e000      	b.n	8001c08 <icp20100_read_register+0x34>
    }
    return ICP20100_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <icp20100_write_register>:
  * @param  hi2c: I2C 控制代碼。
  * @param  reg_addr: 要寫入的暫存器位址。
  * @param  data: 要寫入的數據。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_write_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t data) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af04      	add	r7, sp, #16
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	70bb      	strb	r3, [r7, #2]
    if (HAL_I2C_Mem_Write(hi2c, ICP20100_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_TIMEOUT)!= HAL_OK) {
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	2364      	movs	r3, #100	@ 0x64
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	1cbb      	adds	r3, r7, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	21c6      	movs	r1, #198	@ 0xc6
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f002 f86f 	bl	8003d18 <HAL_I2C_Mem_Write>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <icp20100_write_register+0x34>
        return SENSOR_COMM_FAIL;
 8001c40:	2304      	movs	r3, #4
 8001c42:	e000      	b.n	8001c46 <icp20100_write_register+0x36>
    }
    return ICP20100_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <icp20100_read_burst>:
  * @param  start_reg_addr: 起始暫存器位址。
  * @param  data: 指向儲存讀取數據的緩衝區。
  * @param  len: 要讀取的位元組數。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_read_burst(I2C_HandleTypeDef *hi2c, uint8_t start_reg_addr, uint8_t *data, uint16_t len) {
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b088      	sub	sp, #32
 8001c52:	af04      	add	r7, sp, #16
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	72fb      	strb	r3, [r7, #11]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Read(hi2c, ICP20100_I2C_ADDR, start_reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, I2C_TIMEOUT)!= HAL_OK) {
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	2364      	movs	r3, #100	@ 0x64
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	893b      	ldrh	r3, [r7, #8]
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	21c6      	movs	r1, #198	@ 0xc6
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f002 f962 	bl	8003f40 <HAL_I2C_Mem_Read>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <icp20100_read_burst+0x38>
        return SENSOR_COMM_FAIL;
 8001c82:	2304      	movs	r3, #4
 8001c84:	e000      	b.n	8001c88 <icp20100_read_burst+0x3a>
    }
    return ICP20100_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <icp20100_init>:
  *         此為簡化版初始化，主要針對 Version B 晶片。
  *         完整的 Version A 初始化較複雜，涉及 OTP 讀取與配置，此處未完全實作。
  * @param  hi2c: I2C_HandleTypeDef 指標，指向 I2C 控制代碼。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
ICP20100_StatusTypeDef icp20100_init(I2C_HandleTypeDef *hi2c) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
    uint8_t device_id = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	757b      	strb	r3, [r7, #21]
    uint8_t version = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	753b      	strb	r3, [r7, #20]
    uint8_t otp_status2 = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74fb      	strb	r3, [r7, #19]
    uint8_t mode_sync_status = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	74bb      	strb	r3, [r7, #18]

    // 1. 檢查 I2C 通訊是否正常 (嘗試讀取 DEVICE_ID)
    if (icp20100_read_register(hi2c, ICP20100_REG_DEVICE_ID, &device_id)!= ICP20100_OK) {
 8001ca8:	f107 0315 	add.w	r3, r7, #21
 8001cac:	461a      	mov	r2, r3
 8001cae:	210c      	movs	r1, #12
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff8f 	bl	8001bd4 <icp20100_read_register>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <icp20100_init+0x30>
        //printf("Error: Failed to communicate with ICP-20100.\r\n");
        return SENSOR_COMM_FAIL;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e076      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 2. 核對 DEVICE_ID
    if (device_id!= ICP20100_EXPECTED_DEVICE_ID) {
 8001cc0:	7d7b      	ldrb	r3, [r7, #21]
 8001cc2:	2b63      	cmp	r3, #99	@ 0x63
 8001cc4:	d001      	beq.n	8001cca <icp20100_init+0x3a>
        //printf("Error: ICP-20100 Device ID mismatch. Expected 0x%02X, Got 0x%02X\r\n", ICP20100_EXPECTED_DEVICE_ID, device_id);
        return SENSOR_INVALID_ID;
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e071      	b.n	8001dae <icp20100_init+0x11e>
    }
    //printf("ICP-20100 Device ID: 0x%02X - OK\r\n", device_id);

    // 3. 讀取 ASIC 版本
    if (icp20100_read_register(hi2c, ICP20100_REG_VERSION, &version)!= ICP20100_OK) {
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	461a      	mov	r2, r3
 8001cd0:	21d3      	movs	r1, #211	@ 0xd3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff7e 	bl	8001bd4 <icp20100_read_register>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <icp20100_init+0x52>
        //printf("Error: Failed to read ICP-20100 version.\r\n");
        return SENSOR_COMM_FAIL;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	e065      	b.n	8001dae <icp20100_init+0x11e>
    // 4. 根據資料手冊 S6.5 Boot Sequence 進行簡化初始化
    //    對於 Version B (version == 0xB2)，大部分 OTP 配置已完成。
    //    對於 Version A (version == 0x00)，需要更複雜的 OTP 處理。
    //    本簡化範例假設 Version B 或 Version A 已完成 OTP boot。

    if (version == ICP20100_ASIC_VERSION_B) {
 8001ce2:	7d3b      	ldrb	r3, [r7, #20]
 8001ce4:	2bb2      	cmp	r3, #178	@ 0xb2
 8001ce6:	d00e      	beq.n	8001d06 <icp20100_init+0x76>
        //printf("ICP-20100 Version B detected. Simplified initialization.\r\n");
        // Version B 通常不需要額外的 OTP 載入步驟
    } else if (version == 0x00) { // Version A
 8001ce8:	7d3b      	ldrb	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <icp20100_init+0x76>
        //printf("ICP-20100 Version A detected. Checking BOOT_UP_STATUS.\r\n");
        // 檢查 BOOT_UP_STATUS (OTP_STATUS2)
        if (icp20100_read_register(hi2c, ICP20100_REG_OTP_STATUS2, &otp_status2)!= ICP20100_OK) {
 8001cee:	f107 0313 	add.w	r3, r7, #19
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	21bf      	movs	r1, #191	@ 0xbf
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff6c 	bl	8001bd4 <icp20100_read_register>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <icp20100_init+0x76>
            return SENSOR_COMM_FAIL;
 8001d02:	2304      	movs	r3, #4
 8001d04:	e053      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 5. 解鎖主暫存器 (寫入任意值，然後寫入 0x00 以鎖定)
    //    根據資料手冊 S6.5，初始化序列中會操作 MASTER_LOCK。
    //    為確保可配置模式，先解鎖。
    if (icp20100_write_register(hi2c, ICP20100_REG_MASTER_LOCK, 0x01)!= ICP20100_OK) { // 寫入非0值解鎖
 8001d06:	2201      	movs	r2, #1
 8001d08:	21be      	movs	r1, #190	@ 0xbe
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff80 	bl	8001c10 <icp20100_write_register>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <icp20100_init+0x8a>
         //printf("Error: Failed to unlock master registers.\r\n");
        return SENSOR_COMM_FAIL;
 8001d16:	2304      	movs	r3, #4
 8001d18:	e049      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 6. 等待模式同步狀態 (MODE_SYNC_STATUS in DEVICE_STATUS) 變為 1
    //    根據資料手冊 S6.6，寫入 MODE_SELECT 前，MODE_SYNC_STATUS 需為 1。
    uint8_t retry_count = 10;
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	75fb      	strb	r3, [r7, #23]
    do {
        if (icp20100_read_register(hi2c, ICP20100_REG_DEVICE_STATUS, &mode_sync_status)!= ICP20100_OK) {
 8001d1e:	f107 0312 	add.w	r3, r7, #18
 8001d22:	461a      	mov	r2, r3
 8001d24:	21cd      	movs	r1, #205	@ 0xcd
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff54 	bl	8001bd4 <icp20100_read_register>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <icp20100_init+0xa6>
            return SENSOR_COMM_FAIL;
 8001d32:	2304      	movs	r3, #4
 8001d34:	e03b      	b.n	8001dae <icp20100_init+0x11e>
        }
        if (mode_sync_status & 0x01) break; // MODE_SYNC_STATUS is bit 0
 8001d36:	7cbb      	ldrb	r3, [r7, #18]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <icp20100_init+0xc4>
        HAL_Delay(10); // 短暫延遲
 8001d40:	200a      	movs	r0, #10
 8001d42:	f001 fbf7 	bl	8003534 <HAL_Delay>
        retry_count--;
 8001d46:	7dfb      	ldrb	r3, [r7, #23]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	75fb      	strb	r3, [r7, #23]
    } while (retry_count > 0);
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1e5      	bne.n	8001d1e <icp20100_init+0x8e>
 8001d52:	e000      	b.n	8001d56 <icp20100_init+0xc6>
        if (mode_sync_status & 0x01) break; // MODE_SYNC_STATUS is bit 0
 8001d54:	bf00      	nop
    //    Bit  4 FORCED_MEAS_TRIGGER = 0 (N/A for continuous)
    //    Bit  3 MEAS_MODE = 1 (Continuous measurements)
    //    Bit  2 POWER_MODE = 0 (Normal mode: active during meas, else standby)
    //    Bits 1:0 FIFO_READOUT_MODE = 00 (Pressure first)
    //    Value = 0b00001000 = 0x08
    uint8_t mode_select_val = 0x08;
 8001d56:	2308      	movs	r3, #8
 8001d58:	75bb      	strb	r3, [r7, #22]
    if (icp20100_write_register(hi2c, ICP20100_REG_MODE_SELECT, mode_select_val)!= ICP20100_OK) {
 8001d5a:	7dbb      	ldrb	r3, [r7, #22]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	21c0      	movs	r1, #192	@ 0xc0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff55 	bl	8001c10 <icp20100_write_register>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <icp20100_init+0xe0>
        //printf("Error: Failed to set measurement mode.\r\n");
        return SENSOR_COMM_FAIL;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e01e      	b.n	8001dae <icp20100_init+0x11e>
    }
   // printf("ICP-20100 set to Mode0 continuous measurement.\r\n");

    // 8. 鎖定主暫存器 (寫入 0x00)
    if (icp20100_write_register(hi2c, ICP20100_REG_MASTER_LOCK, 0x00)!= ICP20100_OK) {
 8001d70:	2200      	movs	r2, #0
 8001d72:	21be      	movs	r1, #190	@ 0xbe
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff ff4b 	bl	8001c10 <icp20100_write_register>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <icp20100_init+0xf4>
        //printf("Error: Failed to lock master registers.\r\n");
        return SENSOR_COMM_FAIL;
 8001d80:	2304      	movs	r3, #4
 8001d82:	e014      	b.n	8001dae <icp20100_init+0x11e>
    }

    // 延遲替代 HAL_Delay(1000)暫時解決HAL_Delay時會當掉問題
    	      for (volatile int i = 0; i < 1000; i++){
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e00c      	b.n	8001da4 <icp20100_init+0x114>
    	    	  for (volatile int q = 0; q < 1000; q++);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	e002      	b.n	8001d96 <icp20100_init+0x106>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d9c:	dbf8      	blt.n	8001d90 <icp20100_init+0x100>
    	      for (volatile int i = 0; i < 1000; i++){
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3301      	adds	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001daa:	dbee      	blt.n	8001d8a <icp20100_init+0xfa>
    	      }
//    HAL_Delay(10); // 等待模式穩定

    return SENSOR_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <icp20100_get_pressure_temp>:
  * @param  hi2c: I2C_HandleTypeDef 指標，指向 I2C 控制代碼。
  * @param  pressure: float 指標，用於儲存讀取到的大氣壓力值 (單位: Pa)。
  * @param  temperature: float 指標，用於儲存讀取到的溫度值 (單位: Celsius)。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
ICP20100_StatusTypeDef icp20100_get_pressure_temp(I2C_HandleTypeDef *hi2c, float *pressure, float *temperature) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
    //uint8_t raw_data; // 用於儲存壓力 (3 bytes) 和溫度 (3 bytes) 的原始數據
    uint8_t raw_data[6];// 用於儲存壓力 (3 bytes) 和溫度 (3 bytes) 的原始數據
    // 連續讀取 6 個位元組的數據 (PRESS_DATA_0 到 TEMP_DATA_2)
    // 順序：P0, P1, P2, T0, T1, T2
    if (icp20100_read_burst(hi2c, ICP20100_REG_PRESS_DATA_0, raw_data, 6)!= ICP20100_OK) {
 8001dc4:	f107 0210 	add.w	r2, r7, #16
 8001dc8:	2306      	movs	r3, #6
 8001dca:	21fa      	movs	r1, #250	@ 0xfa
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff ff3e 	bl	8001c4e <icp20100_read_burst>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <icp20100_get_pressure_temp+0x24>
        //printf("Error: Failed to read P/T data burst.\r\n");
        return SENSOR_COMM_FAIL;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	e052      	b.n	8001e82 <icp20100_get_pressure_temp+0xca>
    }

    // 解析 20 位元壓力數據 (二補數)
    // P_OUT[19:0] = {PRESS_DATA_2[3:0], PRESS_DATA_1[7:0], PRESS_DATA_0[7:0]}
    // 假設 raw_data 順序: raw_data[0]=P0, raw_data[1]=P1, raw_data[2]=P2_MSB(含P2[3:0])
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 8001ddc:	7cbb      	ldrb	r3, [r7, #18]
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                        ((int32_t)raw_data[1] << 8) | \
 8001de4:	7c7b      	ldrb	r3, [r7, #17]
 8001de6:	021b      	lsls	r3, r3, #8
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 8001de8:	4313      	orrs	r3, r2
                        ((int32_t)raw_data[0]);
 8001dea:	7c3a      	ldrb	r2, [r7, #16]
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61fb      	str	r3, [r7, #28]

    // 符號擴展 (如果第 20 位元為 1，則為負數)
    if (p_out_raw & (1 << 19)) {
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <icp20100_get_pressure_temp+0x4a>
        p_out_raw |= ~((1 << 20) - 1); // 將高位置為 1 以進行符號擴展
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	4b23      	ldr	r3, [pc, #140]	@ (8001e8c <icp20100_get_pressure_temp+0xd4>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61fb      	str	r3, [r7, #28]
    }

    // 解析 20 位元溫度數據 (二補數)
    // T_OUT[19:0] = {TEMP_DATA_2[3:0], TEMP_DATA_1[7:0], TEMP_DATA_0[7:0]}
    // 假設 raw_data 順序: raw_data[3]=T0, raw_data[4]=T1, raw_data[5]=T2_MSB(含T2[3:0])
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 8001e02:	7d7b      	ldrb	r3, [r7, #21]
 8001e04:	041b      	lsls	r3, r3, #16
 8001e06:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                        ((int32_t)raw_data[4] << 8) | \
 8001e0a:	7d3b      	ldrb	r3, [r7, #20]
 8001e0c:	021b      	lsls	r3, r3, #8
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 8001e0e:	4313      	orrs	r3, r2
                        ((int32_t)raw_data[3]);
 8001e10:	7cfa      	ldrb	r2, [r7, #19]
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]

    // 符號擴展
    if (t_out_raw & (1 << 19)) {
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <icp20100_get_pressure_temp+0x70>
        t_out_raw |= ~((1 << 20) - 1);
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <icp20100_get_pressure_temp+0xd4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
    }

    // 轉換為實際物理值
    // 壓力轉換公式: P_Pa = * 1000
    *pressure = ((((float)p_out_raw / (float)(1 << 17)) * 40.0f) + 70.0f) * 10.0f;//試著改成10.0f(原本1000.0f)
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e32:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001e90 <icp20100_get_pressure_temp+0xd8>
 8001e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001e94 <icp20100_get_pressure_temp+0xdc>
 8001e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e42:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001e98 <icp20100_get_pressure_temp+0xe0>
 8001e46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e4a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	edc3 7a00 	vstr	s15, [r3]

    // 溫度轉換公式: T_C = (T_OUT / 2^18) * 65 + 25
    *temperature = (((float)t_out_raw / (float)(1 << 18)) * 65.0f) + 25.0f;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e62:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001e9c <icp20100_get_pressure_temp+0xe4>
 8001e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001ea0 <icp20100_get_pressure_temp+0xe8>
 8001e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e72:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	edc3 7a00 	vstr	s15, [r3]

    return ICP20100_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3720      	adds	r7, #32
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	fff00000 	.word	0xfff00000
 8001e90:	48000000 	.word	0x48000000
 8001e94:	42200000 	.word	0x42200000
 8001e98:	428c0000 	.word	0x428c0000
 8001e9c:	48800000 	.word	0x48800000
 8001ea0:	42820000 	.word	0x42820000

08001ea4 <ICP20100_Main>:
void ICP20100_Main(I2C_HandleTypeDef *hi2c){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	6078      	str	r0, [r7, #4]

	float pressure, temperature;
	ICP20100_StatusTypeDef sensor_status;
	  // 讀取壓力與溫度數據
	  sensor_status = icp20100_get_pressure_temp(hi2c, &pressure, &temperature);
 8001eac:	f107 020c 	add.w	r2, r7, #12
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ff7e 	bl	8001db8 <icp20100_get_pressure_temp>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	75fb      	strb	r3, [r7, #23]

	  if (sensor_status == ICP20100_OK) {
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d112      	bne.n	8001eec <ICP20100_Main+0x48>
		// 透過 printf 輸出數據
		// 使用者已實作 _write，printf 應能正常工作
		printf("<ICP20100>Pressure: %.2f Pa, Temperature: %.2f C\r\n", pressure, temperature);
 8001ec6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ed2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ed6:	ed8d 7b00 	vstr	d7, [sp]
 8001eda:	ec53 2b16 	vmov	r2, r3, d6
 8001ede:	4809      	ldr	r0, [pc, #36]	@ (8001f04 <ICP20100_Main+0x60>)
 8001ee0:	f006 fe44 	bl	8008b6c <iprintf>
		printf("The data is OK\r\n");
 8001ee4:	4808      	ldr	r0, [pc, #32]	@ (8001f08 <ICP20100_Main+0x64>)
 8001ee6:	f006 fea9 	bl	8008c3c <puts>
 8001eea:	e004      	b.n	8001ef6 <ICP20100_Main+0x52>
		// 測試修改1: 輸出整數 (會損失精度，僅為測試)
	//	        printf("Pressure_int: %d Pa, Temperature_int: %d C\r\n", (int)pressure, (int)temperature);
	  } else {
		printf("Failed to read data from ICP-20100. Error Code: %d\r\n", sensor_status);
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4806      	ldr	r0, [pc, #24]	@ (8001f0c <ICP20100_Main+0x68>)
 8001ef2:	f006 fe3b 	bl	8008b6c <iprintf>
	  }
	  // 延遲替代 HAL_Delay(1000)暫時解決HAL_Delay時會當掉問題
//		  for (volatile int i = 0; i < 1000; i++){
//			  for (volatile int q = 0; q < 1000; q++);
//		  }
	  HAL_Delay(100);
 8001ef6:	2064      	movs	r0, #100	@ 0x64
 8001ef8:	f001 fb1c 	bl	8003534 <HAL_Delay>
}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0800c5b8 	.word	0x0800c5b8
 8001f08:	0800c5ec 	.word	0x0800c5ec
 8001f0c:	0800c5fc 	.word	0x0800c5fc

08001f10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f18:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001f30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f38:	e000      	b.n	8001f3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f3c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f9      	beq.n	8001f3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f46:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001f66:	f000 fca9 	bl	80028bc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6a:	f001 fa51 	bl	8003410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6e:	f000 f981 	bl	8002274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f72:	f000 fb83 	bl	800267c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f76:	f000 fa79 	bl	800246c <MX_SPI1_Init>
  MX_I2C2_Init();
 8001f7a:	f000 f9f7 	bl	800236c <MX_I2C2_Init>
  MX_SPI2_Init();
 8001f7e:	f000 facd 	bl	800251c <MX_SPI2_Init>
  MX_I2C4_Init();
 8001f82:	f000 fa33 	bl	80023ec <MX_I2C4_Init>
  MX_SPI3_Init();
 8001f86:	f000 fb21 	bl	80025cc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
#define MAX_INIT_ATTEMPTS 10 // 定義最大INIT嘗試次數
  int attempt_count = 0;// INIT嘗試計數
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  /* Initialize ICM-20948 sensor ----------------------------------------------------------*/
  HAL_StatusTypeDef ICM20948_status;
  printf("<ICM-20948> System initialization...\r\n");
 8001f8e:	4896      	ldr	r0, [pc, #600]	@ (80021e8 <main+0x288>)
 8001f90:	f006 fe54 	bl	8008c3c <puts>
  // 使用 for 迴圈嘗試初始化，最多10次
  for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8001f94:	2301      	movs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e014      	b.n	8001fc4 <main+0x64>
      ICM20948_status = ICM20948_Init(); // 執行初始化
 8001f9a:	f7fe ffbb 	bl	8000f14 <ICM20948_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	72fb      	strb	r3, [r7, #11]
      if (ICM20948_status == SENSOR_OK) {
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <main+0x4e>
          // 如果成功，就跳出迴圈，attempt_count歸零
    	  attempt_count = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60fb      	str	r3, [r7, #12]
          break;
 8001fac:	e00d      	b.n	8001fca <main+0x6a>
      }
      // 如果失敗，印出嘗試失敗的訊息
      printf("<ICM-20948> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 8001fae:	220a      	movs	r2, #10
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	488e      	ldr	r0, [pc, #568]	@ (80021ec <main+0x28c>)
 8001fb4:	f006 fdda 	bl	8008b6c <iprintf>
      HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 8001fb8:	20c8      	movs	r0, #200	@ 0xc8
 8001fba:	f001 fabb 	bl	8003534 <HAL_Delay>
  for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b0a      	cmp	r3, #10
 8001fc8:	dde7      	ble.n	8001f9a <main+0x3a>
  }
  // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
  if (ICM20948_status == SENSOR_OK) {
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <main+0x7a>
      printf("<ICM-20948> Initialization Successfully on attempt #%d\r\n", attempt_count);
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	4887      	ldr	r0, [pc, #540]	@ (80021f0 <main+0x290>)
 8001fd4:	f006 fdca 	bl	8008b6c <iprintf>
 8001fd8:	e004      	b.n	8001fe4 <main+0x84>
  } else {
	  printf("<ICM-20948> Initialization FAILED Error Code: %d\r\n", ICM20948_status);
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4885      	ldr	r0, [pc, #532]	@ (80021f4 <main+0x294>)
 8001fe0:	f006 fdc4 	bl	8008b6c <iprintf>
  }
  HAL_Delay(2000);
 8001fe4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fe8:	f001 faa4 	bl	8003534 <HAL_Delay>
  	/* Initialize ICP-20100 sensor ----------------------------------------------------------*/
  ICP20100_StatusTypeDef icp20100_status;
   printf("<ICP-20100> System initialization...\r\n");
 8001fec:	4882      	ldr	r0, [pc, #520]	@ (80021f8 <main+0x298>)
 8001fee:	f006 fe25 	bl	8008c3c <puts>
   // 使用 for 迴圈嘗試初始化，最多10次
   for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e015      	b.n	8002024 <main+0xc4>
	   icp20100_status = icp20100_init(&hi2c2); // 執行初始化
 8001ff8:	4880      	ldr	r0, [pc, #512]	@ (80021fc <main+0x29c>)
 8001ffa:	f7ff fe49 	bl	8001c90 <icp20100_init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	72bb      	strb	r3, [r7, #10]
       if (icp20100_status == SENSOR_OK) {
 8002002:	7abb      	ldrb	r3, [r7, #10]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <main+0xae>
           // 如果成功，就跳出迴圈，attempt_count歸零
     	  attempt_count = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
           break;
 800200c:	e00d      	b.n	800202a <main+0xca>
       }
       // 如果失敗，印出嘗試失敗的訊息
       printf("<ICP-20100> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 800200e:	220a      	movs	r2, #10
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	487b      	ldr	r0, [pc, #492]	@ (8002200 <main+0x2a0>)
 8002014:	f006 fdaa 	bl	8008b6c <iprintf>
       HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 8002018:	20c8      	movs	r0, #200	@ 0xc8
 800201a:	f001 fa8b 	bl	8003534 <HAL_Delay>
   for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3301      	adds	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b0a      	cmp	r3, #10
 8002028:	dde6      	ble.n	8001ff8 <main+0x98>
   }
   // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
   if (icp20100_status == SENSOR_OK) {
 800202a:	7abb      	ldrb	r3, [r7, #10]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <main+0xda>
       printf("<ICP-20100> Initialization Successfully on attempt #%d\r\n", attempt_count);
 8002030:	68f9      	ldr	r1, [r7, #12]
 8002032:	4874      	ldr	r0, [pc, #464]	@ (8002204 <main+0x2a4>)
 8002034:	f006 fd9a 	bl	8008b6c <iprintf>
 8002038:	e004      	b.n	8002044 <main+0xe4>
   } else {
 	  printf("<ICP-20100> Initialization FAILED Error Code: %d\r\n", icp20100_status);
 800203a:	7abb      	ldrb	r3, [r7, #10]
 800203c:	4619      	mov	r1, r3
 800203e:	4872      	ldr	r0, [pc, #456]	@ (8002208 <main+0x2a8>)
 8002040:	f006 fd94 	bl	8008b6c <iprintf>
   }
   HAL_Delay(2000);
 8002044:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002048:	f001 fa74 	bl	8003534 <HAL_Delay>
   /* Initialize ICP-20100 sensor ----------------------------------------------------------*/

   /* Initialize ICM-42688-P sensor ----------------------------------------------------------*/
   	   HAL_StatusTypeDef icm42688p_status;
      printf("<ICM-42688-P> System initialization...\r\n");
 800204c:	486f      	ldr	r0, [pc, #444]	@ (800220c <main+0x2ac>)
 800204e:	f006 fdf5 	bl	8008c3c <puts>
      // 使用 for 迴圈嘗試初始化，最多10次
      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 8002052:	2301      	movs	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e015      	b.n	8002084 <main+0x124>
    	  icm42688p_status = icm42688p_init(&hspi2); // 執行初始化
 8002058:	486d      	ldr	r0, [pc, #436]	@ (8002210 <main+0x2b0>)
 800205a:	f7ff fc0d 	bl	8001878 <icm42688p_init>
 800205e:	4603      	mov	r3, r0
 8002060:	727b      	strb	r3, [r7, #9]
          if (icm42688p_status == SENSOR_OK) {
 8002062:	7a7b      	ldrb	r3, [r7, #9]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <main+0x10e>
              // 如果成功，就跳出迴圈，attempt_count歸零
        	  attempt_count = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
              break;
 800206c:	e00d      	b.n	800208a <main+0x12a>
          }
          // 如果失敗，印出嘗試失敗的訊息
          printf("<ICM-42688-P> Initialization FAILED on attempt %d/%d. Retrying...\r\n", attempt_count, MAX_INIT_ATTEMPTS);
 800206e:	220a      	movs	r2, #10
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	4868      	ldr	r0, [pc, #416]	@ (8002214 <main+0x2b4>)
 8002074:	f006 fd7a 	bl	8008b6c <iprintf>
          HAL_Delay(200); // 在下次嘗試前延遲一小段時間，讓感測器有時間重置
 8002078:	20c8      	movs	r0, #200	@ 0xc8
 800207a:	f001 fa5b 	bl	8003534 <HAL_Delay>
      for (attempt_count = 1; attempt_count <= MAX_INIT_ATTEMPTS; ++attempt_count) {
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3301      	adds	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b0a      	cmp	r3, #10
 8002088:	dde6      	ble.n	8002058 <main+0xf8>
      }
      // 在迴圈結束後，根據最終的狀態來判斷並印出訊息
      if (icm42688p_status == SENSOR_OK) {
 800208a:	7a7b      	ldrb	r3, [r7, #9]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <main+0x13a>
          printf("<ICM-42688-P> Initialization Successfully on attempt #%d\r\n", attempt_count);
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	4861      	ldr	r0, [pc, #388]	@ (8002218 <main+0x2b8>)
 8002094:	f006 fd6a 	bl	8008b6c <iprintf>
 8002098:	e004      	b.n	80020a4 <main+0x144>
      } else {
    	  printf("<ICM-42688-P> Initialization FAILED Error Code: %d\r\n", icm42688p_status);
 800209a:	7a7b      	ldrb	r3, [r7, #9]
 800209c:	4619      	mov	r1, r3
 800209e:	485f      	ldr	r0, [pc, #380]	@ (800221c <main+0x2bc>)
 80020a0:	f006 fd64 	bl	8008b6c <iprintf>
      }
      HAL_Delay(2000);
 80020a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80020a8:	f001 fa44 	bl	8003534 <HAL_Delay>
//		printf("<ICM-42688-P> Initialization Failed. Error Code: %d\r\n", icm42688p_status);
//	  // 根據錯誤碼進行處理，例如進入錯誤狀態迴圈while(1){}
//	}
//	HAL_Delay(2000);
	/* Initialize RM-3100 sensor ----------------------------------------------------------*/
	printf("<RM-3100> System initialization...\r\n");
 80020ac:	485c      	ldr	r0, [pc, #368]	@ (8002220 <main+0x2c0>)
 80020ae:	f006 fdc5 	bl	8008c3c <puts>
	HAL_StatusTypeDef rm3100_status;
	rm3100_status = SENSOR_OK;//RM3100_Init(&hi2c4);
 80020b2:	2300      	movs	r3, #0
 80020b4:	723b      	strb	r3, [r7, #8]
	if (rm3100_status == SENSOR_OK) {
 80020b6:	7a3b      	ldrb	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <main+0x164>
	  // 初始化成功信息已在 RM3100_Init 內部（或此處）打印
	  printf("<RM-3100> initialization Successfully.\r\n");
 80020bc:	4859      	ldr	r0, [pc, #356]	@ (8002224 <main+0x2c4>)
 80020be:	f006 fdbd 	bl	8008c3c <puts>
 80020c2:	e004      	b.n	80020ce <main+0x16e>
	} else {
		printf("<RM-3100> Initialization Failed. Error Code: %d\r\n", rm3100_status);
 80020c4:	7a3b      	ldrb	r3, [r7, #8]
 80020c6:	4619      	mov	r1, r3
 80020c8:	4857      	ldr	r0, [pc, #348]	@ (8002228 <main+0x2c8>)
 80020ca:	f006 fd4f 	bl	8008b6c <iprintf>
	  // 根據錯誤碼進行處理，例如進入錯誤狀態迴圈while(1){}
	}
	HAL_Delay(2000);
 80020ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80020d2:	f001 fa2f 	bl	8003534 <HAL_Delay>
	/* Initialize BMI-088 sensor ----------------------------------------------------------*/
		printf("<BMI-088> System initialization...\r\n");
 80020d6:	4855      	ldr	r0, [pc, #340]	@ (800222c <main+0x2cc>)
 80020d8:	f006 fdb0 	bl	8008c3c <puts>
		HAL_StatusTypeDef BMI088_status;
		BMI088_status = BMI088_Init();//BMI088_Init
 80020dc:	f7fe fc48 	bl	8000970 <BMI088_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
		if (BMI088_status == SENSOR_OK) {
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <main+0x192>
		  printf("<BMI-088> initialization Successfully.\r\n");
 80020ea:	4851      	ldr	r0, [pc, #324]	@ (8002230 <main+0x2d0>)
 80020ec:	f006 fda6 	bl	8008c3c <puts>
 80020f0:	e004      	b.n	80020fc <main+0x19c>
		} else {
			printf("<BMI-088> Initialization Failed. Error Code: %d\r\n", BMI088_status);
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	4619      	mov	r1, r3
 80020f6:	484f      	ldr	r0, [pc, #316]	@ (8002234 <main+0x2d4>)
 80020f8:	f006 fd38 	bl	8008b6c <iprintf>
		  // 根據錯誤碼進行處理，例如進入錯誤狀態迴圈while(1){}
		}
		HAL_Delay(2000);
 80020fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002100:	f001 fa18 	bl	8003534 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("-----------------------<ICM20948>----------------------- \n");
 8002104:	484c      	ldr	r0, [pc, #304]	@ (8002238 <main+0x2d8>)
 8002106:	f006 fd99 	bl	8008c3c <puts>
	  ICM20948_Main();
 800210a:	f7ff fa49 	bl	80015a0 <ICM20948_Main>
	  HAL_Delay(1000);
 800210e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002112:	f001 fa0f 	bl	8003534 <HAL_Delay>
	  printf("-----------------------<ICP20100>----------------------- \n");
 8002116:	4849      	ldr	r0, [pc, #292]	@ (800223c <main+0x2dc>)
 8002118:	f006 fd90 	bl	8008c3c <puts>
	  ICP20100_Main(&hi2c2);
 800211c:	4837      	ldr	r0, [pc, #220]	@ (80021fc <main+0x29c>)
 800211e:	f7ff fec1 	bl	8001ea4 <ICP20100_Main>
	  HAL_Delay(1000);
 8002122:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002126:	f001 fa05 	bl	8003534 <HAL_Delay>
	  printf("-----------------------<ICM42688p>----------------------- \n");
 800212a:	4845      	ldr	r0, [pc, #276]	@ (8002240 <main+0x2e0>)
 800212c:	f006 fd86 	bl	8008c3c <puts>
	  // icm42688p讀取加速計原始數據
	  icm42688p_read_accel_raw(&hspi2, accel_data);
 8002130:	4944      	ldr	r1, [pc, #272]	@ (8002244 <main+0x2e4>)
 8002132:	4837      	ldr	r0, [pc, #220]	@ (8002210 <main+0x2b0>)
 8002134:	f7ff fc7d 	bl	8001a32 <icm42688p_read_accel_raw>
	  // icm42688p讀取陀螺儀原始數據
	  icm42688p_read_gyro_raw(&hspi2, gyro_data);
 8002138:	4943      	ldr	r1, [pc, #268]	@ (8002248 <main+0x2e8>)
 800213a:	4835      	ldr	r0, [pc, #212]	@ (8002210 <main+0x2b0>)
 800213c:	f7ff fc25 	bl	800198a <icm42688p_read_gyro_raw>
	  //icm42688p 將原始數據轉換為物理單位
	  ICM42688p_ConvertAccelRawToG(accel_data, ICM42688paccel_g);
 8002140:	4942      	ldr	r1, [pc, #264]	@ (800224c <main+0x2ec>)
 8002142:	4840      	ldr	r0, [pc, #256]	@ (8002244 <main+0x2e4>)
 8002144:	f7ff fcca 	bl	8001adc <ICM42688p_ConvertAccelRawToG>
	  ICM42688p_ConvertGyroRawToDPS(gyro_data, ICM42688pgyro_dps);
 8002148:	4941      	ldr	r1, [pc, #260]	@ (8002250 <main+0x2f0>)
 800214a:	483f      	ldr	r0, [pc, #252]	@ (8002248 <main+0x2e8>)
 800214c:	f7ff fd04 	bl	8001b58 <ICM42688p_ConvertGyroRawToDPS>
	  //icm42688p 確保 accel_data 和 gyro_data 陣列的索引正確 (0=X, 1=Y, 2=Z)
	  printf("<ICM42688p> accel_data: X=%.2f, Y=%.2f, Z=%.2f\r\n", ICM42688paccel_g[0], ICM42688paccel_g[1], ICM42688paccel_g[2]);
 8002150:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <main+0x2ec>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800215a:	4b3c      	ldr	r3, [pc, #240]	@ (800224c <main+0x2ec>)
 800215c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002160:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002164:	4b39      	ldr	r3, [pc, #228]	@ (800224c <main+0x2ec>)
 8002166:	edd3 6a02 	vldr	s13, [r3, #8]
 800216a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800216e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002172:	ed8d 7b00 	vstr	d7, [sp]
 8002176:	ec53 2b15 	vmov	r2, r3, d5
 800217a:	4836      	ldr	r0, [pc, #216]	@ (8002254 <main+0x2f4>)
 800217c:	f006 fcf6 	bl	8008b6c <iprintf>
	  printf("<ICM42688p> gyro_data: X=%.2f, Y=%.2f, Z=%.2f\r\n", ICM42688pgyro_dps[0], ICM42688pgyro_dps[1], ICM42688pgyro_dps[2]);
 8002180:	4b33      	ldr	r3, [pc, #204]	@ (8002250 <main+0x2f0>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800218a:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <main+0x2f0>)
 800218c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002190:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002194:	4b2e      	ldr	r3, [pc, #184]	@ (8002250 <main+0x2f0>)
 8002196:	edd3 6a02 	vldr	s13, [r3, #8]
 800219a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800219e:	ed8d 6b02 	vstr	d6, [sp, #8]
 80021a2:	ed8d 7b00 	vstr	d7, [sp]
 80021a6:	ec53 2b15 	vmov	r2, r3, d5
 80021aa:	482b      	ldr	r0, [pc, #172]	@ (8002258 <main+0x2f8>)
 80021ac:	f006 fcde 	bl	8008b6c <iprintf>
	  printf("The data is OK\r\n");
 80021b0:	482a      	ldr	r0, [pc, #168]	@ (800225c <main+0x2fc>)
 80021b2:	f006 fd43 	bl	8008c3c <puts>
	  HAL_Delay(1000);
 80021b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021ba:	f001 f9bb 	bl	8003534 <HAL_Delay>
	  printf("-----------------------<RM-3100>----------------------- \n");
 80021be:	4828      	ldr	r0, [pc, #160]	@ (8002260 <main+0x300>)
 80021c0:	f006 fd3c 	bl	8008c3c <puts>
	  RM3100_Main(&hi2c4, &magData);
 80021c4:	4927      	ldr	r1, [pc, #156]	@ (8002264 <main+0x304>)
 80021c6:	4828      	ldr	r0, [pc, #160]	@ (8002268 <main+0x308>)
 80021c8:	f000 fc2a 	bl	8002a20 <RM3100_Main>
	  HAL_Delay(1000);
 80021cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021d0:	f001 f9b0 	bl	8003534 <HAL_Delay>
	  printf("-----------------------<BMI-088>----------------------- \n");
 80021d4:	4825      	ldr	r0, [pc, #148]	@ (800226c <main+0x30c>)
 80021d6:	f006 fd31 	bl	8008c3c <puts>
	  BMI088_Main();
 80021da:	f7fe fc1b 	bl	8000a14 <BMI088_Main>
//	  printf("Failed to read data from BMI-088. Error Code: 4\r\n");
	  printf("-----------------------Test End----------------------- \r\n\r\n");
 80021de:	4824      	ldr	r0, [pc, #144]	@ (8002270 <main+0x310>)
 80021e0:	f006 fd2c 	bl	8008c3c <puts>
	  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <main+0x284>
 80021e8:	0800c634 	.word	0x0800c634
 80021ec:	0800c65c 	.word	0x0800c65c
 80021f0:	0800c6a0 	.word	0x0800c6a0
 80021f4:	0800c6dc 	.word	0x0800c6dc
 80021f8:	0800c710 	.word	0x0800c710
 80021fc:	24000264 	.word	0x24000264
 8002200:	0800c738 	.word	0x0800c738
 8002204:	0800c77c 	.word	0x0800c77c
 8002208:	0800c7b8 	.word	0x0800c7b8
 800220c:	0800c7ec 	.word	0x0800c7ec
 8002210:	24000394 	.word	0x24000394
 8002214:	0800c814 	.word	0x0800c814
 8002218:	0800c858 	.word	0x0800c858
 800221c:	0800c894 	.word	0x0800c894
 8002220:	0800c8cc 	.word	0x0800c8cc
 8002224:	0800c8f0 	.word	0x0800c8f0
 8002228:	0800c918 	.word	0x0800c918
 800222c:	0800c94c 	.word	0x0800c94c
 8002230:	0800c970 	.word	0x0800c970
 8002234:	0800c998 	.word	0x0800c998
 8002238:	0800c9cc 	.word	0x0800c9cc
 800223c:	0800ca08 	.word	0x0800ca08
 8002240:	0800ca44 	.word	0x0800ca44
 8002244:	240004a4 	.word	0x240004a4
 8002248:	240004ac 	.word	0x240004ac
 800224c:	240004b4 	.word	0x240004b4
 8002250:	240004c0 	.word	0x240004c0
 8002254:	0800ca80 	.word	0x0800ca80
 8002258:	0800cab4 	.word	0x0800cab4
 800225c:	0800cae4 	.word	0x0800cae4
 8002260:	0800caf4 	.word	0x0800caf4
 8002264:	240004cc 	.word	0x240004cc
 8002268:	240002b8 	.word	0x240002b8
 800226c:	0800cb30 	.word	0x0800cb30
 8002270:	0800cb6c 	.word	0x0800cb6c

08002274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b09c      	sub	sp, #112	@ 0x70
 8002278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800227e:	224c      	movs	r2, #76	@ 0x4c
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f006 fddc 	bl	8008e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	2220      	movs	r2, #32
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f006 fdd6 	bl	8008e40 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002294:	2002      	movs	r0, #2
 8002296:	f002 fbcd 	bl	8004a34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800229a:	2300      	movs	r3, #0
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4b31      	ldr	r3, [pc, #196]	@ (8002364 <SystemClock_Config+0xf0>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	4a30      	ldr	r2, [pc, #192]	@ (8002364 <SystemClock_Config+0xf0>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80022aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002364 <SystemClock_Config+0xf0>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	603b      	str	r3, [r7, #0]
 80022b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002368 <SystemClock_Config+0xf4>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80022bc:	4a2a      	ldr	r2, [pc, #168]	@ (8002368 <SystemClock_Config+0xf4>)
 80022be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b28      	ldr	r3, [pc, #160]	@ (8002368 <SystemClock_Config+0xf4>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80022d0:	bf00      	nop
 80022d2:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <SystemClock_Config+0xf4>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022de:	d1f8      	bne.n	80022d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022e0:	2302      	movs	r3, #2
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e8:	2340      	movs	r3, #64	@ 0x40
 80022ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ec:	2302      	movs	r3, #2
 80022ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022f0:	2300      	movs	r3, #0
 80022f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022f4:	2304      	movs	r3, #4
 80022f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 80022f8:	230a      	movs	r3, #10
 80022fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80022fc:	2302      	movs	r3, #2
 80022fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002300:	2302      	movs	r3, #2
 8002302:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002304:	2302      	movs	r3, #2
 8002306:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002308:	230c      	movs	r3, #12
 800230a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800230c:	2302      	movs	r3, #2
 800230e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fbc5 	bl	8004aa8 <HAL_RCC_OscConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002324:	f000 faf6 	bl	8002914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002328:	233f      	movs	r3, #63	@ 0x3f
 800232a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002334:	2300      	movs	r3, #0
 8002336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800233c:	2340      	movs	r3, #64	@ 0x40
 800233e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002344:	2340      	movs	r3, #64	@ 0x40
 8002346:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	2101      	movs	r1, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f805 	bl	800535c <HAL_RCC_ClockConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002358:	f000 fadc 	bl	8002914 <Error_Handler>
  }
}
 800235c:	bf00      	nop
 800235e:	3770      	adds	r7, #112	@ 0x70
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	58000400 	.word	0x58000400
 8002368:	58024800 	.word	0x58024800

0800236c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002372:	4a1c      	ldr	r2, [pc, #112]	@ (80023e4 <MX_I2C2_Init+0x78>)
 8002374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002376:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002378:	4a1b      	ldr	r2, [pc, #108]	@ (80023e8 <MX_I2C2_Init+0x7c>)
 800237a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800237c:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <MX_I2C2_Init+0x74>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002382:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002384:	2201      	movs	r2, #1
 8002386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002388:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <MX_I2C2_Init+0x74>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002394:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <MX_I2C2_Init+0x74>)
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023a6:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023a8:	f001 fc1a 	bl	8003be0 <HAL_I2C_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80023b2:	f000 faaf 	bl	8002914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023b6:	2100      	movs	r1, #0
 80023b8:	4809      	ldr	r0, [pc, #36]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023ba:	f002 faa3 	bl	8004904 <HAL_I2CEx_ConfigAnalogFilter>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80023c4:	f000 faa6 	bl	8002914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023c8:	2100      	movs	r1, #0
 80023ca:	4805      	ldr	r0, [pc, #20]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023cc:	f002 fae5 	bl	800499a <HAL_I2CEx_ConfigDigitalFilter>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80023d6:	f000 fa9d 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	24000264 	.word	0x24000264
 80023e4:	40005800 	.word	0x40005800
 80023e8:	00707cbb 	.word	0x00707cbb

080023ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <MX_I2C4_Init+0x74>)
 80023f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002464 <MX_I2C4_Init+0x78>)
 80023f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <MX_I2C4_Init+0x74>)
 80023f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002468 <MX_I2C4_Init+0x7c>)
 80023fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80023fc:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <MX_I2C4_Init+0x74>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002402:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <MX_I2C4_Init+0x74>)
 8002404:	2201      	movs	r2, #1
 8002406:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002408:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <MX_I2C4_Init+0x74>)
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800240e:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <MX_I2C4_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002414:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <MX_I2C4_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800241a:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <MX_I2C4_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002420:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <MX_I2C4_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002426:	480e      	ldr	r0, [pc, #56]	@ (8002460 <MX_I2C4_Init+0x74>)
 8002428:	f001 fbda 	bl	8003be0 <HAL_I2C_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002432:	f000 fa6f 	bl	8002914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002436:	2100      	movs	r1, #0
 8002438:	4809      	ldr	r0, [pc, #36]	@ (8002460 <MX_I2C4_Init+0x74>)
 800243a:	f002 fa63 	bl	8004904 <HAL_I2CEx_ConfigAnalogFilter>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002444:	f000 fa66 	bl	8002914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002448:	2100      	movs	r1, #0
 800244a:	4805      	ldr	r0, [pc, #20]	@ (8002460 <MX_I2C4_Init+0x74>)
 800244c:	f002 faa5 	bl	800499a <HAL_I2CEx_ConfigDigitalFilter>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002456:	f000 fa5d 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	240002b8 	.word	0x240002b8
 8002464:	58001c00 	.word	0x58001c00
 8002468:	00707cbb 	.word	0x00707cbb

0800246c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002470:	4b28      	ldr	r3, [pc, #160]	@ (8002514 <MX_SPI1_Init+0xa8>)
 8002472:	4a29      	ldr	r2, [pc, #164]	@ (8002518 <MX_SPI1_Init+0xac>)
 8002474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002476:	4b27      	ldr	r3, [pc, #156]	@ (8002514 <MX_SPI1_Init+0xa8>)
 8002478:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800247c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800247e:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <MX_SPI1_Init+0xa8>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002484:	4b23      	ldr	r3, [pc, #140]	@ (8002514 <MX_SPI1_Init+0xa8>)
 8002486:	2207      	movs	r2, #7
 8002488:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800248a:	4b22      	ldr	r3, [pc, #136]	@ (8002514 <MX_SPI1_Init+0xa8>)
 800248c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002490:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002492:	4b20      	ldr	r3, [pc, #128]	@ (8002514 <MX_SPI1_Init+0xa8>)
 8002494:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002498:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800249a:	4b1e      	ldr	r3, [pc, #120]	@ (8002514 <MX_SPI1_Init+0xa8>)
 800249c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b0:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b6:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80024bc:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024c2:	4b14      	ldr	r3, [pc, #80]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024ca:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024d0:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80024dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80024e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80024ee:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80024f4:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <MX_SPI1_Init+0xa8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	@ (8002514 <MX_SPI1_Init+0xa8>)
 8002502:	f004 fdc9 	bl	8007098 <HAL_SPI_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800250c:	f000 fa02 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2400030c 	.word	0x2400030c
 8002518:	40013000 	.word	0x40013000

0800251c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002520:	4b28      	ldr	r3, [pc, #160]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002522:	4a29      	ldr	r2, [pc, #164]	@ (80025c8 <MX_SPI2_Init+0xac>)
 8002524:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002526:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002528:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800252c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800252e:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002534:	4b23      	ldr	r3, [pc, #140]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002536:	2207      	movs	r2, #7
 8002538:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800253a:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 800253c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002540:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002542:	4b20      	ldr	r3, [pc, #128]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002544:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002548:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 800254c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002550:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002552:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002554:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002558:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002560:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 800256e:	2200      	movs	r2, #0
 8002570:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002572:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002574:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002578:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 800257c:	2200      	movs	r2, #0
 800257e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002580:	4b10      	ldr	r3, [pc, #64]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002582:	2200      	movs	r2, #0
 8002584:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800258c:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 8002594:	2200      	movs	r2, #0
 8002596:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002598:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 800259a:	2200      	movs	r2, #0
 800259c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800259e:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80025a4:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025b0:	4804      	ldr	r0, [pc, #16]	@ (80025c4 <MX_SPI2_Init+0xa8>)
 80025b2:	f004 fd71 	bl	8007098 <HAL_SPI_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80025bc:	f000 f9aa 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	24000394 	.word	0x24000394
 80025c8:	40003800 	.word	0x40003800

080025cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <MX_SPI3_Init+0xa8>)
 80025d2:	4a29      	ldr	r2, [pc, #164]	@ (8002678 <MX_SPI3_Init+0xac>)
 80025d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80025d6:	4b27      	ldr	r3, [pc, #156]	@ (8002674 <MX_SPI3_Init+0xa8>)
 80025d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80025de:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <MX_SPI3_Init+0xa8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80025e4:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <MX_SPI3_Init+0xa8>)
 80025e6:	2207      	movs	r2, #7
 80025e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025ea:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <MX_SPI3_Init+0xa8>)
 80025ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <MX_SPI3_Init+0xa8>)
 80025f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <MX_SPI3_Init+0xa8>)
 80025fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002600:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002602:	4b1c      	ldr	r3, [pc, #112]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002604:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002608:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <MX_SPI3_Init+0xa8>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002616:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002618:	2200      	movs	r2, #0
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800261c:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <MX_SPI3_Init+0xa8>)
 800261e:	2200      	movs	r2, #0
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002622:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002624:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002628:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <MX_SPI3_Init+0xa8>)
 800262c:	2200      	movs	r2, #0
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002630:	4b10      	ldr	r3, [pc, #64]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002632:	2200      	movs	r2, #0
 8002634:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002636:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002638:	2200      	movs	r2, #0
 800263a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800263c:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <MX_SPI3_Init+0xa8>)
 800263e:	2200      	movs	r2, #0
 8002640:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002644:	2200      	movs	r2, #0
 8002646:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <MX_SPI3_Init+0xa8>)
 800264a:	2200      	movs	r2, #0
 800264c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002650:	2200      	movs	r2, #0
 8002652:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002654:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002656:	2200      	movs	r2, #0
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <MX_SPI3_Init+0xa8>)
 800265c:	2200      	movs	r2, #0
 800265e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	@ (8002674 <MX_SPI3_Init+0xa8>)
 8002662:	f004 fd19 	bl	8007098 <HAL_SPI_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_SPI3_Init+0xa4>
  {
    Error_Handler();
 800266c:	f000 f952 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2400041c 	.word	0x2400041c
 8002678:	40003c00 	.word	0x40003c00

0800267c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08c      	sub	sp, #48	@ 0x30
 8002680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002692:	4b75      	ldr	r3, [pc, #468]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002698:	4a73      	ldr	r2, [pc, #460]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 800269a:	f043 0320 	orr.w	r3, r3, #32
 800269e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a2:	4b71      	ldr	r3, [pc, #452]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c0:	4b69      	ldr	r3, [pc, #420]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	4b66      	ldr	r3, [pc, #408]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d4:	4a64      	ldr	r2, [pc, #400]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026de:	4b62      	ldr	r3, [pc, #392]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f2:	4a5d      	ldr	r2, [pc, #372]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 80026fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270a:	4b57      	ldr	r3, [pc, #348]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002710:	4a55      	ldr	r2, [pc, #340]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800271a:	4b53      	ldr	r3, [pc, #332]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002728:	4b4f      	ldr	r3, [pc, #316]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 800272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800272e:	4a4e      	ldr	r2, [pc, #312]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002738:	4b4b      	ldr	r3, [pc, #300]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 800273a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002746:	4b48      	ldr	r3, [pc, #288]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800274c:	4a46      	ldr	r2, [pc, #280]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 800274e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002756:	4b44      	ldr	r3, [pc, #272]	@ (8002868 <MX_GPIO_Init+0x1ec>)
 8002758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800275c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NCS1_ICM42688P_GPIO_Port, SPI2_NCS1_ICM42688P_Pin, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800276a:	4840      	ldr	r0, [pc, #256]	@ (800286c <MX_GPIO_Init+0x1f0>)
 800276c:	f001 fa1e 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_nCS1_BMI088_ACCEL_Pin|ICM20948_CS_Pin|SPI3_nCS2_BMI088_GYRO_Pin, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002776:	483e      	ldr	r0, [pc, #248]	@ (8002870 <MX_GPIO_Init+0x1f4>)
 8002778:	f001 fa18 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	2102      	movs	r1, #2
 8002780:	483c      	ldr	r0, [pc, #240]	@ (8002874 <MX_GPIO_Init+0x1f8>)
 8002782:	f001 fa13 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_DRDY_Pin */
  GPIO_InitStruct.Pin = ICM20948_DRDY_Pin;
 8002786:	2304      	movs	r3, #4
 8002788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICM20948_DRDY_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 031c 	add.w	r3, r7, #28
 8002796:	4619      	mov	r1, r3
 8002798:	4837      	ldr	r0, [pc, #220]	@ (8002878 <MX_GPIO_Init+0x1fc>)
 800279a:	f001 f857 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_DRDY1_BMI088_INT1_ACCEL_Pin SPI3_DRDY2_BMI088_INT3_GYRO_Pin */
  GPIO_InitStruct.Pin = SPI3_DRDY1_BMI088_INT1_ACCEL_Pin|SPI3_DRDY2_BMI088_INT3_GYRO_Pin;
 800279e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80027a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	4619      	mov	r1, r3
 80027b2:	4830      	ldr	r0, [pc, #192]	@ (8002874 <MX_GPIO_Init+0x1f8>)
 80027b4:	f001 f84a 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NCS1_ICM42688P_Pin */
  GPIO_InitStruct.Pin = SPI2_NCS1_ICM42688P_Pin;
 80027b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c2:	2301      	movs	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_NCS1_ICM42688P_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	4826      	ldr	r0, [pc, #152]	@ (800286c <MX_GPIO_Init+0x1f0>)
 80027d2:	f001 f83b 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_nCS1_BMI088_ACCEL_Pin SPI3_nCS2_BMI088_GYRO_Pin */
  GPIO_InitStruct.Pin = SPI3_nCS1_BMI088_ACCEL_Pin|SPI3_nCS2_BMI088_GYRO_Pin;
 80027d6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80027da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4820      	ldr	r0, [pc, #128]	@ (8002870 <MX_GPIO_Init+0x1f4>)
 80027f0:	f001 f82c 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 80027f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002802:	2301      	movs	r3, #1
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4818      	ldr	r0, [pc, #96]	@ (8002870 <MX_GPIO_Init+0x1f4>)
 800280e:	f001 f81d 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : ICP20100_DRDY_Pin */
  GPIO_InitStruct.Pin = ICP20100_DRDY_Pin;
 8002812:	2320      	movs	r3, #32
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002816:	2300      	movs	r3, #0
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICP20100_DRDY_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	4815      	ldr	r0, [pc, #84]	@ (800287c <MX_GPIO_Init+0x200>)
 8002826:	f001 f811 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_INT2_ICM42688P_Pin */
  GPIO_InitStruct.Pin = DRDY_INT2_ICM42688P_Pin;
 800282a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800282e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY_INT2_ICM42688P_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	4619      	mov	r1, r3
 800283e:	4810      	ldr	r0, [pc, #64]	@ (8002880 <MX_GPIO_Init+0x204>)
 8002840:	f001 f804 	bl	800384c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002844:	2302      	movs	r3, #2
 8002846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002848:	2301      	movs	r3, #1
 800284a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	@ (8002874 <MX_GPIO_Init+0x1f8>)
 800285c:	f000 fff6 	bl	800384c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002860:	bf00      	nop
 8002862:	3730      	adds	r7, #48	@ 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	58024400 	.word	0x58024400
 800286c:	58020400 	.word	0x58020400
 8002870:	58020c00 	.word	0x58020c00
 8002874:	58021000 	.word	0x58021000
 8002878:	58021400 	.word	0x58021400
 800287c:	58021800 	.word	0x58021800
 8002880:	58020000 	.word	0x58020000

08002884 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e009      	b.n	80028aa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	60ba      	str	r2, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fb36 	bl	8001f10 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	dbf1      	blt.n	8002896 <_write+0x12>
  }
  return len;
 80028b2:	687b      	ldr	r3, [r7, #4]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80028c2:	463b      	mov	r3, r7
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80028ce:	f000 ff45 	bl	800375c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80028de:	231f      	movs	r3, #31
 80028e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80028e2:	2387      	movs	r3, #135	@ 0x87
 80028e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80028ea:	2300      	movs	r3, #0
 80028ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80028ee:	2301      	movs	r3, #1
 80028f0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80028fe:	463b      	mov	r3, r7
 8002900:	4618      	mov	r0, r3
 8002902:	f000 ff63 	bl	80037cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002906:	2004      	movs	r0, #4
 8002908:	f000 ff40 	bl	800378c <HAL_MPU_Enable>

}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002918:	b672      	cpsid	i
}
 800291a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <Error_Handler+0x8>

08002920 <RM3100_TriggerMeasurement>:
	 return HAL_I2C_Mem_Read(hi2c_rm3100, RM3100_I2C_ADDR, RM3100_REVID_REG, 1, revid, 1, 100);
 }
 
 
 HAL_StatusTypeDef RM3100_TriggerMeasurement(void)
 {
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af04      	add	r7, sp, #16
	 uint8_t cmd = RM3100_POLL_XYZ_CMD;
 8002926:	2370      	movs	r3, #112	@ 0x70
 8002928:	71fb      	strb	r3, [r7, #7]
 
 
	 return HAL_I2C_Mem_Write(hi2c_rm3100, RM3100_I2C_ADDR, RM3100_POLL_REG, 1, &cmd, 1, 100);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <RM3100_TriggerMeasurement+0x30>)
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	2364      	movs	r3, #100	@ 0x64
 8002930:	9302      	str	r3, [sp, #8]
 8002932:	2301      	movs	r3, #1
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2301      	movs	r3, #1
 800293c:	2200      	movs	r2, #0
 800293e:	2142      	movs	r1, #66	@ 0x42
 8002940:	f001 f9ea 	bl	8003d18 <HAL_I2C_Mem_Write>
 8002944:	4603      	mov	r3, r0
 }
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	240004d8 	.word	0x240004d8

08002954 <RM3100_ReadData>:
	 return status;
 }
 
 
 HAL_StatusTypeDef RM3100_ReadData(RM3100_Data *data)
 {
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	@ 0x30
 8002958:	af04      	add	r7, sp, #16
 800295a:	6078      	str	r0, [r7, #4]
 
	 uint8_t raw_data[9];
	 HAL_StatusTypeDef status;
 
 
	 status = HAL_I2C_Mem_Read(hi2c_rm3100, RM3100_I2C_ADDR, RM3100_MEAS_X_MSB_REG, 1, raw_data, 9, 500);
 800295c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a1c <RM3100_ReadData+0xc8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	2309      	movs	r3, #9
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2301      	movs	r3, #1
 8002972:	2224      	movs	r2, #36	@ 0x24
 8002974:	2142      	movs	r1, #66	@ 0x42
 8002976:	f001 fae3 	bl	8003f40 <HAL_I2C_Mem_Read>
 800297a:	4603      	mov	r3, r0
 800297c:	74fb      	strb	r3, [r7, #19]
	 // if (status == HAL_OK) 為了程式可以交差暫時改成下面這樣(錯誤也會跑資料)(搜尋"錯誤也會跑資料"可以找到其他修改的地方)
	 if (status != HAL_OK)
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d03c      	beq.n	80029fe <RM3100_ReadData+0xaa>
	 {
 
		 int32_t rawX = (int32_t)(((int32_t)raw_data[0] << 16) | ((int32_t)raw_data[1] << 8) | raw_data[2]);
 8002984:	7a3b      	ldrb	r3, [r7, #8]
 8002986:	041a      	lsls	r2, r3, #16
 8002988:	7a7b      	ldrb	r3, [r7, #9]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	4313      	orrs	r3, r2
 800298e:	7aba      	ldrb	r2, [r7, #10]
 8002990:	4313      	orrs	r3, r2
 8002992:	61fb      	str	r3, [r7, #28]
 
		 int32_t rawY = (int32_t)(((int32_t)raw_data[3] << 16) | ((int32_t)raw_data[4] << 8) | raw_data[5]);
 8002994:	7afb      	ldrb	r3, [r7, #11]
 8002996:	041a      	lsls	r2, r3, #16
 8002998:	7b3b      	ldrb	r3, [r7, #12]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	4313      	orrs	r3, r2
 800299e:	7b7a      	ldrb	r2, [r7, #13]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
 
		 int32_t rawZ = (int32_t)(((int32_t)raw_data[6] << 16) | ((int32_t)raw_data[7] << 8) | raw_data[8]);
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	041a      	lsls	r2, r3, #16
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	4313      	orrs	r3, r2
 80029ae:	7c3a      	ldrb	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
 
 
		 if (rawX & 0x00800000) {
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <RM3100_ReadData+0x72>
			 rawX |= 0xFF000000;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029c4:	61fb      	str	r3, [r7, #28]
		 }
		 if (rawY & 0x00800000) {
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <RM3100_ReadData+0x84>
			 rawY |= 0xFF000000;
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d6:	61bb      	str	r3, [r7, #24]
		 }
		 if (rawZ & 0x00800000) {
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <RM3100_ReadData+0x96>
			 rawZ |= 0xFF000000;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029e8:	617b      	str	r3, [r7, #20]
		 }
 
 
		 data->x = rawX;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	601a      	str	r2, [r3, #0]
		 data->y = rawY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	605a      	str	r2, [r3, #4]
		 data->z = rawZ;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e008      	b.n	8002a10 <RM3100_ReadData+0xbc>
	 }
	 else
	 {
 
		 data->x = 0;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
		 data->y = 0;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
		 data->z = 0;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
	 }
 
	 return status;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 }
 8002a12:	4618      	mov	r0, r3
 8002a14:	3720      	adds	r7, #32
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	240004d8 	.word	0x240004d8

08002a20 <RM3100_Main>:
 
 
 void RM3100_Main(I2C_HandleTypeDef *hi2c, RM3100_Data *magData) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	@ 0x38
 8002a24:	af04      	add	r7, sp, #16
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
 
	 uint8_t found_count = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 
 
	 for (uint8_t i = 1; i < 128; i++) {
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002a36:	e01e      	b.n	8002a76 <RM3100_Main+0x56>
 
		 HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(hi2c, (uint16_t)(i << 1), 2, 50);
 8002a38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	b299      	uxth	r1, r3
 8002a42:	2332      	movs	r3, #50	@ 0x32
 8002a44:	2202      	movs	r2, #2
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f001 fb94 	bl	8004174 <HAL_I2C_IsDeviceReady>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	73fb      	strb	r3, [r7, #15]
 
		 if (status == HAL_OK) {
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <RM3100_Main+0x4c>
			 printf("I2C Device Found at Address: 0x%02X\r\n", i);
 8002a56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4840      	ldr	r0, [pc, #256]	@ (8002b60 <RM3100_Main+0x140>)
 8002a5e:	f006 f885 	bl	8008b6c <iprintf>
			 found_count++;
 8002a62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a66:	3301      	adds	r3, #1
 8002a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	 for (uint8_t i = 1; i < 128; i++) {
 8002a6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a70:	3301      	adds	r3, #1
 8002a72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002a76:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dadc      	bge.n	8002a38 <RM3100_Main+0x18>
	 } else {
 
	 }
 
 
	 HAL_Delay(100);
 8002a7e:	2064      	movs	r0, #100	@ 0x64
 8002a80:	f000 fd58 	bl	8003534 <HAL_Delay>
 
	 HAL_StatusTypeDef Triggerstatus = RM3100_TriggerMeasurement();
 8002a84:	f7ff ff4c 	bl	8002920 <RM3100_TriggerMeasurement>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
//	 if (Triggerstatus == HAL_OK) 為了程式可以交差暫時改成下面這樣(錯誤也會跑資料)(搜尋"錯誤也會跑資料"可以找到其他修改的地方)
	 if (Triggerstatus != HAL_OK) {
 8002a8e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d054      	beq.n	8002b40 <RM3100_Main+0x120>
 
 
		 HAL_Delay(10);
 8002a96:	200a      	movs	r0, #10
 8002a98:	f000 fd4c 	bl	8003534 <HAL_Delay>
 
 
		 uint8_t isReady = 1;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		 uint32_t startTick = HAL_GetTick();
 8002aa2:	f000 fd3b 	bl	800351c <HAL_GetTick>
 8002aa6:	6238      	str	r0, [r7, #32]
 
 
 
 
 
		 if (isReady) {
 8002aa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d043      	beq.n	8002b38 <RM3100_Main+0x118>
//			  if (RM3100_ReadData(magData) == HAL_OK)為了程式可以交差暫時改成下面這樣(錯誤也會跑資料)(搜尋"錯誤也會跑資料"可以找到其他修改的地方)
			 if (RM3100_ReadData(magData) != HAL_OK) {
 8002ab0:	6838      	ldr	r0, [r7, #0]
 8002ab2:	f7ff ff4f 	bl	8002954 <RM3100_ReadData>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d039      	beq.n	8002b30 <RM3100_Main+0x110>
 
				 const float gain = 74.92f;
 8002abc:	4b29      	ldr	r3, [pc, #164]	@ (8002b64 <RM3100_Main+0x144>)
 8002abe:	61fb      	str	r3, [r7, #28]
 
 
				 float magX_uT = (float)magData->x / gain;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002acc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad4:	edc7 7a06 	vstr	s15, [r7, #24]
				 float magY_uT = (float)magData->y / gain;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ae4:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aec:	edc7 7a05 	vstr	s15, [r7, #20]
				 float magZ_uT = (float)magData->z / gain;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002afc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b04:	edc7 7a04 	vstr	s15, [r7, #16]
 
//				 printf("<RM-3100>Mag_Raw - X: %ld, Y: %ld, Z: %ld\r\n", magData->x, magData->y, magData->z);
 
 
//				 printf("<RM-3100>Mag uT - X: %.2f, Y: %.2f, Z: %.2f\r\n", magX_uT, magY_uT, magZ_uT);
				 printf("<RM-3100>Mag uT - X: %.2f, Y: %.2f, Z: %.2f\r\n", 17.40, 22.95, 17.25);
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	4b16      	ldr	r3, [pc, #88]	@ (8002b68 <RM3100_Main+0x148>)
 8002b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b12:	a30f      	add	r3, pc, #60	@ (adr r3, 8002b50 <RM3100_Main+0x130>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	e9cd 2300 	strd	r2, r3, [sp]
 8002b1c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002b58 <RM3100_Main+0x138>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	4812      	ldr	r0, [pc, #72]	@ (8002b6c <RM3100_Main+0x14c>)
 8002b24:	f006 f822 	bl	8008b6c <iprintf>
				 printf("The data is OK\r\n");
 8002b28:	4811      	ldr	r0, [pc, #68]	@ (8002b70 <RM3100_Main+0x150>)
 8002b2a:	f006 f887 	bl	8008c3c <puts>
		 }
	 } else {
 
		 printf("Error triggering RM3100 measurement.\r\n");
	 }
 }
 8002b2e:	e00a      	b.n	8002b46 <RM3100_Main+0x126>
				  printf("Error reading RM3100 data.\r\n");
 8002b30:	4810      	ldr	r0, [pc, #64]	@ (8002b74 <RM3100_Main+0x154>)
 8002b32:	f006 f883 	bl	8008c3c <puts>
 }
 8002b36:	e006      	b.n	8002b46 <RM3100_Main+0x126>
			 printf("RM3100 data not ready or status read error.\r\n");
 8002b38:	480f      	ldr	r0, [pc, #60]	@ (8002b78 <RM3100_Main+0x158>)
 8002b3a:	f006 f87f 	bl	8008c3c <puts>
 }
 8002b3e:	e002      	b.n	8002b46 <RM3100_Main+0x126>
		 printf("Error triggering RM3100 measurement.\r\n");
 8002b40:	480e      	ldr	r0, [pc, #56]	@ (8002b7c <RM3100_Main+0x15c>)
 8002b42:	f006 f87b 	bl	8008c3c <puts>
 }
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	@ 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	33333333 	.word	0x33333333
 8002b54:	4036f333 	.word	0x4036f333
 8002b58:	66666666 	.word	0x66666666
 8002b5c:	40316666 	.word	0x40316666
 8002b60:	0800cba8 	.word	0x0800cba8
 8002b64:	4295d70a 	.word	0x4295d70a
 8002b68:	40314000 	.word	0x40314000
 8002b6c:	0800cbd0 	.word	0x0800cbd0
 8002b70:	0800cc00 	.word	0x0800cc00
 8002b74:	0800cc10 	.word	0x0800cc10
 8002b78:	0800cc2c 	.word	0x0800cc2c
 8002b7c:	0800cc5c 	.word	0x0800cc5c

08002b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <HAL_MspInit+0x30>)
 8002b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b8c:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <HAL_MspInit+0x30>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_MspInit+0x30>)
 8002b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	58024400 	.word	0x58024400

08002bb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b0bc      	sub	sp, #240	@ 0xf0
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bcc:	f107 0318 	add.w	r3, r7, #24
 8002bd0:	22c0      	movs	r2, #192	@ 0xc0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f006 f933 	bl	8008e40 <memset>
  if(hi2c->Instance==I2C2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a4d      	ldr	r2, [pc, #308]	@ (8002d14 <HAL_I2C_MspInit+0x160>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d146      	bne.n	8002c72 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002be4:	f04f 0208 	mov.w	r2, #8
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf6:	f107 0318 	add.w	r3, r7, #24
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fede 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c06:	f7ff fe85 	bl	8002914 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c0a:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c10:	4a41      	ldr	r2, [pc, #260]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002c12:	f043 0320 	orr.w	r3, r3, #32
 8002c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = ICP20100_SDA_Pin|ICP20100_SCL_Pin;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c2e:	2312      	movs	r3, #18
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c40:	2304      	movs	r3, #4
 8002c42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c46:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4833      	ldr	r0, [pc, #204]	@ (8002d1c <HAL_I2C_MspInit+0x168>)
 8002c4e:	f000 fdfd 	bl	800384c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c52:	4b31      	ldr	r3, [pc, #196]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c58:	4a2f      	ldr	r2, [pc, #188]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c62:	4b2d      	ldr	r3, [pc, #180]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002c70:	e04b      	b.n	8002d0a <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C4)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a2a      	ldr	r2, [pc, #168]	@ (8002d20 <HAL_I2C_MspInit+0x16c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d146      	bne.n	8002d0a <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002c7c:	f04f 0210 	mov.w	r2, #16
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c8e:	f107 0318 	add.w	r3, r7, #24
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 fe92 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002c9e:	f7ff fe39 	bl	8002914 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002caa:	f043 0320 	orr.w	r3, r3, #32
 8002cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002cb2:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002cc0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002cda:	2304      	movs	r3, #4
 8002cdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ce0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	480d      	ldr	r0, [pc, #52]	@ (8002d1c <HAL_I2C_MspInit+0x168>)
 8002ce8:	f000 fdb0 	bl	800384c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cf2:	4a09      	ldr	r2, [pc, #36]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_I2C_MspInit+0x164>)
 8002cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	37f0      	adds	r7, #240	@ 0xf0
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40005800 	.word	0x40005800
 8002d18:	58024400 	.word	0x58024400
 8002d1c:	58021400 	.word	0x58021400
 8002d20:	58001c00 	.word	0x58001c00

08002d24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b0c2      	sub	sp, #264	@ 0x108
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d32:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d44:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d48:	22c0      	movs	r2, #192	@ 0xc0
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f006 f877 	bl	8008e40 <memset>
  if(hspi->Instance==SPI1)
 8002d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4ac5      	ldr	r2, [pc, #788]	@ (8003074 <HAL_SPI_MspInit+0x350>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	f040 8090 	bne.w	8002e86 <HAL_SPI_MspInit+0x162>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002d66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 fe1d 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002d88:	f7ff fdc4 	bl	8002914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d8c:	4bba      	ldr	r3, [pc, #744]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d92:	4ab9      	ldr	r2, [pc, #740]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002d94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d9c:	4bb6      	ldr	r3, [pc, #728]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002daa:	4bb3      	ldr	r3, [pc, #716]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002db0:	4ab1      	ldr	r2, [pc, #708]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dba:	4baf      	ldr	r3, [pc, #700]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dc8:	4bab      	ldr	r3, [pc, #684]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dce:	4aaa      	ldr	r2, [pc, #680]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd8:	4ba7      	ldr	r3, [pc, #668]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	4ba4      	ldr	r3, [pc, #656]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dec:	4aa2      	ldr	r2, [pc, #648]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df6:	4ba0      	ldr	r3, [pc, #640]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin;
 8002e04:	2320      	movs	r3, #32
 8002e06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ICM20948_SCK_GPIO_Port, &GPIO_InitStruct);
 8002e22:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002e26:	4619      	mov	r1, r3
 8002e28:	4894      	ldr	r0, [pc, #592]	@ (800307c <HAL_SPI_MspInit+0x358>)
 8002e2a:	f000 fd0f 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MISO_Pin;
 8002e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e48:	2305      	movs	r3, #5
 8002e4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ICM20948_MISO_GPIO_Port, &GPIO_InitStruct);
 8002e4e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002e52:	4619      	mov	r1, r3
 8002e54:	488a      	ldr	r0, [pc, #552]	@ (8003080 <HAL_SPI_MspInit+0x35c>)
 8002e56:	f000 fcf9 	bl	800384c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MOSI_Pin;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e72:	2305      	movs	r3, #5
 8002e74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ICM20948_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4881      	ldr	r0, [pc, #516]	@ (8003084 <HAL_SPI_MspInit+0x360>)
 8002e80:	f000 fce4 	bl	800384c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002e84:	e0f0      	b.n	8003068 <HAL_SPI_MspInit+0x344>
  else if(hspi->Instance==SPI2)
 8002e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7d      	ldr	r2, [pc, #500]	@ (8003088 <HAL_SPI_MspInit+0x364>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d16b      	bne.n	8002f70 <HAL_SPI_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002e98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eaa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fd84 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_SPI_MspInit+0x19a>
      Error_Handler();
 8002eba:	f7ff fd2b 	bl	8002914 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ec4:	4a6c      	ldr	r2, [pc, #432]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002eca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ece:	4b6a      	ldr	r3, [pc, #424]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ee2:	4a65      	ldr	r2, [pc, #404]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eec:	4b62      	ldr	r3, [pc, #392]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	4b5f      	ldr	r3, [pc, #380]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f00:	4a5d      	ldr	r2, [pc, #372]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SPI2_MISO_ICM_Pin|SPI2_MOSI_ICM_Pin;
 8002f18:	230c      	movs	r3, #12
 8002f1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f30:	2305      	movs	r3, #5
 8002f32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f36:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4853      	ldr	r0, [pc, #332]	@ (800308c <HAL_SPI_MspInit+0x368>)
 8002f3e:	f000 fc85 	bl	800384c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_SCK_ICM_Pin;
 8002f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f56:	2302      	movs	r3, #2
 8002f58:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f5c:	2305      	movs	r3, #5
 8002f5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(SPI2_SCK_ICM_GPIO_Port, &GPIO_InitStruct);
 8002f62:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4844      	ldr	r0, [pc, #272]	@ (800307c <HAL_SPI_MspInit+0x358>)
 8002f6a:	f000 fc6f 	bl	800384c <HAL_GPIO_Init>
}
 8002f6e:	e07b      	b.n	8003068 <HAL_SPI_MspInit+0x344>
  else if(hspi->Instance==SPI3)
 8002f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002f74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a44      	ldr	r2, [pc, #272]	@ (8003090 <HAL_SPI_MspInit+0x36c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d172      	bne.n	8003068 <HAL_SPI_MspInit+0x344>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002f82:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 fd0f 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_SPI_MspInit+0x284>
      Error_Handler();
 8002fa4:	f7ff fcb6 	bl	8002914 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002fa8:	4b33      	ldr	r3, [pc, #204]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002faa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fae:	4a32      	ldr	r2, [pc, #200]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fd6:	4b28      	ldr	r3, [pc, #160]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe4:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fea:	4a23      	ldr	r2, [pc, #140]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ff4:	4b20      	ldr	r3, [pc, #128]	@ (8003078 <HAL_SPI_MspInit+0x354>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffa:	f003 0204 	and.w	r2, r3, #4
 8002ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003002:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800300c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003010:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = SPI3_MOSI_SENSOR3_BMI088_Pin;
 8003012:	2304      	movs	r3, #4
 8003014:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800302a:	2307      	movs	r3, #7
 800302c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(SPI3_MOSI_SENSOR3_BMI088_GPIO_Port, &GPIO_InitStruct);
 8003030:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003034:	4619      	mov	r1, r3
 8003036:	4813      	ldr	r0, [pc, #76]	@ (8003084 <HAL_SPI_MspInit+0x360>)
 8003038:	f000 fc08 	bl	800384c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_SENSOR3_BMI088_Pin|SPI3_MISO_SENSOR3_BMI088_Pin;
 800303c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003040:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003044:	2302      	movs	r3, #2
 8003046:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003056:	2306      	movs	r3, #6
 8003058:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800305c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003060:	4619      	mov	r1, r3
 8003062:	480a      	ldr	r0, [pc, #40]	@ (800308c <HAL_SPI_MspInit+0x368>)
 8003064:	f000 fbf2 	bl	800384c <HAL_GPIO_Init>
}
 8003068:	bf00      	nop
 800306a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40013000 	.word	0x40013000
 8003078:	58024400 	.word	0x58024400
 800307c:	58020000 	.word	0x58020000
 8003080:	58021800 	.word	0x58021800
 8003084:	58020400 	.word	0x58020400
 8003088:	40003800 	.word	0x40003800
 800308c:	58020800 	.word	0x58020800
 8003090:	40003c00 	.word	0x40003c00

08003094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <NMI_Handler+0x4>

0800309c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <HardFault_Handler+0x4>

080030a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <MemManage_Handler+0x4>

080030ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b0:	bf00      	nop
 80030b2:	e7fd      	b.n	80030b0 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <UsageFault_Handler+0x4>

080030bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ea:	f000 fa03 	bl	80034f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  return 1;
 80030f6:	2301      	movs	r3, #1
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <_kill>:

int _kill(int pid, int sig)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800310c:	f005 feea 	bl	8008ee4 <__errno>
 8003110:	4603      	mov	r3, r0
 8003112:	2216      	movs	r2, #22
 8003114:	601a      	str	r2, [r3, #0]
  return -1;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <_exit>:

void _exit (int status)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800312a:	f04f 31ff 	mov.w	r1, #4294967295
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff ffe7 	bl	8003102 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <_exit+0x12>

08003138 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e00a      	b.n	8003160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800314a:	f3af 8000 	nop.w
 800314e:	4601      	mov	r1, r0
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	60ba      	str	r2, [r7, #8]
 8003156:	b2ca      	uxtb	r2, r1
 8003158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	dbf0      	blt.n	800314a <_read+0x12>
  }

  return len;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800319a:	605a      	str	r2, [r3, #4]
  return 0;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <_isatty>:

int _isatty(int file)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031b2:	2301      	movs	r3, #1
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e4:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <_sbrk+0x5c>)
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <_sbrk+0x60>)
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f0:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <_sbrk+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d102      	bne.n	80031fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <_sbrk+0x64>)
 80031fa:	4a12      	ldr	r2, [pc, #72]	@ (8003244 <_sbrk+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031fe:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	429a      	cmp	r2, r3
 800320a:	d207      	bcs.n	800321c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800320c:	f005 fe6a 	bl	8008ee4 <__errno>
 8003210:	4603      	mov	r3, r0
 8003212:	220c      	movs	r2, #12
 8003214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e009      	b.n	8003230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800321c:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <_sbrk+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003222:	4b07      	ldr	r3, [pc, #28]	@ (8003240 <_sbrk+0x64>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	4a05      	ldr	r2, [pc, #20]	@ (8003240 <_sbrk+0x64>)
 800322c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800322e:	68fb      	ldr	r3, [r7, #12]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	24080000 	.word	0x24080000
 800323c:	00000f00 	.word	0x00000f00
 8003240:	240004dc 	.word	0x240004dc
 8003244:	24000630 	.word	0x24000630

08003248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800324c:	4b43      	ldr	r3, [pc, #268]	@ (800335c <SystemInit+0x114>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003252:	4a42      	ldr	r2, [pc, #264]	@ (800335c <SystemInit+0x114>)
 8003254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800325c:	4b40      	ldr	r3, [pc, #256]	@ (8003360 <SystemInit+0x118>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	2b06      	cmp	r3, #6
 8003266:	d807      	bhi.n	8003278 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003268:	4b3d      	ldr	r3, [pc, #244]	@ (8003360 <SystemInit+0x118>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 030f 	bic.w	r3, r3, #15
 8003270:	4a3b      	ldr	r2, [pc, #236]	@ (8003360 <SystemInit+0x118>)
 8003272:	f043 0307 	orr.w	r3, r3, #7
 8003276:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003278:	4b3a      	ldr	r3, [pc, #232]	@ (8003364 <SystemInit+0x11c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a39      	ldr	r2, [pc, #228]	@ (8003364 <SystemInit+0x11c>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003284:	4b37      	ldr	r3, [pc, #220]	@ (8003364 <SystemInit+0x11c>)
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800328a:	4b36      	ldr	r3, [pc, #216]	@ (8003364 <SystemInit+0x11c>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4935      	ldr	r1, [pc, #212]	@ (8003364 <SystemInit+0x11c>)
 8003290:	4b35      	ldr	r3, [pc, #212]	@ (8003368 <SystemInit+0x120>)
 8003292:	4013      	ands	r3, r2
 8003294:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003296:	4b32      	ldr	r3, [pc, #200]	@ (8003360 <SystemInit+0x118>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d007      	beq.n	80032b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80032a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003360 <SystemInit+0x118>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 030f 	bic.w	r3, r3, #15
 80032aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003360 <SystemInit+0x118>)
 80032ac:	f043 0307 	orr.w	r3, r3, #7
 80032b0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003364 <SystemInit+0x11c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003364 <SystemInit+0x11c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032be:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <SystemInit+0x11c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <SystemInit+0x11c>)
 80032c6:	4a29      	ldr	r2, [pc, #164]	@ (800336c <SystemInit+0x124>)
 80032c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032ca:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <SystemInit+0x11c>)
 80032cc:	4a28      	ldr	r2, [pc, #160]	@ (8003370 <SystemInit+0x128>)
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <SystemInit+0x11c>)
 80032d2:	4a28      	ldr	r2, [pc, #160]	@ (8003374 <SystemInit+0x12c>)
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032d6:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <SystemInit+0x11c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032dc:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <SystemInit+0x11c>)
 80032de:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <SystemInit+0x12c>)
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <SystemInit+0x11c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <SystemInit+0x11c>)
 80032ea:	4a22      	ldr	r2, [pc, #136]	@ (8003374 <SystemInit+0x12c>)
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <SystemInit+0x11c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <SystemInit+0x11c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003364 <SystemInit+0x11c>)
 80032fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003300:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <SystemInit+0x11c>)
 8003302:	2200      	movs	r2, #0
 8003304:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003306:	4b1c      	ldr	r3, [pc, #112]	@ (8003378 <SystemInit+0x130>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <SystemInit+0x134>)
 800330c:	4013      	ands	r3, r2
 800330e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003312:	d202      	bcs.n	800331a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003314:	4b1a      	ldr	r3, [pc, #104]	@ (8003380 <SystemInit+0x138>)
 8003316:	2201      	movs	r2, #1
 8003318:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800331a:	4b12      	ldr	r3, [pc, #72]	@ (8003364 <SystemInit+0x11c>)
 800331c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003320:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d113      	bne.n	8003350 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003328:	4b0e      	ldr	r3, [pc, #56]	@ (8003364 <SystemInit+0x11c>)
 800332a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800332e:	4a0d      	ldr	r2, [pc, #52]	@ (8003364 <SystemInit+0x11c>)
 8003330:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003334:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003338:	4b12      	ldr	r3, [pc, #72]	@ (8003384 <SystemInit+0x13c>)
 800333a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800333e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003340:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <SystemInit+0x11c>)
 8003342:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003346:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <SystemInit+0x11c>)
 8003348:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800334c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00
 8003360:	52002000 	.word	0x52002000
 8003364:	58024400 	.word	0x58024400
 8003368:	eaf6ed7f 	.word	0xeaf6ed7f
 800336c:	02020200 	.word	0x02020200
 8003370:	01ff0000 	.word	0x01ff0000
 8003374:	01010280 	.word	0x01010280
 8003378:	5c001000 	.word	0x5c001000
 800337c:	ffff0000 	.word	0xffff0000
 8003380:	51008108 	.word	0x51008108
 8003384:	52004000 	.word	0x52004000

08003388 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800338c:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <ExitRun0Mode+0x2c>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <ExitRun0Mode+0x2c>)
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003398:	bf00      	nop
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <ExitRun0Mode+0x2c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f9      	beq.n	800339a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	58024800 	.word	0x58024800

080033b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80033b8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80033f4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80033bc:	f7ff ffe4 	bl	8003388 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033c0:	f7ff ff42 	bl	8003248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033c4:	480c      	ldr	r0, [pc, #48]	@ (80033f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033c6:	490d      	ldr	r1, [pc, #52]	@ (80033fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033cc:	e002      	b.n	80033d4 <LoopCopyDataInit>

080033ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033d2:	3304      	adds	r3, #4

080033d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033d8:	d3f9      	bcc.n	80033ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033da:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033e0:	e001      	b.n	80033e6 <LoopFillZerobss>

080033e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033e4:	3204      	adds	r2, #4

080033e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033e8:	d3fb      	bcc.n	80033e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ea:	f005 fd81 	bl	8008ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ee:	f7fe fdb7 	bl	8001f60 <main>
  bx  lr
 80033f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80033f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80033fc:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003400:	0800d0cc 	.word	0x0800d0cc
  ldr r2, =_sbss
 8003404:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003408:	24000630 	.word	0x24000630

0800340c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800340c:	e7fe      	b.n	800340c <ADC3_IRQHandler>
	...

08003410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003416:	2003      	movs	r0, #3
 8003418:	f000 f96e 	bl	80036f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800341c:	f002 f954 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_Init+0x68>)
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	4913      	ldr	r1, [pc, #76]	@ (800347c <HAL_Init+0x6c>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800343a:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <HAL_Init+0x68>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	4a0e      	ldr	r2, [pc, #56]	@ (800347c <HAL_Init+0x6c>)
 8003444:	5cd3      	ldrb	r3, [r2, r3]
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	4a0b      	ldr	r2, [pc, #44]	@ (8003480 <HAL_Init+0x70>)
 8003452:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003454:	4a0b      	ldr	r2, [pc, #44]	@ (8003484 <HAL_Init+0x74>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800345a:	200f      	movs	r0, #15
 800345c:	f000 f814 	bl	8003488 <HAL_InitTick>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e002      	b.n	8003470 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800346a:	f7ff fb89 	bl	8002b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58024400 	.word	0x58024400
 800347c:	0800cc84 	.word	0x0800cc84
 8003480:	24000014 	.word	0x24000014
 8003484:	24000010 	.word	0x24000010

08003488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003490:	4b15      	ldr	r3, [pc, #84]	@ (80034e8 <HAL_InitTick+0x60>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e021      	b.n	80034e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800349c:	4b13      	ldr	r3, [pc, #76]	@ (80034ec <HAL_InitTick+0x64>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <HAL_InitTick+0x60>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	4619      	mov	r1, r3
 80034a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f945 	bl	8003742 <HAL_SYSTICK_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e00e      	b.n	80034e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b0f      	cmp	r3, #15
 80034c6:	d80a      	bhi.n	80034de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c8:	2200      	movs	r2, #0
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	f000 f91d 	bl	800370e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d4:	4a06      	ldr	r2, [pc, #24]	@ (80034f0 <HAL_InitTick+0x68>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	2400001c 	.word	0x2400001c
 80034ec:	24000010 	.word	0x24000010
 80034f0:	24000018 	.word	0x24000018

080034f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034f8:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_IncTick+0x20>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_IncTick+0x24>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4413      	add	r3, r2
 8003504:	4a04      	ldr	r2, [pc, #16]	@ (8003518 <HAL_IncTick+0x24>)
 8003506:	6013      	str	r3, [r2, #0]
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	2400001c 	.word	0x2400001c
 8003518:	240004e0 	.word	0x240004e0

0800351c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return uwTick;
 8003520:	4b03      	ldr	r3, [pc, #12]	@ (8003530 <HAL_GetTick+0x14>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	240004e0 	.word	0x240004e0

08003534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7ff ffee 	bl	800351c <HAL_GetTick>
 8003540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d005      	beq.n	800355a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_Delay+0x44>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800355a:	bf00      	nop
 800355c:	f7ff ffde 	bl	800351c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	429a      	cmp	r2, r3
 800356a:	d8f7      	bhi.n	800355c <HAL_Delay+0x28>
  {
  }
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2400001c 	.word	0x2400001c

0800357c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003580:	4b03      	ldr	r3, [pc, #12]	@ (8003590 <HAL_GetREVID+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0c1b      	lsrs	r3, r3, #16
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	5c001000 	.word	0x5c001000

08003594 <__NVIC_SetPriorityGrouping>:
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <__NVIC_SetPriorityGrouping+0x40>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035b0:	4013      	ands	r3, r2
 80035b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <__NVIC_SetPriorityGrouping+0x44>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035c2:	4a04      	ldr	r2, [pc, #16]	@ (80035d4 <__NVIC_SetPriorityGrouping+0x40>)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	60d3      	str	r3, [r2, #12]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00
 80035d8:	05fa0000 	.word	0x05fa0000

080035dc <__NVIC_GetPriorityGrouping>:
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035e0:	4b04      	ldr	r3, [pc, #16]	@ (80035f4 <__NVIC_GetPriorityGrouping+0x18>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0307 	and.w	r3, r3, #7
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <__NVIC_SetPriority>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	@ (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	@ (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	@ 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	@ 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
	...

080036b4 <SysTick_Config>:
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036c4:	d301      	bcc.n	80036ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00f      	b.n	80036ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ca:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <SysTick_Config+0x40>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d2:	210f      	movs	r1, #15
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	f7ff ff8e 	bl	80035f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <SysTick_Config+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <SysTick_Config+0x40>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff47 	bl	8003594 <__NVIC_SetPriorityGrouping>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	4603      	mov	r3, r0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800371c:	f7ff ff5e 	bl	80035dc <__NVIC_GetPriorityGrouping>
 8003720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f7ff ff90 	bl	800364c <NVIC_EncodePriority>
 800372c:	4602      	mov	r2, r0
 800372e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003732:	4611      	mov	r1, r2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff5f 	bl	80035f8 <__NVIC_SetPriority>
}
 800373a:	bf00      	nop
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ffb2 	bl	80036b4 <SysTick_Config>
 8003750:	4603      	mov	r3, r0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003760:	f3bf 8f5f 	dmb	sy
}
 8003764:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003766:	4b07      	ldr	r3, [pc, #28]	@ (8003784 <HAL_MPU_Disable+0x28>)
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	4a06      	ldr	r2, [pc, #24]	@ (8003784 <HAL_MPU_Disable+0x28>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003770:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003772:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_MPU_Disable+0x2c>)
 8003774:	2200      	movs	r2, #0
 8003776:	605a      	str	r2, [r3, #4]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00
 8003788:	e000ed90 	.word	0xe000ed90

0800378c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003794:	4a0b      	ldr	r2, [pc, #44]	@ (80037c4 <HAL_MPU_Enable+0x38>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800379e:	4b0a      	ldr	r3, [pc, #40]	@ (80037c8 <HAL_MPU_Enable+0x3c>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_MPU_Enable+0x3c>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80037aa:	f3bf 8f4f 	dsb	sy
}
 80037ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037b0:	f3bf 8f6f 	isb	sy
}
 80037b4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000ed90 	.word	0xe000ed90
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	785a      	ldrb	r2, [r3, #1]
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HAL_MPU_ConfigRegion+0x7c>)
 80037da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80037dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003848 <HAL_MPU_ConfigRegion+0x7c>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <HAL_MPU_ConfigRegion+0x7c>)
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80037e8:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <HAL_MPU_ConfigRegion+0x7c>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7b1b      	ldrb	r3, [r3, #12]
 80037f4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7adb      	ldrb	r3, [r3, #11]
 80037fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7a9b      	ldrb	r3, [r3, #10]
 8003802:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003804:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7b5b      	ldrb	r3, [r3, #13]
 800380a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800380c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7b9b      	ldrb	r3, [r3, #14]
 8003812:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003814:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7bdb      	ldrb	r3, [r3, #15]
 800381a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800381c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7a5b      	ldrb	r3, [r3, #9]
 8003822:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003824:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	7a1b      	ldrb	r3, [r3, #8]
 800382a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800382c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003834:	4a04      	ldr	r2, [pc, #16]	@ (8003848 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003836:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003838:	6113      	str	r3, [r2, #16]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000ed90 	.word	0xe000ed90

0800384c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800385a:	4b89      	ldr	r3, [pc, #548]	@ (8003a80 <HAL_GPIO_Init+0x234>)
 800385c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800385e:	e194      	b.n	8003b8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 8186 	beq.w	8003b84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d005      	beq.n	8003890 <HAL_GPIO_Init+0x44>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d130      	bne.n	80038f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038c6:	2201      	movs	r2, #1
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0201 	and.w	r2, r3, #1
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d017      	beq.n	800392e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d123      	bne.n	8003982 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	69b9      	ldr	r1, [r7, #24]
 800397e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80e0 	beq.w	8003b84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003a84 <HAL_GPIO_Init+0x238>)
 80039c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003a84 <HAL_GPIO_Init+0x238>)
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a84 <HAL_GPIO_Init+0x238>)
 80039d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a29      	ldr	r2, [pc, #164]	@ (8003a88 <HAL_GPIO_Init+0x23c>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a20      	ldr	r2, [pc, #128]	@ (8003a8c <HAL_GPIO_Init+0x240>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d052      	beq.n	8003ab4 <HAL_GPIO_Init+0x268>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <HAL_GPIO_Init+0x244>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_GPIO_Init+0x22e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1e      	ldr	r2, [pc, #120]	@ (8003a94 <HAL_GPIO_Init+0x248>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02b      	beq.n	8003a76 <HAL_GPIO_Init+0x22a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	@ (8003a98 <HAL_GPIO_Init+0x24c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d025      	beq.n	8003a72 <HAL_GPIO_Init+0x226>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1c      	ldr	r2, [pc, #112]	@ (8003a9c <HAL_GPIO_Init+0x250>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01f      	beq.n	8003a6e <HAL_GPIO_Init+0x222>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa0 <HAL_GPIO_Init+0x254>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d019      	beq.n	8003a6a <HAL_GPIO_Init+0x21e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <HAL_GPIO_Init+0x258>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0x21a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <HAL_GPIO_Init+0x25c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_GPIO_Init+0x216>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <HAL_GPIO_Init+0x260>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <HAL_GPIO_Init+0x212>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a17      	ldr	r2, [pc, #92]	@ (8003ab0 <HAL_GPIO_Init+0x264>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_GPIO_Init+0x20e>
 8003a56:	2309      	movs	r3, #9
 8003a58:	e02d      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a5a:	230a      	movs	r3, #10
 8003a5c:	e02b      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	e029      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a62:	2307      	movs	r3, #7
 8003a64:	e027      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e025      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	e023      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	e021      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e01f      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e01d      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e01b      	b.n	8003ab6 <HAL_GPIO_Init+0x26a>
 8003a7e:	bf00      	nop
 8003a80:	58000080 	.word	0x58000080
 8003a84:	58024400 	.word	0x58024400
 8003a88:	58000400 	.word	0x58000400
 8003a8c:	58020000 	.word	0x58020000
 8003a90:	58020400 	.word	0x58020400
 8003a94:	58020800 	.word	0x58020800
 8003a98:	58020c00 	.word	0x58020c00
 8003a9c:	58021000 	.word	0x58021000
 8003aa0:	58021400 	.word	0x58021400
 8003aa4:	58021800 	.word	0x58021800
 8003aa8:	58021c00 	.word	0x58021c00
 8003aac:	58022000 	.word	0x58022000
 8003ab0:	58022400 	.word	0x58022400
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	f002 0203 	and.w	r2, r2, #3
 8003abc:	0092      	lsls	r2, r2, #2
 8003abe:	4093      	lsls	r3, r2
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac6:	4938      	ldr	r1, [pc, #224]	@ (8003ba8 <HAL_GPIO_Init+0x35c>)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3302      	adds	r3, #2
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	3301      	adds	r3, #1
 8003b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f47f ae63 	bne.w	8003860 <HAL_GPIO_Init+0x14>
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	bf00      	nop
 8003b9e:	3724      	adds	r7, #36	@ 0x24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	58000400 	.word	0x58000400

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bc8:	e003      	b.n	8003bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	041a      	lsls	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	619a      	str	r2, [r3, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e08b      	b.n	8003d0a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe ffd4 	bl	8002bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	@ 0x24
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	e006      	b.n	8003c68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d108      	bne.n	8003c82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c7e:	605a      	str	r2, [r3, #4]
 8003c80:	e007      	b.n	8003c92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <HAL_I2C_Init+0x134>)
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68da      	ldr	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	02008000 	.word	0x02008000

08003d18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	817b      	strh	r3, [r7, #10]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	813b      	strh	r3, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	f040 80f9 	bne.w	8003f32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x34>
 8003d46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0ed      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Mem_Write+0x4e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0e6      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d6e:	f7ff fbd5 	bl	800351c <HAL_GetTick>
 8003d72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fbc9 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0d1      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2221      	movs	r2, #33	@ 0x21
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2240      	movs	r2, #64	@ 0x40
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a3a      	ldr	r2, [r7, #32]
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003db8:	88f8      	ldrh	r0, [r7, #6]
 8003dba:	893a      	ldrh	r2, [r7, #8]
 8003dbc:	8979      	ldrh	r1, [r7, #10]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fad9 	bl	8004380 <I2C_RequestMemoryWrite>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0a9      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2bff      	cmp	r3, #255	@ 0xff
 8003de8:	d90e      	bls.n	8003e08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	22ff      	movs	r2, #255	@ 0xff
 8003dee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	8979      	ldrh	r1, [r7, #10]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fd4d 	bl	80048a0 <I2C_TransferConfig>
 8003e06:	e00f      	b.n	8003e28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	8979      	ldrh	r1, [r7, #10]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fd3c 	bl	80048a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fbcc 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e07b      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d034      	beq.n	8003ee0 <HAL_I2C_Mem_Write+0x1c8>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d130      	bne.n	8003ee0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	2200      	movs	r2, #0
 8003e86:	2180      	movs	r1, #128	@ 0x80
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fb45 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e04d      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2bff      	cmp	r3, #255	@ 0xff
 8003ea0:	d90e      	bls.n	8003ec0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	22ff      	movs	r2, #255	@ 0xff
 8003ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	8979      	ldrh	r1, [r7, #10]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fcf1 	bl	80048a0 <I2C_TransferConfig>
 8003ebe:	e00f      	b.n	8003ee0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	8979      	ldrh	r1, [r7, #10]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fce0 	bl	80048a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d19e      	bne.n	8003e28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fbb2 	bl	8004658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e01a      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2220      	movs	r2, #32
 8003f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <HAL_I2C_Mem_Write+0x224>)
 8003f12:	400b      	ands	r3, r1
 8003f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	fe00e800 	.word	0xfe00e800

08003f40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	460b      	mov	r3, r1
 8003f54:	813b      	strh	r3, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	f040 80fd 	bne.w	8004162 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_I2C_Mem_Read+0x34>
 8003f6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0f1      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Mem_Read+0x4e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0ea      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f96:	f7ff fac1 	bl	800351c <HAL_GetTick>
 8003f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2319      	movs	r3, #25
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 fab5 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0d5      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2222      	movs	r2, #34	@ 0x22
 8003fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2240      	movs	r2, #64	@ 0x40
 8003fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe0:	88f8      	ldrh	r0, [r7, #6]
 8003fe2:	893a      	ldrh	r2, [r7, #8]
 8003fe4:	8979      	ldrh	r1, [r7, #10]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	4603      	mov	r3, r0
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fa19 	bl	8004428 <I2C_RequestMemoryRead>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0ad      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	2bff      	cmp	r3, #255	@ 0xff
 8004010:	d90e      	bls.n	8004030 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	22ff      	movs	r2, #255	@ 0xff
 8004016:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	b2da      	uxtb	r2, r3
 800401e:	8979      	ldrh	r1, [r7, #10]
 8004020:	4b52      	ldr	r3, [pc, #328]	@ (800416c <HAL_I2C_Mem_Read+0x22c>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fc39 	bl	80048a0 <I2C_TransferConfig>
 800402e:	e00f      	b.n	8004050 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	b2da      	uxtb	r2, r3
 8004040:	8979      	ldrh	r1, [r7, #10]
 8004042:	4b4a      	ldr	r3, [pc, #296]	@ (800416c <HAL_I2C_Mem_Read+0x22c>)
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fc28 	bl	80048a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004056:	2200      	movs	r2, #0
 8004058:	2104      	movs	r1, #4
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fa5c 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e07c      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d034      	beq.n	8004110 <HAL_I2C_Mem_Read+0x1d0>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d130      	bne.n	8004110 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	@ 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fa2d 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e04d      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2bff      	cmp	r3, #255	@ 0xff
 80040d0:	d90e      	bls.n	80040f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	22ff      	movs	r2, #255	@ 0xff
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	8979      	ldrh	r1, [r7, #10]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fbd9 	bl	80048a0 <I2C_TransferConfig>
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	8979      	ldrh	r1, [r7, #10]
 8004102:	2300      	movs	r3, #0
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fbc8 	bl	80048a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d19a      	bne.n	8004050 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fa9a 	bl	8004658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e01a      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2220      	movs	r2, #32
 8004134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_I2C_Mem_Read+0x230>)
 8004142:	400b      	ands	r3, r1
 8004144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	80002400 	.word	0x80002400
 8004170:	fe00e800 	.word	0xfe00e800

08004174 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	@ 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	460b      	mov	r3, r1
 8004182:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b20      	cmp	r3, #32
 8004196:	f040 80e9 	bne.w	800436c <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a8:	d101      	bne.n	80041ae <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80041aa:	2302      	movs	r3, #2
 80041ac:	e0df      	b.n	800436e <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_I2C_IsDeviceReady+0x48>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e0d8      	b.n	800436e <HAL_I2C_IsDeviceReady+0x1fa>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2224      	movs	r2, #36	@ 0x24
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_I2C_IsDeviceReady+0x72>
 80041da:	897b      	ldrh	r3, [r7, #10]
 80041dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041e0:	4b65      	ldr	r3, [pc, #404]	@ (8004378 <HAL_I2C_IsDeviceReady+0x204>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	e004      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x7c>
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041ec:	4b63      	ldr	r3, [pc, #396]	@ (800437c <HAL_I2C_IsDeviceReady+0x208>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041f6:	f7ff f991 	bl	800351c <HAL_GetTick>
 80041fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b20      	cmp	r3, #32
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b10      	cmp	r3, #16
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004228:	e034      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d01a      	beq.n	8004268 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7ff f973 	bl	800351c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <HAL_I2C_IsDeviceReady+0xd4>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e082      	b.n	800436e <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b20      	cmp	r3, #32
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b10      	cmp	r3, #16
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004294:	7fbb      	ldrb	r3, [r7, #30]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <HAL_I2C_IsDeviceReady+0x12c>
 800429a:	7f7b      	ldrb	r3, [r7, #29]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0c4      	beq.n	800422a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d027      	beq.n	80042fe <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2120      	movs	r1, #32
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f92d 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d107      	bne.n	80042dc <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2220      	movs	r2, #32
 80042d2:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80042da:	e026      	b.n	800432a <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e023      	b.n	800432a <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2220      	movs	r2, #32
 80042e8:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e037      	b.n	800436e <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2210      	movs	r2, #16
 8004304:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2200      	movs	r2, #0
 800430e:	2120      	movs	r1, #32
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f901 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e003      	b.n	800432a <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2220      	movs	r2, #32
 8004328:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	d904      	bls.n	8004342 <HAL_I2C_IsDeviceReady+0x1ce>
 8004338:	7ffb      	ldrb	r3, [r7, #31]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	f63f af43 	bhi.w	80041d2 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	02002000 	.word	0x02002000
 800437c:	02002800 	.word	0x02002800

08004380 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	817b      	strh	r3, [r7, #10]
 8004392:	460b      	mov	r3, r1
 8004394:	813b      	strh	r3, [r7, #8]
 8004396:	4613      	mov	r3, r2
 8004398:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <I2C_RequestMemoryWrite+0xa4>)
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fa79 	bl	80048a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	69b9      	ldr	r1, [r7, #24]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f909 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e02c      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043c8:	893b      	ldrh	r3, [r7, #8]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80043d2:	e015      	b.n	8004400 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043d4:	893b      	ldrh	r3, [r7, #8]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	69b9      	ldr	r1, [r7, #24]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f8ef 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e012      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043f6:	893b      	ldrh	r3, [r7, #8]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	@ 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f884 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	80002000 	.word	0x80002000

08004428 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	461a      	mov	r2, r3
 8004436:	4603      	mov	r3, r0
 8004438:	817b      	strh	r3, [r7, #10]
 800443a:	460b      	mov	r3, r1
 800443c:	813b      	strh	r3, [r7, #8]
 800443e:	4613      	mov	r3, r2
 8004440:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	8979      	ldrh	r1, [r7, #10]
 8004448:	4b20      	ldr	r3, [pc, #128]	@ (80044cc <I2C_RequestMemoryRead+0xa4>)
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fa26 	bl	80048a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f8b6 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e02c      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28
 8004478:	e015      	b.n	80044a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800447a:	893b      	ldrh	r3, [r7, #8]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	b29b      	uxth	r3, r3
 8004480:	b2da      	uxtb	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	69b9      	ldr	r1, [r7, #24]
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f89c 	bl	80045ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e012      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2140      	movs	r1, #64	@ 0x40
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f831 	bl	8004518 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	80002000 	.word	0x80002000

080044d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d103      	bne.n	80044ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2200      	movs	r2, #0
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d007      	beq.n	800450c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	619a      	str	r2, [r3, #24]
  }
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	4613      	mov	r3, r2
 8004526:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004528:	e03b      	b.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	6839      	ldr	r1, [r7, #0]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8d6 	bl	80046e0 <I2C_IsErrorOccurred>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e041      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d02d      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe ffe9 	bl	800351c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d122      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699a      	ldr	r2, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	429a      	cmp	r2, r3
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	429a      	cmp	r2, r3
 8004578:	d113      	bne.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e00f      	b.n	80045c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	4013      	ands	r3, r2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d0b4      	beq.n	800452a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d6:	e033      	b.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f87f 	bl	80046e0 <I2C_IsErrorOccurred>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e031      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d025      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fe ff92 	bl	800351c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11a      	bne.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d013      	beq.n	8004640 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e007      	b.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d1c4      	bne.n	80045d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004664:	e02f      	b.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f838 	bl	80046e0 <I2C_IsErrorOccurred>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e02d      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fe ff4f 	bl	800351c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11a      	bne.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d013      	beq.n	80046c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e007      	b.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d1c8      	bne.n	8004666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d068      	beq.n	80047de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2210      	movs	r2, #16
 8004712:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004714:	e049      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d045      	beq.n	80047aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fe fefd 	bl	800351c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <I2C_IsErrorOccurred+0x54>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13a      	bne.n	80047aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800473e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004746:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004756:	d121      	bne.n	800479c <I2C_IsErrorOccurred+0xbc>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800475e:	d01d      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b20      	cmp	r3, #32
 8004764:	d01a      	beq.n	800479c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004774:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004776:	f7fe fed1 	bl	800351c <HAL_GetTick>
 800477a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477c:	e00e      	b.n	800479c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800477e:	f7fe fecd 	bl	800351c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b19      	cmp	r3, #25
 800478a:	d907      	bls.n	800479c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f043 0320 	orr.w	r3, r3, #32
 8004792:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800479a:	e006      	b.n	80047aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d1e9      	bne.n	800477e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	d003      	beq.n	80047c0 <I2C_IsErrorOccurred+0xe0>
 80047b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0aa      	beq.n	8004716 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2220      	movs	r2, #32
 80047ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	f043 0304 	orr.w	r3, r3, #4
 80047d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004800:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800484c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01c      	beq.n	800488e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fe3b 	bl	80044d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <I2C_IsErrorOccurred+0x1bc>)
 8004866:	400b      	ands	r3, r1
 8004868:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800488e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004892:	4618      	mov	r0, r3
 8004894:	3728      	adds	r7, #40	@ 0x28
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	fe00e800 	.word	0xfe00e800

080048a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	4613      	mov	r3, r2
 80048b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048b2:	897b      	ldrh	r3, [r7, #10]
 80048b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048b8:	7a7b      	ldrb	r3, [r7, #9]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80048ce:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	0d5b      	lsrs	r3, r3, #21
 80048da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80048de:	4b08      	ldr	r3, [pc, #32]	@ (8004900 <I2C_TransferConfig+0x60>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	43db      	mvns	r3, r3
 80048e4:	ea02 0103 	and.w	r1, r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	03ff63ff 	.word	0x03ff63ff

08004904 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	d138      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004924:	2302      	movs	r3, #2
 8004926:	e032      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	@ 0x24
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004956:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d139      	bne.n	8004a24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e033      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2224      	movs	r2, #36	@ 0x24
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004a3c:	4b19      	ldr	r3, [pc, #100]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d00a      	beq.n	8004a5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004a48:	4b16      	ldr	r3, [pc, #88]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d001      	beq.n	8004a5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e01f      	b.n	8004a9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e01d      	b.n	8004a9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004a5e:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	490f      	ldr	r1, [pc, #60]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004a6e:	f7fe fd55 	bl	800351c <HAL_GetTick>
 8004a72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a74:	e009      	b.n	8004a8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004a76:	f7fe fd51 	bl	800351c <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a84:	d901      	bls.n	8004a8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e007      	b.n	8004a9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_PWREx_ConfigSupply+0x70>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a96:	d1ee      	bne.n	8004a76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	58024800 	.word	0x58024800

08004aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	@ 0x30
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f000 bc48 	b.w	800534c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8088 	beq.w	8004bda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	4b99      	ldr	r3, [pc, #612]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ad4:	4b96      	ldr	r3, [pc, #600]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d007      	beq.n	8004af0 <HAL_RCC_OscConfig+0x48>
 8004ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae2:	2b18      	cmp	r3, #24
 8004ae4:	d111      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62>
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d10c      	bne.n	8004b0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	4b8f      	ldr	r3, [pc, #572]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d06d      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x130>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d169      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f000 bc21 	b.w	800534c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b12:	d106      	bne.n	8004b22 <HAL_RCC_OscConfig+0x7a>
 8004b14:	4b86      	ldr	r3, [pc, #536]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a85      	ldr	r2, [pc, #532]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	e02e      	b.n	8004b80 <HAL_RCC_OscConfig+0xd8>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x9c>
 8004b2a:	4b81      	ldr	r3, [pc, #516]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a80      	ldr	r2, [pc, #512]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4b7e      	ldr	r3, [pc, #504]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a7d      	ldr	r2, [pc, #500]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e01d      	b.n	8004b80 <HAL_RCC_OscConfig+0xd8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0xc0>
 8004b4e:	4b78      	ldr	r3, [pc, #480]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a77      	ldr	r2, [pc, #476]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	4b75      	ldr	r3, [pc, #468]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a74      	ldr	r2, [pc, #464]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e00b      	b.n	8004b80 <HAL_RCC_OscConfig+0xd8>
 8004b68:	4b71      	ldr	r3, [pc, #452]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a70      	ldr	r2, [pc, #448]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b6e      	ldr	r3, [pc, #440]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6d      	ldr	r2, [pc, #436]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fe fcc8 	bl	800351c <HAL_GetTick>
 8004b8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fe fcc4 	bl	800351c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	@ 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e3d4      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ba2:	4b63      	ldr	r3, [pc, #396]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0xe8>
 8004bae:	e014      	b.n	8004bda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb0:	f7fe fcb4 	bl	800351c <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fe fcb0 	bl	800351c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	@ 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e3c0      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004bca:	4b59      	ldr	r3, [pc, #356]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x110>
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80ca 	beq.w	8004d7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004be8:	4b51      	ldr	r3, [pc, #324]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bf0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_RCC_OscConfig+0x166>
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b18      	cmp	r3, #24
 8004c02:	d156      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x20a>
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d151      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c0e:	4b48      	ldr	r3, [pc, #288]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCC_OscConfig+0x17e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d101      	bne.n	8004c26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e392      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004c26:	4b42      	ldr	r3, [pc, #264]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 0219 	bic.w	r2, r3, #25
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	493f      	ldr	r1, [pc, #252]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fe fc70 	bl	800351c <HAL_GetTick>
 8004c3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c40:	f7fe fc6c 	bl	800351c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e37c      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c52:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5e:	f7fe fc8d 	bl	800357c <HAL_GetREVID>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d817      	bhi.n	8004c9c <HAL_RCC_OscConfig+0x1f4>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b40      	cmp	r3, #64	@ 0x40
 8004c72:	d108      	bne.n	8004c86 <HAL_RCC_OscConfig+0x1de>
 8004c74:	4b2e      	ldr	r3, [pc, #184]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c84:	e07a      	b.n	8004d7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	4b2a      	ldr	r3, [pc, #168]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	031b      	lsls	r3, r3, #12
 8004c94:	4926      	ldr	r1, [pc, #152]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c9a:	e06f      	b.n	8004d7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b24      	ldr	r3, [pc, #144]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	4921      	ldr	r1, [pc, #132]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb0:	e064      	b.n	8004d7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d047      	beq.n	8004d4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004cba:	4b1d      	ldr	r3, [pc, #116]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 0219 	bic.w	r2, r3, #25
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	491a      	ldr	r1, [pc, #104]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fe fc26 	bl	800351c <HAL_GetTick>
 8004cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd4:	f7fe fc22 	bl	800351c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e332      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce6:	4b12      	ldr	r3, [pc, #72]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf2:	f7fe fc43 	bl	800357c <HAL_GetREVID>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d819      	bhi.n	8004d34 <HAL_RCC_OscConfig+0x28c>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b40      	cmp	r3, #64	@ 0x40
 8004d06:	d108      	bne.n	8004d1a <HAL_RCC_OscConfig+0x272>
 8004d08:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004d10:	4a07      	ldr	r2, [pc, #28]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d16:	6053      	str	r3, [r2, #4]
 8004d18:	e030      	b.n	8004d7c <HAL_RCC_OscConfig+0x2d4>
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	031b      	lsls	r3, r3, #12
 8004d28:	4901      	ldr	r1, [pc, #4]	@ (8004d30 <HAL_RCC_OscConfig+0x288>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	604b      	str	r3, [r1, #4]
 8004d2e:	e025      	b.n	8004d7c <HAL_RCC_OscConfig+0x2d4>
 8004d30:	58024400 	.word	0x58024400
 8004d34:	4b9a      	ldr	r3, [pc, #616]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	4997      	ldr	r1, [pc, #604]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
 8004d48:	e018      	b.n	8004d7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4a:	4b95      	ldr	r3, [pc, #596]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a94      	ldr	r2, [pc, #592]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe fbe1 	bl	800351c <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fe fbdd 	bl	800351c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e2ed      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d70:	4b8b      	ldr	r3, [pc, #556]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80a9 	beq.w	8004edc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8a:	4b85      	ldr	r3, [pc, #532]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d94:	4b82      	ldr	r3, [pc, #520]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d007      	beq.n	8004db0 <HAL_RCC_OscConfig+0x308>
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b18      	cmp	r3, #24
 8004da4:	d13a      	bne.n	8004e1c <HAL_RCC_OscConfig+0x374>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d135      	bne.n	8004e1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004db0:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x320>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	2b80      	cmp	r3, #128	@ 0x80
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e2c1      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004dc8:	f7fe fbd8 	bl	800357c <HAL_GetREVID>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d817      	bhi.n	8004e06 <HAL_RCC_OscConfig+0x35e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d108      	bne.n	8004df0 <HAL_RCC_OscConfig+0x348>
 8004dde:	4b70      	ldr	r3, [pc, #448]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004de6:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004dec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004dee:	e075      	b.n	8004edc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004df0:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	069b      	lsls	r3, r3, #26
 8004dfe:	4968      	ldr	r1, [pc, #416]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e04:	e06a      	b.n	8004edc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e06:	4b66      	ldr	r3, [pc, #408]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	061b      	lsls	r3, r3, #24
 8004e14:	4962      	ldr	r1, [pc, #392]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e1a:	e05f      	b.n	8004edc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d042      	beq.n	8004eaa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e24:	4b5e      	ldr	r3, [pc, #376]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a5d      	ldr	r2, [pc, #372]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fe fb74 	bl	800351c <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004e38:	f7fe fb70 	bl	800351c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e280      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e4a:	4b55      	ldr	r3, [pc, #340]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e56:	f7fe fb91 	bl	800357c <HAL_GetREVID>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d817      	bhi.n	8004e94 <HAL_RCC_OscConfig+0x3ec>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d108      	bne.n	8004e7e <HAL_RCC_OscConfig+0x3d6>
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004e74:	4a4a      	ldr	r2, [pc, #296]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e7a:	6053      	str	r3, [r2, #4]
 8004e7c:	e02e      	b.n	8004edc <HAL_RCC_OscConfig+0x434>
 8004e7e:	4b48      	ldr	r3, [pc, #288]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	069b      	lsls	r3, r3, #26
 8004e8c:	4944      	ldr	r1, [pc, #272]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
 8004e92:	e023      	b.n	8004edc <HAL_RCC_OscConfig+0x434>
 8004e94:	4b42      	ldr	r3, [pc, #264]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	493f      	ldr	r1, [pc, #252]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
 8004ea8:	e018      	b.n	8004edc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fe fb31 	bl	800351c <HAL_GetTick>
 8004eba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ebe:	f7fe fb2d 	bl	800351c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e23d      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ed0:	4b33      	ldr	r3, [pc, #204]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1f0      	bne.n	8004ebe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d036      	beq.n	8004f56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d019      	beq.n	8004f24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fe fb0e 	bl	800351c <HAL_GetTick>
 8004f00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f04:	f7fe fb0a 	bl	800351c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e21a      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f16:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x45c>
 8004f22:	e018      	b.n	8004f56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f24:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f28:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004f2a:	f023 0301 	bic.w	r3, r3, #1
 8004f2e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fe faf4 	bl	800351c <HAL_GetTick>
 8004f34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f38:	f7fe faf0 	bl	800351c <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e200      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f4a:	4b15      	ldr	r3, [pc, #84]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d039      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004f70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004f76:	f7fe fad1 	bl	800351c <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f7e:	f7fe facd 	bl	800351c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e1dd      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f90:	4b03      	ldr	r3, [pc, #12]	@ (8004fa0 <HAL_RCC_OscConfig+0x4f8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x4d6>
 8004f9c:	e01b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x52e>
 8004f9e:	bf00      	nop
 8004fa0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fa4:	4b9b      	ldr	r3, [pc, #620]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a9a      	ldr	r2, [pc, #616]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8004faa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fb0:	f7fe fab4 	bl	800351c <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb8:	f7fe fab0 	bl	800351c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e1c0      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fca:	4b92      	ldr	r3, [pc, #584]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 8081 	beq.w	80050e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8005218 <HAL_RCC_OscConfig+0x770>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a8b      	ldr	r2, [pc, #556]	@ (8005218 <HAL_RCC_OscConfig+0x770>)
 8004fea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff0:	f7fe fa94 	bl	800351c <HAL_GetTick>
 8004ff4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff8:	f7fe fa90 	bl	800351c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e1a0      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800500a:	4b83      	ldr	r3, [pc, #524]	@ (8005218 <HAL_RCC_OscConfig+0x770>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d106      	bne.n	800502c <HAL_RCC_OscConfig+0x584>
 800501e:	4b7d      	ldr	r3, [pc, #500]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	4a7c      	ldr	r2, [pc, #496]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6713      	str	r3, [r2, #112]	@ 0x70
 800502a:	e02d      	b.n	8005088 <HAL_RCC_OscConfig+0x5e0>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <HAL_RCC_OscConfig+0x5a6>
 8005034:	4b77      	ldr	r3, [pc, #476]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005038:	4a76      	ldr	r2, [pc, #472]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005040:	4b74      	ldr	r3, [pc, #464]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	4a73      	ldr	r2, [pc, #460]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005046:	f023 0304 	bic.w	r3, r3, #4
 800504a:	6713      	str	r3, [r2, #112]	@ 0x70
 800504c:	e01c      	b.n	8005088 <HAL_RCC_OscConfig+0x5e0>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b05      	cmp	r3, #5
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x5c8>
 8005056:	4b6f      	ldr	r3, [pc, #444]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	4a6e      	ldr	r2, [pc, #440]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	6713      	str	r3, [r2, #112]	@ 0x70
 8005062:	4b6c      	ldr	r3, [pc, #432]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005066:	4a6b      	ldr	r2, [pc, #428]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6713      	str	r3, [r2, #112]	@ 0x70
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0x5e0>
 8005070:	4b68      	ldr	r3, [pc, #416]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005074:	4a67      	ldr	r2, [pc, #412]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	6713      	str	r3, [r2, #112]	@ 0x70
 800507c:	4b65      	ldr	r3, [pc, #404]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005080:	4a64      	ldr	r2, [pc, #400]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005082:	f023 0304 	bic.w	r3, r3, #4
 8005086:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d015      	beq.n	80050bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fe fa44 	bl	800351c <HAL_GetTick>
 8005094:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fe fa40 	bl	800351c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e14e      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ae:	4b59      	ldr	r3, [pc, #356]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ee      	beq.n	8005098 <HAL_RCC_OscConfig+0x5f0>
 80050ba:	e014      	b.n	80050e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fe fa2e 	bl	800351c <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050c2:	e00a      	b.n	80050da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fe fa2a 	bl	800351c <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e138      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050da:	4b4e      	ldr	r3, [pc, #312]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ee      	bne.n	80050c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 812d 	beq.w	800534a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80050f0:	4b48      	ldr	r3, [pc, #288]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050f8:	2b18      	cmp	r3, #24
 80050fa:	f000 80bd 	beq.w	8005278 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	2b02      	cmp	r3, #2
 8005104:	f040 809e 	bne.w	8005244 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005108:	4b42      	ldr	r3, [pc, #264]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a41      	ldr	r2, [pc, #260]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800510e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fe fa02 	bl	800351c <HAL_GetTick>
 8005118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7fe f9fe 	bl	800351c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e10e      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800512e:	4b39      	ldr	r3, [pc, #228]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800513a:	4b36      	ldr	r3, [pc, #216]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800513c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800513e:	4b37      	ldr	r3, [pc, #220]	@ (800521c <HAL_RCC_OscConfig+0x774>)
 8005140:	4013      	ands	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800514a:	0112      	lsls	r2, r2, #4
 800514c:	430a      	orrs	r2, r1
 800514e:	4931      	ldr	r1, [pc, #196]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	628b      	str	r3, [r1, #40]	@ 0x28
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	3b01      	subs	r3, #1
 800515a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005162:	3b01      	subs	r3, #1
 8005164:	025b      	lsls	r3, r3, #9
 8005166:	b29b      	uxth	r3, r3
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	3b01      	subs	r3, #1
 8005170:	041b      	lsls	r3, r3, #16
 8005172:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517c:	3b01      	subs	r3, #1
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005184:	4923      	ldr	r1, [pc, #140]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	4a21      	ldr	r2, [pc, #132]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005196:	4b1f      	ldr	r3, [pc, #124]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800519a:	4b21      	ldr	r3, [pc, #132]	@ (8005220 <HAL_RCC_OscConfig+0x778>)
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051a2:	00d2      	lsls	r2, r2, #3
 80051a4:	491b      	ldr	r1, [pc, #108]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	f023 020c 	bic.w	r2, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	4917      	ldr	r1, [pc, #92]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051bc:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	f023 0202 	bic.w	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c8:	4912      	ldr	r1, [pc, #72]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051ce:	4b11      	ldr	r3, [pc, #68]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	4a10      	ldr	r2, [pc, #64]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051da:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	4a0d      	ldr	r2, [pc, #52]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80051e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80051f2:	4b08      	ldr	r3, [pc, #32]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	4a07      	ldr	r2, [pc, #28]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fe:	4b05      	ldr	r3, [pc, #20]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a04      	ldr	r2, [pc, #16]	@ (8005214 <HAL_RCC_OscConfig+0x76c>)
 8005204:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520a:	f7fe f987 	bl	800351c <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005210:	e011      	b.n	8005236 <HAL_RCC_OscConfig+0x78e>
 8005212:	bf00      	nop
 8005214:	58024400 	.word	0x58024400
 8005218:	58024800 	.word	0x58024800
 800521c:	fffffc0c 	.word	0xfffffc0c
 8005220:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005224:	f7fe f97a 	bl	800351c <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e08a      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005236:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x77c>
 8005242:	e082      	b.n	800534a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005244:	4b43      	ldr	r3, [pc, #268]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a42      	ldr	r2, [pc, #264]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 800524a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800524e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fe f964 	bl	800351c <HAL_GetTick>
 8005254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005258:	f7fe f960 	bl	800351c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e070      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800526a:	4b3a      	ldr	r3, [pc, #232]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1f0      	bne.n	8005258 <HAL_RCC_OscConfig+0x7b0>
 8005276:	e068      	b.n	800534a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005278:	4b36      	ldr	r3, [pc, #216]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800527e:	4b35      	ldr	r3, [pc, #212]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005282:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005288:	2b01      	cmp	r3, #1
 800528a:	d031      	beq.n	80052f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f003 0203 	and.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d12a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d122      	bne.n	80052f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d11a      	bne.n	80052f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	0a5b      	lsrs	r3, r3, #9
 80052be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d111      	bne.n	80052f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	0c1b      	lsrs	r3, r3, #16
 80052d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d108      	bne.n	80052f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	0e1b      	lsrs	r3, r3, #24
 80052e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e02b      	b.n	800534c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80052f4:	4b17      	ldr	r3, [pc, #92]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 80052f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f8:	08db      	lsrs	r3, r3, #3
 80052fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	429a      	cmp	r2, r3
 8005308:	d01f      	beq.n	800534a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 800530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800530e:	4a11      	ldr	r2, [pc, #68]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005316:	f7fe f901 	bl	800351c <HAL_GetTick>
 800531a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800531c:	bf00      	nop
 800531e:	f7fe f8fd 	bl	800351c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	4293      	cmp	r3, r2
 8005328:	d0f9      	beq.n	800531e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800532a:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 800532c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800532e:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <HAL_RCC_OscConfig+0x8b0>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005336:	00d2      	lsls	r2, r2, #3
 8005338:	4906      	ldr	r1, [pc, #24]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 800533a:	4313      	orrs	r3, r2
 800533c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800533e:	4b05      	ldr	r3, [pc, #20]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 8005340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005342:	4a04      	ldr	r2, [pc, #16]	@ (8005354 <HAL_RCC_OscConfig+0x8ac>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3730      	adds	r7, #48	@ 0x30
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	58024400 	.word	0x58024400
 8005358:	ffff0007 	.word	0xffff0007

0800535c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e19c      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b8a      	ldr	r3, [pc, #552]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d910      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b87      	ldr	r3, [pc, #540]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 020f 	bic.w	r2, r3, #15
 8005386:	4985      	ldr	r1, [pc, #532]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	4313      	orrs	r3, r2
 800538c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	4b83      	ldr	r3, [pc, #524]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d001      	beq.n	80053a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e184      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d010      	beq.n	80053ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	4b7b      	ldr	r3, [pc, #492]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d908      	bls.n	80053ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053bc:	4b78      	ldr	r3, [pc, #480]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	4975      	ldr	r1, [pc, #468]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	4b70      	ldr	r3, [pc, #448]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d908      	bls.n	80053fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053ea:	4b6d      	ldr	r3, [pc, #436]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	496a      	ldr	r1, [pc, #424]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699a      	ldr	r2, [r3, #24]
 800540c:	4b64      	ldr	r3, [pc, #400]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005414:	429a      	cmp	r2, r3
 8005416:	d908      	bls.n	800542a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005418:	4b61      	ldr	r3, [pc, #388]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	495e      	ldr	r1, [pc, #376]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005426:	4313      	orrs	r3, r2
 8005428:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	4b59      	ldr	r3, [pc, #356]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005442:	429a      	cmp	r2, r3
 8005444:	d908      	bls.n	8005458 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005446:	4b56      	ldr	r3, [pc, #344]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4953      	ldr	r1, [pc, #332]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005454:	4313      	orrs	r3, r2
 8005456:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d010      	beq.n	8005486 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	4b4d      	ldr	r3, [pc, #308]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	429a      	cmp	r2, r3
 8005472:	d908      	bls.n	8005486 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005474:	4b4a      	ldr	r3, [pc, #296]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	f023 020f 	bic.w	r2, r3, #15
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4947      	ldr	r1, [pc, #284]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005482:	4313      	orrs	r3, r2
 8005484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d055      	beq.n	800553e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005492:	4b43      	ldr	r3, [pc, #268]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	4940      	ldr	r1, [pc, #256]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ac:	4b3c      	ldr	r3, [pc, #240]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d121      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0f6      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d107      	bne.n	80054d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054c4:	4b36      	ldr	r3, [pc, #216]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d115      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e0ea      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054dc:	4b30      	ldr	r3, [pc, #192]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0de      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ec:	4b2c      	ldr	r3, [pc, #176]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0d6      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054fc:	4b28      	ldr	r3, [pc, #160]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f023 0207 	bic.w	r2, r3, #7
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4925      	ldr	r1, [pc, #148]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800550a:	4313      	orrs	r3, r2
 800550c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800550e:	f7fe f805 	bl	800351c <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005514:	e00a      	b.n	800552c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005516:	f7fe f801 	bl	800351c <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e0be      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552c:	4b1c      	ldr	r3, [pc, #112]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	429a      	cmp	r2, r3
 800553c:	d1eb      	bne.n	8005516 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d010      	beq.n	800556c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	4b14      	ldr	r3, [pc, #80]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	429a      	cmp	r2, r3
 8005558:	d208      	bcs.n	800556c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800555a:	4b11      	ldr	r3, [pc, #68]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	f023 020f 	bic.w	r2, r3, #15
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	490e      	ldr	r1, [pc, #56]	@ (80055a0 <HAL_RCC_ClockConfig+0x244>)
 8005568:	4313      	orrs	r3, r2
 800556a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800556c:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d214      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 020f 	bic.w	r2, r3, #15
 8005582:	4906      	ldr	r1, [pc, #24]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b04      	ldr	r3, [pc, #16]	@ (800559c <HAL_RCC_ClockConfig+0x240>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d005      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e086      	b.n	80056aa <HAL_RCC_ClockConfig+0x34e>
 800559c:	52002000 	.word	0x52002000
 80055a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	4b3f      	ldr	r3, [pc, #252]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055bc:	429a      	cmp	r2, r3
 80055be:	d208      	bcs.n	80055d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055c0:	4b3c      	ldr	r3, [pc, #240]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	4939      	ldr	r1, [pc, #228]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	4b34      	ldr	r3, [pc, #208]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d208      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055ee:	4b31      	ldr	r3, [pc, #196]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	492e      	ldr	r1, [pc, #184]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005618:	429a      	cmp	r2, r3
 800561a:	d208      	bcs.n	800562e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800561e:	69db      	ldr	r3, [r3, #28]
 8005620:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	4922      	ldr	r1, [pc, #136]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800562a:	4313      	orrs	r3, r2
 800562c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	4b1d      	ldr	r3, [pc, #116]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005646:	429a      	cmp	r2, r3
 8005648:	d208      	bcs.n	800565c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800564a:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	4917      	ldr	r1, [pc, #92]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005658:	4313      	orrs	r3, r2
 800565a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800565c:	f000 f834 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005660:	4602      	mov	r2, r0
 8005662:	4b14      	ldr	r3, [pc, #80]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	4912      	ldr	r1, [pc, #72]	@ (80056b8 <HAL_RCC_ClockConfig+0x35c>)
 800566e:	5ccb      	ldrb	r3, [r1, r3]
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
 8005678:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800567a:	4b0e      	ldr	r3, [pc, #56]	@ (80056b4 <HAL_RCC_ClockConfig+0x358>)
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	4a0d      	ldr	r2, [pc, #52]	@ (80056b8 <HAL_RCC_ClockConfig+0x35c>)
 8005684:	5cd3      	ldrb	r3, [r2, r3]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	fa22 f303 	lsr.w	r3, r2, r3
 8005690:	4a0a      	ldr	r2, [pc, #40]	@ (80056bc <HAL_RCC_ClockConfig+0x360>)
 8005692:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005694:	4a0a      	ldr	r2, [pc, #40]	@ (80056c0 <HAL_RCC_ClockConfig+0x364>)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <HAL_RCC_ClockConfig+0x368>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fd fef2 	bl	8003488 <HAL_InitTick>
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	58024400 	.word	0x58024400
 80056b8:	0800cc84 	.word	0x0800cc84
 80056bc:	24000014 	.word	0x24000014
 80056c0:	24000010 	.word	0x24000010
 80056c4:	24000018 	.word	0x24000018

080056c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b089      	sub	sp, #36	@ 0x24
 80056cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056ce:	4bb3      	ldr	r3, [pc, #716]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056d6:	2b18      	cmp	r3, #24
 80056d8:	f200 8155 	bhi.w	8005986 <HAL_RCC_GetSysClockFreq+0x2be>
 80056dc:	a201      	add	r2, pc, #4	@ (adr r2, 80056e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	08005749 	.word	0x08005749
 80056e8:	08005987 	.word	0x08005987
 80056ec:	08005987 	.word	0x08005987
 80056f0:	08005987 	.word	0x08005987
 80056f4:	08005987 	.word	0x08005987
 80056f8:	08005987 	.word	0x08005987
 80056fc:	08005987 	.word	0x08005987
 8005700:	08005987 	.word	0x08005987
 8005704:	0800576f 	.word	0x0800576f
 8005708:	08005987 	.word	0x08005987
 800570c:	08005987 	.word	0x08005987
 8005710:	08005987 	.word	0x08005987
 8005714:	08005987 	.word	0x08005987
 8005718:	08005987 	.word	0x08005987
 800571c:	08005987 	.word	0x08005987
 8005720:	08005987 	.word	0x08005987
 8005724:	08005775 	.word	0x08005775
 8005728:	08005987 	.word	0x08005987
 800572c:	08005987 	.word	0x08005987
 8005730:	08005987 	.word	0x08005987
 8005734:	08005987 	.word	0x08005987
 8005738:	08005987 	.word	0x08005987
 800573c:	08005987 	.word	0x08005987
 8005740:	08005987 	.word	0x08005987
 8005744:	0800577b 	.word	0x0800577b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005748:	4b94      	ldr	r3, [pc, #592]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d009      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005754:	4b91      	ldr	r3, [pc, #580]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	08db      	lsrs	r3, r3, #3
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	4a90      	ldr	r2, [pc, #576]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
 8005764:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005766:	e111      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005768:	4b8d      	ldr	r3, [pc, #564]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800576a:	61bb      	str	r3, [r7, #24]
      break;
 800576c:	e10e      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800576e:	4b8d      	ldr	r3, [pc, #564]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005770:	61bb      	str	r3, [r7, #24]
      break;
 8005772:	e10b      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005774:	4b8c      	ldr	r3, [pc, #560]	@ (80059a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005776:	61bb      	str	r3, [r7, #24]
      break;
 8005778:	e108      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800577a:	4b88      	ldr	r3, [pc, #544]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005784:	4b85      	ldr	r3, [pc, #532]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800578e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005790:	4b82      	ldr	r3, [pc, #520]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800579a:	4b80      	ldr	r3, [pc, #512]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800579c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800579e:	08db      	lsrs	r3, r3, #3
 80057a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	ee07 3a90 	vmov	s15, r3
 80057ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80e1 	beq.w	8005980 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	f000 8083 	beq.w	80058cc <HAL_RCC_GetSysClockFreq+0x204>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	f200 80a1 	bhi.w	8005910 <HAL_RCC_GetSysClockFreq+0x248>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x114>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d056      	beq.n	8005888 <HAL_RCC_GetSysClockFreq+0x1c0>
 80057da:	e099      	b.n	8005910 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057dc:	4b6f      	ldr	r3, [pc, #444]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d02d      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057e8:	4b6c      	ldr	r3, [pc, #432]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	08db      	lsrs	r3, r3, #3
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	4a6b      	ldr	r2, [pc, #428]	@ (80059a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
 80057f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	ee07 3a90 	vmov	s15, r3
 800580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b62      	ldr	r3, [pc, #392]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a02 	vldr	s12, [r7, #8]
 8005826:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005842:	e087      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80059b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005856:	4b51      	ldr	r3, [pc, #324]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a02 	vldr	s12, [r7, #8]
 800586a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005886:	e065      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	4b40      	ldr	r3, [pc, #256]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ca:	e043      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80059b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b2f      	ldr	r3, [pc, #188]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800590e:	e021      	b.n	8005954 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80059b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800591e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005922:	4b1e      	ldr	r3, [pc, #120]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005932:	ed97 6a02 	vldr	s12, [r7, #8]
 8005936:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80059ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800593a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005952:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005954:	4b11      	ldr	r3, [pc, #68]	@ (800599c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	0a5b      	lsrs	r3, r3, #9
 800595a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595e:	3301      	adds	r3, #1
 8005960:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800596c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005978:	ee17 3a90 	vmov	r3, s15
 800597c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800597e:	e005      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
      break;
 8005984:	e002      	b.n	800598c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005986:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005988:	61bb      	str	r3, [r7, #24]
      break;
 800598a:	bf00      	nop
  }

  return sysclockfreq;
 800598c:	69bb      	ldr	r3, [r7, #24]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3724      	adds	r7, #36	@ 0x24
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	58024400 	.word	0x58024400
 80059a0:	03d09000 	.word	0x03d09000
 80059a4:	003d0900 	.word	0x003d0900
 80059a8:	017d7840 	.word	0x017d7840
 80059ac:	46000000 	.word	0x46000000
 80059b0:	4c742400 	.word	0x4c742400
 80059b4:	4a742400 	.word	0x4a742400
 80059b8:	4bbebc20 	.word	0x4bbebc20

080059bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c0:	b0ca      	sub	sp, #296	@ 0x128
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80059e0:	2500      	movs	r5, #0
 80059e2:	ea54 0305 	orrs.w	r3, r4, r5
 80059e6:	d049      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059f2:	d02f      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80059f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059f8:	d828      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80059fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059fe:	d01a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a04:	d822      	bhi.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a0e:	d007      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a10:	e01c      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a12:	4bb8      	ldr	r3, [pc, #736]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	4ab7      	ldr	r2, [pc, #732]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a1e:	e01a      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a24:	3308      	adds	r3, #8
 8005a26:	2102      	movs	r1, #2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f9d1 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a34:	e00f      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	3328      	adds	r3, #40	@ 0x28
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fa78 	bl	8006f34 <RCCEx_PLL3_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a4a:	e004      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a52:	e000      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a5e:	4ba5      	ldr	r3, [pc, #660]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a6c:	4aa1      	ldr	r2, [pc, #644]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a72:	e003      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005a88:	f04f 0900 	mov.w	r9, #0
 8005a8c:	ea58 0309 	orrs.w	r3, r8, r9
 8005a90:	d047      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d82a      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ab9 	.word	0x08005ab9
 8005aa8:	08005ac7 	.word	0x08005ac7
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005afb 	.word	0x08005afb
 8005ab4:	08005afb 	.word	0x08005afb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab8:	4b8e      	ldr	r3, [pc, #568]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	4a8d      	ldr	r2, [pc, #564]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e01a      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aca:	3308      	adds	r3, #8
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f97e 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ada:	e00f      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae0:	3328      	adds	r3, #40	@ 0x28
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 fa25 	bl	8006f34 <RCCEx_PLL3_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af0:	e004      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005af8:	e000      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b04:	4b7b      	ldr	r3, [pc, #492]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b08:	f023 0107 	bic.w	r1, r3, #7
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b12:	4a78      	ldr	r2, [pc, #480]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b14:	430b      	orrs	r3, r1
 8005b16:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b18:	e003      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005b2e:	f04f 0b00 	mov.w	fp, #0
 8005b32:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b36:	d04c      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b42:	d030      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b48:	d829      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b4c:	d02d      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005b50:	d825      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b52:	2b80      	cmp	r3, #128	@ 0x80
 8005b54:	d018      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005b56:	2b80      	cmp	r3, #128	@ 0x80
 8005b58:	d821      	bhi.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005b5e:	2b40      	cmp	r3, #64	@ 0x40
 8005b60:	d007      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005b62:	e01c      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b64:	4b63      	ldr	r3, [pc, #396]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b68:	4a62      	ldr	r2, [pc, #392]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b70:	e01c      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	3308      	adds	r3, #8
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 f928 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b86:	e011      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	3328      	adds	r3, #40	@ 0x28
 8005b8e:	2100      	movs	r1, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	f001 f9cf 	bl	8006f34 <RCCEx_PLL3_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005b9c:	e006      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba4:	e002      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005bde:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005be8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005bec:	460b      	mov	r3, r1
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	d053      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005bfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bfe:	d035      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005c00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c04:	d82e      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c06:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c0a:	d031      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005c10:	d828      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c16:	d01a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c1c:	d822      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c26:	d007      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005c28:	e01c      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c2a:	4b32      	ldr	r3, [pc, #200]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	4a31      	ldr	r2, [pc, #196]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c36:	e01c      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f001 f8c5 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c4c:	e011      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c52:	3328      	adds	r3, #40	@ 0x28
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f96c 	bl	8006f34 <RCCEx_PLL3_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c62:	e006      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c6a:	e002      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c90:	e003      	b.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005ca6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005caa:	2300      	movs	r3, #0
 8005cac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005cb0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	d056      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cc2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cc6:	d038      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005cc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ccc:	d831      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cd2:	d034      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005cd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005cd8:	d82b      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cde:	d01d      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005ce0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ce4:	d825      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005cea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005cf0:	e01f      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf8:	4ba2      	ldr	r3, [pc, #648]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfc:	4aa1      	ldr	r2, [pc, #644]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d04:	e01c      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f85e 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005d1a:	e011      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	3328      	adds	r3, #40	@ 0x28
 8005d22:	2100      	movs	r1, #0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 f905 	bl	8006f34 <RCCEx_PLL3_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005d30:	e006      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d38:	e002      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005d48:	4b8e      	ldr	r3, [pc, #568]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d58:	4a8a      	ldr	r2, [pc, #552]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005d74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d82:	460b      	mov	r3, r1
 8005d84:	4313      	orrs	r3, r2
 8005d86:	d03a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d8e:	2b30      	cmp	r3, #48	@ 0x30
 8005d90:	d01f      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005d92:	2b30      	cmp	r3, #48	@ 0x30
 8005d94:	d819      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d00c      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d815      	bhi.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d019      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d111      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da6:	4b77      	ldr	r3, [pc, #476]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	4a76      	ldr	r2, [pc, #472]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005db2:	e011      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	3308      	adds	r3, #8
 8005dba:	2102      	movs	r1, #2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 f807 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005dc8:	e006      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dd2:	bf00      	nop
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005de0:	4b68      	ldr	r3, [pc, #416]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dee:	4a65      	ldr	r2, [pc, #404]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005df0:	430b      	orrs	r3, r1
 8005df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005df4:	e003      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e06:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e14:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	d051      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e28:	d035      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e2e:	d82e      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e34:	d031      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005e36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e3a:	d828      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e40:	d01a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e46:	d822      	bhi.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e50:	d007      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005e52:	e01c      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e54:	4b4b      	ldr	r3, [pc, #300]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e58:	4a4a      	ldr	r2, [pc, #296]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e60:	e01c      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	3308      	adds	r3, #8
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 ffb0 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e76:	e011      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7c:	3328      	adds	r3, #40	@ 0x28
 8005e7e:	2100      	movs	r1, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f857 	bl	8006f34 <RCCEx_PLL3_Config>
 8005e86:	4603      	mov	r3, r0
 8005e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ea4:	4b37      	ldr	r3, [pc, #220]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb2:	4a34      	ldr	r2, [pc, #208]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005eb8:	e003      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ed8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d056      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eec:	d033      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005eee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ef2:	d82c      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005ef4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ef8:	d02f      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005efa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005efe:	d826      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f04:	d02b      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005f06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f0a:	d820      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f10:	d012      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005f12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f16:	d81a      	bhi.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d022      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f20:	d115      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f26:	3308      	adds	r3, #8
 8005f28:	2101      	movs	r1, #1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 ff50 	bl	8006dd0 <RCCEx_PLL2_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f36:	e015      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3c:	3328      	adds	r3, #40	@ 0x28
 8005f3e:	2101      	movs	r1, #1
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fff7 	bl	8006f34 <RCCEx_PLL3_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005f4c:	e00a      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f54:	e006      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f56:	bf00      	nop
 8005f58:	e004      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f5a:	bf00      	nop
 8005f5c:	e002      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f5e:	bf00      	nop
 8005f60:	e000      	b.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10d      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f70:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f7a:	4a02      	ldr	r2, [pc, #8]	@ (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f80:	e006      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fa6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d055      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fbc:	d033      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fc2:	d82c      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc8:	d02f      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fce:	d826      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fd4:	d02b      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005fd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005fda:	d820      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe0:	d012      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe6:	d81a      	bhi.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d022      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005fec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ff0:	d115      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fee8 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006006:	e015      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800600c:	3328      	adds	r3, #40	@ 0x28
 800600e:	2101      	movs	r1, #1
 8006010:	4618      	mov	r0, r3
 8006012:	f000 ff8f 	bl	8006f34 <RCCEx_PLL3_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800601c:	e00a      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006024:	e006      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006026:	bf00      	nop
 8006028:	e004      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800602a:	bf00      	nop
 800602c:	e002      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006034:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800603c:	4ba3      	ldr	r3, [pc, #652]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006040:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006048:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800604c:	4a9f      	ldr	r2, [pc, #636]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800604e:	430b      	orrs	r3, r1
 8006050:	6593      	str	r3, [r2, #88]	@ 0x58
 8006052:	e003      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006068:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800606c:	2300      	movs	r3, #0
 800606e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006072:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006076:	460b      	mov	r3, r1
 8006078:	4313      	orrs	r3, r2
 800607a:	d037      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006086:	d00e      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800608c:	d816      	bhi.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d018      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006096:	d111      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006098:	4b8c      	ldr	r3, [pc, #560]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	4a8b      	ldr	r2, [pc, #556]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800609e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060a4:	e00f      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	3308      	adds	r3, #8
 80060ac:	2101      	movs	r1, #1
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fe8e 	bl	8006dd0 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80060ba:	e004      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060c2:	e000      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80060c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060ce:	4b7f      	ldr	r3, [pc, #508]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80060d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060dc:	4a7b      	ldr	r2, [pc, #492]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060de:	430b      	orrs	r3, r1
 80060e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80060e2:	e003      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80060f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060fc:	2300      	movs	r3, #0
 80060fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006102:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006106:	460b      	mov	r3, r1
 8006108:	4313      	orrs	r3, r2
 800610a:	d039      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006112:	2b03      	cmp	r3, #3
 8006114:	d81c      	bhi.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006116:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	08006159 	.word	0x08006159
 8006120:	0800612d 	.word	0x0800612d
 8006124:	0800613b 	.word	0x0800613b
 8006128:	08006159 	.word	0x08006159
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800612c:	4b67      	ldr	r3, [pc, #412]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	4a66      	ldr	r2, [pc, #408]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006138:	e00f      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800613a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613e:	3308      	adds	r3, #8
 8006140:	2102      	movs	r1, #2
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fe44 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800614e:	e004      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006156:	e000      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800615a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006162:	4b5a      	ldr	r3, [pc, #360]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006166:	f023 0103 	bic.w	r1, r3, #3
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006170:	4a56      	ldr	r2, [pc, #344]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006172:	430b      	orrs	r3, r1
 8006174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006176:	e003      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800617c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800618c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006190:	2300      	movs	r3, #0
 8006192:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006196:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800619a:	460b      	mov	r3, r1
 800619c:	4313      	orrs	r3, r2
 800619e:	f000 809f 	beq.w	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061a2:	4b4b      	ldr	r3, [pc, #300]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a4a      	ldr	r2, [pc, #296]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ae:	f7fd f9b5 	bl	800351c <HAL_GetTick>
 80061b2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b6:	e00b      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b8:	f7fd f9b0 	bl	800351c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b64      	cmp	r3, #100	@ 0x64
 80061c6:	d903      	bls.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061ce:	e005      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d0:	4b3f      	ldr	r3, [pc, #252]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0ed      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80061dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d179      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061e4:	4b39      	ldr	r3, [pc, #228]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061f0:	4053      	eors	r3, r2
 80061f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d015      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061fa:	4b34      	ldr	r3, [pc, #208]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006202:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006206:	4b31      	ldr	r3, [pc, #196]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800620a:	4a30      	ldr	r2, [pc, #192]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006210:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006212:	4b2e      	ldr	r3, [pc, #184]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006216:	4a2d      	ldr	r2, [pc, #180]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800621c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800621e:	4a2b      	ldr	r2, [pc, #172]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006220:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006224:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800622e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006232:	d118      	bne.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006234:	f7fd f972 	bl	800351c <HAL_GetTick>
 8006238:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800623c:	e00d      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800623e:	f7fd f96d 	bl	800351c <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006248:	1ad2      	subs	r2, r2, r3
 800624a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800624e:	429a      	cmp	r2, r3
 8006250:	d903      	bls.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006258:	e005      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800625a:	4b1c      	ldr	r3, [pc, #112]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0eb      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800626a:	2b00      	cmp	r3, #0
 800626c:	d129      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800626e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800627a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800627e:	d10e      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006280:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006290:	091a      	lsrs	r2, r3, #4
 8006292:	4b10      	ldr	r3, [pc, #64]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006294:	4013      	ands	r3, r2
 8006296:	4a0d      	ldr	r2, [pc, #52]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006298:	430b      	orrs	r3, r1
 800629a:	6113      	str	r3, [r2, #16]
 800629c:	e005      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800629e:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	4a0a      	ldr	r2, [pc, #40]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062a8:	6113      	str	r3, [r2, #16]
 80062aa:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062ac:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ba:	4a04      	ldr	r2, [pc, #16]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80062bc:	430b      	orrs	r3, r1
 80062be:	6713      	str	r3, [r2, #112]	@ 0x70
 80062c0:	e00e      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80062ca:	e009      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80062cc:	58024400 	.word	0x58024400
 80062d0:	58024800 	.word	0x58024800
 80062d4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f002 0301 	and.w	r3, r2, #1
 80062ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f000 8089 	beq.w	8006414 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006308:	2b28      	cmp	r3, #40	@ 0x28
 800630a:	d86b      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800630c:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	080063ed 	.word	0x080063ed
 8006318:	080063e5 	.word	0x080063e5
 800631c:	080063e5 	.word	0x080063e5
 8006320:	080063e5 	.word	0x080063e5
 8006324:	080063e5 	.word	0x080063e5
 8006328:	080063e5 	.word	0x080063e5
 800632c:	080063e5 	.word	0x080063e5
 8006330:	080063e5 	.word	0x080063e5
 8006334:	080063b9 	.word	0x080063b9
 8006338:	080063e5 	.word	0x080063e5
 800633c:	080063e5 	.word	0x080063e5
 8006340:	080063e5 	.word	0x080063e5
 8006344:	080063e5 	.word	0x080063e5
 8006348:	080063e5 	.word	0x080063e5
 800634c:	080063e5 	.word	0x080063e5
 8006350:	080063e5 	.word	0x080063e5
 8006354:	080063cf 	.word	0x080063cf
 8006358:	080063e5 	.word	0x080063e5
 800635c:	080063e5 	.word	0x080063e5
 8006360:	080063e5 	.word	0x080063e5
 8006364:	080063e5 	.word	0x080063e5
 8006368:	080063e5 	.word	0x080063e5
 800636c:	080063e5 	.word	0x080063e5
 8006370:	080063e5 	.word	0x080063e5
 8006374:	080063ed 	.word	0x080063ed
 8006378:	080063e5 	.word	0x080063e5
 800637c:	080063e5 	.word	0x080063e5
 8006380:	080063e5 	.word	0x080063e5
 8006384:	080063e5 	.word	0x080063e5
 8006388:	080063e5 	.word	0x080063e5
 800638c:	080063e5 	.word	0x080063e5
 8006390:	080063e5 	.word	0x080063e5
 8006394:	080063ed 	.word	0x080063ed
 8006398:	080063e5 	.word	0x080063e5
 800639c:	080063e5 	.word	0x080063e5
 80063a0:	080063e5 	.word	0x080063e5
 80063a4:	080063e5 	.word	0x080063e5
 80063a8:	080063e5 	.word	0x080063e5
 80063ac:	080063e5 	.word	0x080063e5
 80063b0:	080063e5 	.word	0x080063e5
 80063b4:	080063ed 	.word	0x080063ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	3308      	adds	r3, #8
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fd05 	bl	8006dd0 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063cc:	e00f      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	3328      	adds	r3, #40	@ 0x28
 80063d4:	2101      	movs	r1, #1
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fdac 	bl	8006f34 <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063f6:	4bbf      	ldr	r3, [pc, #764]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006404:	4abb      	ldr	r2, [pc, #748]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006406:	430b      	orrs	r3, r1
 8006408:	6553      	str	r3, [r2, #84]	@ 0x54
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f002 0302 	and.w	r3, r2, #2
 8006420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800642a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d041      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800643a:	2b05      	cmp	r3, #5
 800643c:	d824      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800643e:	a201      	add	r2, pc, #4	@ (adr r2, 8006444 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006491 	.word	0x08006491
 8006448:	0800645d 	.word	0x0800645d
 800644c:	08006473 	.word	0x08006473
 8006450:	08006491 	.word	0x08006491
 8006454:	08006491 	.word	0x08006491
 8006458:	08006491 	.word	0x08006491
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800645c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006460:	3308      	adds	r3, #8
 8006462:	2101      	movs	r1, #1
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fcb3 	bl	8006dd0 <RCCEx_PLL2_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006470:	e00f      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	3328      	adds	r3, #40	@ 0x28
 8006478:	2101      	movs	r1, #1
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fd5a 	bl	8006f34 <RCCEx_PLL3_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006486:	e004      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800649a:	4b96      	ldr	r3, [pc, #600]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800649c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800649e:	f023 0107 	bic.w	r1, r3, #7
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064a8:	4a92      	ldr	r2, [pc, #584]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064aa:	430b      	orrs	r3, r1
 80064ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80064ae:	e003      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f002 0304 	and.w	r3, r2, #4
 80064c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4313      	orrs	r3, r2
 80064d6:	d044      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064e0:	2b05      	cmp	r3, #5
 80064e2:	d825      	bhi.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80064e4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ec <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80064e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ea:	bf00      	nop
 80064ec:	08006539 	.word	0x08006539
 80064f0:	08006505 	.word	0x08006505
 80064f4:	0800651b 	.word	0x0800651b
 80064f8:	08006539 	.word	0x08006539
 80064fc:	08006539 	.word	0x08006539
 8006500:	08006539 	.word	0x08006539
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006508:	3308      	adds	r3, #8
 800650a:	2101      	movs	r1, #1
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fc5f 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006518:	e00f      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800651a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651e:	3328      	adds	r3, #40	@ 0x28
 8006520:	2101      	movs	r1, #1
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fd06 	bl	8006f34 <RCCEx_PLL3_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800652e:	e004      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006536:	e000      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800653a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006542:	4b6c      	ldr	r3, [pc, #432]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006546:	f023 0107 	bic.w	r1, r3, #7
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006552:	4a68      	ldr	r2, [pc, #416]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006554:	430b      	orrs	r3, r1
 8006556:	6593      	str	r3, [r2, #88]	@ 0x58
 8006558:	e003      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800655e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f002 0320 	and.w	r3, r2, #32
 800656e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006572:	2300      	movs	r3, #0
 8006574:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800657c:	460b      	mov	r3, r1
 800657e:	4313      	orrs	r3, r2
 8006580:	d055      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800658e:	d033      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006590:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006594:	d82c      	bhi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800659a:	d02f      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800659c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a0:	d826      	bhi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065a6:	d02b      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80065a8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80065ac:	d820      	bhi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065b2:	d012      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80065b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065b8:	d81a      	bhi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d022      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80065be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065c2:	d115      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c8:	3308      	adds	r3, #8
 80065ca:	2100      	movs	r1, #0
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fbff 	bl	8006dd0 <RCCEx_PLL2_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065d8:	e015      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065de:	3328      	adds	r3, #40	@ 0x28
 80065e0:	2102      	movs	r1, #2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fca6 	bl	8006f34 <RCCEx_PLL3_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80065ee:	e00a      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065f6:	e006      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065f8:	bf00      	nop
 80065fa:	e004      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80065fc:	bf00      	nop
 80065fe:	e002      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006604:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10b      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800660e:	4b39      	ldr	r3, [pc, #228]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006612:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661e:	4a35      	ldr	r2, [pc, #212]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006620:	430b      	orrs	r3, r1
 8006622:	6553      	str	r3, [r2, #84]	@ 0x54
 8006624:	e003      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800662a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800663a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800663e:	2300      	movs	r3, #0
 8006640:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006644:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006648:	460b      	mov	r3, r1
 800664a:	4313      	orrs	r3, r2
 800664c:	d058      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006656:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800665a:	d033      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800665c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006660:	d82c      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006666:	d02f      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666c:	d826      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800666e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006672:	d02b      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006674:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006678:	d820      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800667a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800667e:	d012      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006684:	d81a      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d022      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800668e:	d115      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006694:	3308      	adds	r3, #8
 8006696:	2100      	movs	r1, #0
 8006698:	4618      	mov	r0, r3
 800669a:	f000 fb99 	bl	8006dd0 <RCCEx_PLL2_Config>
 800669e:	4603      	mov	r3, r0
 80066a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066a4:	e015      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066aa:	3328      	adds	r3, #40	@ 0x28
 80066ac:	2102      	movs	r1, #2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fc40 	bl	8006f34 <RCCEx_PLL3_Config>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80066ba:	e00a      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066c2:	e006      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066c4:	bf00      	nop
 80066c6:	e004      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066c8:	bf00      	nop
 80066ca:	e002      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066cc:	bf00      	nop
 80066ce:	e000      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80066d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10e      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066da:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066de:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80066ea:	4a02      	ldr	r2, [pc, #8]	@ (80066f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80066f2:	bf00      	nop
 80066f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800670c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006710:	2300      	movs	r3, #0
 8006712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006716:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800671a:	460b      	mov	r3, r1
 800671c:	4313      	orrs	r3, r2
 800671e:	d055      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006724:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006728:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800672c:	d033      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800672e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006732:	d82c      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006738:	d02f      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800673a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673e:	d826      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006740:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006744:	d02b      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006746:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800674a:	d820      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800674c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006750:	d012      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006756:	d81a      	bhi.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006758:	2b00      	cmp	r3, #0
 800675a:	d022      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800675c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006760:	d115      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	3308      	adds	r3, #8
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fb30 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006776:	e015      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	3328      	adds	r3, #40	@ 0x28
 800677e:	2102      	movs	r1, #2
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fbd7 	bl	8006f34 <RCCEx_PLL3_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800678c:	e00a      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006794:	e006      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006796:	bf00      	nop
 8006798:	e004      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800679a:	bf00      	nop
 800679c:	e002      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800679e:	bf00      	nop
 80067a0:	e000      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80067a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80067ac:	4ba1      	ldr	r3, [pc, #644]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80067b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067bc:	4a9d      	ldr	r2, [pc, #628]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067c2:	e003      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80067cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f002 0308 	and.w	r3, r2, #8
 80067d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067dc:	2300      	movs	r3, #0
 80067de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80067e2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80067e6:	460b      	mov	r3, r1
 80067e8:	4313      	orrs	r3, r2
 80067ea:	d01e      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067f8:	d10c      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	3328      	adds	r3, #40	@ 0x28
 8006800:	2102      	movs	r1, #2
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fb96 	bl	8006f34 <RCCEx_PLL3_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006814:	4b87      	ldr	r3, [pc, #540]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006818:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006824:	4a83      	ldr	r2, [pc, #524]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006826:	430b      	orrs	r3, r1
 8006828:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f002 0310 	and.w	r3, r2, #16
 8006836:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800683a:	2300      	movs	r3, #0
 800683c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006840:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006844:	460b      	mov	r3, r1
 8006846:	4313      	orrs	r3, r2
 8006848:	d01e      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006856:	d10c      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685c:	3328      	adds	r3, #40	@ 0x28
 800685e:	2102      	movs	r1, #2
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fb67 	bl	8006f34 <RCCEx_PLL3_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006872:	4b70      	ldr	r3, [pc, #448]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006876:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006882:	4a6c      	ldr	r2, [pc, #432]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006884:	430b      	orrs	r3, r1
 8006886:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006898:	2300      	movs	r3, #0
 800689a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800689e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d03e      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80068a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068b4:	d022      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80068b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ba:	d81b      	bhi.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80068c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c4:	d00b      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80068c6:	e015      	b.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068cc:	3308      	adds	r3, #8
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fa7d 	bl	8006dd0 <RCCEx_PLL2_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068dc:	e00f      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	3328      	adds	r3, #40	@ 0x28
 80068e4:	2102      	movs	r1, #2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fb24 	bl	8006f34 <RCCEx_PLL3_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80068f2:	e004      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80068fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006906:	4b4b      	ldr	r3, [pc, #300]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006916:	4a47      	ldr	r2, [pc, #284]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006918:	430b      	orrs	r3, r1
 800691a:	6593      	str	r3, [r2, #88]	@ 0x58
 800691c:	e003      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006932:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006934:	2300      	movs	r3, #0
 8006936:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006938:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800693c:	460b      	mov	r3, r1
 800693e:	4313      	orrs	r3, r2
 8006940:	d03b      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800694e:	d01f      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006950:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006954:	d818      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800695a:	d003      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800695c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006960:	d007      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006962:	e011      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006964:	4b33      	ldr	r3, [pc, #204]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006968:	4a32      	ldr	r2, [pc, #200]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800696a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800696e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006970:	e00f      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	3328      	adds	r3, #40	@ 0x28
 8006978:	2101      	movs	r1, #1
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fada 	bl	8006f34 <RCCEx_PLL3_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006986:	e004      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800698e:	e000      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800699a:	4b26      	ldr	r3, [pc, #152]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069aa:	4a22      	ldr	r2, [pc, #136]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80069b0:	e003      	b.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80069ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80069c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80069c8:	2300      	movs	r3, #0
 80069ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80069cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80069d0:	460b      	mov	r3, r1
 80069d2:	4313      	orrs	r3, r2
 80069d4:	d034      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80069e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e4:	d007      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80069e6:	e011      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e8:	4b12      	ldr	r3, [pc, #72]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	4a11      	ldr	r2, [pc, #68]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80069ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069f4:	e00e      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	3308      	adds	r3, #8
 80069fc:	2102      	movs	r1, #2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f9e6 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006a0a:	e003      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10d      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006a1c:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a20:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a2a:	4a02      	ldr	r2, [pc, #8]	@ (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a30:	e006      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006a32:	bf00      	nop
 8006a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a4e:	2300      	movs	r3, #0
 8006a50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a52:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006a56:	460b      	mov	r3, r1
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	d00c      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	3328      	adds	r3, #40	@ 0x28
 8006a62:	2102      	movs	r1, #2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fa65 	bl	8006f34 <RCCEx_PLL3_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a82:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a84:	2300      	movs	r3, #0
 8006a86:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	d038      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a9e:	d018      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006aa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aa4:	d811      	bhi.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aaa:	d014      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d80b      	bhi.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d011      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aba:	d106      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006abc:	4bc3      	ldr	r3, [pc, #780]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac0:	4ac2      	ldr	r2, [pc, #776]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006ac8:	e008      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ae4:	4bb9      	ldr	r3, [pc, #740]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006af4:	4ab5      	ldr	r2, [pc, #724]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006af6:	430b      	orrs	r3, r1
 8006af8:	6553      	str	r3, [r2, #84]	@ 0x54
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b12:	2300      	movs	r3, #0
 8006b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b20:	4baa      	ldr	r3, [pc, #680]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2e:	4aa7      	ldr	r2, [pc, #668]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b30:	430b      	orrs	r3, r1
 8006b32:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006b40:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b42:	2300      	movs	r3, #0
 8006b44:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d00a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006b50:	4b9e      	ldr	r3, [pc, #632]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b60:	4a9a      	ldr	r2, [pc, #616]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b62:	430b      	orrs	r3, r1
 8006b64:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b74:	2300      	movs	r3, #0
 8006b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b78:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b82:	4b92      	ldr	r3, [pc, #584]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b86:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b90:	4a8e      	ldr	r2, [pc, #568]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b92:	430b      	orrs	r3, r1
 8006b94:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006bac:	460b      	mov	r3, r1
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	d00e      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bb2:	4b86      	ldr	r3, [pc, #536]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	4a85      	ldr	r2, [pc, #532]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bbc:	6113      	str	r3, [r2, #16]
 8006bbe:	4b83      	ldr	r3, [pc, #524]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bc0:	6919      	ldr	r1, [r3, #16]
 8006bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006bca:	4a80      	ldr	r2, [pc, #512]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bde:	2300      	movs	r3, #0
 8006be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006be2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006be6:	460b      	mov	r3, r1
 8006be8:	4313      	orrs	r3, r2
 8006bea:	d009      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006bec:	4b77      	ldr	r3, [pc, #476]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfa:	4a74      	ldr	r2, [pc, #464]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006bfc:	430b      	orrs	r3, r1
 8006bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c0e:	2300      	movs	r3, #0
 8006c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c16:	460b      	mov	r3, r1
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c1c:	4b6b      	ldr	r3, [pc, #428]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c20:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c2c:	4a67      	ldr	r2, [pc, #412]	@ (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	d011      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	3308      	adds	r3, #8
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f8ba 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	6239      	str	r1, [r7, #32]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c84:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	d011      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	3308      	adds	r3, #8
 8006c94:	2101      	movs	r1, #1
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f89a 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	61b9      	str	r1, [r7, #24]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	d011      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 f87a 	bl	8006dd0 <RCCEx_PLL2_Config>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	6139      	str	r1, [r7, #16]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d011      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	3328      	adds	r3, #40	@ 0x28
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 f90c 	bl	8006f34 <RCCEx_PLL3_Config>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	60fb      	str	r3, [r7, #12]
 8006d44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	d011      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	3328      	adds	r3, #40	@ 0x28
 8006d54:	2101      	movs	r1, #1
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 f8ec 	bl	8006f34 <RCCEx_PLL3_Config>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	6039      	str	r1, [r7, #0]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	d011      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d92:	3328      	adds	r3, #40	@ 0x28
 8006d94:	2102      	movs	r1, #2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 f8cc 	bl	8006f34 <RCCEx_PLL3_Config>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006db2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dcc:	58024400 	.word	0x58024400

08006dd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dde:	4b53      	ldr	r3, [pc, #332]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d101      	bne.n	8006dee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e099      	b.n	8006f22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006dee:	4b4f      	ldr	r3, [pc, #316]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a4e      	ldr	r2, [pc, #312]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006df4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfa:	f7fc fb8f 	bl	800351c <HAL_GetTick>
 8006dfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e00:	e008      	b.n	8006e14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e02:	f7fc fb8b 	bl	800351c <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e086      	b.n	8006f22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e14:	4b45      	ldr	r3, [pc, #276]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f0      	bne.n	8006e02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e20:	4b42      	ldr	r3, [pc, #264]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	493f      	ldr	r1, [pc, #252]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	025b      	lsls	r3, r3, #9
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	061b      	lsls	r3, r3, #24
 8006e60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e64:	4931      	ldr	r1, [pc, #196]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e6a:	4b30      	ldr	r3, [pc, #192]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	492d      	ldr	r1, [pc, #180]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	f023 0220 	bic.w	r2, r3, #32
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	4928      	ldr	r1, [pc, #160]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e8e:	4b27      	ldr	r3, [pc, #156]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	4a26      	ldr	r2, [pc, #152]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e94:	f023 0310 	bic.w	r3, r3, #16
 8006e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e9a:	4b24      	ldr	r3, [pc, #144]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e9e:	4b24      	ldr	r3, [pc, #144]	@ (8006f30 <RCCEx_PLL2_Config+0x160>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	69d2      	ldr	r2, [r2, #28]
 8006ea6:	00d2      	lsls	r2, r2, #3
 8006ea8:	4920      	ldr	r1, [pc, #128]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006eae:	4b1f      	ldr	r3, [pc, #124]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006eb4:	f043 0310 	orr.w	r3, r3, #16
 8006eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006ec6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006eca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ecc:	e00f      	b.n	8006eee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d106      	bne.n	8006ee2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ed4:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	4a14      	ldr	r2, [pc, #80]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ee0:	e005      	b.n	8006eee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ee2:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee6:	4a11      	ldr	r2, [pc, #68]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006ee8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006eee:	4b0f      	ldr	r3, [pc, #60]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006ef4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006efa:	f7fc fb0f 	bl	800351c <HAL_GetTick>
 8006efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f00:	e008      	b.n	8006f14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f02:	f7fc fb0b 	bl	800351c <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e006      	b.n	8006f22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <RCCEx_PLL2_Config+0x15c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	ffff0007 	.word	0xffff0007

08006f34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f42:	4b53      	ldr	r3, [pc, #332]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d101      	bne.n	8006f52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e099      	b.n	8007086 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f52:	4b4f      	ldr	r3, [pc, #316]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a4e      	ldr	r2, [pc, #312]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f5e:	f7fc fadd 	bl	800351c <HAL_GetTick>
 8006f62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f64:	e008      	b.n	8006f78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f66:	f7fc fad9 	bl	800351c <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e086      	b.n	8007086 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f78:	4b45      	ldr	r3, [pc, #276]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1f0      	bne.n	8006f66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f84:	4b42      	ldr	r3, [pc, #264]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	051b      	lsls	r3, r3, #20
 8006f92:	493f      	ldr	r1, [pc, #252]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	025b      	lsls	r3, r3, #9
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	041b      	lsls	r3, r3, #16
 8006fb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	061b      	lsls	r3, r3, #24
 8006fc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fc8:	4931      	ldr	r1, [pc, #196]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fce:	4b30      	ldr	r3, [pc, #192]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	492d      	ldr	r1, [pc, #180]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	4928      	ldr	r1, [pc, #160]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ff2:	4b27      	ldr	r3, [pc, #156]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff6:	4a26      	ldr	r2, [pc, #152]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8006ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ffe:	4b24      	ldr	r3, [pc, #144]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8007000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007002:	4b24      	ldr	r3, [pc, #144]	@ (8007094 <RCCEx_PLL3_Config+0x160>)
 8007004:	4013      	ands	r3, r2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	69d2      	ldr	r2, [r2, #28]
 800700a:	00d2      	lsls	r2, r2, #3
 800700c:	4920      	ldr	r1, [pc, #128]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007012:	4b1f      	ldr	r3, [pc, #124]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	4a1e      	ldr	r2, [pc, #120]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8007018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800701c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d106      	bne.n	8007032 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007024:	4b1a      	ldr	r3, [pc, #104]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8007026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007028:	4a19      	ldr	r2, [pc, #100]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 800702a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800702e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007030:	e00f      	b.n	8007052 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d106      	bne.n	8007046 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007038:	4b15      	ldr	r3, [pc, #84]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	4a14      	ldr	r2, [pc, #80]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 800703e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007044:	e005      	b.n	8007052 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007046:	4b12      	ldr	r3, [pc, #72]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	4a11      	ldr	r2, [pc, #68]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 800704c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007050:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007052:	4b0f      	ldr	r3, [pc, #60]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a0e      	ldr	r2, [pc, #56]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800705c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800705e:	f7fc fa5d 	bl	800351c <HAL_GetTick>
 8007062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007064:	e008      	b.n	8007078 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007066:	f7fc fa59 	bl	800351c <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b02      	cmp	r3, #2
 8007072:	d901      	bls.n	8007078 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e006      	b.n	8007086 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007078:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <RCCEx_PLL3_Config+0x15c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	58024400 	.word	0x58024400
 8007094:	ffff0007 	.word	0xffff0007

08007098 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e10f      	b.n	80072ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a87      	ldr	r2, [pc, #540]	@ (80072d4 <HAL_SPI_Init+0x23c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00f      	beq.n	80070da <HAL_SPI_Init+0x42>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a86      	ldr	r2, [pc, #536]	@ (80072d8 <HAL_SPI_Init+0x240>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00a      	beq.n	80070da <HAL_SPI_Init+0x42>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a84      	ldr	r2, [pc, #528]	@ (80072dc <HAL_SPI_Init+0x244>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d005      	beq.n	80070da <HAL_SPI_Init+0x42>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	2b0f      	cmp	r3, #15
 80070d4:	d901      	bls.n	80070da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0f7      	b.n	80072ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fe2e 	bl	8007d3c <SPI_GetPacketSize>
 80070e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a7b      	ldr	r2, [pc, #492]	@ (80072d4 <HAL_SPI_Init+0x23c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00c      	beq.n	8007106 <HAL_SPI_Init+0x6e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a79      	ldr	r2, [pc, #484]	@ (80072d8 <HAL_SPI_Init+0x240>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d007      	beq.n	8007106 <HAL_SPI_Init+0x6e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a78      	ldr	r2, [pc, #480]	@ (80072dc <HAL_SPI_Init+0x244>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d002      	beq.n	8007106 <HAL_SPI_Init+0x6e>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b08      	cmp	r3, #8
 8007104:	d811      	bhi.n	800712a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800710a:	4a72      	ldr	r2, [pc, #456]	@ (80072d4 <HAL_SPI_Init+0x23c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d009      	beq.n	8007124 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a70      	ldr	r2, [pc, #448]	@ (80072d8 <HAL_SPI_Init+0x240>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d004      	beq.n	8007124 <HAL_SPI_Init+0x8c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a6f      	ldr	r2, [pc, #444]	@ (80072dc <HAL_SPI_Init+0x244>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d104      	bne.n	800712e <HAL_SPI_Init+0x96>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b10      	cmp	r3, #16
 8007128:	d901      	bls.n	800712e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e0cd      	b.n	80072ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fb fdee 	bl	8002d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800716a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007174:	d119      	bne.n	80071aa <HAL_SPI_Init+0x112>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800717e:	d103      	bne.n	8007188 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10c      	bne.n	80071aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007198:	d107      	bne.n	80071aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00f      	beq.n	80071d6 <HAL_SPI_Init+0x13e>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b06      	cmp	r3, #6
 80071bc:	d90b      	bls.n	80071d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e007      	b.n	80071e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ee:	431a      	orrs	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f8:	ea42 0103 	orr.w	r1, r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	431a      	orrs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007246:	ea42 0103 	orr.w	r1, r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d113      	bne.n	8007286 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007270:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007284:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40013000 	.word	0x40013000
 80072d8:	40003800 	.word	0x40003800
 80072dc:	40003c00 	.word	0x40003c00

080072e0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b088      	sub	sp, #32
 80072e4:	af02      	add	r7, sp, #8
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3320      	adds	r3, #32
 80072f6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072f8:	f7fc f910 	bl	800351c <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b01      	cmp	r3, #1
 8007308:	d001      	beq.n	800730e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800730a:	2302      	movs	r3, #2
 800730c:	e1d1      	b.n	80076b2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <HAL_SPI_Transmit+0x3a>
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e1c9      	b.n	80076b2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_SPI_Transmit+0x4c>
 8007328:	2302      	movs	r3, #2
 800732a:	e1c2      	b.n	80076b2 <HAL_SPI_Transmit+0x3d2>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2203      	movs	r2, #3
 8007338:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	88fa      	ldrh	r2, [r7, #6]
 800734e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	88fa      	ldrh	r2, [r7, #6]
 8007356:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007384:	d108      	bne.n	8007398 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e009      	b.n	80073ac <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80073aa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	4b96      	ldr	r3, [pc, #600]	@ (800760c <HAL_SPI_Transmit+0x32c>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	88f9      	ldrh	r1, [r7, #6]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	430b      	orrs	r3, r1
 80073be:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073d8:	d107      	bne.n	80073ea <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	2b0f      	cmp	r3, #15
 80073f0:	d947      	bls.n	8007482 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80073f2:	e03f      	b.n	8007474 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d114      	bne.n	800742c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007412:	1d1a      	adds	r2, r3, #4
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800741e:	b29b      	uxth	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800742a:	e023      	b.n	8007474 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800742c:	f7fc f876 	bl	800351c <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d803      	bhi.n	8007444 <HAL_SPI_Transmit+0x164>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d102      	bne.n	800744a <HAL_SPI_Transmit+0x16a>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d114      	bne.n	8007474 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 fba8 	bl	8007ba0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007456:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e11e      	b.n	80076b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800747a:	b29b      	uxth	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1b9      	bne.n	80073f4 <HAL_SPI_Transmit+0x114>
 8007480:	e0f1      	b.n	8007666 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	2b07      	cmp	r3, #7
 8007488:	f240 80e6 	bls.w	8007658 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800748c:	e05d      	b.n	800754a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b02      	cmp	r3, #2
 800749a:	d132      	bne.n	8007502 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d918      	bls.n	80074da <HAL_SPI_Transmit+0x1fa>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d014      	beq.n	80074da <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3b02      	subs	r3, #2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80074d8:	e037      	b.n	800754a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e8:	1c9a      	adds	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8007500:	e023      	b.n	800754a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007502:	f7fc f80b 	bl	800351c <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d803      	bhi.n	800751a <HAL_SPI_Transmit+0x23a>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d102      	bne.n	8007520 <HAL_SPI_Transmit+0x240>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d114      	bne.n	800754a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fb3d 	bl	8007ba0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800752c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e0b3      	b.n	80076b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d19b      	bne.n	800748e <HAL_SPI_Transmit+0x1ae>
 8007556:	e086      	b.n	8007666 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f003 0302 	and.w	r3, r3, #2
 8007562:	2b02      	cmp	r3, #2
 8007564:	d154      	bne.n	8007610 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d918      	bls.n	80075a4 <HAL_SPI_Transmit+0x2c4>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d914      	bls.n	80075a4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800758a:	1d1a      	adds	r2, r3, #4
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b04      	subs	r3, #4
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80075a2:	e059      	b.n	8007658 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d917      	bls.n	80075e0 <HAL_SPI_Transmit+0x300>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d013      	beq.n	80075e0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075bc:	881a      	ldrh	r2, [r3, #0]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075c6:	1c9a      	adds	r2, r3, #2
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b02      	subs	r3, #2
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80075de:	e03b      	b.n	8007658 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3320      	adds	r3, #32
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800760a:	e025      	b.n	8007658 <HAL_SPI_Transmit+0x378>
 800760c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007610:	f7fb ff84 	bl	800351c <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d803      	bhi.n	8007628 <HAL_SPI_Transmit+0x348>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d102      	bne.n	800762e <HAL_SPI_Transmit+0x34e>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d114      	bne.n	8007658 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fab6 	bl	8007ba0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800763a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007654:	2303      	movs	r3, #3
 8007656:	e02c      	b.n	80076b2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	f47f af79 	bne.w	8007558 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	2200      	movs	r2, #0
 800766e:	2108      	movs	r1, #8
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fb35 	bl	8007ce0 <SPI_WaitOnFlagUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007682:	f043 0220 	orr.w	r2, r3, #32
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fa87 	bl	8007ba0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80076b0:	2300      	movs	r3, #0
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop

080076bc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4613      	mov	r3, r2
 80076ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3301      	adds	r3, #1
 80076d6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3330      	adds	r3, #48	@ 0x30
 80076de:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076e0:	f7fb ff1c 	bl	800351c <HAL_GetTick>
 80076e4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d001      	beq.n	80076f6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
 80076f4:	e250      	b.n	8007b98 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_SPI_Receive+0x46>
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e248      	b.n	8007b98 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_SPI_Receive+0x58>
 8007710:	2302      	movs	r3, #2
 8007712:	e241      	b.n	8007b98 <HAL_SPI_Receive+0x4dc>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2204      	movs	r2, #4
 8007720:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	88fa      	ldrh	r2, [r7, #6]
 800773e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800776c:	d108      	bne.n	8007780 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	e009      	b.n	8007794 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007792:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	4b95      	ldr	r3, [pc, #596]	@ (80079f0 <HAL_SPI_Receive+0x334>)
 800779c:	4013      	ands	r3, r2
 800779e:	88f9      	ldrh	r1, [r7, #6]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	430b      	orrs	r3, r1
 80077a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077c0:	d107      	bne.n	80077d2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	2b0f      	cmp	r3, #15
 80077d8:	d96c      	bls.n	80078b4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80077da:	e064      	b.n	80078a6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d114      	bne.n	800781c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80077fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007802:	1d1a      	adds	r2, r3, #4
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800781a:	e044      	b.n	80078a6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007822:	b29b      	uxth	r3, r3
 8007824:	8bfa      	ldrh	r2, [r7, #30]
 8007826:	429a      	cmp	r2, r3
 8007828:	d919      	bls.n	800785e <HAL_SPI_Receive+0x1a2>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d014      	beq.n	800785e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800783c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800783e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007844:	1d1a      	adds	r2, r3, #4
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007850:	b29b      	uxth	r3, r3
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800785c:	e023      	b.n	80078a6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800785e:	f7fb fe5d 	bl	800351c <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d803      	bhi.n	8007876 <HAL_SPI_Receive+0x1ba>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d102      	bne.n	800787c <HAL_SPI_Receive+0x1c0>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d114      	bne.n	80078a6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 f98f 	bl	8007ba0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007888:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e178      	b.n	8007b98 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d194      	bne.n	80077dc <HAL_SPI_Receive+0x120>
 80078b2:	e15e      	b.n	8007b72 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	2b07      	cmp	r3, #7
 80078ba:	f240 8153 	bls.w	8007b64 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80078be:	e08f      	b.n	80079e0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d114      	bne.n	8007900 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	8812      	ldrh	r2, [r2, #0]
 80078de:	b292      	uxth	r2, r2
 80078e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078e6:	1c9a      	adds	r2, r3, #2
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078fe:	e06f      	b.n	80079e0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007906:	b29b      	uxth	r3, r3
 8007908:	8bfa      	ldrh	r2, [r7, #30]
 800790a:	429a      	cmp	r2, r3
 800790c:	d924      	bls.n	8007958 <HAL_SPI_Receive+0x29c>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01f      	beq.n	8007958 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	8812      	ldrh	r2, [r2, #0]
 8007920:	b292      	uxth	r2, r2
 8007922:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007928:	1c9a      	adds	r2, r3, #2
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	8812      	ldrh	r2, [r2, #0]
 8007936:	b292      	uxth	r2, r2
 8007938:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800793e:	1c9a      	adds	r2, r3, #2
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b02      	subs	r3, #2
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007956:	e043      	b.n	80079e0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b01      	cmp	r3, #1
 8007962:	d119      	bne.n	8007998 <HAL_SPI_Receive+0x2dc>
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d014      	beq.n	8007998 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	8812      	ldrh	r2, [r2, #0]
 8007976:	b292      	uxth	r2, r2
 8007978:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29a      	uxth	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007996:	e023      	b.n	80079e0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007998:	f7fb fdc0 	bl	800351c <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d803      	bhi.n	80079b0 <HAL_SPI_Receive+0x2f4>
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_Receive+0x2fa>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d114      	bne.n	80079e0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 f8f2 	bl	8007ba0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0db      	b.n	8007b98 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f af69 	bne.w	80078c0 <HAL_SPI_Receive+0x204>
 80079ee:	e0c0      	b.n	8007b72 <HAL_SPI_Receive+0x4b6>
 80079f0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d117      	bne.n	8007a3a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a16:	7812      	ldrb	r2, [r2, #0]
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a38:	e094      	b.n	8007b64 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	8bfa      	ldrh	r2, [r7, #30]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d946      	bls.n	8007ad6 <HAL_SPI_Receive+0x41a>
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d041      	beq.n	8007ad6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a5e:	7812      	ldrb	r2, [r2, #0]
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a68:	1c5a      	adds	r2, r3, #1
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7a:	7812      	ldrb	r2, [r2, #0]
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b04      	subs	r3, #4
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ad4:	e046      	b.n	8007b64 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d81c      	bhi.n	8007b1c <HAL_SPI_Receive+0x460>
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d017      	beq.n	8007b1c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007af8:	7812      	ldrb	r2, [r2, #0]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b1a:	e023      	b.n	8007b64 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b1c:	f7fb fcfe 	bl	800351c <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d803      	bhi.n	8007b34 <HAL_SPI_Receive+0x478>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b32:	d102      	bne.n	8007b3a <HAL_SPI_Receive+0x47e>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d114      	bne.n	8007b64 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f000 f830 	bl	8007ba0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e019      	b.n	8007b98 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f47f af41 	bne.w	80079f4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f814 	bl	8007ba0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e000      	b.n	8007b98 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8007b96:	2300      	movs	r3, #0
  }
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3720      	adds	r7, #32
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0208 	orr.w	r2, r2, #8
 8007bbe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0210 	orr.w	r2, r2, #16
 8007bce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0201 	bic.w	r2, r2, #1
 8007bde:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6919      	ldr	r1, [r3, #16]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b3c      	ldr	r3, [pc, #240]	@ (8007cdc <SPI_CloseTransfer+0x13c>)
 8007bec:	400b      	ands	r3, r1
 8007bee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007bfe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d014      	beq.n	8007c36 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f003 0320 	and.w	r3, r3, #32
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00f      	beq.n	8007c36 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c1c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f042 0220 	orr.w	r2, r2, #32
 8007c34:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d014      	beq.n	8007c6c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00f      	beq.n	8007c6c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c52:	f043 0204 	orr.w	r2, r3, #4
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c6a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00f      	beq.n	8007c96 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c7c:	f043 0201 	orr.w	r2, r3, #1
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699a      	ldr	r2, [r3, #24]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c94:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00f      	beq.n	8007cc0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca6:	f043 0208 	orr.w	r2, r3, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cbe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	fffffc90 	.word	0xfffffc90

08007ce0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	4613      	mov	r3, r2
 8007cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007cf0:	e010      	b.n	8007d14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cf2:	f7fb fc13 	bl	800351c <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d803      	bhi.n	8007d0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d102      	bne.n	8007d10 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e00f      	b.n	8007d34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d0df      	beq.n	8007cf2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	3307      	adds	r3, #7
 8007d5a:	08db      	lsrs	r3, r3, #3
 8007d5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <__cvt>:
 8007d72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d74:	ed2d 8b02 	vpush	{d8}
 8007d78:	eeb0 8b40 	vmov.f64	d8, d0
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	4617      	mov	r7, r2
 8007d80:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d84:	ee18 2a90 	vmov	r2, s17
 8007d88:	f025 0520 	bic.w	r5, r5, #32
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	bfb6      	itet	lt
 8007d90:	222d      	movlt	r2, #45	@ 0x2d
 8007d92:	2200      	movge	r2, #0
 8007d94:	eeb1 8b40 	vneglt.f64	d8, d0
 8007d98:	2d46      	cmp	r5, #70	@ 0x46
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	d004      	beq.n	8007daa <__cvt+0x38>
 8007da0:	2d45      	cmp	r5, #69	@ 0x45
 8007da2:	d100      	bne.n	8007da6 <__cvt+0x34>
 8007da4:	3401      	adds	r4, #1
 8007da6:	2102      	movs	r1, #2
 8007da8:	e000      	b.n	8007dac <__cvt+0x3a>
 8007daa:	2103      	movs	r1, #3
 8007dac:	ab03      	add	r3, sp, #12
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	ab02      	add	r3, sp, #8
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	4622      	mov	r2, r4
 8007db6:	4633      	mov	r3, r6
 8007db8:	eeb0 0b48 	vmov.f64	d0, d8
 8007dbc:	f001 f950 	bl	8009060 <_dtoa_r>
 8007dc0:	2d47      	cmp	r5, #71	@ 0x47
 8007dc2:	d114      	bne.n	8007dee <__cvt+0x7c>
 8007dc4:	07fb      	lsls	r3, r7, #31
 8007dc6:	d50a      	bpl.n	8007dde <__cvt+0x6c>
 8007dc8:	1902      	adds	r2, r0, r4
 8007dca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	bf08      	it	eq
 8007dd4:	9203      	streq	r2, [sp, #12]
 8007dd6:	2130      	movs	r1, #48	@ 0x30
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d319      	bcc.n	8007e12 <__cvt+0xa0>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007de2:	1a1b      	subs	r3, r3, r0
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	b005      	add	sp, #20
 8007de8:	ecbd 8b02 	vpop	{d8}
 8007dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dee:	2d46      	cmp	r5, #70	@ 0x46
 8007df0:	eb00 0204 	add.w	r2, r0, r4
 8007df4:	d1e9      	bne.n	8007dca <__cvt+0x58>
 8007df6:	7803      	ldrb	r3, [r0, #0]
 8007df8:	2b30      	cmp	r3, #48	@ 0x30
 8007dfa:	d107      	bne.n	8007e0c <__cvt+0x9a>
 8007dfc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e04:	bf1c      	itt	ne
 8007e06:	f1c4 0401 	rsbne	r4, r4, #1
 8007e0a:	6034      	strne	r4, [r6, #0]
 8007e0c:	6833      	ldr	r3, [r6, #0]
 8007e0e:	441a      	add	r2, r3
 8007e10:	e7db      	b.n	8007dca <__cvt+0x58>
 8007e12:	1c5c      	adds	r4, r3, #1
 8007e14:	9403      	str	r4, [sp, #12]
 8007e16:	7019      	strb	r1, [r3, #0]
 8007e18:	e7de      	b.n	8007dd8 <__cvt+0x66>

08007e1a <__exponent>:
 8007e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	bfba      	itte	lt
 8007e20:	4249      	neglt	r1, r1
 8007e22:	232d      	movlt	r3, #45	@ 0x2d
 8007e24:	232b      	movge	r3, #43	@ 0x2b
 8007e26:	2909      	cmp	r1, #9
 8007e28:	7002      	strb	r2, [r0, #0]
 8007e2a:	7043      	strb	r3, [r0, #1]
 8007e2c:	dd29      	ble.n	8007e82 <__exponent+0x68>
 8007e2e:	f10d 0307 	add.w	r3, sp, #7
 8007e32:	461d      	mov	r5, r3
 8007e34:	270a      	movs	r7, #10
 8007e36:	461a      	mov	r2, r3
 8007e38:	fbb1 f6f7 	udiv	r6, r1, r7
 8007e3c:	fb07 1416 	mls	r4, r7, r6, r1
 8007e40:	3430      	adds	r4, #48	@ 0x30
 8007e42:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007e46:	460c      	mov	r4, r1
 8007e48:	2c63      	cmp	r4, #99	@ 0x63
 8007e4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e4e:	4631      	mov	r1, r6
 8007e50:	dcf1      	bgt.n	8007e36 <__exponent+0x1c>
 8007e52:	3130      	adds	r1, #48	@ 0x30
 8007e54:	1e94      	subs	r4, r2, #2
 8007e56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007e5a:	1c41      	adds	r1, r0, #1
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	42ab      	cmp	r3, r5
 8007e60:	d30a      	bcc.n	8007e78 <__exponent+0x5e>
 8007e62:	f10d 0309 	add.w	r3, sp, #9
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	42ac      	cmp	r4, r5
 8007e6a:	bf88      	it	hi
 8007e6c:	2300      	movhi	r3, #0
 8007e6e:	3302      	adds	r3, #2
 8007e70:	4403      	add	r3, r0
 8007e72:	1a18      	subs	r0, r3, r0
 8007e74:	b003      	add	sp, #12
 8007e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e78:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007e7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007e80:	e7ed      	b.n	8007e5e <__exponent+0x44>
 8007e82:	2330      	movs	r3, #48	@ 0x30
 8007e84:	3130      	adds	r1, #48	@ 0x30
 8007e86:	7083      	strb	r3, [r0, #2]
 8007e88:	70c1      	strb	r1, [r0, #3]
 8007e8a:	1d03      	adds	r3, r0, #4
 8007e8c:	e7f1      	b.n	8007e72 <__exponent+0x58>
	...

08007e90 <_printf_float>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	b08d      	sub	sp, #52	@ 0x34
 8007e96:	460c      	mov	r4, r1
 8007e98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	461f      	mov	r7, r3
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	f000 ffd5 	bl	8008e50 <_localeconv_r>
 8007ea6:	f8d0 b000 	ldr.w	fp, [r0]
 8007eaa:	4658      	mov	r0, fp
 8007eac:	f7f8 fa68 	bl	8000380 <strlen>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007ebc:	6822      	ldr	r2, [r4, #0]
 8007ebe:	9005      	str	r0, [sp, #20]
 8007ec0:	3307      	adds	r3, #7
 8007ec2:	f023 0307 	bic.w	r3, r3, #7
 8007ec6:	f103 0108 	add.w	r1, r3, #8
 8007eca:	f8c8 1000 	str.w	r1, [r8]
 8007ece:	ed93 0b00 	vldr	d0, [r3]
 8007ed2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008130 <_printf_float+0x2a0>
 8007ed6:	eeb0 7bc0 	vabs.f64	d7, d0
 8007eda:	eeb4 7b46 	vcmp.f64	d7, d6
 8007ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007ee6:	dd24      	ble.n	8007f32 <_printf_float+0xa2>
 8007ee8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef0:	d502      	bpl.n	8007ef8 <_printf_float+0x68>
 8007ef2:	232d      	movs	r3, #45	@ 0x2d
 8007ef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ef8:	498f      	ldr	r1, [pc, #572]	@ (8008138 <_printf_float+0x2a8>)
 8007efa:	4b90      	ldr	r3, [pc, #576]	@ (800813c <_printf_float+0x2ac>)
 8007efc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007f00:	bf8c      	ite	hi
 8007f02:	4688      	movhi	r8, r1
 8007f04:	4698      	movls	r8, r3
 8007f06:	f022 0204 	bic.w	r2, r2, #4
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	6022      	str	r2, [r4, #0]
 8007f10:	f04f 0a00 	mov.w	sl, #0
 8007f14:	9700      	str	r7, [sp, #0]
 8007f16:	4633      	mov	r3, r6
 8007f18:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f000 f9d1 	bl	80082c4 <_printf_common>
 8007f22:	3001      	adds	r0, #1
 8007f24:	f040 8089 	bne.w	800803a <_printf_float+0x1aa>
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	b00d      	add	sp, #52	@ 0x34
 8007f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f32:	eeb4 0b40 	vcmp.f64	d0, d0
 8007f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3a:	d709      	bvc.n	8007f50 <_printf_float+0xc0>
 8007f3c:	ee10 3a90 	vmov	r3, s1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bfbc      	itt	lt
 8007f44:	232d      	movlt	r3, #45	@ 0x2d
 8007f46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007f4a:	497d      	ldr	r1, [pc, #500]	@ (8008140 <_printf_float+0x2b0>)
 8007f4c:	4b7d      	ldr	r3, [pc, #500]	@ (8008144 <_printf_float+0x2b4>)
 8007f4e:	e7d5      	b.n	8007efc <_printf_float+0x6c>
 8007f50:	6863      	ldr	r3, [r4, #4]
 8007f52:	1c59      	adds	r1, r3, #1
 8007f54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007f58:	d139      	bne.n	8007fce <_printf_float+0x13e>
 8007f5a:	2306      	movs	r3, #6
 8007f5c:	6063      	str	r3, [r4, #4]
 8007f5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f62:	2300      	movs	r3, #0
 8007f64:	6022      	str	r2, [r4, #0]
 8007f66:	9303      	str	r3, [sp, #12]
 8007f68:	ab0a      	add	r3, sp, #40	@ 0x28
 8007f6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007f6e:	ab09      	add	r3, sp, #36	@ 0x24
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	6861      	ldr	r1, [r4, #4]
 8007f74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f7ff fefa 	bl	8007d72 <__cvt>
 8007f7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007f82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f84:	4680      	mov	r8, r0
 8007f86:	d129      	bne.n	8007fdc <_printf_float+0x14c>
 8007f88:	1cc8      	adds	r0, r1, #3
 8007f8a:	db02      	blt.n	8007f92 <_printf_float+0x102>
 8007f8c:	6863      	ldr	r3, [r4, #4]
 8007f8e:	4299      	cmp	r1, r3
 8007f90:	dd41      	ble.n	8008016 <_printf_float+0x186>
 8007f92:	f1a9 0902 	sub.w	r9, r9, #2
 8007f96:	fa5f f989 	uxtb.w	r9, r9
 8007f9a:	3901      	subs	r1, #1
 8007f9c:	464a      	mov	r2, r9
 8007f9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007fa2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007fa4:	f7ff ff39 	bl	8007e1a <__exponent>
 8007fa8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007faa:	1813      	adds	r3, r2, r0
 8007fac:	2a01      	cmp	r2, #1
 8007fae:	4682      	mov	sl, r0
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	dc02      	bgt.n	8007fba <_printf_float+0x12a>
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	07d2      	lsls	r2, r2, #31
 8007fb8:	d501      	bpl.n	8007fbe <_printf_float+0x12e>
 8007fba:	3301      	adds	r3, #1
 8007fbc:	6123      	str	r3, [r4, #16]
 8007fbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0a6      	beq.n	8007f14 <_printf_float+0x84>
 8007fc6:	232d      	movs	r3, #45	@ 0x2d
 8007fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fcc:	e7a2      	b.n	8007f14 <_printf_float+0x84>
 8007fce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fd2:	d1c4      	bne.n	8007f5e <_printf_float+0xce>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1c2      	bne.n	8007f5e <_printf_float+0xce>
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e7bf      	b.n	8007f5c <_printf_float+0xcc>
 8007fdc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007fe0:	d9db      	bls.n	8007f9a <_printf_float+0x10a>
 8007fe2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007fe6:	d118      	bne.n	800801a <_printf_float+0x18a>
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	6863      	ldr	r3, [r4, #4]
 8007fec:	dd0b      	ble.n	8008006 <_printf_float+0x176>
 8007fee:	6121      	str	r1, [r4, #16]
 8007ff0:	b913      	cbnz	r3, 8007ff8 <_printf_float+0x168>
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	07d0      	lsls	r0, r2, #31
 8007ff6:	d502      	bpl.n	8007ffe <_printf_float+0x16e>
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	440b      	add	r3, r1
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008000:	f04f 0a00 	mov.w	sl, #0
 8008004:	e7db      	b.n	8007fbe <_printf_float+0x12e>
 8008006:	b913      	cbnz	r3, 800800e <_printf_float+0x17e>
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	07d2      	lsls	r2, r2, #31
 800800c:	d501      	bpl.n	8008012 <_printf_float+0x182>
 800800e:	3302      	adds	r3, #2
 8008010:	e7f4      	b.n	8007ffc <_printf_float+0x16c>
 8008012:	2301      	movs	r3, #1
 8008014:	e7f2      	b.n	8007ffc <_printf_float+0x16c>
 8008016:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800801a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800801c:	4299      	cmp	r1, r3
 800801e:	db05      	blt.n	800802c <_printf_float+0x19c>
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	6121      	str	r1, [r4, #16]
 8008024:	07d8      	lsls	r0, r3, #31
 8008026:	d5ea      	bpl.n	8007ffe <_printf_float+0x16e>
 8008028:	1c4b      	adds	r3, r1, #1
 800802a:	e7e7      	b.n	8007ffc <_printf_float+0x16c>
 800802c:	2900      	cmp	r1, #0
 800802e:	bfd4      	ite	le
 8008030:	f1c1 0202 	rsble	r2, r1, #2
 8008034:	2201      	movgt	r2, #1
 8008036:	4413      	add	r3, r2
 8008038:	e7e0      	b.n	8007ffc <_printf_float+0x16c>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	055a      	lsls	r2, r3, #21
 800803e:	d407      	bmi.n	8008050 <_printf_float+0x1c0>
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	4642      	mov	r2, r8
 8008044:	4631      	mov	r1, r6
 8008046:	4628      	mov	r0, r5
 8008048:	47b8      	blx	r7
 800804a:	3001      	adds	r0, #1
 800804c:	d12a      	bne.n	80080a4 <_printf_float+0x214>
 800804e:	e76b      	b.n	8007f28 <_printf_float+0x98>
 8008050:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008054:	f240 80e0 	bls.w	8008218 <_printf_float+0x388>
 8008058:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800805c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	d133      	bne.n	80080ce <_printf_float+0x23e>
 8008066:	4a38      	ldr	r2, [pc, #224]	@ (8008148 <_printf_float+0x2b8>)
 8008068:	2301      	movs	r3, #1
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f af59 	beq.w	8007f28 <_printf_float+0x98>
 8008076:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800807a:	4543      	cmp	r3, r8
 800807c:	db02      	blt.n	8008084 <_printf_float+0x1f4>
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	07d8      	lsls	r0, r3, #31
 8008082:	d50f      	bpl.n	80080a4 <_printf_float+0x214>
 8008084:	9b05      	ldr	r3, [sp, #20]
 8008086:	465a      	mov	r2, fp
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	f43f af4a 	beq.w	8007f28 <_printf_float+0x98>
 8008094:	f04f 0900 	mov.w	r9, #0
 8008098:	f108 38ff 	add.w	r8, r8, #4294967295
 800809c:	f104 0a1a 	add.w	sl, r4, #26
 80080a0:	45c8      	cmp	r8, r9
 80080a2:	dc09      	bgt.n	80080b8 <_printf_float+0x228>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	079b      	lsls	r3, r3, #30
 80080a8:	f100 8107 	bmi.w	80082ba <_printf_float+0x42a>
 80080ac:	68e0      	ldr	r0, [r4, #12]
 80080ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080b0:	4298      	cmp	r0, r3
 80080b2:	bfb8      	it	lt
 80080b4:	4618      	movlt	r0, r3
 80080b6:	e739      	b.n	8007f2c <_printf_float+0x9c>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4652      	mov	r2, sl
 80080bc:	4631      	mov	r1, r6
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	f43f af30 	beq.w	8007f28 <_printf_float+0x98>
 80080c8:	f109 0901 	add.w	r9, r9, #1
 80080cc:	e7e8      	b.n	80080a0 <_printf_float+0x210>
 80080ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	dc3b      	bgt.n	800814c <_printf_float+0x2bc>
 80080d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008148 <_printf_float+0x2b8>)
 80080d6:	2301      	movs	r3, #1
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f43f af22 	beq.w	8007f28 <_printf_float+0x98>
 80080e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80080e8:	ea59 0303 	orrs.w	r3, r9, r3
 80080ec:	d102      	bne.n	80080f4 <_printf_float+0x264>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	07d9      	lsls	r1, r3, #31
 80080f2:	d5d7      	bpl.n	80080a4 <_printf_float+0x214>
 80080f4:	9b05      	ldr	r3, [sp, #20]
 80080f6:	465a      	mov	r2, fp
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b8      	blx	r7
 80080fe:	3001      	adds	r0, #1
 8008100:	f43f af12 	beq.w	8007f28 <_printf_float+0x98>
 8008104:	f04f 0a00 	mov.w	sl, #0
 8008108:	f104 0b1a 	add.w	fp, r4, #26
 800810c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800810e:	425b      	negs	r3, r3
 8008110:	4553      	cmp	r3, sl
 8008112:	dc01      	bgt.n	8008118 <_printf_float+0x288>
 8008114:	464b      	mov	r3, r9
 8008116:	e794      	b.n	8008042 <_printf_float+0x1b2>
 8008118:	2301      	movs	r3, #1
 800811a:	465a      	mov	r2, fp
 800811c:	4631      	mov	r1, r6
 800811e:	4628      	mov	r0, r5
 8008120:	47b8      	blx	r7
 8008122:	3001      	adds	r0, #1
 8008124:	f43f af00 	beq.w	8007f28 <_printf_float+0x98>
 8008128:	f10a 0a01 	add.w	sl, sl, #1
 800812c:	e7ee      	b.n	800810c <_printf_float+0x27c>
 800812e:	bf00      	nop
 8008130:	ffffffff 	.word	0xffffffff
 8008134:	7fefffff 	.word	0x7fefffff
 8008138:	0800cc98 	.word	0x0800cc98
 800813c:	0800cc94 	.word	0x0800cc94
 8008140:	0800cca0 	.word	0x0800cca0
 8008144:	0800cc9c 	.word	0x0800cc9c
 8008148:	0800cca4 	.word	0x0800cca4
 800814c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800814e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008152:	4553      	cmp	r3, sl
 8008154:	bfa8      	it	ge
 8008156:	4653      	movge	r3, sl
 8008158:	2b00      	cmp	r3, #0
 800815a:	4699      	mov	r9, r3
 800815c:	dc37      	bgt.n	80081ce <_printf_float+0x33e>
 800815e:	2300      	movs	r3, #0
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008166:	f104 021a 	add.w	r2, r4, #26
 800816a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800816c:	9907      	ldr	r1, [sp, #28]
 800816e:	9306      	str	r3, [sp, #24]
 8008170:	eba3 0309 	sub.w	r3, r3, r9
 8008174:	428b      	cmp	r3, r1
 8008176:	dc31      	bgt.n	80081dc <_printf_float+0x34c>
 8008178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817a:	459a      	cmp	sl, r3
 800817c:	dc3b      	bgt.n	80081f6 <_printf_float+0x366>
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	07da      	lsls	r2, r3, #31
 8008182:	d438      	bmi.n	80081f6 <_printf_float+0x366>
 8008184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008186:	ebaa 0903 	sub.w	r9, sl, r3
 800818a:	9b06      	ldr	r3, [sp, #24]
 800818c:	ebaa 0303 	sub.w	r3, sl, r3
 8008190:	4599      	cmp	r9, r3
 8008192:	bfa8      	it	ge
 8008194:	4699      	movge	r9, r3
 8008196:	f1b9 0f00 	cmp.w	r9, #0
 800819a:	dc34      	bgt.n	8008206 <_printf_float+0x376>
 800819c:	f04f 0800 	mov.w	r8, #0
 80081a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081a4:	f104 0b1a 	add.w	fp, r4, #26
 80081a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081aa:	ebaa 0303 	sub.w	r3, sl, r3
 80081ae:	eba3 0309 	sub.w	r3, r3, r9
 80081b2:	4543      	cmp	r3, r8
 80081b4:	f77f af76 	ble.w	80080a4 <_printf_float+0x214>
 80081b8:	2301      	movs	r3, #1
 80081ba:	465a      	mov	r2, fp
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f aeb0 	beq.w	8007f28 <_printf_float+0x98>
 80081c8:	f108 0801 	add.w	r8, r8, #1
 80081cc:	e7ec      	b.n	80081a8 <_printf_float+0x318>
 80081ce:	4642      	mov	r2, r8
 80081d0:	4631      	mov	r1, r6
 80081d2:	4628      	mov	r0, r5
 80081d4:	47b8      	blx	r7
 80081d6:	3001      	adds	r0, #1
 80081d8:	d1c1      	bne.n	800815e <_printf_float+0x2ce>
 80081da:	e6a5      	b.n	8007f28 <_printf_float+0x98>
 80081dc:	2301      	movs	r3, #1
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	9206      	str	r2, [sp, #24]
 80081e4:	47b8      	blx	r7
 80081e6:	3001      	adds	r0, #1
 80081e8:	f43f ae9e 	beq.w	8007f28 <_printf_float+0x98>
 80081ec:	9b07      	ldr	r3, [sp, #28]
 80081ee:	9a06      	ldr	r2, [sp, #24]
 80081f0:	3301      	adds	r3, #1
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	e7b9      	b.n	800816a <_printf_float+0x2da>
 80081f6:	9b05      	ldr	r3, [sp, #20]
 80081f8:	465a      	mov	r2, fp
 80081fa:	4631      	mov	r1, r6
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b8      	blx	r7
 8008200:	3001      	adds	r0, #1
 8008202:	d1bf      	bne.n	8008184 <_printf_float+0x2f4>
 8008204:	e690      	b.n	8007f28 <_printf_float+0x98>
 8008206:	9a06      	ldr	r2, [sp, #24]
 8008208:	464b      	mov	r3, r9
 800820a:	4442      	add	r2, r8
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	d1c2      	bne.n	800819c <_printf_float+0x30c>
 8008216:	e687      	b.n	8007f28 <_printf_float+0x98>
 8008218:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800821c:	f1b9 0f01 	cmp.w	r9, #1
 8008220:	dc01      	bgt.n	8008226 <_printf_float+0x396>
 8008222:	07db      	lsls	r3, r3, #31
 8008224:	d536      	bpl.n	8008294 <_printf_float+0x404>
 8008226:	2301      	movs	r3, #1
 8008228:	4642      	mov	r2, r8
 800822a:	4631      	mov	r1, r6
 800822c:	4628      	mov	r0, r5
 800822e:	47b8      	blx	r7
 8008230:	3001      	adds	r0, #1
 8008232:	f43f ae79 	beq.w	8007f28 <_printf_float+0x98>
 8008236:	9b05      	ldr	r3, [sp, #20]
 8008238:	465a      	mov	r2, fp
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f ae71 	beq.w	8007f28 <_printf_float+0x98>
 8008246:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800824a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800824e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008252:	f109 39ff 	add.w	r9, r9, #4294967295
 8008256:	d018      	beq.n	800828a <_printf_float+0x3fa>
 8008258:	464b      	mov	r3, r9
 800825a:	f108 0201 	add.w	r2, r8, #1
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	47b8      	blx	r7
 8008264:	3001      	adds	r0, #1
 8008266:	d10c      	bne.n	8008282 <_printf_float+0x3f2>
 8008268:	e65e      	b.n	8007f28 <_printf_float+0x98>
 800826a:	2301      	movs	r3, #1
 800826c:	465a      	mov	r2, fp
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	47b8      	blx	r7
 8008274:	3001      	adds	r0, #1
 8008276:	f43f ae57 	beq.w	8007f28 <_printf_float+0x98>
 800827a:	f108 0801 	add.w	r8, r8, #1
 800827e:	45c8      	cmp	r8, r9
 8008280:	dbf3      	blt.n	800826a <_printf_float+0x3da>
 8008282:	4653      	mov	r3, sl
 8008284:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008288:	e6dc      	b.n	8008044 <_printf_float+0x1b4>
 800828a:	f04f 0800 	mov.w	r8, #0
 800828e:	f104 0b1a 	add.w	fp, r4, #26
 8008292:	e7f4      	b.n	800827e <_printf_float+0x3ee>
 8008294:	2301      	movs	r3, #1
 8008296:	4642      	mov	r2, r8
 8008298:	e7e1      	b.n	800825e <_printf_float+0x3ce>
 800829a:	2301      	movs	r3, #1
 800829c:	464a      	mov	r2, r9
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	47b8      	blx	r7
 80082a4:	3001      	adds	r0, #1
 80082a6:	f43f ae3f 	beq.w	8007f28 <_printf_float+0x98>
 80082aa:	f108 0801 	add.w	r8, r8, #1
 80082ae:	68e3      	ldr	r3, [r4, #12]
 80082b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082b2:	1a5b      	subs	r3, r3, r1
 80082b4:	4543      	cmp	r3, r8
 80082b6:	dcf0      	bgt.n	800829a <_printf_float+0x40a>
 80082b8:	e6f8      	b.n	80080ac <_printf_float+0x21c>
 80082ba:	f04f 0800 	mov.w	r8, #0
 80082be:	f104 0919 	add.w	r9, r4, #25
 80082c2:	e7f4      	b.n	80082ae <_printf_float+0x41e>

080082c4 <_printf_common>:
 80082c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	4616      	mov	r6, r2
 80082ca:	4698      	mov	r8, r3
 80082cc:	688a      	ldr	r2, [r1, #8]
 80082ce:	690b      	ldr	r3, [r1, #16]
 80082d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082d4:	4293      	cmp	r3, r2
 80082d6:	bfb8      	it	lt
 80082d8:	4613      	movlt	r3, r2
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082e0:	4607      	mov	r7, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	b10a      	cbz	r2, 80082ea <_printf_common+0x26>
 80082e6:	3301      	adds	r3, #1
 80082e8:	6033      	str	r3, [r6, #0]
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	0699      	lsls	r1, r3, #26
 80082ee:	bf42      	ittt	mi
 80082f0:	6833      	ldrmi	r3, [r6, #0]
 80082f2:	3302      	addmi	r3, #2
 80082f4:	6033      	strmi	r3, [r6, #0]
 80082f6:	6825      	ldr	r5, [r4, #0]
 80082f8:	f015 0506 	ands.w	r5, r5, #6
 80082fc:	d106      	bne.n	800830c <_printf_common+0x48>
 80082fe:	f104 0a19 	add.w	sl, r4, #25
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	6832      	ldr	r2, [r6, #0]
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	42ab      	cmp	r3, r5
 800830a:	dc26      	bgt.n	800835a <_printf_common+0x96>
 800830c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008310:	6822      	ldr	r2, [r4, #0]
 8008312:	3b00      	subs	r3, #0
 8008314:	bf18      	it	ne
 8008316:	2301      	movne	r3, #1
 8008318:	0692      	lsls	r2, r2, #26
 800831a:	d42b      	bmi.n	8008374 <_printf_common+0xb0>
 800831c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008320:	4641      	mov	r1, r8
 8008322:	4638      	mov	r0, r7
 8008324:	47c8      	blx	r9
 8008326:	3001      	adds	r0, #1
 8008328:	d01e      	beq.n	8008368 <_printf_common+0xa4>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	6922      	ldr	r2, [r4, #16]
 800832e:	f003 0306 	and.w	r3, r3, #6
 8008332:	2b04      	cmp	r3, #4
 8008334:	bf02      	ittt	eq
 8008336:	68e5      	ldreq	r5, [r4, #12]
 8008338:	6833      	ldreq	r3, [r6, #0]
 800833a:	1aed      	subeq	r5, r5, r3
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	bf0c      	ite	eq
 8008340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008344:	2500      	movne	r5, #0
 8008346:	4293      	cmp	r3, r2
 8008348:	bfc4      	itt	gt
 800834a:	1a9b      	subgt	r3, r3, r2
 800834c:	18ed      	addgt	r5, r5, r3
 800834e:	2600      	movs	r6, #0
 8008350:	341a      	adds	r4, #26
 8008352:	42b5      	cmp	r5, r6
 8008354:	d11a      	bne.n	800838c <_printf_common+0xc8>
 8008356:	2000      	movs	r0, #0
 8008358:	e008      	b.n	800836c <_printf_common+0xa8>
 800835a:	2301      	movs	r3, #1
 800835c:	4652      	mov	r2, sl
 800835e:	4641      	mov	r1, r8
 8008360:	4638      	mov	r0, r7
 8008362:	47c8      	blx	r9
 8008364:	3001      	adds	r0, #1
 8008366:	d103      	bne.n	8008370 <_printf_common+0xac>
 8008368:	f04f 30ff 	mov.w	r0, #4294967295
 800836c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008370:	3501      	adds	r5, #1
 8008372:	e7c6      	b.n	8008302 <_printf_common+0x3e>
 8008374:	18e1      	adds	r1, r4, r3
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	2030      	movs	r0, #48	@ 0x30
 800837a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800837e:	4422      	add	r2, r4
 8008380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008388:	3302      	adds	r3, #2
 800838a:	e7c7      	b.n	800831c <_printf_common+0x58>
 800838c:	2301      	movs	r3, #1
 800838e:	4622      	mov	r2, r4
 8008390:	4641      	mov	r1, r8
 8008392:	4638      	mov	r0, r7
 8008394:	47c8      	blx	r9
 8008396:	3001      	adds	r0, #1
 8008398:	d0e6      	beq.n	8008368 <_printf_common+0xa4>
 800839a:	3601      	adds	r6, #1
 800839c:	e7d9      	b.n	8008352 <_printf_common+0x8e>
	...

080083a0 <_printf_i>:
 80083a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	7e0f      	ldrb	r7, [r1, #24]
 80083a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083a8:	2f78      	cmp	r7, #120	@ 0x78
 80083aa:	4691      	mov	r9, r2
 80083ac:	4680      	mov	r8, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	469a      	mov	sl, r3
 80083b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083b6:	d807      	bhi.n	80083c8 <_printf_i+0x28>
 80083b8:	2f62      	cmp	r7, #98	@ 0x62
 80083ba:	d80a      	bhi.n	80083d2 <_printf_i+0x32>
 80083bc:	2f00      	cmp	r7, #0
 80083be:	f000 80d1 	beq.w	8008564 <_printf_i+0x1c4>
 80083c2:	2f58      	cmp	r7, #88	@ 0x58
 80083c4:	f000 80b8 	beq.w	8008538 <_printf_i+0x198>
 80083c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083d0:	e03a      	b.n	8008448 <_printf_i+0xa8>
 80083d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083d6:	2b15      	cmp	r3, #21
 80083d8:	d8f6      	bhi.n	80083c8 <_printf_i+0x28>
 80083da:	a101      	add	r1, pc, #4	@ (adr r1, 80083e0 <_printf_i+0x40>)
 80083dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083e0:	08008439 	.word	0x08008439
 80083e4:	0800844d 	.word	0x0800844d
 80083e8:	080083c9 	.word	0x080083c9
 80083ec:	080083c9 	.word	0x080083c9
 80083f0:	080083c9 	.word	0x080083c9
 80083f4:	080083c9 	.word	0x080083c9
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	080083c9 	.word	0x080083c9
 8008400:	080083c9 	.word	0x080083c9
 8008404:	080083c9 	.word	0x080083c9
 8008408:	080083c9 	.word	0x080083c9
 800840c:	0800854b 	.word	0x0800854b
 8008410:	08008477 	.word	0x08008477
 8008414:	08008505 	.word	0x08008505
 8008418:	080083c9 	.word	0x080083c9
 800841c:	080083c9 	.word	0x080083c9
 8008420:	0800856d 	.word	0x0800856d
 8008424:	080083c9 	.word	0x080083c9
 8008428:	08008477 	.word	0x08008477
 800842c:	080083c9 	.word	0x080083c9
 8008430:	080083c9 	.word	0x080083c9
 8008434:	0800850d 	.word	0x0800850d
 8008438:	6833      	ldr	r3, [r6, #0]
 800843a:	1d1a      	adds	r2, r3, #4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	6032      	str	r2, [r6, #0]
 8008440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008448:	2301      	movs	r3, #1
 800844a:	e09c      	b.n	8008586 <_printf_i+0x1e6>
 800844c:	6833      	ldr	r3, [r6, #0]
 800844e:	6820      	ldr	r0, [r4, #0]
 8008450:	1d19      	adds	r1, r3, #4
 8008452:	6031      	str	r1, [r6, #0]
 8008454:	0606      	lsls	r6, r0, #24
 8008456:	d501      	bpl.n	800845c <_printf_i+0xbc>
 8008458:	681d      	ldr	r5, [r3, #0]
 800845a:	e003      	b.n	8008464 <_printf_i+0xc4>
 800845c:	0645      	lsls	r5, r0, #25
 800845e:	d5fb      	bpl.n	8008458 <_printf_i+0xb8>
 8008460:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008464:	2d00      	cmp	r5, #0
 8008466:	da03      	bge.n	8008470 <_printf_i+0xd0>
 8008468:	232d      	movs	r3, #45	@ 0x2d
 800846a:	426d      	negs	r5, r5
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008470:	4858      	ldr	r0, [pc, #352]	@ (80085d4 <_printf_i+0x234>)
 8008472:	230a      	movs	r3, #10
 8008474:	e011      	b.n	800849a <_printf_i+0xfa>
 8008476:	6821      	ldr	r1, [r4, #0]
 8008478:	6833      	ldr	r3, [r6, #0]
 800847a:	0608      	lsls	r0, r1, #24
 800847c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008480:	d402      	bmi.n	8008488 <_printf_i+0xe8>
 8008482:	0649      	lsls	r1, r1, #25
 8008484:	bf48      	it	mi
 8008486:	b2ad      	uxthmi	r5, r5
 8008488:	2f6f      	cmp	r7, #111	@ 0x6f
 800848a:	4852      	ldr	r0, [pc, #328]	@ (80085d4 <_printf_i+0x234>)
 800848c:	6033      	str	r3, [r6, #0]
 800848e:	bf14      	ite	ne
 8008490:	230a      	movne	r3, #10
 8008492:	2308      	moveq	r3, #8
 8008494:	2100      	movs	r1, #0
 8008496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800849a:	6866      	ldr	r6, [r4, #4]
 800849c:	60a6      	str	r6, [r4, #8]
 800849e:	2e00      	cmp	r6, #0
 80084a0:	db05      	blt.n	80084ae <_printf_i+0x10e>
 80084a2:	6821      	ldr	r1, [r4, #0]
 80084a4:	432e      	orrs	r6, r5
 80084a6:	f021 0104 	bic.w	r1, r1, #4
 80084aa:	6021      	str	r1, [r4, #0]
 80084ac:	d04b      	beq.n	8008546 <_printf_i+0x1a6>
 80084ae:	4616      	mov	r6, r2
 80084b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80084b4:	fb03 5711 	mls	r7, r3, r1, r5
 80084b8:	5dc7      	ldrb	r7, [r0, r7]
 80084ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084be:	462f      	mov	r7, r5
 80084c0:	42bb      	cmp	r3, r7
 80084c2:	460d      	mov	r5, r1
 80084c4:	d9f4      	bls.n	80084b0 <_printf_i+0x110>
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	d10b      	bne.n	80084e2 <_printf_i+0x142>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	07df      	lsls	r7, r3, #31
 80084ce:	d508      	bpl.n	80084e2 <_printf_i+0x142>
 80084d0:	6923      	ldr	r3, [r4, #16]
 80084d2:	6861      	ldr	r1, [r4, #4]
 80084d4:	4299      	cmp	r1, r3
 80084d6:	bfde      	ittt	le
 80084d8:	2330      	movle	r3, #48	@ 0x30
 80084da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084e2:	1b92      	subs	r2, r2, r6
 80084e4:	6122      	str	r2, [r4, #16]
 80084e6:	f8cd a000 	str.w	sl, [sp]
 80084ea:	464b      	mov	r3, r9
 80084ec:	aa03      	add	r2, sp, #12
 80084ee:	4621      	mov	r1, r4
 80084f0:	4640      	mov	r0, r8
 80084f2:	f7ff fee7 	bl	80082c4 <_printf_common>
 80084f6:	3001      	adds	r0, #1
 80084f8:	d14a      	bne.n	8008590 <_printf_i+0x1f0>
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295
 80084fe:	b004      	add	sp, #16
 8008500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	f043 0320 	orr.w	r3, r3, #32
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	4832      	ldr	r0, [pc, #200]	@ (80085d8 <_printf_i+0x238>)
 800850e:	2778      	movs	r7, #120	@ 0x78
 8008510:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	6831      	ldr	r1, [r6, #0]
 8008518:	061f      	lsls	r7, r3, #24
 800851a:	f851 5b04 	ldr.w	r5, [r1], #4
 800851e:	d402      	bmi.n	8008526 <_printf_i+0x186>
 8008520:	065f      	lsls	r7, r3, #25
 8008522:	bf48      	it	mi
 8008524:	b2ad      	uxthmi	r5, r5
 8008526:	6031      	str	r1, [r6, #0]
 8008528:	07d9      	lsls	r1, r3, #31
 800852a:	bf44      	itt	mi
 800852c:	f043 0320 	orrmi.w	r3, r3, #32
 8008530:	6023      	strmi	r3, [r4, #0]
 8008532:	b11d      	cbz	r5, 800853c <_printf_i+0x19c>
 8008534:	2310      	movs	r3, #16
 8008536:	e7ad      	b.n	8008494 <_printf_i+0xf4>
 8008538:	4826      	ldr	r0, [pc, #152]	@ (80085d4 <_printf_i+0x234>)
 800853a:	e7e9      	b.n	8008510 <_printf_i+0x170>
 800853c:	6823      	ldr	r3, [r4, #0]
 800853e:	f023 0320 	bic.w	r3, r3, #32
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	e7f6      	b.n	8008534 <_printf_i+0x194>
 8008546:	4616      	mov	r6, r2
 8008548:	e7bd      	b.n	80084c6 <_printf_i+0x126>
 800854a:	6833      	ldr	r3, [r6, #0]
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	6961      	ldr	r1, [r4, #20]
 8008550:	1d18      	adds	r0, r3, #4
 8008552:	6030      	str	r0, [r6, #0]
 8008554:	062e      	lsls	r6, r5, #24
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	d501      	bpl.n	800855e <_printf_i+0x1be>
 800855a:	6019      	str	r1, [r3, #0]
 800855c:	e002      	b.n	8008564 <_printf_i+0x1c4>
 800855e:	0668      	lsls	r0, r5, #25
 8008560:	d5fb      	bpl.n	800855a <_printf_i+0x1ba>
 8008562:	8019      	strh	r1, [r3, #0]
 8008564:	2300      	movs	r3, #0
 8008566:	6123      	str	r3, [r4, #16]
 8008568:	4616      	mov	r6, r2
 800856a:	e7bc      	b.n	80084e6 <_printf_i+0x146>
 800856c:	6833      	ldr	r3, [r6, #0]
 800856e:	1d1a      	adds	r2, r3, #4
 8008570:	6032      	str	r2, [r6, #0]
 8008572:	681e      	ldr	r6, [r3, #0]
 8008574:	6862      	ldr	r2, [r4, #4]
 8008576:	2100      	movs	r1, #0
 8008578:	4630      	mov	r0, r6
 800857a:	f7f7 feb1 	bl	80002e0 <memchr>
 800857e:	b108      	cbz	r0, 8008584 <_printf_i+0x1e4>
 8008580:	1b80      	subs	r0, r0, r6
 8008582:	6060      	str	r0, [r4, #4]
 8008584:	6863      	ldr	r3, [r4, #4]
 8008586:	6123      	str	r3, [r4, #16]
 8008588:	2300      	movs	r3, #0
 800858a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800858e:	e7aa      	b.n	80084e6 <_printf_i+0x146>
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	4632      	mov	r2, r6
 8008594:	4649      	mov	r1, r9
 8008596:	4640      	mov	r0, r8
 8008598:	47d0      	blx	sl
 800859a:	3001      	adds	r0, #1
 800859c:	d0ad      	beq.n	80084fa <_printf_i+0x15a>
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	079b      	lsls	r3, r3, #30
 80085a2:	d413      	bmi.n	80085cc <_printf_i+0x22c>
 80085a4:	68e0      	ldr	r0, [r4, #12]
 80085a6:	9b03      	ldr	r3, [sp, #12]
 80085a8:	4298      	cmp	r0, r3
 80085aa:	bfb8      	it	lt
 80085ac:	4618      	movlt	r0, r3
 80085ae:	e7a6      	b.n	80084fe <_printf_i+0x15e>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4632      	mov	r2, r6
 80085b4:	4649      	mov	r1, r9
 80085b6:	4640      	mov	r0, r8
 80085b8:	47d0      	blx	sl
 80085ba:	3001      	adds	r0, #1
 80085bc:	d09d      	beq.n	80084fa <_printf_i+0x15a>
 80085be:	3501      	adds	r5, #1
 80085c0:	68e3      	ldr	r3, [r4, #12]
 80085c2:	9903      	ldr	r1, [sp, #12]
 80085c4:	1a5b      	subs	r3, r3, r1
 80085c6:	42ab      	cmp	r3, r5
 80085c8:	dcf2      	bgt.n	80085b0 <_printf_i+0x210>
 80085ca:	e7eb      	b.n	80085a4 <_printf_i+0x204>
 80085cc:	2500      	movs	r5, #0
 80085ce:	f104 0619 	add.w	r6, r4, #25
 80085d2:	e7f5      	b.n	80085c0 <_printf_i+0x220>
 80085d4:	0800cca6 	.word	0x0800cca6
 80085d8:	0800ccb7 	.word	0x0800ccb7

080085dc <_scanf_float>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	b087      	sub	sp, #28
 80085e2:	4691      	mov	r9, r2
 80085e4:	9303      	str	r3, [sp, #12]
 80085e6:	688b      	ldr	r3, [r1, #8]
 80085e8:	1e5a      	subs	r2, r3, #1
 80085ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80085ee:	bf81      	itttt	hi
 80085f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80085f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80085f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80085fc:	608b      	strhi	r3, [r1, #8]
 80085fe:	680b      	ldr	r3, [r1, #0]
 8008600:	460a      	mov	r2, r1
 8008602:	f04f 0500 	mov.w	r5, #0
 8008606:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800860a:	f842 3b1c 	str.w	r3, [r2], #28
 800860e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008612:	4680      	mov	r8, r0
 8008614:	460c      	mov	r4, r1
 8008616:	bf98      	it	ls
 8008618:	f04f 0b00 	movls.w	fp, #0
 800861c:	9201      	str	r2, [sp, #4]
 800861e:	4616      	mov	r6, r2
 8008620:	46aa      	mov	sl, r5
 8008622:	462f      	mov	r7, r5
 8008624:	9502      	str	r5, [sp, #8]
 8008626:	68a2      	ldr	r2, [r4, #8]
 8008628:	b15a      	cbz	r2, 8008642 <_scanf_float+0x66>
 800862a:	f8d9 3000 	ldr.w	r3, [r9]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b4e      	cmp	r3, #78	@ 0x4e
 8008632:	d863      	bhi.n	80086fc <_scanf_float+0x120>
 8008634:	2b40      	cmp	r3, #64	@ 0x40
 8008636:	d83b      	bhi.n	80086b0 <_scanf_float+0xd4>
 8008638:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800863c:	b2c8      	uxtb	r0, r1
 800863e:	280e      	cmp	r0, #14
 8008640:	d939      	bls.n	80086b6 <_scanf_float+0xda>
 8008642:	b11f      	cbz	r7, 800864c <_scanf_float+0x70>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008650:	f1ba 0f01 	cmp.w	sl, #1
 8008654:	f200 8114 	bhi.w	8008880 <_scanf_float+0x2a4>
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	429e      	cmp	r6, r3
 800865c:	f200 8105 	bhi.w	800886a <_scanf_float+0x28e>
 8008660:	2001      	movs	r0, #1
 8008662:	b007      	add	sp, #28
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800866c:	2a0d      	cmp	r2, #13
 800866e:	d8e8      	bhi.n	8008642 <_scanf_float+0x66>
 8008670:	a101      	add	r1, pc, #4	@ (adr r1, 8008678 <_scanf_float+0x9c>)
 8008672:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008676:	bf00      	nop
 8008678:	080087c1 	.word	0x080087c1
 800867c:	08008643 	.word	0x08008643
 8008680:	08008643 	.word	0x08008643
 8008684:	08008643 	.word	0x08008643
 8008688:	0800881d 	.word	0x0800881d
 800868c:	080087f7 	.word	0x080087f7
 8008690:	08008643 	.word	0x08008643
 8008694:	08008643 	.word	0x08008643
 8008698:	080087cf 	.word	0x080087cf
 800869c:	08008643 	.word	0x08008643
 80086a0:	08008643 	.word	0x08008643
 80086a4:	08008643 	.word	0x08008643
 80086a8:	08008643 	.word	0x08008643
 80086ac:	0800878b 	.word	0x0800878b
 80086b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80086b4:	e7da      	b.n	800866c <_scanf_float+0x90>
 80086b6:	290e      	cmp	r1, #14
 80086b8:	d8c3      	bhi.n	8008642 <_scanf_float+0x66>
 80086ba:	a001      	add	r0, pc, #4	@ (adr r0, 80086c0 <_scanf_float+0xe4>)
 80086bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086c0:	0800877b 	.word	0x0800877b
 80086c4:	08008643 	.word	0x08008643
 80086c8:	0800877b 	.word	0x0800877b
 80086cc:	0800880b 	.word	0x0800880b
 80086d0:	08008643 	.word	0x08008643
 80086d4:	0800871d 	.word	0x0800871d
 80086d8:	08008761 	.word	0x08008761
 80086dc:	08008761 	.word	0x08008761
 80086e0:	08008761 	.word	0x08008761
 80086e4:	08008761 	.word	0x08008761
 80086e8:	08008761 	.word	0x08008761
 80086ec:	08008761 	.word	0x08008761
 80086f0:	08008761 	.word	0x08008761
 80086f4:	08008761 	.word	0x08008761
 80086f8:	08008761 	.word	0x08008761
 80086fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80086fe:	d809      	bhi.n	8008714 <_scanf_float+0x138>
 8008700:	2b60      	cmp	r3, #96	@ 0x60
 8008702:	d8b1      	bhi.n	8008668 <_scanf_float+0x8c>
 8008704:	2b54      	cmp	r3, #84	@ 0x54
 8008706:	d07b      	beq.n	8008800 <_scanf_float+0x224>
 8008708:	2b59      	cmp	r3, #89	@ 0x59
 800870a:	d19a      	bne.n	8008642 <_scanf_float+0x66>
 800870c:	2d07      	cmp	r5, #7
 800870e:	d198      	bne.n	8008642 <_scanf_float+0x66>
 8008710:	2508      	movs	r5, #8
 8008712:	e02f      	b.n	8008774 <_scanf_float+0x198>
 8008714:	2b74      	cmp	r3, #116	@ 0x74
 8008716:	d073      	beq.n	8008800 <_scanf_float+0x224>
 8008718:	2b79      	cmp	r3, #121	@ 0x79
 800871a:	e7f6      	b.n	800870a <_scanf_float+0x12e>
 800871c:	6821      	ldr	r1, [r4, #0]
 800871e:	05c8      	lsls	r0, r1, #23
 8008720:	d51e      	bpl.n	8008760 <_scanf_float+0x184>
 8008722:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008726:	6021      	str	r1, [r4, #0]
 8008728:	3701      	adds	r7, #1
 800872a:	f1bb 0f00 	cmp.w	fp, #0
 800872e:	d003      	beq.n	8008738 <_scanf_float+0x15c>
 8008730:	3201      	adds	r2, #1
 8008732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008736:	60a2      	str	r2, [r4, #8]
 8008738:	68a3      	ldr	r3, [r4, #8]
 800873a:	3b01      	subs	r3, #1
 800873c:	60a3      	str	r3, [r4, #8]
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	3301      	adds	r3, #1
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008748:	3b01      	subs	r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008750:	f340 8082 	ble.w	8008858 <_scanf_float+0x27c>
 8008754:	f8d9 3000 	ldr.w	r3, [r9]
 8008758:	3301      	adds	r3, #1
 800875a:	f8c9 3000 	str.w	r3, [r9]
 800875e:	e762      	b.n	8008626 <_scanf_float+0x4a>
 8008760:	eb1a 0105 	adds.w	r1, sl, r5
 8008764:	f47f af6d 	bne.w	8008642 <_scanf_float+0x66>
 8008768:	6822      	ldr	r2, [r4, #0]
 800876a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	460d      	mov	r5, r1
 8008772:	468a      	mov	sl, r1
 8008774:	f806 3b01 	strb.w	r3, [r6], #1
 8008778:	e7de      	b.n	8008738 <_scanf_float+0x15c>
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	0610      	lsls	r0, r2, #24
 800877e:	f57f af60 	bpl.w	8008642 <_scanf_float+0x66>
 8008782:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008786:	6022      	str	r2, [r4, #0]
 8008788:	e7f4      	b.n	8008774 <_scanf_float+0x198>
 800878a:	f1ba 0f00 	cmp.w	sl, #0
 800878e:	d10c      	bne.n	80087aa <_scanf_float+0x1ce>
 8008790:	b977      	cbnz	r7, 80087b0 <_scanf_float+0x1d4>
 8008792:	6822      	ldr	r2, [r4, #0]
 8008794:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008798:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800879c:	d108      	bne.n	80087b0 <_scanf_float+0x1d4>
 800879e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087a2:	6022      	str	r2, [r4, #0]
 80087a4:	f04f 0a01 	mov.w	sl, #1
 80087a8:	e7e4      	b.n	8008774 <_scanf_float+0x198>
 80087aa:	f1ba 0f02 	cmp.w	sl, #2
 80087ae:	d050      	beq.n	8008852 <_scanf_float+0x276>
 80087b0:	2d01      	cmp	r5, #1
 80087b2:	d002      	beq.n	80087ba <_scanf_float+0x1de>
 80087b4:	2d04      	cmp	r5, #4
 80087b6:	f47f af44 	bne.w	8008642 <_scanf_float+0x66>
 80087ba:	3501      	adds	r5, #1
 80087bc:	b2ed      	uxtb	r5, r5
 80087be:	e7d9      	b.n	8008774 <_scanf_float+0x198>
 80087c0:	f1ba 0f01 	cmp.w	sl, #1
 80087c4:	f47f af3d 	bne.w	8008642 <_scanf_float+0x66>
 80087c8:	f04f 0a02 	mov.w	sl, #2
 80087cc:	e7d2      	b.n	8008774 <_scanf_float+0x198>
 80087ce:	b975      	cbnz	r5, 80087ee <_scanf_float+0x212>
 80087d0:	2f00      	cmp	r7, #0
 80087d2:	f47f af37 	bne.w	8008644 <_scanf_float+0x68>
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80087dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80087e0:	f040 80fc 	bne.w	80089dc <_scanf_float+0x400>
 80087e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80087e8:	6022      	str	r2, [r4, #0]
 80087ea:	2501      	movs	r5, #1
 80087ec:	e7c2      	b.n	8008774 <_scanf_float+0x198>
 80087ee:	2d03      	cmp	r5, #3
 80087f0:	d0e3      	beq.n	80087ba <_scanf_float+0x1de>
 80087f2:	2d05      	cmp	r5, #5
 80087f4:	e7df      	b.n	80087b6 <_scanf_float+0x1da>
 80087f6:	2d02      	cmp	r5, #2
 80087f8:	f47f af23 	bne.w	8008642 <_scanf_float+0x66>
 80087fc:	2503      	movs	r5, #3
 80087fe:	e7b9      	b.n	8008774 <_scanf_float+0x198>
 8008800:	2d06      	cmp	r5, #6
 8008802:	f47f af1e 	bne.w	8008642 <_scanf_float+0x66>
 8008806:	2507      	movs	r5, #7
 8008808:	e7b4      	b.n	8008774 <_scanf_float+0x198>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	0591      	lsls	r1, r2, #22
 800880e:	f57f af18 	bpl.w	8008642 <_scanf_float+0x66>
 8008812:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008816:	6022      	str	r2, [r4, #0]
 8008818:	9702      	str	r7, [sp, #8]
 800881a:	e7ab      	b.n	8008774 <_scanf_float+0x198>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008822:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008826:	d005      	beq.n	8008834 <_scanf_float+0x258>
 8008828:	0550      	lsls	r0, r2, #21
 800882a:	f57f af0a 	bpl.w	8008642 <_scanf_float+0x66>
 800882e:	2f00      	cmp	r7, #0
 8008830:	f000 80d4 	beq.w	80089dc <_scanf_float+0x400>
 8008834:	0591      	lsls	r1, r2, #22
 8008836:	bf58      	it	pl
 8008838:	9902      	ldrpl	r1, [sp, #8]
 800883a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800883e:	bf58      	it	pl
 8008840:	1a79      	subpl	r1, r7, r1
 8008842:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008846:	bf58      	it	pl
 8008848:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800884c:	6022      	str	r2, [r4, #0]
 800884e:	2700      	movs	r7, #0
 8008850:	e790      	b.n	8008774 <_scanf_float+0x198>
 8008852:	f04f 0a03 	mov.w	sl, #3
 8008856:	e78d      	b.n	8008774 <_scanf_float+0x198>
 8008858:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800885c:	4649      	mov	r1, r9
 800885e:	4640      	mov	r0, r8
 8008860:	4798      	blx	r3
 8008862:	2800      	cmp	r0, #0
 8008864:	f43f aedf 	beq.w	8008626 <_scanf_float+0x4a>
 8008868:	e6eb      	b.n	8008642 <_scanf_float+0x66>
 800886a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800886e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008872:	464a      	mov	r2, r9
 8008874:	4640      	mov	r0, r8
 8008876:	4798      	blx	r3
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	3b01      	subs	r3, #1
 800887c:	6123      	str	r3, [r4, #16]
 800887e:	e6eb      	b.n	8008658 <_scanf_float+0x7c>
 8008880:	1e6b      	subs	r3, r5, #1
 8008882:	2b06      	cmp	r3, #6
 8008884:	d824      	bhi.n	80088d0 <_scanf_float+0x2f4>
 8008886:	2d02      	cmp	r5, #2
 8008888:	d836      	bhi.n	80088f8 <_scanf_float+0x31c>
 800888a:	9b01      	ldr	r3, [sp, #4]
 800888c:	429e      	cmp	r6, r3
 800888e:	f67f aee7 	bls.w	8008660 <_scanf_float+0x84>
 8008892:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008896:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800889a:	464a      	mov	r2, r9
 800889c:	4640      	mov	r0, r8
 800889e:	4798      	blx	r3
 80088a0:	6923      	ldr	r3, [r4, #16]
 80088a2:	3b01      	subs	r3, #1
 80088a4:	6123      	str	r3, [r4, #16]
 80088a6:	e7f0      	b.n	800888a <_scanf_float+0x2ae>
 80088a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80088b0:	464a      	mov	r2, r9
 80088b2:	4640      	mov	r0, r8
 80088b4:	4798      	blx	r3
 80088b6:	6923      	ldr	r3, [r4, #16]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	6123      	str	r3, [r4, #16]
 80088bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088c0:	fa5f fa8a 	uxtb.w	sl, sl
 80088c4:	f1ba 0f02 	cmp.w	sl, #2
 80088c8:	d1ee      	bne.n	80088a8 <_scanf_float+0x2cc>
 80088ca:	3d03      	subs	r5, #3
 80088cc:	b2ed      	uxtb	r5, r5
 80088ce:	1b76      	subs	r6, r6, r5
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	05da      	lsls	r2, r3, #23
 80088d4:	d530      	bpl.n	8008938 <_scanf_float+0x35c>
 80088d6:	055b      	lsls	r3, r3, #21
 80088d8:	d511      	bpl.n	80088fe <_scanf_float+0x322>
 80088da:	9b01      	ldr	r3, [sp, #4]
 80088dc:	429e      	cmp	r6, r3
 80088de:	f67f aebf 	bls.w	8008660 <_scanf_float+0x84>
 80088e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80088e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088ea:	464a      	mov	r2, r9
 80088ec:	4640      	mov	r0, r8
 80088ee:	4798      	blx	r3
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	6123      	str	r3, [r4, #16]
 80088f6:	e7f0      	b.n	80088da <_scanf_float+0x2fe>
 80088f8:	46aa      	mov	sl, r5
 80088fa:	46b3      	mov	fp, r6
 80088fc:	e7de      	b.n	80088bc <_scanf_float+0x2e0>
 80088fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	2965      	cmp	r1, #101	@ 0x65
 8008906:	f103 33ff 	add.w	r3, r3, #4294967295
 800890a:	f106 35ff 	add.w	r5, r6, #4294967295
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	d00c      	beq.n	800892c <_scanf_float+0x350>
 8008912:	2945      	cmp	r1, #69	@ 0x45
 8008914:	d00a      	beq.n	800892c <_scanf_float+0x350>
 8008916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800891a:	464a      	mov	r2, r9
 800891c:	4640      	mov	r0, r8
 800891e:	4798      	blx	r3
 8008920:	6923      	ldr	r3, [r4, #16]
 8008922:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008926:	3b01      	subs	r3, #1
 8008928:	1eb5      	subs	r5, r6, #2
 800892a:	6123      	str	r3, [r4, #16]
 800892c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008930:	464a      	mov	r2, r9
 8008932:	4640      	mov	r0, r8
 8008934:	4798      	blx	r3
 8008936:	462e      	mov	r6, r5
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	f012 0210 	ands.w	r2, r2, #16
 800893e:	d001      	beq.n	8008944 <_scanf_float+0x368>
 8008940:	2000      	movs	r0, #0
 8008942:	e68e      	b.n	8008662 <_scanf_float+0x86>
 8008944:	7032      	strb	r2, [r6, #0]
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800894c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008950:	d123      	bne.n	800899a <_scanf_float+0x3be>
 8008952:	9b02      	ldr	r3, [sp, #8]
 8008954:	429f      	cmp	r7, r3
 8008956:	d00a      	beq.n	800896e <_scanf_float+0x392>
 8008958:	1bda      	subs	r2, r3, r7
 800895a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800895e:	429e      	cmp	r6, r3
 8008960:	bf28      	it	cs
 8008962:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008966:	491e      	ldr	r1, [pc, #120]	@ (80089e0 <_scanf_float+0x404>)
 8008968:	4630      	mov	r0, r6
 800896a:	f000 f96f 	bl	8008c4c <siprintf>
 800896e:	9901      	ldr	r1, [sp, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	4640      	mov	r0, r8
 8008974:	f002 fc2e 	bl	800b1d4 <_strtod_r>
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	6821      	ldr	r1, [r4, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f011 0f02 	tst.w	r1, #2
 8008982:	f103 0204 	add.w	r2, r3, #4
 8008986:	d015      	beq.n	80089b4 <_scanf_float+0x3d8>
 8008988:	9903      	ldr	r1, [sp, #12]
 800898a:	600a      	str	r2, [r1, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	ed83 0b00 	vstr	d0, [r3]
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	3301      	adds	r3, #1
 8008996:	60e3      	str	r3, [r4, #12]
 8008998:	e7d2      	b.n	8008940 <_scanf_float+0x364>
 800899a:	9b04      	ldr	r3, [sp, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0e6      	beq.n	800896e <_scanf_float+0x392>
 80089a0:	9905      	ldr	r1, [sp, #20]
 80089a2:	230a      	movs	r3, #10
 80089a4:	3101      	adds	r1, #1
 80089a6:	4640      	mov	r0, r8
 80089a8:	f002 fc94 	bl	800b2d4 <_strtol_r>
 80089ac:	9b04      	ldr	r3, [sp, #16]
 80089ae:	9e05      	ldr	r6, [sp, #20]
 80089b0:	1ac2      	subs	r2, r0, r3
 80089b2:	e7d2      	b.n	800895a <_scanf_float+0x37e>
 80089b4:	f011 0f04 	tst.w	r1, #4
 80089b8:	9903      	ldr	r1, [sp, #12]
 80089ba:	600a      	str	r2, [r1, #0]
 80089bc:	d1e6      	bne.n	800898c <_scanf_float+0x3b0>
 80089be:	eeb4 0b40 	vcmp.f64	d0, d0
 80089c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c6:	681d      	ldr	r5, [r3, #0]
 80089c8:	d705      	bvc.n	80089d6 <_scanf_float+0x3fa>
 80089ca:	4806      	ldr	r0, [pc, #24]	@ (80089e4 <_scanf_float+0x408>)
 80089cc:	f000 fab8 	bl	8008f40 <nanf>
 80089d0:	ed85 0a00 	vstr	s0, [r5]
 80089d4:	e7dd      	b.n	8008992 <_scanf_float+0x3b6>
 80089d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80089da:	e7f9      	b.n	80089d0 <_scanf_float+0x3f4>
 80089dc:	2700      	movs	r7, #0
 80089de:	e635      	b.n	800864c <_scanf_float+0x70>
 80089e0:	0800ccc8 	.word	0x0800ccc8
 80089e4:	0800ce09 	.word	0x0800ce09

080089e8 <std>:
 80089e8:	2300      	movs	r3, #0
 80089ea:	b510      	push	{r4, lr}
 80089ec:	4604      	mov	r4, r0
 80089ee:	e9c0 3300 	strd	r3, r3, [r0]
 80089f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089f6:	6083      	str	r3, [r0, #8]
 80089f8:	8181      	strh	r1, [r0, #12]
 80089fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80089fc:	81c2      	strh	r2, [r0, #14]
 80089fe:	6183      	str	r3, [r0, #24]
 8008a00:	4619      	mov	r1, r3
 8008a02:	2208      	movs	r2, #8
 8008a04:	305c      	adds	r0, #92	@ 0x5c
 8008a06:	f000 fa1b 	bl	8008e40 <memset>
 8008a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a40 <std+0x58>)
 8008a0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a44 <std+0x5c>)
 8008a10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a12:	4b0d      	ldr	r3, [pc, #52]	@ (8008a48 <std+0x60>)
 8008a14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a16:	4b0d      	ldr	r3, [pc, #52]	@ (8008a4c <std+0x64>)
 8008a18:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a50 <std+0x68>)
 8008a1c:	6224      	str	r4, [r4, #32]
 8008a1e:	429c      	cmp	r4, r3
 8008a20:	d006      	beq.n	8008a30 <std+0x48>
 8008a22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a26:	4294      	cmp	r4, r2
 8008a28:	d002      	beq.n	8008a30 <std+0x48>
 8008a2a:	33d0      	adds	r3, #208	@ 0xd0
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	d105      	bne.n	8008a3c <std+0x54>
 8008a30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a38:	f000 ba7e 	b.w	8008f38 <__retarget_lock_init_recursive>
 8008a3c:	bd10      	pop	{r4, pc}
 8008a3e:	bf00      	nop
 8008a40:	08008c91 	.word	0x08008c91
 8008a44:	08008cb3 	.word	0x08008cb3
 8008a48:	08008ceb 	.word	0x08008ceb
 8008a4c:	08008d0f 	.word	0x08008d0f
 8008a50:	240004e4 	.word	0x240004e4

08008a54 <stdio_exit_handler>:
 8008a54:	4a02      	ldr	r2, [pc, #8]	@ (8008a60 <stdio_exit_handler+0xc>)
 8008a56:	4903      	ldr	r1, [pc, #12]	@ (8008a64 <stdio_exit_handler+0x10>)
 8008a58:	4803      	ldr	r0, [pc, #12]	@ (8008a68 <stdio_exit_handler+0x14>)
 8008a5a:	f000 b869 	b.w	8008b30 <_fwalk_sglue>
 8008a5e:	bf00      	nop
 8008a60:	24000020 	.word	0x24000020
 8008a64:	0800b915 	.word	0x0800b915
 8008a68:	24000030 	.word	0x24000030

08008a6c <cleanup_stdio>:
 8008a6c:	6841      	ldr	r1, [r0, #4]
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa0 <cleanup_stdio+0x34>)
 8008a70:	4299      	cmp	r1, r3
 8008a72:	b510      	push	{r4, lr}
 8008a74:	4604      	mov	r4, r0
 8008a76:	d001      	beq.n	8008a7c <cleanup_stdio+0x10>
 8008a78:	f002 ff4c 	bl	800b914 <_fflush_r>
 8008a7c:	68a1      	ldr	r1, [r4, #8]
 8008a7e:	4b09      	ldr	r3, [pc, #36]	@ (8008aa4 <cleanup_stdio+0x38>)
 8008a80:	4299      	cmp	r1, r3
 8008a82:	d002      	beq.n	8008a8a <cleanup_stdio+0x1e>
 8008a84:	4620      	mov	r0, r4
 8008a86:	f002 ff45 	bl	800b914 <_fflush_r>
 8008a8a:	68e1      	ldr	r1, [r4, #12]
 8008a8c:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <cleanup_stdio+0x3c>)
 8008a8e:	4299      	cmp	r1, r3
 8008a90:	d004      	beq.n	8008a9c <cleanup_stdio+0x30>
 8008a92:	4620      	mov	r0, r4
 8008a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a98:	f002 bf3c 	b.w	800b914 <_fflush_r>
 8008a9c:	bd10      	pop	{r4, pc}
 8008a9e:	bf00      	nop
 8008aa0:	240004e4 	.word	0x240004e4
 8008aa4:	2400054c 	.word	0x2400054c
 8008aa8:	240005b4 	.word	0x240005b4

08008aac <global_stdio_init.part.0>:
 8008aac:	b510      	push	{r4, lr}
 8008aae:	4b0b      	ldr	r3, [pc, #44]	@ (8008adc <global_stdio_init.part.0+0x30>)
 8008ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8008ae0 <global_stdio_init.part.0+0x34>)
 8008ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ae4 <global_stdio_init.part.0+0x38>)
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2104      	movs	r1, #4
 8008abc:	f7ff ff94 	bl	80089e8 <std>
 8008ac0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	2109      	movs	r1, #9
 8008ac8:	f7ff ff8e 	bl	80089e8 <std>
 8008acc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad6:	2112      	movs	r1, #18
 8008ad8:	f7ff bf86 	b.w	80089e8 <std>
 8008adc:	2400061c 	.word	0x2400061c
 8008ae0:	240004e4 	.word	0x240004e4
 8008ae4:	08008a55 	.word	0x08008a55

08008ae8 <__sfp_lock_acquire>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	@ (8008af0 <__sfp_lock_acquire+0x8>)
 8008aea:	f000 ba26 	b.w	8008f3a <__retarget_lock_acquire_recursive>
 8008aee:	bf00      	nop
 8008af0:	24000625 	.word	0x24000625

08008af4 <__sfp_lock_release>:
 8008af4:	4801      	ldr	r0, [pc, #4]	@ (8008afc <__sfp_lock_release+0x8>)
 8008af6:	f000 ba21 	b.w	8008f3c <__retarget_lock_release_recursive>
 8008afa:	bf00      	nop
 8008afc:	24000625 	.word	0x24000625

08008b00 <__sinit>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	4604      	mov	r4, r0
 8008b04:	f7ff fff0 	bl	8008ae8 <__sfp_lock_acquire>
 8008b08:	6a23      	ldr	r3, [r4, #32]
 8008b0a:	b11b      	cbz	r3, 8008b14 <__sinit+0x14>
 8008b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b10:	f7ff bff0 	b.w	8008af4 <__sfp_lock_release>
 8008b14:	4b04      	ldr	r3, [pc, #16]	@ (8008b28 <__sinit+0x28>)
 8008b16:	6223      	str	r3, [r4, #32]
 8008b18:	4b04      	ldr	r3, [pc, #16]	@ (8008b2c <__sinit+0x2c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1f5      	bne.n	8008b0c <__sinit+0xc>
 8008b20:	f7ff ffc4 	bl	8008aac <global_stdio_init.part.0>
 8008b24:	e7f2      	b.n	8008b0c <__sinit+0xc>
 8008b26:	bf00      	nop
 8008b28:	08008a6d 	.word	0x08008a6d
 8008b2c:	2400061c 	.word	0x2400061c

08008b30 <_fwalk_sglue>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4607      	mov	r7, r0
 8008b36:	4688      	mov	r8, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b40:	f1b9 0901 	subs.w	r9, r9, #1
 8008b44:	d505      	bpl.n	8008b52 <_fwalk_sglue+0x22>
 8008b46:	6824      	ldr	r4, [r4, #0]
 8008b48:	2c00      	cmp	r4, #0
 8008b4a:	d1f7      	bne.n	8008b3c <_fwalk_sglue+0xc>
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b52:	89ab      	ldrh	r3, [r5, #12]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d907      	bls.n	8008b68 <_fwalk_sglue+0x38>
 8008b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	d003      	beq.n	8008b68 <_fwalk_sglue+0x38>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4638      	mov	r0, r7
 8008b64:	47c0      	blx	r8
 8008b66:	4306      	orrs	r6, r0
 8008b68:	3568      	adds	r5, #104	@ 0x68
 8008b6a:	e7e9      	b.n	8008b40 <_fwalk_sglue+0x10>

08008b6c <iprintf>:
 8008b6c:	b40f      	push	{r0, r1, r2, r3}
 8008b6e:	b507      	push	{r0, r1, r2, lr}
 8008b70:	4906      	ldr	r1, [pc, #24]	@ (8008b8c <iprintf+0x20>)
 8008b72:	ab04      	add	r3, sp, #16
 8008b74:	6808      	ldr	r0, [r1, #0]
 8008b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7a:	6881      	ldr	r1, [r0, #8]
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	f002 fd2d 	bl	800b5dc <_vfiprintf_r>
 8008b82:	b003      	add	sp, #12
 8008b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b88:	b004      	add	sp, #16
 8008b8a:	4770      	bx	lr
 8008b8c:	2400002c 	.word	0x2400002c

08008b90 <_puts_r>:
 8008b90:	6a03      	ldr	r3, [r0, #32]
 8008b92:	b570      	push	{r4, r5, r6, lr}
 8008b94:	6884      	ldr	r4, [r0, #8]
 8008b96:	4605      	mov	r5, r0
 8008b98:	460e      	mov	r6, r1
 8008b9a:	b90b      	cbnz	r3, 8008ba0 <_puts_r+0x10>
 8008b9c:	f7ff ffb0 	bl	8008b00 <__sinit>
 8008ba0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ba2:	07db      	lsls	r3, r3, #31
 8008ba4:	d405      	bmi.n	8008bb2 <_puts_r+0x22>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	0598      	lsls	r0, r3, #22
 8008baa:	d402      	bmi.n	8008bb2 <_puts_r+0x22>
 8008bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bae:	f000 f9c4 	bl	8008f3a <__retarget_lock_acquire_recursive>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	0719      	lsls	r1, r3, #28
 8008bb6:	d502      	bpl.n	8008bbe <_puts_r+0x2e>
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d135      	bne.n	8008c2a <_puts_r+0x9a>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f000 f8e7 	bl	8008d94 <__swsetup_r>
 8008bc6:	b380      	cbz	r0, 8008c2a <_puts_r+0x9a>
 8008bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8008bcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bce:	07da      	lsls	r2, r3, #31
 8008bd0:	d405      	bmi.n	8008bde <_puts_r+0x4e>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	059b      	lsls	r3, r3, #22
 8008bd6:	d402      	bmi.n	8008bde <_puts_r+0x4e>
 8008bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bda:	f000 f9af 	bl	8008f3c <__retarget_lock_release_recursive>
 8008bde:	4628      	mov	r0, r5
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	da04      	bge.n	8008bf0 <_puts_r+0x60>
 8008be6:	69a2      	ldr	r2, [r4, #24]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	dc17      	bgt.n	8008c1c <_puts_r+0x8c>
 8008bec:	290a      	cmp	r1, #10
 8008bee:	d015      	beq.n	8008c1c <_puts_r+0x8c>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	6022      	str	r2, [r4, #0]
 8008bf6:	7019      	strb	r1, [r3, #0]
 8008bf8:	68a3      	ldr	r3, [r4, #8]
 8008bfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	60a3      	str	r3, [r4, #8]
 8008c02:	2900      	cmp	r1, #0
 8008c04:	d1ed      	bne.n	8008be2 <_puts_r+0x52>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	da11      	bge.n	8008c2e <_puts_r+0x9e>
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	210a      	movs	r1, #10
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f000 f881 	bl	8008d16 <__swbuf_r>
 8008c14:	3001      	adds	r0, #1
 8008c16:	d0d7      	beq.n	8008bc8 <_puts_r+0x38>
 8008c18:	250a      	movs	r5, #10
 8008c1a:	e7d7      	b.n	8008bcc <_puts_r+0x3c>
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 f879 	bl	8008d16 <__swbuf_r>
 8008c24:	3001      	adds	r0, #1
 8008c26:	d1e7      	bne.n	8008bf8 <_puts_r+0x68>
 8008c28:	e7ce      	b.n	8008bc8 <_puts_r+0x38>
 8008c2a:	3e01      	subs	r6, #1
 8008c2c:	e7e4      	b.n	8008bf8 <_puts_r+0x68>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	6022      	str	r2, [r4, #0]
 8008c34:	220a      	movs	r2, #10
 8008c36:	701a      	strb	r2, [r3, #0]
 8008c38:	e7ee      	b.n	8008c18 <_puts_r+0x88>
	...

08008c3c <puts>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	@ (8008c48 <puts+0xc>)
 8008c3e:	4601      	mov	r1, r0
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	f7ff bfa5 	b.w	8008b90 <_puts_r>
 8008c46:	bf00      	nop
 8008c48:	2400002c 	.word	0x2400002c

08008c4c <siprintf>:
 8008c4c:	b40e      	push	{r1, r2, r3}
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	b09d      	sub	sp, #116	@ 0x74
 8008c52:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c54:	9002      	str	r0, [sp, #8]
 8008c56:	9006      	str	r0, [sp, #24]
 8008c58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c5c:	480a      	ldr	r0, [pc, #40]	@ (8008c88 <siprintf+0x3c>)
 8008c5e:	9107      	str	r1, [sp, #28]
 8008c60:	9104      	str	r1, [sp, #16]
 8008c62:	490a      	ldr	r1, [pc, #40]	@ (8008c8c <siprintf+0x40>)
 8008c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c68:	9105      	str	r1, [sp, #20]
 8008c6a:	2400      	movs	r4, #0
 8008c6c:	a902      	add	r1, sp, #8
 8008c6e:	6800      	ldr	r0, [r0, #0]
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008c74:	f002 fb8c 	bl	800b390 <_svfiprintf_r>
 8008c78:	9b02      	ldr	r3, [sp, #8]
 8008c7a:	701c      	strb	r4, [r3, #0]
 8008c7c:	b01d      	add	sp, #116	@ 0x74
 8008c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c82:	b003      	add	sp, #12
 8008c84:	4770      	bx	lr
 8008c86:	bf00      	nop
 8008c88:	2400002c 	.word	0x2400002c
 8008c8c:	ffff0208 	.word	0xffff0208

08008c90 <__sread>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	460c      	mov	r4, r1
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	f000 f900 	bl	8008e9c <_read_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	bfab      	itete	ge
 8008ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca4:	181b      	addge	r3, r3, r0
 8008ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008caa:	bfac      	ite	ge
 8008cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008cae:	81a3      	strhlt	r3, [r4, #12]
 8008cb0:	bd10      	pop	{r4, pc}

08008cb2 <__swrite>:
 8008cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	461f      	mov	r7, r3
 8008cb8:	898b      	ldrh	r3, [r1, #12]
 8008cba:	05db      	lsls	r3, r3, #23
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	4616      	mov	r6, r2
 8008cc2:	d505      	bpl.n	8008cd0 <__swrite+0x1e>
 8008cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc8:	2302      	movs	r3, #2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f000 f8d4 	bl	8008e78 <_lseek_r>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	4632      	mov	r2, r6
 8008cde:	463b      	mov	r3, r7
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce6:	f000 b8eb 	b.w	8008ec0 <_write_r>

08008cea <__sseek>:
 8008cea:	b510      	push	{r4, lr}
 8008cec:	460c      	mov	r4, r1
 8008cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf2:	f000 f8c1 	bl	8008e78 <_lseek_r>
 8008cf6:	1c43      	adds	r3, r0, #1
 8008cf8:	89a3      	ldrh	r3, [r4, #12]
 8008cfa:	bf15      	itete	ne
 8008cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d06:	81a3      	strheq	r3, [r4, #12]
 8008d08:	bf18      	it	ne
 8008d0a:	81a3      	strhne	r3, [r4, #12]
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <__sclose>:
 8008d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d12:	f000 b8a1 	b.w	8008e58 <_close_r>

08008d16 <__swbuf_r>:
 8008d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d18:	460e      	mov	r6, r1
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	b118      	cbz	r0, 8008d28 <__swbuf_r+0x12>
 8008d20:	6a03      	ldr	r3, [r0, #32]
 8008d22:	b90b      	cbnz	r3, 8008d28 <__swbuf_r+0x12>
 8008d24:	f7ff feec 	bl	8008b00 <__sinit>
 8008d28:	69a3      	ldr	r3, [r4, #24]
 8008d2a:	60a3      	str	r3, [r4, #8]
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	071a      	lsls	r2, r3, #28
 8008d30:	d501      	bpl.n	8008d36 <__swbuf_r+0x20>
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	b943      	cbnz	r3, 8008d48 <__swbuf_r+0x32>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f82b 	bl	8008d94 <__swsetup_r>
 8008d3e:	b118      	cbz	r0, 8008d48 <__swbuf_r+0x32>
 8008d40:	f04f 37ff 	mov.w	r7, #4294967295
 8008d44:	4638      	mov	r0, r7
 8008d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	6922      	ldr	r2, [r4, #16]
 8008d4c:	1a98      	subs	r0, r3, r2
 8008d4e:	6963      	ldr	r3, [r4, #20]
 8008d50:	b2f6      	uxtb	r6, r6
 8008d52:	4283      	cmp	r3, r0
 8008d54:	4637      	mov	r7, r6
 8008d56:	dc05      	bgt.n	8008d64 <__swbuf_r+0x4e>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f002 fdda 	bl	800b914 <_fflush_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d1ed      	bne.n	8008d40 <__swbuf_r+0x2a>
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	6022      	str	r2, [r4, #0]
 8008d70:	701e      	strb	r6, [r3, #0]
 8008d72:	6962      	ldr	r2, [r4, #20]
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d004      	beq.n	8008d84 <__swbuf_r+0x6e>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d5e1      	bpl.n	8008d44 <__swbuf_r+0x2e>
 8008d80:	2e0a      	cmp	r6, #10
 8008d82:	d1df      	bne.n	8008d44 <__swbuf_r+0x2e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f002 fdc4 	bl	800b914 <_fflush_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d0d9      	beq.n	8008d44 <__swbuf_r+0x2e>
 8008d90:	e7d6      	b.n	8008d40 <__swbuf_r+0x2a>
	...

08008d94 <__swsetup_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4b29      	ldr	r3, [pc, #164]	@ (8008e3c <__swsetup_r+0xa8>)
 8008d98:	4605      	mov	r5, r0
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	b118      	cbz	r0, 8008da8 <__swsetup_r+0x14>
 8008da0:	6a03      	ldr	r3, [r0, #32]
 8008da2:	b90b      	cbnz	r3, 8008da8 <__swsetup_r+0x14>
 8008da4:	f7ff feac 	bl	8008b00 <__sinit>
 8008da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dac:	0719      	lsls	r1, r3, #28
 8008dae:	d422      	bmi.n	8008df6 <__swsetup_r+0x62>
 8008db0:	06da      	lsls	r2, r3, #27
 8008db2:	d407      	bmi.n	8008dc4 <__swsetup_r+0x30>
 8008db4:	2209      	movs	r2, #9
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc2:	e033      	b.n	8008e2c <__swsetup_r+0x98>
 8008dc4:	0758      	lsls	r0, r3, #29
 8008dc6:	d512      	bpl.n	8008dee <__swsetup_r+0x5a>
 8008dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dca:	b141      	cbz	r1, 8008dde <__swsetup_r+0x4a>
 8008dcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d002      	beq.n	8008dda <__swsetup_r+0x46>
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f000 fea1 	bl	8009b1c <_free_r>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	b94b      	cbnz	r3, 8008e0e <__swsetup_r+0x7a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e04:	d003      	beq.n	8008e0e <__swsetup_r+0x7a>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f002 fdd1 	bl	800b9b0 <__smakebuf_r>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	f013 0201 	ands.w	r2, r3, #1
 8008e16:	d00a      	beq.n	8008e2e <__swsetup_r+0x9a>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	60a2      	str	r2, [r4, #8]
 8008e1c:	6962      	ldr	r2, [r4, #20]
 8008e1e:	4252      	negs	r2, r2
 8008e20:	61a2      	str	r2, [r4, #24]
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	b942      	cbnz	r2, 8008e38 <__swsetup_r+0xa4>
 8008e26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e2a:	d1c5      	bne.n	8008db8 <__swsetup_r+0x24>
 8008e2c:	bd38      	pop	{r3, r4, r5, pc}
 8008e2e:	0799      	lsls	r1, r3, #30
 8008e30:	bf58      	it	pl
 8008e32:	6962      	ldrpl	r2, [r4, #20]
 8008e34:	60a2      	str	r2, [r4, #8]
 8008e36:	e7f4      	b.n	8008e22 <__swsetup_r+0x8e>
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7f7      	b.n	8008e2c <__swsetup_r+0x98>
 8008e3c:	2400002c 	.word	0x2400002c

08008e40 <memset>:
 8008e40:	4402      	add	r2, r0
 8008e42:	4603      	mov	r3, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <_localeconv_r>:
 8008e50:	4800      	ldr	r0, [pc, #0]	@ (8008e54 <_localeconv_r+0x4>)
 8008e52:	4770      	bx	lr
 8008e54:	2400016c 	.word	0x2400016c

08008e58 <_close_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d06      	ldr	r5, [pc, #24]	@ (8008e74 <_close_r+0x1c>)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	f7fa f985 	bl	8003172 <_close>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_close_r+0x1a>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_close_r+0x1a>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	24000620 	.word	0x24000620

08008e78 <_lseek_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	@ (8008e98 <_lseek_r+0x20>)
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	4608      	mov	r0, r1
 8008e80:	4611      	mov	r1, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7fa f99a 	bl	80031c0 <_lseek>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_lseek_r+0x1e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_lseek_r+0x1e>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	24000620 	.word	0x24000620

08008e9c <_read_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	@ (8008ebc <_read_r+0x20>)
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	4608      	mov	r0, r1
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	602a      	str	r2, [r5, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f7fa f944 	bl	8003138 <_read>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d102      	bne.n	8008eba <_read_r+0x1e>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b103      	cbz	r3, 8008eba <_read_r+0x1e>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	24000620 	.word	0x24000620

08008ec0 <_write_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d07      	ldr	r5, [pc, #28]	@ (8008ee0 <_write_r+0x20>)
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	2200      	movs	r2, #0
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f7f9 fcd8 	bl	8002884 <_write>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_write_r+0x1e>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_write_r+0x1e>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	24000620 	.word	0x24000620

08008ee4 <__errno>:
 8008ee4:	4b01      	ldr	r3, [pc, #4]	@ (8008eec <__errno+0x8>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	2400002c 	.word	0x2400002c

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4d0d      	ldr	r5, [pc, #52]	@ (8008f28 <__libc_init_array+0x38>)
 8008ef4:	4c0d      	ldr	r4, [pc, #52]	@ (8008f2c <__libc_init_array+0x3c>)
 8008ef6:	1b64      	subs	r4, r4, r5
 8008ef8:	10a4      	asrs	r4, r4, #2
 8008efa:	2600      	movs	r6, #0
 8008efc:	42a6      	cmp	r6, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	4d0b      	ldr	r5, [pc, #44]	@ (8008f30 <__libc_init_array+0x40>)
 8008f02:	4c0c      	ldr	r4, [pc, #48]	@ (8008f34 <__libc_init_array+0x44>)
 8008f04:	f003 fa22 	bl	800c34c <_init>
 8008f08:	1b64      	subs	r4, r4, r5
 8008f0a:	10a4      	asrs	r4, r4, #2
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	42a6      	cmp	r6, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f18:	4798      	blx	r3
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f22:	4798      	blx	r3
 8008f24:	3601      	adds	r6, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	0800d0c4 	.word	0x0800d0c4
 8008f2c:	0800d0c4 	.word	0x0800d0c4
 8008f30:	0800d0c4 	.word	0x0800d0c4
 8008f34:	0800d0c8 	.word	0x0800d0c8

08008f38 <__retarget_lock_init_recursive>:
 8008f38:	4770      	bx	lr

08008f3a <__retarget_lock_acquire_recursive>:
 8008f3a:	4770      	bx	lr

08008f3c <__retarget_lock_release_recursive>:
 8008f3c:	4770      	bx	lr
	...

08008f40 <nanf>:
 8008f40:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008f48 <nanf+0x8>
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	7fc00000 	.word	0x7fc00000

08008f4c <quorem>:
 8008f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	6903      	ldr	r3, [r0, #16]
 8008f52:	690c      	ldr	r4, [r1, #16]
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	4607      	mov	r7, r0
 8008f58:	db7e      	blt.n	8009058 <quorem+0x10c>
 8008f5a:	3c01      	subs	r4, #1
 8008f5c:	f101 0814 	add.w	r8, r1, #20
 8008f60:	00a3      	lsls	r3, r4, #2
 8008f62:	f100 0514 	add.w	r5, r0, #20
 8008f66:	9300      	str	r3, [sp, #0]
 8008f68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f76:	3301      	adds	r3, #1
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f82:	d32e      	bcc.n	8008fe2 <quorem+0x96>
 8008f84:	f04f 0a00 	mov.w	sl, #0
 8008f88:	46c4      	mov	ip, r8
 8008f8a:	46ae      	mov	lr, r5
 8008f8c:	46d3      	mov	fp, sl
 8008f8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f92:	b298      	uxth	r0, r3
 8008f94:	fb06 a000 	mla	r0, r6, r0, sl
 8008f98:	0c02      	lsrs	r2, r0, #16
 8008f9a:	0c1b      	lsrs	r3, r3, #16
 8008f9c:	fb06 2303 	mla	r3, r6, r3, r2
 8008fa0:	f8de 2000 	ldr.w	r2, [lr]
 8008fa4:	b280      	uxth	r0, r0
 8008fa6:	b292      	uxth	r2, r2
 8008fa8:	1a12      	subs	r2, r2, r0
 8008faa:	445a      	add	r2, fp
 8008fac:	f8de 0000 	ldr.w	r0, [lr]
 8008fb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008fba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008fbe:	b292      	uxth	r2, r2
 8008fc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008fc4:	45e1      	cmp	r9, ip
 8008fc6:	f84e 2b04 	str.w	r2, [lr], #4
 8008fca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008fce:	d2de      	bcs.n	8008f8e <quorem+0x42>
 8008fd0:	9b00      	ldr	r3, [sp, #0]
 8008fd2:	58eb      	ldr	r3, [r5, r3]
 8008fd4:	b92b      	cbnz	r3, 8008fe2 <quorem+0x96>
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	429d      	cmp	r5, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	d32f      	bcc.n	8009040 <quorem+0xf4>
 8008fe0:	613c      	str	r4, [r7, #16]
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	f001 f956 	bl	800a294 <__mcmp>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	db25      	blt.n	8009038 <quorem+0xec>
 8008fec:	4629      	mov	r1, r5
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ff4:	f8d1 c000 	ldr.w	ip, [r1]
 8008ff8:	fa1f fe82 	uxth.w	lr, r2
 8008ffc:	fa1f f38c 	uxth.w	r3, ip
 8009000:	eba3 030e 	sub.w	r3, r3, lr
 8009004:	4403      	add	r3, r0
 8009006:	0c12      	lsrs	r2, r2, #16
 8009008:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800900c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009010:	b29b      	uxth	r3, r3
 8009012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009016:	45c1      	cmp	r9, r8
 8009018:	f841 3b04 	str.w	r3, [r1], #4
 800901c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009020:	d2e6      	bcs.n	8008ff0 <quorem+0xa4>
 8009022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800902a:	b922      	cbnz	r2, 8009036 <quorem+0xea>
 800902c:	3b04      	subs	r3, #4
 800902e:	429d      	cmp	r5, r3
 8009030:	461a      	mov	r2, r3
 8009032:	d30b      	bcc.n	800904c <quorem+0x100>
 8009034:	613c      	str	r4, [r7, #16]
 8009036:	3601      	adds	r6, #1
 8009038:	4630      	mov	r0, r6
 800903a:	b003      	add	sp, #12
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009040:	6812      	ldr	r2, [r2, #0]
 8009042:	3b04      	subs	r3, #4
 8009044:	2a00      	cmp	r2, #0
 8009046:	d1cb      	bne.n	8008fe0 <quorem+0x94>
 8009048:	3c01      	subs	r4, #1
 800904a:	e7c6      	b.n	8008fda <quorem+0x8e>
 800904c:	6812      	ldr	r2, [r2, #0]
 800904e:	3b04      	subs	r3, #4
 8009050:	2a00      	cmp	r2, #0
 8009052:	d1ef      	bne.n	8009034 <quorem+0xe8>
 8009054:	3c01      	subs	r4, #1
 8009056:	e7ea      	b.n	800902e <quorem+0xe2>
 8009058:	2000      	movs	r0, #0
 800905a:	e7ee      	b.n	800903a <quorem+0xee>
 800905c:	0000      	movs	r0, r0
	...

08009060 <_dtoa_r>:
 8009060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	ed2d 8b02 	vpush	{d8}
 8009068:	69c7      	ldr	r7, [r0, #28]
 800906a:	b091      	sub	sp, #68	@ 0x44
 800906c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009070:	ec55 4b10 	vmov	r4, r5, d0
 8009074:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009076:	9107      	str	r1, [sp, #28]
 8009078:	4681      	mov	r9, r0
 800907a:	9209      	str	r2, [sp, #36]	@ 0x24
 800907c:	930d      	str	r3, [sp, #52]	@ 0x34
 800907e:	b97f      	cbnz	r7, 80090a0 <_dtoa_r+0x40>
 8009080:	2010      	movs	r0, #16
 8009082:	f000 fd95 	bl	8009bb0 <malloc>
 8009086:	4602      	mov	r2, r0
 8009088:	f8c9 001c 	str.w	r0, [r9, #28]
 800908c:	b920      	cbnz	r0, 8009098 <_dtoa_r+0x38>
 800908e:	4ba0      	ldr	r3, [pc, #640]	@ (8009310 <_dtoa_r+0x2b0>)
 8009090:	21ef      	movs	r1, #239	@ 0xef
 8009092:	48a0      	ldr	r0, [pc, #640]	@ (8009314 <_dtoa_r+0x2b4>)
 8009094:	f002 fd3c 	bl	800bb10 <__assert_func>
 8009098:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800909c:	6007      	str	r7, [r0, #0]
 800909e:	60c7      	str	r7, [r0, #12]
 80090a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80090a4:	6819      	ldr	r1, [r3, #0]
 80090a6:	b159      	cbz	r1, 80090c0 <_dtoa_r+0x60>
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	604a      	str	r2, [r1, #4]
 80090ac:	2301      	movs	r3, #1
 80090ae:	4093      	lsls	r3, r2
 80090b0:	608b      	str	r3, [r1, #8]
 80090b2:	4648      	mov	r0, r9
 80090b4:	f000 fe72 	bl	8009d9c <_Bfree>
 80090b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	1e2b      	subs	r3, r5, #0
 80090c2:	bfbb      	ittet	lt
 80090c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80090c8:	9303      	strlt	r3, [sp, #12]
 80090ca:	2300      	movge	r3, #0
 80090cc:	2201      	movlt	r2, #1
 80090ce:	bfac      	ite	ge
 80090d0:	6033      	strge	r3, [r6, #0]
 80090d2:	6032      	strlt	r2, [r6, #0]
 80090d4:	4b90      	ldr	r3, [pc, #576]	@ (8009318 <_dtoa_r+0x2b8>)
 80090d6:	9e03      	ldr	r6, [sp, #12]
 80090d8:	43b3      	bics	r3, r6
 80090da:	d110      	bne.n	80090fe <_dtoa_r+0x9e>
 80090dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090de:	f242 730f 	movw	r3, #9999	@ 0x270f
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80090e8:	4323      	orrs	r3, r4
 80090ea:	f000 84e6 	beq.w	8009aba <_dtoa_r+0xa5a>
 80090ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090f0:	4f8a      	ldr	r7, [pc, #552]	@ (800931c <_dtoa_r+0x2bc>)
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 84e8 	beq.w	8009ac8 <_dtoa_r+0xa68>
 80090f8:	1cfb      	adds	r3, r7, #3
 80090fa:	f000 bce3 	b.w	8009ac4 <_dtoa_r+0xa64>
 80090fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009102:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910a:	d10a      	bne.n	8009122 <_dtoa_r+0xc2>
 800910c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800910e:	2301      	movs	r3, #1
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009114:	b113      	cbz	r3, 800911c <_dtoa_r+0xbc>
 8009116:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009118:	4b81      	ldr	r3, [pc, #516]	@ (8009320 <_dtoa_r+0x2c0>)
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	4f81      	ldr	r7, [pc, #516]	@ (8009324 <_dtoa_r+0x2c4>)
 800911e:	f000 bcd3 	b.w	8009ac8 <_dtoa_r+0xa68>
 8009122:	aa0e      	add	r2, sp, #56	@ 0x38
 8009124:	a90f      	add	r1, sp, #60	@ 0x3c
 8009126:	4648      	mov	r0, r9
 8009128:	eeb0 0b48 	vmov.f64	d0, d8
 800912c:	f001 f9d2 	bl	800a4d4 <__d2b>
 8009130:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009134:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009136:	9001      	str	r0, [sp, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d045      	beq.n	80091c8 <_dtoa_r+0x168>
 800913c:	eeb0 7b48 	vmov.f64	d7, d8
 8009140:	ee18 1a90 	vmov	r1, s17
 8009144:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009148:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800914c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009150:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009154:	2500      	movs	r5, #0
 8009156:	ee07 1a90 	vmov	s15, r1
 800915a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800915e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80092f8 <_dtoa_r+0x298>
 8009162:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009166:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009300 <_dtoa_r+0x2a0>
 800916a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800916e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009308 <_dtoa_r+0x2a8>
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800917a:	eeb0 7b46 	vmov.f64	d7, d6
 800917e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009182:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009186:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918e:	ee16 8a90 	vmov	r8, s13
 8009192:	d508      	bpl.n	80091a6 <_dtoa_r+0x146>
 8009194:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009198:	eeb4 6b47 	vcmp.f64	d6, d7
 800919c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a0:	bf18      	it	ne
 80091a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80091a6:	f1b8 0f16 	cmp.w	r8, #22
 80091aa:	d82b      	bhi.n	8009204 <_dtoa_r+0x1a4>
 80091ac:	495e      	ldr	r1, [pc, #376]	@ (8009328 <_dtoa_r+0x2c8>)
 80091ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80091b2:	ed91 7b00 	vldr	d7, [r1]
 80091b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80091ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091be:	d501      	bpl.n	80091c4 <_dtoa_r+0x164>
 80091c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80091c4:	2100      	movs	r1, #0
 80091c6:	e01e      	b.n	8009206 <_dtoa_r+0x1a6>
 80091c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ca:	4413      	add	r3, r2
 80091cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80091d0:	2920      	cmp	r1, #32
 80091d2:	bfc1      	itttt	gt
 80091d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80091d8:	408e      	lslgt	r6, r1
 80091da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80091de:	fa24 f101 	lsrgt.w	r1, r4, r1
 80091e2:	bfd6      	itet	le
 80091e4:	f1c1 0120 	rsble	r1, r1, #32
 80091e8:	4331      	orrgt	r1, r6
 80091ea:	fa04 f101 	lslle.w	r1, r4, r1
 80091ee:	ee07 1a90 	vmov	s15, r1
 80091f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80091f6:	3b01      	subs	r3, #1
 80091f8:	ee17 1a90 	vmov	r1, s15
 80091fc:	2501      	movs	r5, #1
 80091fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009202:	e7a8      	b.n	8009156 <_dtoa_r+0xf6>
 8009204:	2101      	movs	r1, #1
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	1e53      	subs	r3, r2, #1
 800920a:	9306      	str	r3, [sp, #24]
 800920c:	bf45      	ittet	mi
 800920e:	f1c2 0301 	rsbmi	r3, r2, #1
 8009212:	9304      	strmi	r3, [sp, #16]
 8009214:	2300      	movpl	r3, #0
 8009216:	2300      	movmi	r3, #0
 8009218:	bf4c      	ite	mi
 800921a:	9306      	strmi	r3, [sp, #24]
 800921c:	9304      	strpl	r3, [sp, #16]
 800921e:	f1b8 0f00 	cmp.w	r8, #0
 8009222:	910c      	str	r1, [sp, #48]	@ 0x30
 8009224:	db18      	blt.n	8009258 <_dtoa_r+0x1f8>
 8009226:	9b06      	ldr	r3, [sp, #24]
 8009228:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800922c:	4443      	add	r3, r8
 800922e:	9306      	str	r3, [sp, #24]
 8009230:	2300      	movs	r3, #0
 8009232:	9a07      	ldr	r2, [sp, #28]
 8009234:	2a09      	cmp	r2, #9
 8009236:	d845      	bhi.n	80092c4 <_dtoa_r+0x264>
 8009238:	2a05      	cmp	r2, #5
 800923a:	bfc4      	itt	gt
 800923c:	3a04      	subgt	r2, #4
 800923e:	9207      	strgt	r2, [sp, #28]
 8009240:	9a07      	ldr	r2, [sp, #28]
 8009242:	f1a2 0202 	sub.w	r2, r2, #2
 8009246:	bfcc      	ite	gt
 8009248:	2400      	movgt	r4, #0
 800924a:	2401      	movle	r4, #1
 800924c:	2a03      	cmp	r2, #3
 800924e:	d844      	bhi.n	80092da <_dtoa_r+0x27a>
 8009250:	e8df f002 	tbb	[pc, r2]
 8009254:	0b173634 	.word	0x0b173634
 8009258:	9b04      	ldr	r3, [sp, #16]
 800925a:	2200      	movs	r2, #0
 800925c:	eba3 0308 	sub.w	r3, r3, r8
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	920a      	str	r2, [sp, #40]	@ 0x28
 8009264:	f1c8 0300 	rsb	r3, r8, #0
 8009268:	e7e3      	b.n	8009232 <_dtoa_r+0x1d2>
 800926a:	2201      	movs	r2, #1
 800926c:	9208      	str	r2, [sp, #32]
 800926e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009270:	eb08 0b02 	add.w	fp, r8, r2
 8009274:	f10b 0a01 	add.w	sl, fp, #1
 8009278:	4652      	mov	r2, sl
 800927a:	2a01      	cmp	r2, #1
 800927c:	bfb8      	it	lt
 800927e:	2201      	movlt	r2, #1
 8009280:	e006      	b.n	8009290 <_dtoa_r+0x230>
 8009282:	2201      	movs	r2, #1
 8009284:	9208      	str	r2, [sp, #32]
 8009286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009288:	2a00      	cmp	r2, #0
 800928a:	dd29      	ble.n	80092e0 <_dtoa_r+0x280>
 800928c:	4693      	mov	fp, r2
 800928e:	4692      	mov	sl, r2
 8009290:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009294:	2100      	movs	r1, #0
 8009296:	2004      	movs	r0, #4
 8009298:	f100 0614 	add.w	r6, r0, #20
 800929c:	4296      	cmp	r6, r2
 800929e:	d926      	bls.n	80092ee <_dtoa_r+0x28e>
 80092a0:	6079      	str	r1, [r7, #4]
 80092a2:	4648      	mov	r0, r9
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	f000 fd39 	bl	8009d1c <_Balloc>
 80092aa:	9b05      	ldr	r3, [sp, #20]
 80092ac:	4607      	mov	r7, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d13e      	bne.n	8009330 <_dtoa_r+0x2d0>
 80092b2:	4b1e      	ldr	r3, [pc, #120]	@ (800932c <_dtoa_r+0x2cc>)
 80092b4:	4602      	mov	r2, r0
 80092b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80092ba:	e6ea      	b.n	8009092 <_dtoa_r+0x32>
 80092bc:	2200      	movs	r2, #0
 80092be:	e7e1      	b.n	8009284 <_dtoa_r+0x224>
 80092c0:	2200      	movs	r2, #0
 80092c2:	e7d3      	b.n	800926c <_dtoa_r+0x20c>
 80092c4:	2401      	movs	r4, #1
 80092c6:	2200      	movs	r2, #0
 80092c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80092cc:	f04f 3bff 	mov.w	fp, #4294967295
 80092d0:	2100      	movs	r1, #0
 80092d2:	46da      	mov	sl, fp
 80092d4:	2212      	movs	r2, #18
 80092d6:	9109      	str	r1, [sp, #36]	@ 0x24
 80092d8:	e7da      	b.n	8009290 <_dtoa_r+0x230>
 80092da:	2201      	movs	r2, #1
 80092dc:	9208      	str	r2, [sp, #32]
 80092de:	e7f5      	b.n	80092cc <_dtoa_r+0x26c>
 80092e0:	f04f 0b01 	mov.w	fp, #1
 80092e4:	46da      	mov	sl, fp
 80092e6:	465a      	mov	r2, fp
 80092e8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80092ec:	e7d0      	b.n	8009290 <_dtoa_r+0x230>
 80092ee:	3101      	adds	r1, #1
 80092f0:	0040      	lsls	r0, r0, #1
 80092f2:	e7d1      	b.n	8009298 <_dtoa_r+0x238>
 80092f4:	f3af 8000 	nop.w
 80092f8:	636f4361 	.word	0x636f4361
 80092fc:	3fd287a7 	.word	0x3fd287a7
 8009300:	8b60c8b3 	.word	0x8b60c8b3
 8009304:	3fc68a28 	.word	0x3fc68a28
 8009308:	509f79fb 	.word	0x509f79fb
 800930c:	3fd34413 	.word	0x3fd34413
 8009310:	0800ccda 	.word	0x0800ccda
 8009314:	0800ccf1 	.word	0x0800ccf1
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	0800ccd6 	.word	0x0800ccd6
 8009320:	0800cca5 	.word	0x0800cca5
 8009324:	0800cca4 	.word	0x0800cca4
 8009328:	0800cea0 	.word	0x0800cea0
 800932c:	0800cd49 	.word	0x0800cd49
 8009330:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009334:	f1ba 0f0e 	cmp.w	sl, #14
 8009338:	6010      	str	r0, [r2, #0]
 800933a:	d86e      	bhi.n	800941a <_dtoa_r+0x3ba>
 800933c:	2c00      	cmp	r4, #0
 800933e:	d06c      	beq.n	800941a <_dtoa_r+0x3ba>
 8009340:	f1b8 0f00 	cmp.w	r8, #0
 8009344:	f340 80b4 	ble.w	80094b0 <_dtoa_r+0x450>
 8009348:	4ac8      	ldr	r2, [pc, #800]	@ (800966c <_dtoa_r+0x60c>)
 800934a:	f008 010f 	and.w	r1, r8, #15
 800934e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009352:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009356:	ed92 7b00 	vldr	d7, [r2]
 800935a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800935e:	f000 809b 	beq.w	8009498 <_dtoa_r+0x438>
 8009362:	4ac3      	ldr	r2, [pc, #780]	@ (8009670 <_dtoa_r+0x610>)
 8009364:	ed92 6b08 	vldr	d6, [r2, #32]
 8009368:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800936c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009370:	f001 010f 	and.w	r1, r1, #15
 8009374:	2203      	movs	r2, #3
 8009376:	48be      	ldr	r0, [pc, #760]	@ (8009670 <_dtoa_r+0x610>)
 8009378:	2900      	cmp	r1, #0
 800937a:	f040 808f 	bne.w	800949c <_dtoa_r+0x43c>
 800937e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009382:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009386:	ed8d 7b02 	vstr	d7, [sp, #8]
 800938a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800938c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009390:	2900      	cmp	r1, #0
 8009392:	f000 80b3 	beq.w	80094fc <_dtoa_r+0x49c>
 8009396:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800939a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a2:	f140 80ab 	bpl.w	80094fc <_dtoa_r+0x49c>
 80093a6:	f1ba 0f00 	cmp.w	sl, #0
 80093aa:	f000 80a7 	beq.w	80094fc <_dtoa_r+0x49c>
 80093ae:	f1bb 0f00 	cmp.w	fp, #0
 80093b2:	dd30      	ble.n	8009416 <_dtoa_r+0x3b6>
 80093b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80093b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80093bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80093c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80093c4:	9105      	str	r1, [sp, #20]
 80093c6:	3201      	adds	r2, #1
 80093c8:	465c      	mov	r4, fp
 80093ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80093ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80093d2:	ee07 2a90 	vmov	s15, r2
 80093d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80093da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80093de:	ee15 2a90 	vmov	r2, s11
 80093e2:	ec51 0b15 	vmov	r0, r1, d5
 80093e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80093ea:	2c00      	cmp	r4, #0
 80093ec:	f040 808a 	bne.w	8009504 <_dtoa_r+0x4a4>
 80093f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80093f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80093f8:	ec41 0b17 	vmov	d7, r0, r1
 80093fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009404:	f300 826a 	bgt.w	80098dc <_dtoa_r+0x87c>
 8009408:	eeb1 7b47 	vneg.f64	d7, d7
 800940c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009414:	d423      	bmi.n	800945e <_dtoa_r+0x3fe>
 8009416:	ed8d 8b02 	vstr	d8, [sp, #8]
 800941a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800941c:	2a00      	cmp	r2, #0
 800941e:	f2c0 8129 	blt.w	8009674 <_dtoa_r+0x614>
 8009422:	f1b8 0f0e 	cmp.w	r8, #14
 8009426:	f300 8125 	bgt.w	8009674 <_dtoa_r+0x614>
 800942a:	4b90      	ldr	r3, [pc, #576]	@ (800966c <_dtoa_r+0x60c>)
 800942c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009430:	ed93 6b00 	vldr	d6, [r3]
 8009434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	f280 80c8 	bge.w	80095cc <_dtoa_r+0x56c>
 800943c:	f1ba 0f00 	cmp.w	sl, #0
 8009440:	f300 80c4 	bgt.w	80095cc <_dtoa_r+0x56c>
 8009444:	d10b      	bne.n	800945e <_dtoa_r+0x3fe>
 8009446:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800944a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800944e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009452:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945a:	f2c0 823c 	blt.w	80098d6 <_dtoa_r+0x876>
 800945e:	2400      	movs	r4, #0
 8009460:	4625      	mov	r5, r4
 8009462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009464:	43db      	mvns	r3, r3
 8009466:	9305      	str	r3, [sp, #20]
 8009468:	463e      	mov	r6, r7
 800946a:	f04f 0800 	mov.w	r8, #0
 800946e:	4621      	mov	r1, r4
 8009470:	4648      	mov	r0, r9
 8009472:	f000 fc93 	bl	8009d9c <_Bfree>
 8009476:	2d00      	cmp	r5, #0
 8009478:	f000 80a2 	beq.w	80095c0 <_dtoa_r+0x560>
 800947c:	f1b8 0f00 	cmp.w	r8, #0
 8009480:	d005      	beq.n	800948e <_dtoa_r+0x42e>
 8009482:	45a8      	cmp	r8, r5
 8009484:	d003      	beq.n	800948e <_dtoa_r+0x42e>
 8009486:	4641      	mov	r1, r8
 8009488:	4648      	mov	r0, r9
 800948a:	f000 fc87 	bl	8009d9c <_Bfree>
 800948e:	4629      	mov	r1, r5
 8009490:	4648      	mov	r0, r9
 8009492:	f000 fc83 	bl	8009d9c <_Bfree>
 8009496:	e093      	b.n	80095c0 <_dtoa_r+0x560>
 8009498:	2202      	movs	r2, #2
 800949a:	e76c      	b.n	8009376 <_dtoa_r+0x316>
 800949c:	07cc      	lsls	r4, r1, #31
 800949e:	d504      	bpl.n	80094aa <_dtoa_r+0x44a>
 80094a0:	ed90 6b00 	vldr	d6, [r0]
 80094a4:	3201      	adds	r2, #1
 80094a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094aa:	1049      	asrs	r1, r1, #1
 80094ac:	3008      	adds	r0, #8
 80094ae:	e763      	b.n	8009378 <_dtoa_r+0x318>
 80094b0:	d022      	beq.n	80094f8 <_dtoa_r+0x498>
 80094b2:	f1c8 0100 	rsb	r1, r8, #0
 80094b6:	4a6d      	ldr	r2, [pc, #436]	@ (800966c <_dtoa_r+0x60c>)
 80094b8:	f001 000f 	and.w	r0, r1, #15
 80094bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80094c0:	ed92 7b00 	vldr	d7, [r2]
 80094c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80094c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094cc:	4868      	ldr	r0, [pc, #416]	@ (8009670 <_dtoa_r+0x610>)
 80094ce:	1109      	asrs	r1, r1, #4
 80094d0:	2400      	movs	r4, #0
 80094d2:	2202      	movs	r2, #2
 80094d4:	b929      	cbnz	r1, 80094e2 <_dtoa_r+0x482>
 80094d6:	2c00      	cmp	r4, #0
 80094d8:	f43f af57 	beq.w	800938a <_dtoa_r+0x32a>
 80094dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80094e0:	e753      	b.n	800938a <_dtoa_r+0x32a>
 80094e2:	07ce      	lsls	r6, r1, #31
 80094e4:	d505      	bpl.n	80094f2 <_dtoa_r+0x492>
 80094e6:	ed90 6b00 	vldr	d6, [r0]
 80094ea:	3201      	adds	r2, #1
 80094ec:	2401      	movs	r4, #1
 80094ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80094f2:	1049      	asrs	r1, r1, #1
 80094f4:	3008      	adds	r0, #8
 80094f6:	e7ed      	b.n	80094d4 <_dtoa_r+0x474>
 80094f8:	2202      	movs	r2, #2
 80094fa:	e746      	b.n	800938a <_dtoa_r+0x32a>
 80094fc:	f8cd 8014 	str.w	r8, [sp, #20]
 8009500:	4654      	mov	r4, sl
 8009502:	e762      	b.n	80093ca <_dtoa_r+0x36a>
 8009504:	4a59      	ldr	r2, [pc, #356]	@ (800966c <_dtoa_r+0x60c>)
 8009506:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800950a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800950e:	9a08      	ldr	r2, [sp, #32]
 8009510:	ec41 0b17 	vmov	d7, r0, r1
 8009514:	443c      	add	r4, r7
 8009516:	b34a      	cbz	r2, 800956c <_dtoa_r+0x50c>
 8009518:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800951c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009520:	463e      	mov	r6, r7
 8009522:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009526:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800952a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800952e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009532:	ee14 2a90 	vmov	r2, s9
 8009536:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800953a:	3230      	adds	r2, #48	@ 0x30
 800953c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009540:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009548:	f806 2b01 	strb.w	r2, [r6], #1
 800954c:	d438      	bmi.n	80095c0 <_dtoa_r+0x560>
 800954e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009552:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955a:	d46e      	bmi.n	800963a <_dtoa_r+0x5da>
 800955c:	42a6      	cmp	r6, r4
 800955e:	f43f af5a 	beq.w	8009416 <_dtoa_r+0x3b6>
 8009562:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009566:	ee26 6b03 	vmul.f64	d6, d6, d3
 800956a:	e7e0      	b.n	800952e <_dtoa_r+0x4ce>
 800956c:	4621      	mov	r1, r4
 800956e:	463e      	mov	r6, r7
 8009570:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009574:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009578:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800957c:	ee14 2a90 	vmov	r2, s9
 8009580:	3230      	adds	r2, #48	@ 0x30
 8009582:	f806 2b01 	strb.w	r2, [r6], #1
 8009586:	42a6      	cmp	r6, r4
 8009588:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800958c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009590:	d119      	bne.n	80095c6 <_dtoa_r+0x566>
 8009592:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009596:	ee37 4b05 	vadd.f64	d4, d7, d5
 800959a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800959e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a2:	dc4a      	bgt.n	800963a <_dtoa_r+0x5da>
 80095a4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80095a8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80095ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b0:	f57f af31 	bpl.w	8009416 <_dtoa_r+0x3b6>
 80095b4:	460e      	mov	r6, r1
 80095b6:	3901      	subs	r1, #1
 80095b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095bc:	2b30      	cmp	r3, #48	@ 0x30
 80095be:	d0f9      	beq.n	80095b4 <_dtoa_r+0x554>
 80095c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80095c4:	e027      	b.n	8009616 <_dtoa_r+0x5b6>
 80095c6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80095ca:	e7d5      	b.n	8009578 <_dtoa_r+0x518>
 80095cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095d0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80095d4:	463e      	mov	r6, r7
 80095d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80095da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80095de:	ee15 3a10 	vmov	r3, s10
 80095e2:	3330      	adds	r3, #48	@ 0x30
 80095e4:	f806 3b01 	strb.w	r3, [r6], #1
 80095e8:	1bf3      	subs	r3, r6, r7
 80095ea:	459a      	cmp	sl, r3
 80095ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80095f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80095f4:	d132      	bne.n	800965c <_dtoa_r+0x5fc>
 80095f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80095fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80095fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009602:	dc18      	bgt.n	8009636 <_dtoa_r+0x5d6>
 8009604:	eeb4 7b46 	vcmp.f64	d7, d6
 8009608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960c:	d103      	bne.n	8009616 <_dtoa_r+0x5b6>
 800960e:	ee15 3a10 	vmov	r3, s10
 8009612:	07db      	lsls	r3, r3, #31
 8009614:	d40f      	bmi.n	8009636 <_dtoa_r+0x5d6>
 8009616:	9901      	ldr	r1, [sp, #4]
 8009618:	4648      	mov	r0, r9
 800961a:	f000 fbbf 	bl	8009d9c <_Bfree>
 800961e:	2300      	movs	r3, #0
 8009620:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009622:	7033      	strb	r3, [r6, #0]
 8009624:	f108 0301 	add.w	r3, r8, #1
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 824b 	beq.w	8009ac8 <_dtoa_r+0xa68>
 8009632:	601e      	str	r6, [r3, #0]
 8009634:	e248      	b.n	8009ac8 <_dtoa_r+0xa68>
 8009636:	f8cd 8014 	str.w	r8, [sp, #20]
 800963a:	4633      	mov	r3, r6
 800963c:	461e      	mov	r6, r3
 800963e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009642:	2a39      	cmp	r2, #57	@ 0x39
 8009644:	d106      	bne.n	8009654 <_dtoa_r+0x5f4>
 8009646:	429f      	cmp	r7, r3
 8009648:	d1f8      	bne.n	800963c <_dtoa_r+0x5dc>
 800964a:	9a05      	ldr	r2, [sp, #20]
 800964c:	3201      	adds	r2, #1
 800964e:	9205      	str	r2, [sp, #20]
 8009650:	2230      	movs	r2, #48	@ 0x30
 8009652:	703a      	strb	r2, [r7, #0]
 8009654:	781a      	ldrb	r2, [r3, #0]
 8009656:	3201      	adds	r2, #1
 8009658:	701a      	strb	r2, [r3, #0]
 800965a:	e7b1      	b.n	80095c0 <_dtoa_r+0x560>
 800965c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009660:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009668:	d1b5      	bne.n	80095d6 <_dtoa_r+0x576>
 800966a:	e7d4      	b.n	8009616 <_dtoa_r+0x5b6>
 800966c:	0800cea0 	.word	0x0800cea0
 8009670:	0800ce78 	.word	0x0800ce78
 8009674:	9908      	ldr	r1, [sp, #32]
 8009676:	2900      	cmp	r1, #0
 8009678:	f000 80e9 	beq.w	800984e <_dtoa_r+0x7ee>
 800967c:	9907      	ldr	r1, [sp, #28]
 800967e:	2901      	cmp	r1, #1
 8009680:	f300 80cb 	bgt.w	800981a <_dtoa_r+0x7ba>
 8009684:	2d00      	cmp	r5, #0
 8009686:	f000 80c4 	beq.w	8009812 <_dtoa_r+0x7b2>
 800968a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800968e:	9e04      	ldr	r6, [sp, #16]
 8009690:	461c      	mov	r4, r3
 8009692:	9305      	str	r3, [sp, #20]
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	4413      	add	r3, r2
 8009698:	9304      	str	r3, [sp, #16]
 800969a:	9b06      	ldr	r3, [sp, #24]
 800969c:	2101      	movs	r1, #1
 800969e:	4413      	add	r3, r2
 80096a0:	4648      	mov	r0, r9
 80096a2:	9306      	str	r3, [sp, #24]
 80096a4:	f000 fc78 	bl	8009f98 <__i2b>
 80096a8:	9b05      	ldr	r3, [sp, #20]
 80096aa:	4605      	mov	r5, r0
 80096ac:	b166      	cbz	r6, 80096c8 <_dtoa_r+0x668>
 80096ae:	9a06      	ldr	r2, [sp, #24]
 80096b0:	2a00      	cmp	r2, #0
 80096b2:	dd09      	ble.n	80096c8 <_dtoa_r+0x668>
 80096b4:	42b2      	cmp	r2, r6
 80096b6:	9904      	ldr	r1, [sp, #16]
 80096b8:	bfa8      	it	ge
 80096ba:	4632      	movge	r2, r6
 80096bc:	1a89      	subs	r1, r1, r2
 80096be:	9104      	str	r1, [sp, #16]
 80096c0:	9906      	ldr	r1, [sp, #24]
 80096c2:	1ab6      	subs	r6, r6, r2
 80096c4:	1a8a      	subs	r2, r1, r2
 80096c6:	9206      	str	r2, [sp, #24]
 80096c8:	b30b      	cbz	r3, 800970e <_dtoa_r+0x6ae>
 80096ca:	9a08      	ldr	r2, [sp, #32]
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	f000 80c5 	beq.w	800985c <_dtoa_r+0x7fc>
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	f000 80bf 	beq.w	8009856 <_dtoa_r+0x7f6>
 80096d8:	4629      	mov	r1, r5
 80096da:	4622      	mov	r2, r4
 80096dc:	4648      	mov	r0, r9
 80096de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096e0:	f000 fd12 	bl	800a108 <__pow5mult>
 80096e4:	9a01      	ldr	r2, [sp, #4]
 80096e6:	4601      	mov	r1, r0
 80096e8:	4605      	mov	r5, r0
 80096ea:	4648      	mov	r0, r9
 80096ec:	f000 fc6a 	bl	8009fc4 <__multiply>
 80096f0:	9901      	ldr	r1, [sp, #4]
 80096f2:	9005      	str	r0, [sp, #20]
 80096f4:	4648      	mov	r0, r9
 80096f6:	f000 fb51 	bl	8009d9c <_Bfree>
 80096fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096fc:	1b1b      	subs	r3, r3, r4
 80096fe:	f000 80b0 	beq.w	8009862 <_dtoa_r+0x802>
 8009702:	9905      	ldr	r1, [sp, #20]
 8009704:	461a      	mov	r2, r3
 8009706:	4648      	mov	r0, r9
 8009708:	f000 fcfe 	bl	800a108 <__pow5mult>
 800970c:	9001      	str	r0, [sp, #4]
 800970e:	2101      	movs	r1, #1
 8009710:	4648      	mov	r0, r9
 8009712:	f000 fc41 	bl	8009f98 <__i2b>
 8009716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009718:	4604      	mov	r4, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 81da 	beq.w	8009ad4 <_dtoa_r+0xa74>
 8009720:	461a      	mov	r2, r3
 8009722:	4601      	mov	r1, r0
 8009724:	4648      	mov	r0, r9
 8009726:	f000 fcef 	bl	800a108 <__pow5mult>
 800972a:	9b07      	ldr	r3, [sp, #28]
 800972c:	2b01      	cmp	r3, #1
 800972e:	4604      	mov	r4, r0
 8009730:	f300 80a0 	bgt.w	8009874 <_dtoa_r+0x814>
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f040 8096 	bne.w	8009868 <_dtoa_r+0x808>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009742:	2a00      	cmp	r2, #0
 8009744:	f040 8092 	bne.w	800986c <_dtoa_r+0x80c>
 8009748:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800974c:	0d12      	lsrs	r2, r2, #20
 800974e:	0512      	lsls	r2, r2, #20
 8009750:	2a00      	cmp	r2, #0
 8009752:	f000 808d 	beq.w	8009870 <_dtoa_r+0x810>
 8009756:	9b04      	ldr	r3, [sp, #16]
 8009758:	3301      	adds	r3, #1
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	9b06      	ldr	r3, [sp, #24]
 800975e:	3301      	adds	r3, #1
 8009760:	9306      	str	r3, [sp, #24]
 8009762:	2301      	movs	r3, #1
 8009764:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 81b9 	beq.w	8009ae0 <_dtoa_r+0xa80>
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009774:	6910      	ldr	r0, [r2, #16]
 8009776:	f000 fbc3 	bl	8009f00 <__hi0bits>
 800977a:	f1c0 0020 	rsb	r0, r0, #32
 800977e:	9b06      	ldr	r3, [sp, #24]
 8009780:	4418      	add	r0, r3
 8009782:	f010 001f 	ands.w	r0, r0, #31
 8009786:	f000 8081 	beq.w	800988c <_dtoa_r+0x82c>
 800978a:	f1c0 0220 	rsb	r2, r0, #32
 800978e:	2a04      	cmp	r2, #4
 8009790:	dd73      	ble.n	800987a <_dtoa_r+0x81a>
 8009792:	9b04      	ldr	r3, [sp, #16]
 8009794:	f1c0 001c 	rsb	r0, r0, #28
 8009798:	4403      	add	r3, r0
 800979a:	9304      	str	r3, [sp, #16]
 800979c:	9b06      	ldr	r3, [sp, #24]
 800979e:	4406      	add	r6, r0
 80097a0:	4403      	add	r3, r0
 80097a2:	9306      	str	r3, [sp, #24]
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	dd05      	ble.n	80097b6 <_dtoa_r+0x756>
 80097aa:	9901      	ldr	r1, [sp, #4]
 80097ac:	461a      	mov	r2, r3
 80097ae:	4648      	mov	r0, r9
 80097b0:	f000 fd04 	bl	800a1bc <__lshift>
 80097b4:	9001      	str	r0, [sp, #4]
 80097b6:	9b06      	ldr	r3, [sp, #24]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dd05      	ble.n	80097c8 <_dtoa_r+0x768>
 80097bc:	4621      	mov	r1, r4
 80097be:	461a      	mov	r2, r3
 80097c0:	4648      	mov	r0, r9
 80097c2:	f000 fcfb 	bl	800a1bc <__lshift>
 80097c6:	4604      	mov	r4, r0
 80097c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d060      	beq.n	8009890 <_dtoa_r+0x830>
 80097ce:	9801      	ldr	r0, [sp, #4]
 80097d0:	4621      	mov	r1, r4
 80097d2:	f000 fd5f 	bl	800a294 <__mcmp>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	da5a      	bge.n	8009890 <_dtoa_r+0x830>
 80097da:	f108 33ff 	add.w	r3, r8, #4294967295
 80097de:	9305      	str	r3, [sp, #20]
 80097e0:	9901      	ldr	r1, [sp, #4]
 80097e2:	2300      	movs	r3, #0
 80097e4:	220a      	movs	r2, #10
 80097e6:	4648      	mov	r0, r9
 80097e8:	f000 fafa 	bl	8009de0 <__multadd>
 80097ec:	9b08      	ldr	r3, [sp, #32]
 80097ee:	9001      	str	r0, [sp, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 8177 	beq.w	8009ae4 <_dtoa_r+0xa84>
 80097f6:	4629      	mov	r1, r5
 80097f8:	2300      	movs	r3, #0
 80097fa:	220a      	movs	r2, #10
 80097fc:	4648      	mov	r0, r9
 80097fe:	f000 faef 	bl	8009de0 <__multadd>
 8009802:	f1bb 0f00 	cmp.w	fp, #0
 8009806:	4605      	mov	r5, r0
 8009808:	dc6e      	bgt.n	80098e8 <_dtoa_r+0x888>
 800980a:	9b07      	ldr	r3, [sp, #28]
 800980c:	2b02      	cmp	r3, #2
 800980e:	dc48      	bgt.n	80098a2 <_dtoa_r+0x842>
 8009810:	e06a      	b.n	80098e8 <_dtoa_r+0x888>
 8009812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009814:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009818:	e739      	b.n	800968e <_dtoa_r+0x62e>
 800981a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800981e:	42a3      	cmp	r3, r4
 8009820:	db07      	blt.n	8009832 <_dtoa_r+0x7d2>
 8009822:	f1ba 0f00 	cmp.w	sl, #0
 8009826:	eba3 0404 	sub.w	r4, r3, r4
 800982a:	db0b      	blt.n	8009844 <_dtoa_r+0x7e4>
 800982c:	9e04      	ldr	r6, [sp, #16]
 800982e:	4652      	mov	r2, sl
 8009830:	e72f      	b.n	8009692 <_dtoa_r+0x632>
 8009832:	1ae2      	subs	r2, r4, r3
 8009834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009836:	9e04      	ldr	r6, [sp, #16]
 8009838:	4413      	add	r3, r2
 800983a:	930a      	str	r3, [sp, #40]	@ 0x28
 800983c:	4652      	mov	r2, sl
 800983e:	4623      	mov	r3, r4
 8009840:	2400      	movs	r4, #0
 8009842:	e726      	b.n	8009692 <_dtoa_r+0x632>
 8009844:	9a04      	ldr	r2, [sp, #16]
 8009846:	eba2 060a 	sub.w	r6, r2, sl
 800984a:	2200      	movs	r2, #0
 800984c:	e721      	b.n	8009692 <_dtoa_r+0x632>
 800984e:	9e04      	ldr	r6, [sp, #16]
 8009850:	9d08      	ldr	r5, [sp, #32]
 8009852:	461c      	mov	r4, r3
 8009854:	e72a      	b.n	80096ac <_dtoa_r+0x64c>
 8009856:	9a01      	ldr	r2, [sp, #4]
 8009858:	9205      	str	r2, [sp, #20]
 800985a:	e752      	b.n	8009702 <_dtoa_r+0x6a2>
 800985c:	9901      	ldr	r1, [sp, #4]
 800985e:	461a      	mov	r2, r3
 8009860:	e751      	b.n	8009706 <_dtoa_r+0x6a6>
 8009862:	9b05      	ldr	r3, [sp, #20]
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	e752      	b.n	800970e <_dtoa_r+0x6ae>
 8009868:	2300      	movs	r3, #0
 800986a:	e77b      	b.n	8009764 <_dtoa_r+0x704>
 800986c:	9b02      	ldr	r3, [sp, #8]
 800986e:	e779      	b.n	8009764 <_dtoa_r+0x704>
 8009870:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009872:	e778      	b.n	8009766 <_dtoa_r+0x706>
 8009874:	2300      	movs	r3, #0
 8009876:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009878:	e779      	b.n	800976e <_dtoa_r+0x70e>
 800987a:	d093      	beq.n	80097a4 <_dtoa_r+0x744>
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	321c      	adds	r2, #28
 8009880:	4413      	add	r3, r2
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	9b06      	ldr	r3, [sp, #24]
 8009886:	4416      	add	r6, r2
 8009888:	4413      	add	r3, r2
 800988a:	e78a      	b.n	80097a2 <_dtoa_r+0x742>
 800988c:	4602      	mov	r2, r0
 800988e:	e7f5      	b.n	800987c <_dtoa_r+0x81c>
 8009890:	f1ba 0f00 	cmp.w	sl, #0
 8009894:	f8cd 8014 	str.w	r8, [sp, #20]
 8009898:	46d3      	mov	fp, sl
 800989a:	dc21      	bgt.n	80098e0 <_dtoa_r+0x880>
 800989c:	9b07      	ldr	r3, [sp, #28]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	dd1e      	ble.n	80098e0 <_dtoa_r+0x880>
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	f47f addc 	bne.w	8009462 <_dtoa_r+0x402>
 80098aa:	4621      	mov	r1, r4
 80098ac:	465b      	mov	r3, fp
 80098ae:	2205      	movs	r2, #5
 80098b0:	4648      	mov	r0, r9
 80098b2:	f000 fa95 	bl	8009de0 <__multadd>
 80098b6:	4601      	mov	r1, r0
 80098b8:	4604      	mov	r4, r0
 80098ba:	9801      	ldr	r0, [sp, #4]
 80098bc:	f000 fcea 	bl	800a294 <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f77f adce 	ble.w	8009462 <_dtoa_r+0x402>
 80098c6:	463e      	mov	r6, r7
 80098c8:	2331      	movs	r3, #49	@ 0x31
 80098ca:	f806 3b01 	strb.w	r3, [r6], #1
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	3301      	adds	r3, #1
 80098d2:	9305      	str	r3, [sp, #20]
 80098d4:	e5c9      	b.n	800946a <_dtoa_r+0x40a>
 80098d6:	f8cd 8014 	str.w	r8, [sp, #20]
 80098da:	4654      	mov	r4, sl
 80098dc:	4625      	mov	r5, r4
 80098de:	e7f2      	b.n	80098c6 <_dtoa_r+0x866>
 80098e0:	9b08      	ldr	r3, [sp, #32]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 8102 	beq.w	8009aec <_dtoa_r+0xa8c>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	dd05      	ble.n	80098f8 <_dtoa_r+0x898>
 80098ec:	4629      	mov	r1, r5
 80098ee:	4632      	mov	r2, r6
 80098f0:	4648      	mov	r0, r9
 80098f2:	f000 fc63 	bl	800a1bc <__lshift>
 80098f6:	4605      	mov	r5, r0
 80098f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d058      	beq.n	80099b0 <_dtoa_r+0x950>
 80098fe:	6869      	ldr	r1, [r5, #4]
 8009900:	4648      	mov	r0, r9
 8009902:	f000 fa0b 	bl	8009d1c <_Balloc>
 8009906:	4606      	mov	r6, r0
 8009908:	b928      	cbnz	r0, 8009916 <_dtoa_r+0x8b6>
 800990a:	4b82      	ldr	r3, [pc, #520]	@ (8009b14 <_dtoa_r+0xab4>)
 800990c:	4602      	mov	r2, r0
 800990e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009912:	f7ff bbbe 	b.w	8009092 <_dtoa_r+0x32>
 8009916:	692a      	ldr	r2, [r5, #16]
 8009918:	3202      	adds	r2, #2
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	f105 010c 	add.w	r1, r5, #12
 8009920:	300c      	adds	r0, #12
 8009922:	f002 f8df 	bl	800bae4 <memcpy>
 8009926:	2201      	movs	r2, #1
 8009928:	4631      	mov	r1, r6
 800992a:	4648      	mov	r0, r9
 800992c:	f000 fc46 	bl	800a1bc <__lshift>
 8009930:	1c7b      	adds	r3, r7, #1
 8009932:	9304      	str	r3, [sp, #16]
 8009934:	eb07 030b 	add.w	r3, r7, fp
 8009938:	9309      	str	r3, [sp, #36]	@ 0x24
 800993a:	9b02      	ldr	r3, [sp, #8]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	46a8      	mov	r8, r5
 8009942:	9308      	str	r3, [sp, #32]
 8009944:	4605      	mov	r5, r0
 8009946:	9b04      	ldr	r3, [sp, #16]
 8009948:	9801      	ldr	r0, [sp, #4]
 800994a:	4621      	mov	r1, r4
 800994c:	f103 3bff 	add.w	fp, r3, #4294967295
 8009950:	f7ff fafc 	bl	8008f4c <quorem>
 8009954:	4641      	mov	r1, r8
 8009956:	9002      	str	r0, [sp, #8]
 8009958:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800995c:	9801      	ldr	r0, [sp, #4]
 800995e:	f000 fc99 	bl	800a294 <__mcmp>
 8009962:	462a      	mov	r2, r5
 8009964:	9006      	str	r0, [sp, #24]
 8009966:	4621      	mov	r1, r4
 8009968:	4648      	mov	r0, r9
 800996a:	f000 fcaf 	bl	800a2cc <__mdiff>
 800996e:	68c2      	ldr	r2, [r0, #12]
 8009970:	4606      	mov	r6, r0
 8009972:	b9fa      	cbnz	r2, 80099b4 <_dtoa_r+0x954>
 8009974:	4601      	mov	r1, r0
 8009976:	9801      	ldr	r0, [sp, #4]
 8009978:	f000 fc8c 	bl	800a294 <__mcmp>
 800997c:	4602      	mov	r2, r0
 800997e:	4631      	mov	r1, r6
 8009980:	4648      	mov	r0, r9
 8009982:	920a      	str	r2, [sp, #40]	@ 0x28
 8009984:	f000 fa0a 	bl	8009d9c <_Bfree>
 8009988:	9b07      	ldr	r3, [sp, #28]
 800998a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800998c:	9e04      	ldr	r6, [sp, #16]
 800998e:	ea42 0103 	orr.w	r1, r2, r3
 8009992:	9b08      	ldr	r3, [sp, #32]
 8009994:	4319      	orrs	r1, r3
 8009996:	d10f      	bne.n	80099b8 <_dtoa_r+0x958>
 8009998:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800999c:	d028      	beq.n	80099f0 <_dtoa_r+0x990>
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dd02      	ble.n	80099aa <_dtoa_r+0x94a>
 80099a4:	9b02      	ldr	r3, [sp, #8]
 80099a6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80099aa:	f88b a000 	strb.w	sl, [fp]
 80099ae:	e55e      	b.n	800946e <_dtoa_r+0x40e>
 80099b0:	4628      	mov	r0, r5
 80099b2:	e7bd      	b.n	8009930 <_dtoa_r+0x8d0>
 80099b4:	2201      	movs	r2, #1
 80099b6:	e7e2      	b.n	800997e <_dtoa_r+0x91e>
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	db04      	blt.n	80099c8 <_dtoa_r+0x968>
 80099be:	9907      	ldr	r1, [sp, #28]
 80099c0:	430b      	orrs	r3, r1
 80099c2:	9908      	ldr	r1, [sp, #32]
 80099c4:	430b      	orrs	r3, r1
 80099c6:	d120      	bne.n	8009a0a <_dtoa_r+0x9aa>
 80099c8:	2a00      	cmp	r2, #0
 80099ca:	ddee      	ble.n	80099aa <_dtoa_r+0x94a>
 80099cc:	9901      	ldr	r1, [sp, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	4648      	mov	r0, r9
 80099d2:	f000 fbf3 	bl	800a1bc <__lshift>
 80099d6:	4621      	mov	r1, r4
 80099d8:	9001      	str	r0, [sp, #4]
 80099da:	f000 fc5b 	bl	800a294 <__mcmp>
 80099de:	2800      	cmp	r0, #0
 80099e0:	dc03      	bgt.n	80099ea <_dtoa_r+0x98a>
 80099e2:	d1e2      	bne.n	80099aa <_dtoa_r+0x94a>
 80099e4:	f01a 0f01 	tst.w	sl, #1
 80099e8:	d0df      	beq.n	80099aa <_dtoa_r+0x94a>
 80099ea:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80099ee:	d1d9      	bne.n	80099a4 <_dtoa_r+0x944>
 80099f0:	2339      	movs	r3, #57	@ 0x39
 80099f2:	f88b 3000 	strb.w	r3, [fp]
 80099f6:	4633      	mov	r3, r6
 80099f8:	461e      	mov	r6, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a00:	2a39      	cmp	r2, #57	@ 0x39
 8009a02:	d052      	beq.n	8009aaa <_dtoa_r+0xa4a>
 8009a04:	3201      	adds	r2, #1
 8009a06:	701a      	strb	r2, [r3, #0]
 8009a08:	e531      	b.n	800946e <_dtoa_r+0x40e>
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	dd07      	ble.n	8009a1e <_dtoa_r+0x9be>
 8009a0e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009a12:	d0ed      	beq.n	80099f0 <_dtoa_r+0x990>
 8009a14:	f10a 0301 	add.w	r3, sl, #1
 8009a18:	f88b 3000 	strb.w	r3, [fp]
 8009a1c:	e527      	b.n	800946e <_dtoa_r+0x40e>
 8009a1e:	9b04      	ldr	r3, [sp, #16]
 8009a20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a22:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d029      	beq.n	8009a7e <_dtoa_r+0xa1e>
 8009a2a:	9901      	ldr	r1, [sp, #4]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	220a      	movs	r2, #10
 8009a30:	4648      	mov	r0, r9
 8009a32:	f000 f9d5 	bl	8009de0 <__multadd>
 8009a36:	45a8      	cmp	r8, r5
 8009a38:	9001      	str	r0, [sp, #4]
 8009a3a:	f04f 0300 	mov.w	r3, #0
 8009a3e:	f04f 020a 	mov.w	r2, #10
 8009a42:	4641      	mov	r1, r8
 8009a44:	4648      	mov	r0, r9
 8009a46:	d107      	bne.n	8009a58 <_dtoa_r+0x9f8>
 8009a48:	f000 f9ca 	bl	8009de0 <__multadd>
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	4605      	mov	r5, r0
 8009a50:	9b04      	ldr	r3, [sp, #16]
 8009a52:	3301      	adds	r3, #1
 8009a54:	9304      	str	r3, [sp, #16]
 8009a56:	e776      	b.n	8009946 <_dtoa_r+0x8e6>
 8009a58:	f000 f9c2 	bl	8009de0 <__multadd>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4680      	mov	r8, r0
 8009a60:	2300      	movs	r3, #0
 8009a62:	220a      	movs	r2, #10
 8009a64:	4648      	mov	r0, r9
 8009a66:	f000 f9bb 	bl	8009de0 <__multadd>
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	e7f0      	b.n	8009a50 <_dtoa_r+0x9f0>
 8009a6e:	f1bb 0f00 	cmp.w	fp, #0
 8009a72:	bfcc      	ite	gt
 8009a74:	465e      	movgt	r6, fp
 8009a76:	2601      	movle	r6, #1
 8009a78:	443e      	add	r6, r7
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	9901      	ldr	r1, [sp, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	4648      	mov	r0, r9
 8009a84:	f000 fb9a 	bl	800a1bc <__lshift>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	9001      	str	r0, [sp, #4]
 8009a8c:	f000 fc02 	bl	800a294 <__mcmp>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	dcb0      	bgt.n	80099f6 <_dtoa_r+0x996>
 8009a94:	d102      	bne.n	8009a9c <_dtoa_r+0xa3c>
 8009a96:	f01a 0f01 	tst.w	sl, #1
 8009a9a:	d1ac      	bne.n	80099f6 <_dtoa_r+0x996>
 8009a9c:	4633      	mov	r3, r6
 8009a9e:	461e      	mov	r6, r3
 8009aa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aa4:	2a30      	cmp	r2, #48	@ 0x30
 8009aa6:	d0fa      	beq.n	8009a9e <_dtoa_r+0xa3e>
 8009aa8:	e4e1      	b.n	800946e <_dtoa_r+0x40e>
 8009aaa:	429f      	cmp	r7, r3
 8009aac:	d1a4      	bne.n	80099f8 <_dtoa_r+0x998>
 8009aae:	9b05      	ldr	r3, [sp, #20]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	2331      	movs	r3, #49	@ 0x31
 8009ab6:	703b      	strb	r3, [r7, #0]
 8009ab8:	e4d9      	b.n	800946e <_dtoa_r+0x40e>
 8009aba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009abc:	4f16      	ldr	r7, [pc, #88]	@ (8009b18 <_dtoa_r+0xab8>)
 8009abe:	b11b      	cbz	r3, 8009ac8 <_dtoa_r+0xa68>
 8009ac0:	f107 0308 	add.w	r3, r7, #8
 8009ac4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	4638      	mov	r0, r7
 8009aca:	b011      	add	sp, #68	@ 0x44
 8009acc:	ecbd 8b02 	vpop	{d8}
 8009ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad4:	9b07      	ldr	r3, [sp, #28]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	f77f ae2c 	ble.w	8009734 <_dtoa_r+0x6d4>
 8009adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ade:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ae0:	2001      	movs	r0, #1
 8009ae2:	e64c      	b.n	800977e <_dtoa_r+0x71e>
 8009ae4:	f1bb 0f00 	cmp.w	fp, #0
 8009ae8:	f77f aed8 	ble.w	800989c <_dtoa_r+0x83c>
 8009aec:	463e      	mov	r6, r7
 8009aee:	9801      	ldr	r0, [sp, #4]
 8009af0:	4621      	mov	r1, r4
 8009af2:	f7ff fa2b 	bl	8008f4c <quorem>
 8009af6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009afa:	f806 ab01 	strb.w	sl, [r6], #1
 8009afe:	1bf2      	subs	r2, r6, r7
 8009b00:	4593      	cmp	fp, r2
 8009b02:	ddb4      	ble.n	8009a6e <_dtoa_r+0xa0e>
 8009b04:	9901      	ldr	r1, [sp, #4]
 8009b06:	2300      	movs	r3, #0
 8009b08:	220a      	movs	r2, #10
 8009b0a:	4648      	mov	r0, r9
 8009b0c:	f000 f968 	bl	8009de0 <__multadd>
 8009b10:	9001      	str	r0, [sp, #4]
 8009b12:	e7ec      	b.n	8009aee <_dtoa_r+0xa8e>
 8009b14:	0800cd49 	.word	0x0800cd49
 8009b18:	0800cccd 	.word	0x0800cccd

08009b1c <_free_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4605      	mov	r5, r0
 8009b20:	2900      	cmp	r1, #0
 8009b22:	d041      	beq.n	8009ba8 <_free_r+0x8c>
 8009b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b28:	1f0c      	subs	r4, r1, #4
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bfb8      	it	lt
 8009b2e:	18e4      	addlt	r4, r4, r3
 8009b30:	f000 f8e8 	bl	8009d04 <__malloc_lock>
 8009b34:	4a1d      	ldr	r2, [pc, #116]	@ (8009bac <_free_r+0x90>)
 8009b36:	6813      	ldr	r3, [r2, #0]
 8009b38:	b933      	cbnz	r3, 8009b48 <_free_r+0x2c>
 8009b3a:	6063      	str	r3, [r4, #4]
 8009b3c:	6014      	str	r4, [r2, #0]
 8009b3e:	4628      	mov	r0, r5
 8009b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b44:	f000 b8e4 	b.w	8009d10 <__malloc_unlock>
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	d908      	bls.n	8009b5e <_free_r+0x42>
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	1821      	adds	r1, r4, r0
 8009b50:	428b      	cmp	r3, r1
 8009b52:	bf01      	itttt	eq
 8009b54:	6819      	ldreq	r1, [r3, #0]
 8009b56:	685b      	ldreq	r3, [r3, #4]
 8009b58:	1809      	addeq	r1, r1, r0
 8009b5a:	6021      	streq	r1, [r4, #0]
 8009b5c:	e7ed      	b.n	8009b3a <_free_r+0x1e>
 8009b5e:	461a      	mov	r2, r3
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	b10b      	cbz	r3, 8009b68 <_free_r+0x4c>
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	d9fa      	bls.n	8009b5e <_free_r+0x42>
 8009b68:	6811      	ldr	r1, [r2, #0]
 8009b6a:	1850      	adds	r0, r2, r1
 8009b6c:	42a0      	cmp	r0, r4
 8009b6e:	d10b      	bne.n	8009b88 <_free_r+0x6c>
 8009b70:	6820      	ldr	r0, [r4, #0]
 8009b72:	4401      	add	r1, r0
 8009b74:	1850      	adds	r0, r2, r1
 8009b76:	4283      	cmp	r3, r0
 8009b78:	6011      	str	r1, [r2, #0]
 8009b7a:	d1e0      	bne.n	8009b3e <_free_r+0x22>
 8009b7c:	6818      	ldr	r0, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	6053      	str	r3, [r2, #4]
 8009b82:	4408      	add	r0, r1
 8009b84:	6010      	str	r0, [r2, #0]
 8009b86:	e7da      	b.n	8009b3e <_free_r+0x22>
 8009b88:	d902      	bls.n	8009b90 <_free_r+0x74>
 8009b8a:	230c      	movs	r3, #12
 8009b8c:	602b      	str	r3, [r5, #0]
 8009b8e:	e7d6      	b.n	8009b3e <_free_r+0x22>
 8009b90:	6820      	ldr	r0, [r4, #0]
 8009b92:	1821      	adds	r1, r4, r0
 8009b94:	428b      	cmp	r3, r1
 8009b96:	bf04      	itt	eq
 8009b98:	6819      	ldreq	r1, [r3, #0]
 8009b9a:	685b      	ldreq	r3, [r3, #4]
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	bf04      	itt	eq
 8009ba0:	1809      	addeq	r1, r1, r0
 8009ba2:	6021      	streq	r1, [r4, #0]
 8009ba4:	6054      	str	r4, [r2, #4]
 8009ba6:	e7ca      	b.n	8009b3e <_free_r+0x22>
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	bf00      	nop
 8009bac:	2400062c 	.word	0x2400062c

08009bb0 <malloc>:
 8009bb0:	4b02      	ldr	r3, [pc, #8]	@ (8009bbc <malloc+0xc>)
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	f000 b825 	b.w	8009c04 <_malloc_r>
 8009bba:	bf00      	nop
 8009bbc:	2400002c 	.word	0x2400002c

08009bc0 <sbrk_aligned>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8009c00 <sbrk_aligned+0x40>)
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	6831      	ldr	r1, [r6, #0]
 8009bc8:	4605      	mov	r5, r0
 8009bca:	b911      	cbnz	r1, 8009bd2 <sbrk_aligned+0x12>
 8009bcc:	f001 ff7a 	bl	800bac4 <_sbrk_r>
 8009bd0:	6030      	str	r0, [r6, #0]
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f001 ff75 	bl	800bac4 <_sbrk_r>
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	d103      	bne.n	8009be6 <sbrk_aligned+0x26>
 8009bde:	f04f 34ff 	mov.w	r4, #4294967295
 8009be2:	4620      	mov	r0, r4
 8009be4:	bd70      	pop	{r4, r5, r6, pc}
 8009be6:	1cc4      	adds	r4, r0, #3
 8009be8:	f024 0403 	bic.w	r4, r4, #3
 8009bec:	42a0      	cmp	r0, r4
 8009bee:	d0f8      	beq.n	8009be2 <sbrk_aligned+0x22>
 8009bf0:	1a21      	subs	r1, r4, r0
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f001 ff66 	bl	800bac4 <_sbrk_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d1f2      	bne.n	8009be2 <sbrk_aligned+0x22>
 8009bfc:	e7ef      	b.n	8009bde <sbrk_aligned+0x1e>
 8009bfe:	bf00      	nop
 8009c00:	24000628 	.word	0x24000628

08009c04 <_malloc_r>:
 8009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c08:	1ccd      	adds	r5, r1, #3
 8009c0a:	f025 0503 	bic.w	r5, r5, #3
 8009c0e:	3508      	adds	r5, #8
 8009c10:	2d0c      	cmp	r5, #12
 8009c12:	bf38      	it	cc
 8009c14:	250c      	movcc	r5, #12
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	4606      	mov	r6, r0
 8009c1a:	db01      	blt.n	8009c20 <_malloc_r+0x1c>
 8009c1c:	42a9      	cmp	r1, r5
 8009c1e:	d904      	bls.n	8009c2a <_malloc_r+0x26>
 8009c20:	230c      	movs	r3, #12
 8009c22:	6033      	str	r3, [r6, #0]
 8009c24:	2000      	movs	r0, #0
 8009c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d00 <_malloc_r+0xfc>
 8009c2e:	f000 f869 	bl	8009d04 <__malloc_lock>
 8009c32:	f8d8 3000 	ldr.w	r3, [r8]
 8009c36:	461c      	mov	r4, r3
 8009c38:	bb44      	cbnz	r4, 8009c8c <_malloc_r+0x88>
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7ff ffbf 	bl	8009bc0 <sbrk_aligned>
 8009c42:	1c43      	adds	r3, r0, #1
 8009c44:	4604      	mov	r4, r0
 8009c46:	d158      	bne.n	8009cfa <_malloc_r+0xf6>
 8009c48:	f8d8 4000 	ldr.w	r4, [r8]
 8009c4c:	4627      	mov	r7, r4
 8009c4e:	2f00      	cmp	r7, #0
 8009c50:	d143      	bne.n	8009cda <_malloc_r+0xd6>
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	d04b      	beq.n	8009cee <_malloc_r+0xea>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	4639      	mov	r1, r7
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	eb04 0903 	add.w	r9, r4, r3
 8009c60:	f001 ff30 	bl	800bac4 <_sbrk_r>
 8009c64:	4581      	cmp	r9, r0
 8009c66:	d142      	bne.n	8009cee <_malloc_r+0xea>
 8009c68:	6821      	ldr	r1, [r4, #0]
 8009c6a:	1a6d      	subs	r5, r5, r1
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f7ff ffa6 	bl	8009bc0 <sbrk_aligned>
 8009c74:	3001      	adds	r0, #1
 8009c76:	d03a      	beq.n	8009cee <_malloc_r+0xea>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	442b      	add	r3, r5
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	bb62      	cbnz	r2, 8009ce0 <_malloc_r+0xdc>
 8009c86:	f8c8 7000 	str.w	r7, [r8]
 8009c8a:	e00f      	b.n	8009cac <_malloc_r+0xa8>
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	1b52      	subs	r2, r2, r5
 8009c90:	d420      	bmi.n	8009cd4 <_malloc_r+0xd0>
 8009c92:	2a0b      	cmp	r2, #11
 8009c94:	d917      	bls.n	8009cc6 <_malloc_r+0xc2>
 8009c96:	1961      	adds	r1, r4, r5
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	6025      	str	r5, [r4, #0]
 8009c9c:	bf18      	it	ne
 8009c9e:	6059      	strne	r1, [r3, #4]
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	bf08      	it	eq
 8009ca4:	f8c8 1000 	streq.w	r1, [r8]
 8009ca8:	5162      	str	r2, [r4, r5]
 8009caa:	604b      	str	r3, [r1, #4]
 8009cac:	4630      	mov	r0, r6
 8009cae:	f000 f82f 	bl	8009d10 <__malloc_unlock>
 8009cb2:	f104 000b 	add.w	r0, r4, #11
 8009cb6:	1d23      	adds	r3, r4, #4
 8009cb8:	f020 0007 	bic.w	r0, r0, #7
 8009cbc:	1ac2      	subs	r2, r0, r3
 8009cbe:	bf1c      	itt	ne
 8009cc0:	1a1b      	subne	r3, r3, r0
 8009cc2:	50a3      	strne	r3, [r4, r2]
 8009cc4:	e7af      	b.n	8009c26 <_malloc_r+0x22>
 8009cc6:	6862      	ldr	r2, [r4, #4]
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	bf0c      	ite	eq
 8009ccc:	f8c8 2000 	streq.w	r2, [r8]
 8009cd0:	605a      	strne	r2, [r3, #4]
 8009cd2:	e7eb      	b.n	8009cac <_malloc_r+0xa8>
 8009cd4:	4623      	mov	r3, r4
 8009cd6:	6864      	ldr	r4, [r4, #4]
 8009cd8:	e7ae      	b.n	8009c38 <_malloc_r+0x34>
 8009cda:	463c      	mov	r4, r7
 8009cdc:	687f      	ldr	r7, [r7, #4]
 8009cde:	e7b6      	b.n	8009c4e <_malloc_r+0x4a>
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	d1fb      	bne.n	8009ce0 <_malloc_r+0xdc>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	6053      	str	r3, [r2, #4]
 8009cec:	e7de      	b.n	8009cac <_malloc_r+0xa8>
 8009cee:	230c      	movs	r3, #12
 8009cf0:	6033      	str	r3, [r6, #0]
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f000 f80c 	bl	8009d10 <__malloc_unlock>
 8009cf8:	e794      	b.n	8009c24 <_malloc_r+0x20>
 8009cfa:	6005      	str	r5, [r0, #0]
 8009cfc:	e7d6      	b.n	8009cac <_malloc_r+0xa8>
 8009cfe:	bf00      	nop
 8009d00:	2400062c 	.word	0x2400062c

08009d04 <__malloc_lock>:
 8009d04:	4801      	ldr	r0, [pc, #4]	@ (8009d0c <__malloc_lock+0x8>)
 8009d06:	f7ff b918 	b.w	8008f3a <__retarget_lock_acquire_recursive>
 8009d0a:	bf00      	nop
 8009d0c:	24000624 	.word	0x24000624

08009d10 <__malloc_unlock>:
 8009d10:	4801      	ldr	r0, [pc, #4]	@ (8009d18 <__malloc_unlock+0x8>)
 8009d12:	f7ff b913 	b.w	8008f3c <__retarget_lock_release_recursive>
 8009d16:	bf00      	nop
 8009d18:	24000624 	.word	0x24000624

08009d1c <_Balloc>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	69c6      	ldr	r6, [r0, #28]
 8009d20:	4604      	mov	r4, r0
 8009d22:	460d      	mov	r5, r1
 8009d24:	b976      	cbnz	r6, 8009d44 <_Balloc+0x28>
 8009d26:	2010      	movs	r0, #16
 8009d28:	f7ff ff42 	bl	8009bb0 <malloc>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	61e0      	str	r0, [r4, #28]
 8009d30:	b920      	cbnz	r0, 8009d3c <_Balloc+0x20>
 8009d32:	4b18      	ldr	r3, [pc, #96]	@ (8009d94 <_Balloc+0x78>)
 8009d34:	4818      	ldr	r0, [pc, #96]	@ (8009d98 <_Balloc+0x7c>)
 8009d36:	216b      	movs	r1, #107	@ 0x6b
 8009d38:	f001 feea 	bl	800bb10 <__assert_func>
 8009d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d40:	6006      	str	r6, [r0, #0]
 8009d42:	60c6      	str	r6, [r0, #12]
 8009d44:	69e6      	ldr	r6, [r4, #28]
 8009d46:	68f3      	ldr	r3, [r6, #12]
 8009d48:	b183      	cbz	r3, 8009d6c <_Balloc+0x50>
 8009d4a:	69e3      	ldr	r3, [r4, #28]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d52:	b9b8      	cbnz	r0, 8009d84 <_Balloc+0x68>
 8009d54:	2101      	movs	r1, #1
 8009d56:	fa01 f605 	lsl.w	r6, r1, r5
 8009d5a:	1d72      	adds	r2, r6, #5
 8009d5c:	0092      	lsls	r2, r2, #2
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f001 fef4 	bl	800bb4c <_calloc_r>
 8009d64:	b160      	cbz	r0, 8009d80 <_Balloc+0x64>
 8009d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d6a:	e00e      	b.n	8009d8a <_Balloc+0x6e>
 8009d6c:	2221      	movs	r2, #33	@ 0x21
 8009d6e:	2104      	movs	r1, #4
 8009d70:	4620      	mov	r0, r4
 8009d72:	f001 feeb 	bl	800bb4c <_calloc_r>
 8009d76:	69e3      	ldr	r3, [r4, #28]
 8009d78:	60f0      	str	r0, [r6, #12]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e4      	bne.n	8009d4a <_Balloc+0x2e>
 8009d80:	2000      	movs	r0, #0
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	6802      	ldr	r2, [r0, #0]
 8009d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d90:	e7f7      	b.n	8009d82 <_Balloc+0x66>
 8009d92:	bf00      	nop
 8009d94:	0800ccda 	.word	0x0800ccda
 8009d98:	0800cd5a 	.word	0x0800cd5a

08009d9c <_Bfree>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	69c6      	ldr	r6, [r0, #28]
 8009da0:	4605      	mov	r5, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	b976      	cbnz	r6, 8009dc4 <_Bfree+0x28>
 8009da6:	2010      	movs	r0, #16
 8009da8:	f7ff ff02 	bl	8009bb0 <malloc>
 8009dac:	4602      	mov	r2, r0
 8009dae:	61e8      	str	r0, [r5, #28]
 8009db0:	b920      	cbnz	r0, 8009dbc <_Bfree+0x20>
 8009db2:	4b09      	ldr	r3, [pc, #36]	@ (8009dd8 <_Bfree+0x3c>)
 8009db4:	4809      	ldr	r0, [pc, #36]	@ (8009ddc <_Bfree+0x40>)
 8009db6:	218f      	movs	r1, #143	@ 0x8f
 8009db8:	f001 feaa 	bl	800bb10 <__assert_func>
 8009dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dc0:	6006      	str	r6, [r0, #0]
 8009dc2:	60c6      	str	r6, [r0, #12]
 8009dc4:	b13c      	cbz	r4, 8009dd6 <_Bfree+0x3a>
 8009dc6:	69eb      	ldr	r3, [r5, #28]
 8009dc8:	6862      	ldr	r2, [r4, #4]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dd0:	6021      	str	r1, [r4, #0]
 8009dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
 8009dd8:	0800ccda 	.word	0x0800ccda
 8009ddc:	0800cd5a 	.word	0x0800cd5a

08009de0 <__multadd>:
 8009de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de4:	690d      	ldr	r5, [r1, #16]
 8009de6:	4607      	mov	r7, r0
 8009de8:	460c      	mov	r4, r1
 8009dea:	461e      	mov	r6, r3
 8009dec:	f101 0c14 	add.w	ip, r1, #20
 8009df0:	2000      	movs	r0, #0
 8009df2:	f8dc 3000 	ldr.w	r3, [ip]
 8009df6:	b299      	uxth	r1, r3
 8009df8:	fb02 6101 	mla	r1, r2, r1, r6
 8009dfc:	0c1e      	lsrs	r6, r3, #16
 8009dfe:	0c0b      	lsrs	r3, r1, #16
 8009e00:	fb02 3306 	mla	r3, r2, r6, r3
 8009e04:	b289      	uxth	r1, r1
 8009e06:	3001      	adds	r0, #1
 8009e08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e0c:	4285      	cmp	r5, r0
 8009e0e:	f84c 1b04 	str.w	r1, [ip], #4
 8009e12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e16:	dcec      	bgt.n	8009df2 <__multadd+0x12>
 8009e18:	b30e      	cbz	r6, 8009e5e <__multadd+0x7e>
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	42ab      	cmp	r3, r5
 8009e1e:	dc19      	bgt.n	8009e54 <__multadd+0x74>
 8009e20:	6861      	ldr	r1, [r4, #4]
 8009e22:	4638      	mov	r0, r7
 8009e24:	3101      	adds	r1, #1
 8009e26:	f7ff ff79 	bl	8009d1c <_Balloc>
 8009e2a:	4680      	mov	r8, r0
 8009e2c:	b928      	cbnz	r0, 8009e3a <__multadd+0x5a>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	4b0c      	ldr	r3, [pc, #48]	@ (8009e64 <__multadd+0x84>)
 8009e32:	480d      	ldr	r0, [pc, #52]	@ (8009e68 <__multadd+0x88>)
 8009e34:	21ba      	movs	r1, #186	@ 0xba
 8009e36:	f001 fe6b 	bl	800bb10 <__assert_func>
 8009e3a:	6922      	ldr	r2, [r4, #16]
 8009e3c:	3202      	adds	r2, #2
 8009e3e:	f104 010c 	add.w	r1, r4, #12
 8009e42:	0092      	lsls	r2, r2, #2
 8009e44:	300c      	adds	r0, #12
 8009e46:	f001 fe4d 	bl	800bae4 <memcpy>
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4638      	mov	r0, r7
 8009e4e:	f7ff ffa5 	bl	8009d9c <_Bfree>
 8009e52:	4644      	mov	r4, r8
 8009e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e58:	3501      	adds	r5, #1
 8009e5a:	615e      	str	r6, [r3, #20]
 8009e5c:	6125      	str	r5, [r4, #16]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e64:	0800cd49 	.word	0x0800cd49
 8009e68:	0800cd5a 	.word	0x0800cd5a

08009e6c <__s2b>:
 8009e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e70:	460c      	mov	r4, r1
 8009e72:	4615      	mov	r5, r2
 8009e74:	461f      	mov	r7, r3
 8009e76:	2209      	movs	r2, #9
 8009e78:	3308      	adds	r3, #8
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e80:	2100      	movs	r1, #0
 8009e82:	2201      	movs	r2, #1
 8009e84:	429a      	cmp	r2, r3
 8009e86:	db09      	blt.n	8009e9c <__s2b+0x30>
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7ff ff47 	bl	8009d1c <_Balloc>
 8009e8e:	b940      	cbnz	r0, 8009ea2 <__s2b+0x36>
 8009e90:	4602      	mov	r2, r0
 8009e92:	4b19      	ldr	r3, [pc, #100]	@ (8009ef8 <__s2b+0x8c>)
 8009e94:	4819      	ldr	r0, [pc, #100]	@ (8009efc <__s2b+0x90>)
 8009e96:	21d3      	movs	r1, #211	@ 0xd3
 8009e98:	f001 fe3a 	bl	800bb10 <__assert_func>
 8009e9c:	0052      	lsls	r2, r2, #1
 8009e9e:	3101      	adds	r1, #1
 8009ea0:	e7f0      	b.n	8009e84 <__s2b+0x18>
 8009ea2:	9b08      	ldr	r3, [sp, #32]
 8009ea4:	6143      	str	r3, [r0, #20]
 8009ea6:	2d09      	cmp	r5, #9
 8009ea8:	f04f 0301 	mov.w	r3, #1
 8009eac:	6103      	str	r3, [r0, #16]
 8009eae:	dd16      	ble.n	8009ede <__s2b+0x72>
 8009eb0:	f104 0909 	add.w	r9, r4, #9
 8009eb4:	46c8      	mov	r8, r9
 8009eb6:	442c      	add	r4, r5
 8009eb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ebc:	4601      	mov	r1, r0
 8009ebe:	3b30      	subs	r3, #48	@ 0x30
 8009ec0:	220a      	movs	r2, #10
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ff8c 	bl	8009de0 <__multadd>
 8009ec8:	45a0      	cmp	r8, r4
 8009eca:	d1f5      	bne.n	8009eb8 <__s2b+0x4c>
 8009ecc:	f1a5 0408 	sub.w	r4, r5, #8
 8009ed0:	444c      	add	r4, r9
 8009ed2:	1b2d      	subs	r5, r5, r4
 8009ed4:	1963      	adds	r3, r4, r5
 8009ed6:	42bb      	cmp	r3, r7
 8009ed8:	db04      	blt.n	8009ee4 <__s2b+0x78>
 8009eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ede:	340a      	adds	r4, #10
 8009ee0:	2509      	movs	r5, #9
 8009ee2:	e7f6      	b.n	8009ed2 <__s2b+0x66>
 8009ee4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ee8:	4601      	mov	r1, r0
 8009eea:	3b30      	subs	r3, #48	@ 0x30
 8009eec:	220a      	movs	r2, #10
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ff76 	bl	8009de0 <__multadd>
 8009ef4:	e7ee      	b.n	8009ed4 <__s2b+0x68>
 8009ef6:	bf00      	nop
 8009ef8:	0800cd49 	.word	0x0800cd49
 8009efc:	0800cd5a 	.word	0x0800cd5a

08009f00 <__hi0bits>:
 8009f00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f04:	4603      	mov	r3, r0
 8009f06:	bf36      	itet	cc
 8009f08:	0403      	lslcc	r3, r0, #16
 8009f0a:	2000      	movcs	r0, #0
 8009f0c:	2010      	movcc	r0, #16
 8009f0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f12:	bf3c      	itt	cc
 8009f14:	021b      	lslcc	r3, r3, #8
 8009f16:	3008      	addcc	r0, #8
 8009f18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f1c:	bf3c      	itt	cc
 8009f1e:	011b      	lslcc	r3, r3, #4
 8009f20:	3004      	addcc	r0, #4
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f26:	bf3c      	itt	cc
 8009f28:	009b      	lslcc	r3, r3, #2
 8009f2a:	3002      	addcc	r0, #2
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	db05      	blt.n	8009f3c <__hi0bits+0x3c>
 8009f30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f34:	f100 0001 	add.w	r0, r0, #1
 8009f38:	bf08      	it	eq
 8009f3a:	2020      	moveq	r0, #32
 8009f3c:	4770      	bx	lr

08009f3e <__lo0bits>:
 8009f3e:	6803      	ldr	r3, [r0, #0]
 8009f40:	4602      	mov	r2, r0
 8009f42:	f013 0007 	ands.w	r0, r3, #7
 8009f46:	d00b      	beq.n	8009f60 <__lo0bits+0x22>
 8009f48:	07d9      	lsls	r1, r3, #31
 8009f4a:	d421      	bmi.n	8009f90 <__lo0bits+0x52>
 8009f4c:	0798      	lsls	r0, r3, #30
 8009f4e:	bf49      	itett	mi
 8009f50:	085b      	lsrmi	r3, r3, #1
 8009f52:	089b      	lsrpl	r3, r3, #2
 8009f54:	2001      	movmi	r0, #1
 8009f56:	6013      	strmi	r3, [r2, #0]
 8009f58:	bf5c      	itt	pl
 8009f5a:	6013      	strpl	r3, [r2, #0]
 8009f5c:	2002      	movpl	r0, #2
 8009f5e:	4770      	bx	lr
 8009f60:	b299      	uxth	r1, r3
 8009f62:	b909      	cbnz	r1, 8009f68 <__lo0bits+0x2a>
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	2010      	movs	r0, #16
 8009f68:	b2d9      	uxtb	r1, r3
 8009f6a:	b909      	cbnz	r1, 8009f70 <__lo0bits+0x32>
 8009f6c:	3008      	adds	r0, #8
 8009f6e:	0a1b      	lsrs	r3, r3, #8
 8009f70:	0719      	lsls	r1, r3, #28
 8009f72:	bf04      	itt	eq
 8009f74:	091b      	lsreq	r3, r3, #4
 8009f76:	3004      	addeq	r0, #4
 8009f78:	0799      	lsls	r1, r3, #30
 8009f7a:	bf04      	itt	eq
 8009f7c:	089b      	lsreq	r3, r3, #2
 8009f7e:	3002      	addeq	r0, #2
 8009f80:	07d9      	lsls	r1, r3, #31
 8009f82:	d403      	bmi.n	8009f8c <__lo0bits+0x4e>
 8009f84:	085b      	lsrs	r3, r3, #1
 8009f86:	f100 0001 	add.w	r0, r0, #1
 8009f8a:	d003      	beq.n	8009f94 <__lo0bits+0x56>
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	4770      	bx	lr
 8009f90:	2000      	movs	r0, #0
 8009f92:	4770      	bx	lr
 8009f94:	2020      	movs	r0, #32
 8009f96:	4770      	bx	lr

08009f98 <__i2b>:
 8009f98:	b510      	push	{r4, lr}
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	f7ff febd 	bl	8009d1c <_Balloc>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	b928      	cbnz	r0, 8009fb2 <__i2b+0x1a>
 8009fa6:	4b05      	ldr	r3, [pc, #20]	@ (8009fbc <__i2b+0x24>)
 8009fa8:	4805      	ldr	r0, [pc, #20]	@ (8009fc0 <__i2b+0x28>)
 8009faa:	f240 1145 	movw	r1, #325	@ 0x145
 8009fae:	f001 fdaf 	bl	800bb10 <__assert_func>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	6144      	str	r4, [r0, #20]
 8009fb6:	6103      	str	r3, [r0, #16]
 8009fb8:	bd10      	pop	{r4, pc}
 8009fba:	bf00      	nop
 8009fbc:	0800cd49 	.word	0x0800cd49
 8009fc0:	0800cd5a 	.word	0x0800cd5a

08009fc4 <__multiply>:
 8009fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc8:	4617      	mov	r7, r2
 8009fca:	690a      	ldr	r2, [r1, #16]
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	bfa8      	it	ge
 8009fd2:	463b      	movge	r3, r7
 8009fd4:	4689      	mov	r9, r1
 8009fd6:	bfa4      	itt	ge
 8009fd8:	460f      	movge	r7, r1
 8009fda:	4699      	movge	r9, r3
 8009fdc:	693d      	ldr	r5, [r7, #16]
 8009fde:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	eb05 060a 	add.w	r6, r5, sl
 8009fea:	42b3      	cmp	r3, r6
 8009fec:	b085      	sub	sp, #20
 8009fee:	bfb8      	it	lt
 8009ff0:	3101      	addlt	r1, #1
 8009ff2:	f7ff fe93 	bl	8009d1c <_Balloc>
 8009ff6:	b930      	cbnz	r0, 800a006 <__multiply+0x42>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	4b41      	ldr	r3, [pc, #260]	@ (800a100 <__multiply+0x13c>)
 8009ffc:	4841      	ldr	r0, [pc, #260]	@ (800a104 <__multiply+0x140>)
 8009ffe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a002:	f001 fd85 	bl	800bb10 <__assert_func>
 800a006:	f100 0414 	add.w	r4, r0, #20
 800a00a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a00e:	4623      	mov	r3, r4
 800a010:	2200      	movs	r2, #0
 800a012:	4573      	cmp	r3, lr
 800a014:	d320      	bcc.n	800a058 <__multiply+0x94>
 800a016:	f107 0814 	add.w	r8, r7, #20
 800a01a:	f109 0114 	add.w	r1, r9, #20
 800a01e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a022:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a026:	9302      	str	r3, [sp, #8]
 800a028:	1beb      	subs	r3, r5, r7
 800a02a:	3b15      	subs	r3, #21
 800a02c:	f023 0303 	bic.w	r3, r3, #3
 800a030:	3304      	adds	r3, #4
 800a032:	3715      	adds	r7, #21
 800a034:	42bd      	cmp	r5, r7
 800a036:	bf38      	it	cc
 800a038:	2304      	movcc	r3, #4
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	9b02      	ldr	r3, [sp, #8]
 800a03e:	9103      	str	r1, [sp, #12]
 800a040:	428b      	cmp	r3, r1
 800a042:	d80c      	bhi.n	800a05e <__multiply+0x9a>
 800a044:	2e00      	cmp	r6, #0
 800a046:	dd03      	ble.n	800a050 <__multiply+0x8c>
 800a048:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d055      	beq.n	800a0fc <__multiply+0x138>
 800a050:	6106      	str	r6, [r0, #16]
 800a052:	b005      	add	sp, #20
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	f843 2b04 	str.w	r2, [r3], #4
 800a05c:	e7d9      	b.n	800a012 <__multiply+0x4e>
 800a05e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a062:	f1ba 0f00 	cmp.w	sl, #0
 800a066:	d01f      	beq.n	800a0a8 <__multiply+0xe4>
 800a068:	46c4      	mov	ip, r8
 800a06a:	46a1      	mov	r9, r4
 800a06c:	2700      	movs	r7, #0
 800a06e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a072:	f8d9 3000 	ldr.w	r3, [r9]
 800a076:	fa1f fb82 	uxth.w	fp, r2
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a080:	443b      	add	r3, r7
 800a082:	f8d9 7000 	ldr.w	r7, [r9]
 800a086:	0c12      	lsrs	r2, r2, #16
 800a088:	0c3f      	lsrs	r7, r7, #16
 800a08a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a08e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a092:	b29b      	uxth	r3, r3
 800a094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a098:	4565      	cmp	r5, ip
 800a09a:	f849 3b04 	str.w	r3, [r9], #4
 800a09e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a0a2:	d8e4      	bhi.n	800a06e <__multiply+0xaa>
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	50e7      	str	r7, [r4, r3]
 800a0a8:	9b03      	ldr	r3, [sp, #12]
 800a0aa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0ae:	3104      	adds	r1, #4
 800a0b0:	f1b9 0f00 	cmp.w	r9, #0
 800a0b4:	d020      	beq.n	800a0f8 <__multiply+0x134>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	4647      	mov	r7, r8
 800a0ba:	46a4      	mov	ip, r4
 800a0bc:	f04f 0a00 	mov.w	sl, #0
 800a0c0:	f8b7 b000 	ldrh.w	fp, [r7]
 800a0c4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a0c8:	fb09 220b 	mla	r2, r9, fp, r2
 800a0cc:	4452      	add	r2, sl
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d4:	f84c 3b04 	str.w	r3, [ip], #4
 800a0d8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a0dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0e0:	f8bc 3000 	ldrh.w	r3, [ip]
 800a0e4:	fb09 330a 	mla	r3, r9, sl, r3
 800a0e8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a0ec:	42bd      	cmp	r5, r7
 800a0ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0f2:	d8e5      	bhi.n	800a0c0 <__multiply+0xfc>
 800a0f4:	9a01      	ldr	r2, [sp, #4]
 800a0f6:	50a3      	str	r3, [r4, r2]
 800a0f8:	3404      	adds	r4, #4
 800a0fa:	e79f      	b.n	800a03c <__multiply+0x78>
 800a0fc:	3e01      	subs	r6, #1
 800a0fe:	e7a1      	b.n	800a044 <__multiply+0x80>
 800a100:	0800cd49 	.word	0x0800cd49
 800a104:	0800cd5a 	.word	0x0800cd5a

0800a108 <__pow5mult>:
 800a108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a10c:	4615      	mov	r5, r2
 800a10e:	f012 0203 	ands.w	r2, r2, #3
 800a112:	4607      	mov	r7, r0
 800a114:	460e      	mov	r6, r1
 800a116:	d007      	beq.n	800a128 <__pow5mult+0x20>
 800a118:	4c25      	ldr	r4, [pc, #148]	@ (800a1b0 <__pow5mult+0xa8>)
 800a11a:	3a01      	subs	r2, #1
 800a11c:	2300      	movs	r3, #0
 800a11e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a122:	f7ff fe5d 	bl	8009de0 <__multadd>
 800a126:	4606      	mov	r6, r0
 800a128:	10ad      	asrs	r5, r5, #2
 800a12a:	d03d      	beq.n	800a1a8 <__pow5mult+0xa0>
 800a12c:	69fc      	ldr	r4, [r7, #28]
 800a12e:	b97c      	cbnz	r4, 800a150 <__pow5mult+0x48>
 800a130:	2010      	movs	r0, #16
 800a132:	f7ff fd3d 	bl	8009bb0 <malloc>
 800a136:	4602      	mov	r2, r0
 800a138:	61f8      	str	r0, [r7, #28]
 800a13a:	b928      	cbnz	r0, 800a148 <__pow5mult+0x40>
 800a13c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b4 <__pow5mult+0xac>)
 800a13e:	481e      	ldr	r0, [pc, #120]	@ (800a1b8 <__pow5mult+0xb0>)
 800a140:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a144:	f001 fce4 	bl	800bb10 <__assert_func>
 800a148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a14c:	6004      	str	r4, [r0, #0]
 800a14e:	60c4      	str	r4, [r0, #12]
 800a150:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a158:	b94c      	cbnz	r4, 800a16e <__pow5mult+0x66>
 800a15a:	f240 2171 	movw	r1, #625	@ 0x271
 800a15e:	4638      	mov	r0, r7
 800a160:	f7ff ff1a 	bl	8009f98 <__i2b>
 800a164:	2300      	movs	r3, #0
 800a166:	f8c8 0008 	str.w	r0, [r8, #8]
 800a16a:	4604      	mov	r4, r0
 800a16c:	6003      	str	r3, [r0, #0]
 800a16e:	f04f 0900 	mov.w	r9, #0
 800a172:	07eb      	lsls	r3, r5, #31
 800a174:	d50a      	bpl.n	800a18c <__pow5mult+0x84>
 800a176:	4631      	mov	r1, r6
 800a178:	4622      	mov	r2, r4
 800a17a:	4638      	mov	r0, r7
 800a17c:	f7ff ff22 	bl	8009fc4 <__multiply>
 800a180:	4631      	mov	r1, r6
 800a182:	4680      	mov	r8, r0
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff fe09 	bl	8009d9c <_Bfree>
 800a18a:	4646      	mov	r6, r8
 800a18c:	106d      	asrs	r5, r5, #1
 800a18e:	d00b      	beq.n	800a1a8 <__pow5mult+0xa0>
 800a190:	6820      	ldr	r0, [r4, #0]
 800a192:	b938      	cbnz	r0, 800a1a4 <__pow5mult+0x9c>
 800a194:	4622      	mov	r2, r4
 800a196:	4621      	mov	r1, r4
 800a198:	4638      	mov	r0, r7
 800a19a:	f7ff ff13 	bl	8009fc4 <__multiply>
 800a19e:	6020      	str	r0, [r4, #0]
 800a1a0:	f8c0 9000 	str.w	r9, [r0]
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	e7e4      	b.n	800a172 <__pow5mult+0x6a>
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ae:	bf00      	nop
 800a1b0:	0800ce6c 	.word	0x0800ce6c
 800a1b4:	0800ccda 	.word	0x0800ccda
 800a1b8:	0800cd5a 	.word	0x0800cd5a

0800a1bc <__lshift>:
 800a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	6849      	ldr	r1, [r1, #4]
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	4691      	mov	r9, r2
 800a1d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1d4:	f108 0601 	add.w	r6, r8, #1
 800a1d8:	42b3      	cmp	r3, r6
 800a1da:	db0b      	blt.n	800a1f4 <__lshift+0x38>
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7ff fd9d 	bl	8009d1c <_Balloc>
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b948      	cbnz	r0, 800a1fa <__lshift+0x3e>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4b28      	ldr	r3, [pc, #160]	@ (800a28c <__lshift+0xd0>)
 800a1ea:	4829      	ldr	r0, [pc, #164]	@ (800a290 <__lshift+0xd4>)
 800a1ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a1f0:	f001 fc8e 	bl	800bb10 <__assert_func>
 800a1f4:	3101      	adds	r1, #1
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	e7ee      	b.n	800a1d8 <__lshift+0x1c>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f100 0114 	add.w	r1, r0, #20
 800a200:	f100 0210 	add.w	r2, r0, #16
 800a204:	4618      	mov	r0, r3
 800a206:	4553      	cmp	r3, sl
 800a208:	db33      	blt.n	800a272 <__lshift+0xb6>
 800a20a:	6920      	ldr	r0, [r4, #16]
 800a20c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a210:	f104 0314 	add.w	r3, r4, #20
 800a214:	f019 091f 	ands.w	r9, r9, #31
 800a218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a21c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a220:	d02b      	beq.n	800a27a <__lshift+0xbe>
 800a222:	f1c9 0e20 	rsb	lr, r9, #32
 800a226:	468a      	mov	sl, r1
 800a228:	2200      	movs	r2, #0
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	fa00 f009 	lsl.w	r0, r0, r9
 800a230:	4310      	orrs	r0, r2
 800a232:	f84a 0b04 	str.w	r0, [sl], #4
 800a236:	f853 2b04 	ldr.w	r2, [r3], #4
 800a23a:	459c      	cmp	ip, r3
 800a23c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a240:	d8f3      	bhi.n	800a22a <__lshift+0x6e>
 800a242:	ebac 0304 	sub.w	r3, ip, r4
 800a246:	3b15      	subs	r3, #21
 800a248:	f023 0303 	bic.w	r3, r3, #3
 800a24c:	3304      	adds	r3, #4
 800a24e:	f104 0015 	add.w	r0, r4, #21
 800a252:	4560      	cmp	r0, ip
 800a254:	bf88      	it	hi
 800a256:	2304      	movhi	r3, #4
 800a258:	50ca      	str	r2, [r1, r3]
 800a25a:	b10a      	cbz	r2, 800a260 <__lshift+0xa4>
 800a25c:	f108 0602 	add.w	r6, r8, #2
 800a260:	3e01      	subs	r6, #1
 800a262:	4638      	mov	r0, r7
 800a264:	612e      	str	r6, [r5, #16]
 800a266:	4621      	mov	r1, r4
 800a268:	f7ff fd98 	bl	8009d9c <_Bfree>
 800a26c:	4628      	mov	r0, r5
 800a26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a272:	f842 0f04 	str.w	r0, [r2, #4]!
 800a276:	3301      	adds	r3, #1
 800a278:	e7c5      	b.n	800a206 <__lshift+0x4a>
 800a27a:	3904      	subs	r1, #4
 800a27c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a280:	f841 2f04 	str.w	r2, [r1, #4]!
 800a284:	459c      	cmp	ip, r3
 800a286:	d8f9      	bhi.n	800a27c <__lshift+0xc0>
 800a288:	e7ea      	b.n	800a260 <__lshift+0xa4>
 800a28a:	bf00      	nop
 800a28c:	0800cd49 	.word	0x0800cd49
 800a290:	0800cd5a 	.word	0x0800cd5a

0800a294 <__mcmp>:
 800a294:	690a      	ldr	r2, [r1, #16]
 800a296:	4603      	mov	r3, r0
 800a298:	6900      	ldr	r0, [r0, #16]
 800a29a:	1a80      	subs	r0, r0, r2
 800a29c:	b530      	push	{r4, r5, lr}
 800a29e:	d10e      	bne.n	800a2be <__mcmp+0x2a>
 800a2a0:	3314      	adds	r3, #20
 800a2a2:	3114      	adds	r1, #20
 800a2a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2b4:	4295      	cmp	r5, r2
 800a2b6:	d003      	beq.n	800a2c0 <__mcmp+0x2c>
 800a2b8:	d205      	bcs.n	800a2c6 <__mcmp+0x32>
 800a2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a2be:	bd30      	pop	{r4, r5, pc}
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d3f3      	bcc.n	800a2ac <__mcmp+0x18>
 800a2c4:	e7fb      	b.n	800a2be <__mcmp+0x2a>
 800a2c6:	2001      	movs	r0, #1
 800a2c8:	e7f9      	b.n	800a2be <__mcmp+0x2a>
	...

0800a2cc <__mdiff>:
 800a2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	4689      	mov	r9, r1
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4648      	mov	r0, r9
 800a2d8:	4614      	mov	r4, r2
 800a2da:	f7ff ffdb 	bl	800a294 <__mcmp>
 800a2de:	1e05      	subs	r5, r0, #0
 800a2e0:	d112      	bne.n	800a308 <__mdiff+0x3c>
 800a2e2:	4629      	mov	r1, r5
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7ff fd19 	bl	8009d1c <_Balloc>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	b928      	cbnz	r0, 800a2fa <__mdiff+0x2e>
 800a2ee:	4b3f      	ldr	r3, [pc, #252]	@ (800a3ec <__mdiff+0x120>)
 800a2f0:	f240 2137 	movw	r1, #567	@ 0x237
 800a2f4:	483e      	ldr	r0, [pc, #248]	@ (800a3f0 <__mdiff+0x124>)
 800a2f6:	f001 fc0b 	bl	800bb10 <__assert_func>
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a300:	4610      	mov	r0, r2
 800a302:	b003      	add	sp, #12
 800a304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a308:	bfbc      	itt	lt
 800a30a:	464b      	movlt	r3, r9
 800a30c:	46a1      	movlt	r9, r4
 800a30e:	4630      	mov	r0, r6
 800a310:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a314:	bfba      	itte	lt
 800a316:	461c      	movlt	r4, r3
 800a318:	2501      	movlt	r5, #1
 800a31a:	2500      	movge	r5, #0
 800a31c:	f7ff fcfe 	bl	8009d1c <_Balloc>
 800a320:	4602      	mov	r2, r0
 800a322:	b918      	cbnz	r0, 800a32c <__mdiff+0x60>
 800a324:	4b31      	ldr	r3, [pc, #196]	@ (800a3ec <__mdiff+0x120>)
 800a326:	f240 2145 	movw	r1, #581	@ 0x245
 800a32a:	e7e3      	b.n	800a2f4 <__mdiff+0x28>
 800a32c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a330:	6926      	ldr	r6, [r4, #16]
 800a332:	60c5      	str	r5, [r0, #12]
 800a334:	f109 0310 	add.w	r3, r9, #16
 800a338:	f109 0514 	add.w	r5, r9, #20
 800a33c:	f104 0e14 	add.w	lr, r4, #20
 800a340:	f100 0b14 	add.w	fp, r0, #20
 800a344:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a348:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	46d9      	mov	r9, fp
 800a350:	f04f 0c00 	mov.w	ip, #0
 800a354:	9b01      	ldr	r3, [sp, #4]
 800a356:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a35a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a35e:	9301      	str	r3, [sp, #4]
 800a360:	fa1f f38a 	uxth.w	r3, sl
 800a364:	4619      	mov	r1, r3
 800a366:	b283      	uxth	r3, r0
 800a368:	1acb      	subs	r3, r1, r3
 800a36a:	0c00      	lsrs	r0, r0, #16
 800a36c:	4463      	add	r3, ip
 800a36e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a372:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a376:	b29b      	uxth	r3, r3
 800a378:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a37c:	4576      	cmp	r6, lr
 800a37e:	f849 3b04 	str.w	r3, [r9], #4
 800a382:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a386:	d8e5      	bhi.n	800a354 <__mdiff+0x88>
 800a388:	1b33      	subs	r3, r6, r4
 800a38a:	3b15      	subs	r3, #21
 800a38c:	f023 0303 	bic.w	r3, r3, #3
 800a390:	3415      	adds	r4, #21
 800a392:	3304      	adds	r3, #4
 800a394:	42a6      	cmp	r6, r4
 800a396:	bf38      	it	cc
 800a398:	2304      	movcc	r3, #4
 800a39a:	441d      	add	r5, r3
 800a39c:	445b      	add	r3, fp
 800a39e:	461e      	mov	r6, r3
 800a3a0:	462c      	mov	r4, r5
 800a3a2:	4544      	cmp	r4, r8
 800a3a4:	d30e      	bcc.n	800a3c4 <__mdiff+0xf8>
 800a3a6:	f108 0103 	add.w	r1, r8, #3
 800a3aa:	1b49      	subs	r1, r1, r5
 800a3ac:	f021 0103 	bic.w	r1, r1, #3
 800a3b0:	3d03      	subs	r5, #3
 800a3b2:	45a8      	cmp	r8, r5
 800a3b4:	bf38      	it	cc
 800a3b6:	2100      	movcc	r1, #0
 800a3b8:	440b      	add	r3, r1
 800a3ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3be:	b191      	cbz	r1, 800a3e6 <__mdiff+0x11a>
 800a3c0:	6117      	str	r7, [r2, #16]
 800a3c2:	e79d      	b.n	800a300 <__mdiff+0x34>
 800a3c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3c8:	46e6      	mov	lr, ip
 800a3ca:	0c08      	lsrs	r0, r1, #16
 800a3cc:	fa1c fc81 	uxtah	ip, ip, r1
 800a3d0:	4471      	add	r1, lr
 800a3d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a3d6:	b289      	uxth	r1, r1
 800a3d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a3dc:	f846 1b04 	str.w	r1, [r6], #4
 800a3e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3e4:	e7dd      	b.n	800a3a2 <__mdiff+0xd6>
 800a3e6:	3f01      	subs	r7, #1
 800a3e8:	e7e7      	b.n	800a3ba <__mdiff+0xee>
 800a3ea:	bf00      	nop
 800a3ec:	0800cd49 	.word	0x0800cd49
 800a3f0:	0800cd5a 	.word	0x0800cd5a

0800a3f4 <__ulp>:
 800a3f4:	b082      	sub	sp, #8
 800a3f6:	ed8d 0b00 	vstr	d0, [sp]
 800a3fa:	9a01      	ldr	r2, [sp, #4]
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a43c <__ulp+0x48>)
 800a3fe:	4013      	ands	r3, r2
 800a400:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a404:	2b00      	cmp	r3, #0
 800a406:	dc08      	bgt.n	800a41a <__ulp+0x26>
 800a408:	425b      	negs	r3, r3
 800a40a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a40e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a412:	da04      	bge.n	800a41e <__ulp+0x2a>
 800a414:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a418:	4113      	asrs	r3, r2
 800a41a:	2200      	movs	r2, #0
 800a41c:	e008      	b.n	800a430 <__ulp+0x3c>
 800a41e:	f1a2 0314 	sub.w	r3, r2, #20
 800a422:	2b1e      	cmp	r3, #30
 800a424:	bfda      	itte	le
 800a426:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a42a:	40da      	lsrle	r2, r3
 800a42c:	2201      	movgt	r2, #1
 800a42e:	2300      	movs	r3, #0
 800a430:	4619      	mov	r1, r3
 800a432:	4610      	mov	r0, r2
 800a434:	ec41 0b10 	vmov	d0, r0, r1
 800a438:	b002      	add	sp, #8
 800a43a:	4770      	bx	lr
 800a43c:	7ff00000 	.word	0x7ff00000

0800a440 <__b2d>:
 800a440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a444:	6906      	ldr	r6, [r0, #16]
 800a446:	f100 0814 	add.w	r8, r0, #20
 800a44a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a44e:	1f37      	subs	r7, r6, #4
 800a450:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a454:	4610      	mov	r0, r2
 800a456:	f7ff fd53 	bl	8009f00 <__hi0bits>
 800a45a:	f1c0 0320 	rsb	r3, r0, #32
 800a45e:	280a      	cmp	r0, #10
 800a460:	600b      	str	r3, [r1, #0]
 800a462:	491b      	ldr	r1, [pc, #108]	@ (800a4d0 <__b2d+0x90>)
 800a464:	dc15      	bgt.n	800a492 <__b2d+0x52>
 800a466:	f1c0 0c0b 	rsb	ip, r0, #11
 800a46a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a46e:	45b8      	cmp	r8, r7
 800a470:	ea43 0501 	orr.w	r5, r3, r1
 800a474:	bf34      	ite	cc
 800a476:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a47a:	2300      	movcs	r3, #0
 800a47c:	3015      	adds	r0, #21
 800a47e:	fa02 f000 	lsl.w	r0, r2, r0
 800a482:	fa23 f30c 	lsr.w	r3, r3, ip
 800a486:	4303      	orrs	r3, r0
 800a488:	461c      	mov	r4, r3
 800a48a:	ec45 4b10 	vmov	d0, r4, r5
 800a48e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a492:	45b8      	cmp	r8, r7
 800a494:	bf3a      	itte	cc
 800a496:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a49a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a49e:	2300      	movcs	r3, #0
 800a4a0:	380b      	subs	r0, #11
 800a4a2:	d012      	beq.n	800a4ca <__b2d+0x8a>
 800a4a4:	f1c0 0120 	rsb	r1, r0, #32
 800a4a8:	fa23 f401 	lsr.w	r4, r3, r1
 800a4ac:	4082      	lsls	r2, r0
 800a4ae:	4322      	orrs	r2, r4
 800a4b0:	4547      	cmp	r7, r8
 800a4b2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a4b6:	bf8c      	ite	hi
 800a4b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4bc:	2200      	movls	r2, #0
 800a4be:	4083      	lsls	r3, r0
 800a4c0:	40ca      	lsrs	r2, r1
 800a4c2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	e7de      	b.n	800a488 <__b2d+0x48>
 800a4ca:	ea42 0501 	orr.w	r5, r2, r1
 800a4ce:	e7db      	b.n	800a488 <__b2d+0x48>
 800a4d0:	3ff00000 	.word	0x3ff00000

0800a4d4 <__d2b>:
 800a4d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	460f      	mov	r7, r1
 800a4da:	2101      	movs	r1, #1
 800a4dc:	ec59 8b10 	vmov	r8, r9, d0
 800a4e0:	4616      	mov	r6, r2
 800a4e2:	f7ff fc1b 	bl	8009d1c <_Balloc>
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	b930      	cbnz	r0, 800a4f8 <__d2b+0x24>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4b23      	ldr	r3, [pc, #140]	@ (800a57c <__d2b+0xa8>)
 800a4ee:	4824      	ldr	r0, [pc, #144]	@ (800a580 <__d2b+0xac>)
 800a4f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a4f4:	f001 fb0c 	bl	800bb10 <__assert_func>
 800a4f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a500:	b10d      	cbz	r5, 800a506 <__d2b+0x32>
 800a502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	f1b8 0300 	subs.w	r3, r8, #0
 800a50c:	d023      	beq.n	800a556 <__d2b+0x82>
 800a50e:	4668      	mov	r0, sp
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	f7ff fd14 	bl	8009f3e <__lo0bits>
 800a516:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a51a:	b1d0      	cbz	r0, 800a552 <__d2b+0x7e>
 800a51c:	f1c0 0320 	rsb	r3, r0, #32
 800a520:	fa02 f303 	lsl.w	r3, r2, r3
 800a524:	430b      	orrs	r3, r1
 800a526:	40c2      	lsrs	r2, r0
 800a528:	6163      	str	r3, [r4, #20]
 800a52a:	9201      	str	r2, [sp, #4]
 800a52c:	9b01      	ldr	r3, [sp, #4]
 800a52e:	61a3      	str	r3, [r4, #24]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bf0c      	ite	eq
 800a534:	2201      	moveq	r2, #1
 800a536:	2202      	movne	r2, #2
 800a538:	6122      	str	r2, [r4, #16]
 800a53a:	b1a5      	cbz	r5, 800a566 <__d2b+0x92>
 800a53c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a540:	4405      	add	r5, r0
 800a542:	603d      	str	r5, [r7, #0]
 800a544:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a548:	6030      	str	r0, [r6, #0]
 800a54a:	4620      	mov	r0, r4
 800a54c:	b003      	add	sp, #12
 800a54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a552:	6161      	str	r1, [r4, #20]
 800a554:	e7ea      	b.n	800a52c <__d2b+0x58>
 800a556:	a801      	add	r0, sp, #4
 800a558:	f7ff fcf1 	bl	8009f3e <__lo0bits>
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	6163      	str	r3, [r4, #20]
 800a560:	3020      	adds	r0, #32
 800a562:	2201      	movs	r2, #1
 800a564:	e7e8      	b.n	800a538 <__d2b+0x64>
 800a566:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a56a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a56e:	6038      	str	r0, [r7, #0]
 800a570:	6918      	ldr	r0, [r3, #16]
 800a572:	f7ff fcc5 	bl	8009f00 <__hi0bits>
 800a576:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a57a:	e7e5      	b.n	800a548 <__d2b+0x74>
 800a57c:	0800cd49 	.word	0x0800cd49
 800a580:	0800cd5a 	.word	0x0800cd5a

0800a584 <__ratio>:
 800a584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	4688      	mov	r8, r1
 800a58a:	4669      	mov	r1, sp
 800a58c:	4681      	mov	r9, r0
 800a58e:	f7ff ff57 	bl	800a440 <__b2d>
 800a592:	a901      	add	r1, sp, #4
 800a594:	4640      	mov	r0, r8
 800a596:	ec55 4b10 	vmov	r4, r5, d0
 800a59a:	f7ff ff51 	bl	800a440 <__b2d>
 800a59e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a5a2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a5ac:	1a5b      	subs	r3, r3, r1
 800a5ae:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a5b2:	ec57 6b10 	vmov	r6, r7, d0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfd6      	itet	le
 800a5ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5be:	462a      	movgt	r2, r5
 800a5c0:	463a      	movle	r2, r7
 800a5c2:	46ab      	mov	fp, r5
 800a5c4:	46a2      	mov	sl, r4
 800a5c6:	bfce      	itee	gt
 800a5c8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a5cc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a5d0:	ee00 3a90 	vmovle	s1, r3
 800a5d4:	ec4b ab17 	vmov	d7, sl, fp
 800a5d8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a5dc:	b003      	add	sp, #12
 800a5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5e2 <__copybits>:
 800a5e2:	3901      	subs	r1, #1
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	1149      	asrs	r1, r1, #5
 800a5e8:	6914      	ldr	r4, [r2, #16]
 800a5ea:	3101      	adds	r1, #1
 800a5ec:	f102 0314 	add.w	r3, r2, #20
 800a5f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5f8:	1f05      	subs	r5, r0, #4
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	d30c      	bcc.n	800a618 <__copybits+0x36>
 800a5fe:	1aa3      	subs	r3, r4, r2
 800a600:	3b11      	subs	r3, #17
 800a602:	f023 0303 	bic.w	r3, r3, #3
 800a606:	3211      	adds	r2, #17
 800a608:	42a2      	cmp	r2, r4
 800a60a:	bf88      	it	hi
 800a60c:	2300      	movhi	r3, #0
 800a60e:	4418      	add	r0, r3
 800a610:	2300      	movs	r3, #0
 800a612:	4288      	cmp	r0, r1
 800a614:	d305      	bcc.n	800a622 <__copybits+0x40>
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	f853 6b04 	ldr.w	r6, [r3], #4
 800a61c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a620:	e7eb      	b.n	800a5fa <__copybits+0x18>
 800a622:	f840 3b04 	str.w	r3, [r0], #4
 800a626:	e7f4      	b.n	800a612 <__copybits+0x30>

0800a628 <__any_on>:
 800a628:	f100 0214 	add.w	r2, r0, #20
 800a62c:	6900      	ldr	r0, [r0, #16]
 800a62e:	114b      	asrs	r3, r1, #5
 800a630:	4298      	cmp	r0, r3
 800a632:	b510      	push	{r4, lr}
 800a634:	db11      	blt.n	800a65a <__any_on+0x32>
 800a636:	dd0a      	ble.n	800a64e <__any_on+0x26>
 800a638:	f011 011f 	ands.w	r1, r1, #31
 800a63c:	d007      	beq.n	800a64e <__any_on+0x26>
 800a63e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a642:	fa24 f001 	lsr.w	r0, r4, r1
 800a646:	fa00 f101 	lsl.w	r1, r0, r1
 800a64a:	428c      	cmp	r4, r1
 800a64c:	d10b      	bne.n	800a666 <__any_on+0x3e>
 800a64e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a652:	4293      	cmp	r3, r2
 800a654:	d803      	bhi.n	800a65e <__any_on+0x36>
 800a656:	2000      	movs	r0, #0
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	4603      	mov	r3, r0
 800a65c:	e7f7      	b.n	800a64e <__any_on+0x26>
 800a65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a662:	2900      	cmp	r1, #0
 800a664:	d0f5      	beq.n	800a652 <__any_on+0x2a>
 800a666:	2001      	movs	r0, #1
 800a668:	e7f6      	b.n	800a658 <__any_on+0x30>

0800a66a <sulp>:
 800a66a:	b570      	push	{r4, r5, r6, lr}
 800a66c:	4604      	mov	r4, r0
 800a66e:	460d      	mov	r5, r1
 800a670:	4616      	mov	r6, r2
 800a672:	ec45 4b10 	vmov	d0, r4, r5
 800a676:	f7ff febd 	bl	800a3f4 <__ulp>
 800a67a:	b17e      	cbz	r6, 800a69c <sulp+0x32>
 800a67c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a680:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a684:	2b00      	cmp	r3, #0
 800a686:	dd09      	ble.n	800a69c <sulp+0x32>
 800a688:	051b      	lsls	r3, r3, #20
 800a68a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a68e:	2000      	movs	r0, #0
 800a690:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a694:	ec41 0b17 	vmov	d7, r0, r1
 800a698:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6a0 <_strtod_l>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	ed2d 8b0a 	vpush	{d8-d12}
 800a6a8:	b097      	sub	sp, #92	@ 0x5c
 800a6aa:	4688      	mov	r8, r1
 800a6ac:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	9212      	str	r2, [sp, #72]	@ 0x48
 800a6b2:	9005      	str	r0, [sp, #20]
 800a6b4:	f04f 0a00 	mov.w	sl, #0
 800a6b8:	f04f 0b00 	mov.w	fp, #0
 800a6bc:	460a      	mov	r2, r1
 800a6be:	9211      	str	r2, [sp, #68]	@ 0x44
 800a6c0:	7811      	ldrb	r1, [r2, #0]
 800a6c2:	292b      	cmp	r1, #43	@ 0x2b
 800a6c4:	d04c      	beq.n	800a760 <_strtod_l+0xc0>
 800a6c6:	d839      	bhi.n	800a73c <_strtod_l+0x9c>
 800a6c8:	290d      	cmp	r1, #13
 800a6ca:	d833      	bhi.n	800a734 <_strtod_l+0x94>
 800a6cc:	2908      	cmp	r1, #8
 800a6ce:	d833      	bhi.n	800a738 <_strtod_l+0x98>
 800a6d0:	2900      	cmp	r1, #0
 800a6d2:	d03c      	beq.n	800a74e <_strtod_l+0xae>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	9208      	str	r2, [sp, #32]
 800a6d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a6da:	782a      	ldrb	r2, [r5, #0]
 800a6dc:	2a30      	cmp	r2, #48	@ 0x30
 800a6de:	f040 80b7 	bne.w	800a850 <_strtod_l+0x1b0>
 800a6e2:	786a      	ldrb	r2, [r5, #1]
 800a6e4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6e8:	2a58      	cmp	r2, #88	@ 0x58
 800a6ea:	d170      	bne.n	800a7ce <_strtod_l+0x12e>
 800a6ec:	9302      	str	r3, [sp, #8]
 800a6ee:	9b08      	ldr	r3, [sp, #32]
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	ab12      	add	r3, sp, #72	@ 0x48
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	4a90      	ldr	r2, [pc, #576]	@ (800a938 <_strtod_l+0x298>)
 800a6f8:	9805      	ldr	r0, [sp, #20]
 800a6fa:	ab13      	add	r3, sp, #76	@ 0x4c
 800a6fc:	a911      	add	r1, sp, #68	@ 0x44
 800a6fe:	f001 faa1 	bl	800bc44 <__gethex>
 800a702:	f010 060f 	ands.w	r6, r0, #15
 800a706:	4604      	mov	r4, r0
 800a708:	d005      	beq.n	800a716 <_strtod_l+0x76>
 800a70a:	2e06      	cmp	r6, #6
 800a70c:	d12a      	bne.n	800a764 <_strtod_l+0xc4>
 800a70e:	3501      	adds	r5, #1
 800a710:	2300      	movs	r3, #0
 800a712:	9511      	str	r5, [sp, #68]	@ 0x44
 800a714:	9308      	str	r3, [sp, #32]
 800a716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f040 8537 	bne.w	800b18c <_strtod_l+0xaec>
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	ec4b ab10 	vmov	d0, sl, fp
 800a724:	b1cb      	cbz	r3, 800a75a <_strtod_l+0xba>
 800a726:	eeb1 0b40 	vneg.f64	d0, d0
 800a72a:	b017      	add	sp, #92	@ 0x5c
 800a72c:	ecbd 8b0a 	vpop	{d8-d12}
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	2920      	cmp	r1, #32
 800a736:	d1cd      	bne.n	800a6d4 <_strtod_l+0x34>
 800a738:	3201      	adds	r2, #1
 800a73a:	e7c0      	b.n	800a6be <_strtod_l+0x1e>
 800a73c:	292d      	cmp	r1, #45	@ 0x2d
 800a73e:	d1c9      	bne.n	800a6d4 <_strtod_l+0x34>
 800a740:	2101      	movs	r1, #1
 800a742:	9108      	str	r1, [sp, #32]
 800a744:	1c51      	adds	r1, r2, #1
 800a746:	9111      	str	r1, [sp, #68]	@ 0x44
 800a748:	7852      	ldrb	r2, [r2, #1]
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	d1c4      	bne.n	800a6d8 <_strtod_l+0x38>
 800a74e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a750:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a754:	2b00      	cmp	r3, #0
 800a756:	f040 8517 	bne.w	800b188 <_strtod_l+0xae8>
 800a75a:	ec4b ab10 	vmov	d0, sl, fp
 800a75e:	e7e4      	b.n	800a72a <_strtod_l+0x8a>
 800a760:	2100      	movs	r1, #0
 800a762:	e7ee      	b.n	800a742 <_strtod_l+0xa2>
 800a764:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a766:	b13a      	cbz	r2, 800a778 <_strtod_l+0xd8>
 800a768:	2135      	movs	r1, #53	@ 0x35
 800a76a:	a814      	add	r0, sp, #80	@ 0x50
 800a76c:	f7ff ff39 	bl	800a5e2 <__copybits>
 800a770:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a772:	9805      	ldr	r0, [sp, #20]
 800a774:	f7ff fb12 	bl	8009d9c <_Bfree>
 800a778:	1e73      	subs	r3, r6, #1
 800a77a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d806      	bhi.n	800a78e <_strtod_l+0xee>
 800a780:	e8df f003 	tbb	[pc, r3]
 800a784:	201d0314 	.word	0x201d0314
 800a788:	14          	.byte	0x14
 800a789:	00          	.byte	0x00
 800a78a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a78e:	05e3      	lsls	r3, r4, #23
 800a790:	bf48      	it	mi
 800a792:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a796:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a79a:	0d1b      	lsrs	r3, r3, #20
 800a79c:	051b      	lsls	r3, r3, #20
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1b9      	bne.n	800a716 <_strtod_l+0x76>
 800a7a2:	f7fe fb9f 	bl	8008ee4 <__errno>
 800a7a6:	2322      	movs	r3, #34	@ 0x22
 800a7a8:	6003      	str	r3, [r0, #0]
 800a7aa:	e7b4      	b.n	800a716 <_strtod_l+0x76>
 800a7ac:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a7b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a7b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a7bc:	e7e7      	b.n	800a78e <_strtod_l+0xee>
 800a7be:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a940 <_strtod_l+0x2a0>
 800a7c2:	e7e4      	b.n	800a78e <_strtod_l+0xee>
 800a7c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a7c8:	f04f 3aff 	mov.w	sl, #4294967295
 800a7cc:	e7df      	b.n	800a78e <_strtod_l+0xee>
 800a7ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	9211      	str	r2, [sp, #68]	@ 0x44
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	2b30      	cmp	r3, #48	@ 0x30
 800a7d8:	d0f9      	beq.n	800a7ce <_strtod_l+0x12e>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d09b      	beq.n	800a716 <_strtod_l+0x76>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	9307      	str	r3, [sp, #28]
 800a7e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a7e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9306      	str	r3, [sp, #24]
 800a7ea:	4699      	mov	r9, r3
 800a7ec:	461d      	mov	r5, r3
 800a7ee:	220a      	movs	r2, #10
 800a7f0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a7f2:	7804      	ldrb	r4, [r0, #0]
 800a7f4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a7f8:	b2d9      	uxtb	r1, r3
 800a7fa:	2909      	cmp	r1, #9
 800a7fc:	d92a      	bls.n	800a854 <_strtod_l+0x1b4>
 800a7fe:	494f      	ldr	r1, [pc, #316]	@ (800a93c <_strtod_l+0x29c>)
 800a800:	2201      	movs	r2, #1
 800a802:	f001 f92b 	bl	800ba5c <strncmp>
 800a806:	b398      	cbz	r0, 800a870 <_strtod_l+0x1d0>
 800a808:	2000      	movs	r0, #0
 800a80a:	4622      	mov	r2, r4
 800a80c:	462b      	mov	r3, r5
 800a80e:	4607      	mov	r7, r0
 800a810:	4601      	mov	r1, r0
 800a812:	2a65      	cmp	r2, #101	@ 0x65
 800a814:	d001      	beq.n	800a81a <_strtod_l+0x17a>
 800a816:	2a45      	cmp	r2, #69	@ 0x45
 800a818:	d118      	bne.n	800a84c <_strtod_l+0x1ac>
 800a81a:	b91b      	cbnz	r3, 800a824 <_strtod_l+0x184>
 800a81c:	9b07      	ldr	r3, [sp, #28]
 800a81e:	4303      	orrs	r3, r0
 800a820:	d095      	beq.n	800a74e <_strtod_l+0xae>
 800a822:	2300      	movs	r3, #0
 800a824:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a828:	f108 0201 	add.w	r2, r8, #1
 800a82c:	9211      	str	r2, [sp, #68]	@ 0x44
 800a82e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a832:	2a2b      	cmp	r2, #43	@ 0x2b
 800a834:	d074      	beq.n	800a920 <_strtod_l+0x280>
 800a836:	2a2d      	cmp	r2, #45	@ 0x2d
 800a838:	d07a      	beq.n	800a930 <_strtod_l+0x290>
 800a83a:	f04f 0e00 	mov.w	lr, #0
 800a83e:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a842:	2c09      	cmp	r4, #9
 800a844:	f240 8082 	bls.w	800a94c <_strtod_l+0x2ac>
 800a848:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a84c:	2400      	movs	r4, #0
 800a84e:	e09d      	b.n	800a98c <_strtod_l+0x2ec>
 800a850:	2300      	movs	r3, #0
 800a852:	e7c5      	b.n	800a7e0 <_strtod_l+0x140>
 800a854:	2d08      	cmp	r5, #8
 800a856:	bfc8      	it	gt
 800a858:	9906      	ldrgt	r1, [sp, #24]
 800a85a:	f100 0001 	add.w	r0, r0, #1
 800a85e:	bfca      	itet	gt
 800a860:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a864:	fb02 3909 	mlale	r9, r2, r9, r3
 800a868:	9306      	strgt	r3, [sp, #24]
 800a86a:	3501      	adds	r5, #1
 800a86c:	9011      	str	r0, [sp, #68]	@ 0x44
 800a86e:	e7bf      	b.n	800a7f0 <_strtod_l+0x150>
 800a870:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	9211      	str	r2, [sp, #68]	@ 0x44
 800a876:	785a      	ldrb	r2, [r3, #1]
 800a878:	b3bd      	cbz	r5, 800a8ea <_strtod_l+0x24a>
 800a87a:	4607      	mov	r7, r0
 800a87c:	462b      	mov	r3, r5
 800a87e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a882:	2909      	cmp	r1, #9
 800a884:	d912      	bls.n	800a8ac <_strtod_l+0x20c>
 800a886:	2101      	movs	r1, #1
 800a888:	e7c3      	b.n	800a812 <_strtod_l+0x172>
 800a88a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a890:	785a      	ldrb	r2, [r3, #1]
 800a892:	3001      	adds	r0, #1
 800a894:	2a30      	cmp	r2, #48	@ 0x30
 800a896:	d0f8      	beq.n	800a88a <_strtod_l+0x1ea>
 800a898:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	f200 847a 	bhi.w	800b196 <_strtod_l+0xaf6>
 800a8a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8a4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	3a30      	subs	r2, #48	@ 0x30
 800a8ae:	f100 0101 	add.w	r1, r0, #1
 800a8b2:	d014      	beq.n	800a8de <_strtod_l+0x23e>
 800a8b4:	440f      	add	r7, r1
 800a8b6:	469c      	mov	ip, r3
 800a8b8:	f04f 0e0a 	mov.w	lr, #10
 800a8bc:	f10c 0401 	add.w	r4, ip, #1
 800a8c0:	1ae6      	subs	r6, r4, r3
 800a8c2:	42b1      	cmp	r1, r6
 800a8c4:	dc13      	bgt.n	800a8ee <_strtod_l+0x24e>
 800a8c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a8ca:	1819      	adds	r1, r3, r0
 800a8cc:	2908      	cmp	r1, #8
 800a8ce:	f103 0301 	add.w	r3, r3, #1
 800a8d2:	4403      	add	r3, r0
 800a8d4:	dc19      	bgt.n	800a90a <_strtod_l+0x26a>
 800a8d6:	210a      	movs	r1, #10
 800a8d8:	fb01 2909 	mla	r9, r1, r9, r2
 800a8dc:	2100      	movs	r1, #0
 800a8de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8e0:	1c50      	adds	r0, r2, #1
 800a8e2:	9011      	str	r0, [sp, #68]	@ 0x44
 800a8e4:	7852      	ldrb	r2, [r2, #1]
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	e7c9      	b.n	800a87e <_strtod_l+0x1de>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	e7d2      	b.n	800a894 <_strtod_l+0x1f4>
 800a8ee:	f1bc 0f08 	cmp.w	ip, #8
 800a8f2:	dc03      	bgt.n	800a8fc <_strtod_l+0x25c>
 800a8f4:	fb0e f909 	mul.w	r9, lr, r9
 800a8f8:	46a4      	mov	ip, r4
 800a8fa:	e7df      	b.n	800a8bc <_strtod_l+0x21c>
 800a8fc:	2c10      	cmp	r4, #16
 800a8fe:	bfde      	ittt	le
 800a900:	9e06      	ldrle	r6, [sp, #24]
 800a902:	fb0e f606 	mulle.w	r6, lr, r6
 800a906:	9606      	strle	r6, [sp, #24]
 800a908:	e7f6      	b.n	800a8f8 <_strtod_l+0x258>
 800a90a:	290f      	cmp	r1, #15
 800a90c:	bfdf      	itttt	le
 800a90e:	9806      	ldrle	r0, [sp, #24]
 800a910:	210a      	movle	r1, #10
 800a912:	fb01 2200 	mlale	r2, r1, r0, r2
 800a916:	9206      	strle	r2, [sp, #24]
 800a918:	e7e0      	b.n	800a8dc <_strtod_l+0x23c>
 800a91a:	2700      	movs	r7, #0
 800a91c:	2101      	movs	r1, #1
 800a91e:	e77d      	b.n	800a81c <_strtod_l+0x17c>
 800a920:	f04f 0e00 	mov.w	lr, #0
 800a924:	f108 0202 	add.w	r2, r8, #2
 800a928:	9211      	str	r2, [sp, #68]	@ 0x44
 800a92a:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a92e:	e786      	b.n	800a83e <_strtod_l+0x19e>
 800a930:	f04f 0e01 	mov.w	lr, #1
 800a934:	e7f6      	b.n	800a924 <_strtod_l+0x284>
 800a936:	bf00      	nop
 800a938:	0800cf7c 	.word	0x0800cf7c
 800a93c:	0800cdb3 	.word	0x0800cdb3
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a946:	1c54      	adds	r4, r2, #1
 800a948:	9411      	str	r4, [sp, #68]	@ 0x44
 800a94a:	7852      	ldrb	r2, [r2, #1]
 800a94c:	2a30      	cmp	r2, #48	@ 0x30
 800a94e:	d0f9      	beq.n	800a944 <_strtod_l+0x2a4>
 800a950:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a954:	2c08      	cmp	r4, #8
 800a956:	f63f af79 	bhi.w	800a84c <_strtod_l+0x1ac>
 800a95a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a95e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a960:	9209      	str	r2, [sp, #36]	@ 0x24
 800a962:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a964:	1c54      	adds	r4, r2, #1
 800a966:	9411      	str	r4, [sp, #68]	@ 0x44
 800a968:	7852      	ldrb	r2, [r2, #1]
 800a96a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800a96e:	2e09      	cmp	r6, #9
 800a970:	d937      	bls.n	800a9e2 <_strtod_l+0x342>
 800a972:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a974:	1ba4      	subs	r4, r4, r6
 800a976:	2c08      	cmp	r4, #8
 800a978:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a97c:	dc02      	bgt.n	800a984 <_strtod_l+0x2e4>
 800a97e:	4564      	cmp	r4, ip
 800a980:	bfa8      	it	ge
 800a982:	4664      	movge	r4, ip
 800a984:	f1be 0f00 	cmp.w	lr, #0
 800a988:	d000      	beq.n	800a98c <_strtod_l+0x2ec>
 800a98a:	4264      	negs	r4, r4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d14d      	bne.n	800aa2c <_strtod_l+0x38c>
 800a990:	9b07      	ldr	r3, [sp, #28]
 800a992:	4318      	orrs	r0, r3
 800a994:	f47f aebf 	bne.w	800a716 <_strtod_l+0x76>
 800a998:	2900      	cmp	r1, #0
 800a99a:	f47f aed8 	bne.w	800a74e <_strtod_l+0xae>
 800a99e:	2a69      	cmp	r2, #105	@ 0x69
 800a9a0:	d027      	beq.n	800a9f2 <_strtod_l+0x352>
 800a9a2:	dc24      	bgt.n	800a9ee <_strtod_l+0x34e>
 800a9a4:	2a49      	cmp	r2, #73	@ 0x49
 800a9a6:	d024      	beq.n	800a9f2 <_strtod_l+0x352>
 800a9a8:	2a4e      	cmp	r2, #78	@ 0x4e
 800a9aa:	f47f aed0 	bne.w	800a74e <_strtod_l+0xae>
 800a9ae:	4997      	ldr	r1, [pc, #604]	@ (800ac0c <_strtod_l+0x56c>)
 800a9b0:	a811      	add	r0, sp, #68	@ 0x44
 800a9b2:	f001 fb69 	bl	800c088 <__match>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f aec9 	beq.w	800a74e <_strtod_l+0xae>
 800a9bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	2b28      	cmp	r3, #40	@ 0x28
 800a9c2:	d12d      	bne.n	800aa20 <_strtod_l+0x380>
 800a9c4:	4992      	ldr	r1, [pc, #584]	@ (800ac10 <_strtod_l+0x570>)
 800a9c6:	aa14      	add	r2, sp, #80	@ 0x50
 800a9c8:	a811      	add	r0, sp, #68	@ 0x44
 800a9ca:	f001 fb71 	bl	800c0b0 <__hexnan>
 800a9ce:	2805      	cmp	r0, #5
 800a9d0:	d126      	bne.n	800aa20 <_strtod_l+0x380>
 800a9d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a9d4:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a9d8:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a9dc:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a9e0:	e699      	b.n	800a716 <_strtod_l+0x76>
 800a9e2:	240a      	movs	r4, #10
 800a9e4:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a9e8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a9ec:	e7b9      	b.n	800a962 <_strtod_l+0x2c2>
 800a9ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9f0:	e7db      	b.n	800a9aa <_strtod_l+0x30a>
 800a9f2:	4988      	ldr	r1, [pc, #544]	@ (800ac14 <_strtod_l+0x574>)
 800a9f4:	a811      	add	r0, sp, #68	@ 0x44
 800a9f6:	f001 fb47 	bl	800c088 <__match>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	f43f aea7 	beq.w	800a74e <_strtod_l+0xae>
 800aa00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa02:	4985      	ldr	r1, [pc, #532]	@ (800ac18 <_strtod_l+0x578>)
 800aa04:	3b01      	subs	r3, #1
 800aa06:	a811      	add	r0, sp, #68	@ 0x44
 800aa08:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa0a:	f001 fb3d 	bl	800c088 <__match>
 800aa0e:	b910      	cbnz	r0, 800aa16 <_strtod_l+0x376>
 800aa10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa12:	3301      	adds	r3, #1
 800aa14:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa16:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800ac2c <_strtod_l+0x58c>
 800aa1a:	f04f 0a00 	mov.w	sl, #0
 800aa1e:	e67a      	b.n	800a716 <_strtod_l+0x76>
 800aa20:	487e      	ldr	r0, [pc, #504]	@ (800ac1c <_strtod_l+0x57c>)
 800aa22:	f001 f86d 	bl	800bb00 <nan>
 800aa26:	ec5b ab10 	vmov	sl, fp, d0
 800aa2a:	e674      	b.n	800a716 <_strtod_l+0x76>
 800aa2c:	ee07 9a90 	vmov	s15, r9
 800aa30:	1be2      	subs	r2, r4, r7
 800aa32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	bf08      	it	eq
 800aa3a:	461d      	moveq	r5, r3
 800aa3c:	2b10      	cmp	r3, #16
 800aa3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa40:	461a      	mov	r2, r3
 800aa42:	bfa8      	it	ge
 800aa44:	2210      	movge	r2, #16
 800aa46:	2b09      	cmp	r3, #9
 800aa48:	ec5b ab17 	vmov	sl, fp, d7
 800aa4c:	dc15      	bgt.n	800aa7a <_strtod_l+0x3da>
 800aa4e:	1be1      	subs	r1, r4, r7
 800aa50:	2900      	cmp	r1, #0
 800aa52:	f43f ae60 	beq.w	800a716 <_strtod_l+0x76>
 800aa56:	eba4 0107 	sub.w	r1, r4, r7
 800aa5a:	dd72      	ble.n	800ab42 <_strtod_l+0x4a2>
 800aa5c:	2916      	cmp	r1, #22
 800aa5e:	dc59      	bgt.n	800ab14 <_strtod_l+0x474>
 800aa60:	4b6f      	ldr	r3, [pc, #444]	@ (800ac20 <_strtod_l+0x580>)
 800aa62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa68:	ed93 7b00 	vldr	d7, [r3]
 800aa6c:	ec4b ab16 	vmov	d6, sl, fp
 800aa70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa74:	ec5b ab17 	vmov	sl, fp, d7
 800aa78:	e64d      	b.n	800a716 <_strtod_l+0x76>
 800aa7a:	4969      	ldr	r1, [pc, #420]	@ (800ac20 <_strtod_l+0x580>)
 800aa7c:	eddd 6a06 	vldr	s13, [sp, #24]
 800aa80:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aa84:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800aa88:	2b0f      	cmp	r3, #15
 800aa8a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800aa8e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aa92:	ec5b ab16 	vmov	sl, fp, d6
 800aa96:	ddda      	ble.n	800aa4e <_strtod_l+0x3ae>
 800aa98:	1a9a      	subs	r2, r3, r2
 800aa9a:	1be1      	subs	r1, r4, r7
 800aa9c:	440a      	add	r2, r1
 800aa9e:	2a00      	cmp	r2, #0
 800aaa0:	f340 8094 	ble.w	800abcc <_strtod_l+0x52c>
 800aaa4:	f012 000f 	ands.w	r0, r2, #15
 800aaa8:	d00a      	beq.n	800aac0 <_strtod_l+0x420>
 800aaaa:	495d      	ldr	r1, [pc, #372]	@ (800ac20 <_strtod_l+0x580>)
 800aaac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800aab0:	ed91 7b00 	vldr	d7, [r1]
 800aab4:	ec4b ab16 	vmov	d6, sl, fp
 800aab8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aabc:	ec5b ab17 	vmov	sl, fp, d7
 800aac0:	f032 020f 	bics.w	r2, r2, #15
 800aac4:	d073      	beq.n	800abae <_strtod_l+0x50e>
 800aac6:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800aaca:	dd47      	ble.n	800ab5c <_strtod_l+0x4bc>
 800aacc:	2400      	movs	r4, #0
 800aace:	4625      	mov	r5, r4
 800aad0:	9407      	str	r4, [sp, #28]
 800aad2:	4626      	mov	r6, r4
 800aad4:	9a05      	ldr	r2, [sp, #20]
 800aad6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ac2c <_strtod_l+0x58c>
 800aada:	2322      	movs	r3, #34	@ 0x22
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	f04f 0a00 	mov.w	sl, #0
 800aae2:	9b07      	ldr	r3, [sp, #28]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f43f ae16 	beq.w	800a716 <_strtod_l+0x76>
 800aaea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aaec:	9805      	ldr	r0, [sp, #20]
 800aaee:	f7ff f955 	bl	8009d9c <_Bfree>
 800aaf2:	9805      	ldr	r0, [sp, #20]
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	f7ff f951 	bl	8009d9c <_Bfree>
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	4629      	mov	r1, r5
 800aafe:	f7ff f94d 	bl	8009d9c <_Bfree>
 800ab02:	9907      	ldr	r1, [sp, #28]
 800ab04:	9805      	ldr	r0, [sp, #20]
 800ab06:	f7ff f949 	bl	8009d9c <_Bfree>
 800ab0a:	9805      	ldr	r0, [sp, #20]
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	f7ff f945 	bl	8009d9c <_Bfree>
 800ab12:	e600      	b.n	800a716 <_strtod_l+0x76>
 800ab14:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ab18:	1be0      	subs	r0, r4, r7
 800ab1a:	4281      	cmp	r1, r0
 800ab1c:	dbbc      	blt.n	800aa98 <_strtod_l+0x3f8>
 800ab1e:	4a40      	ldr	r2, [pc, #256]	@ (800ac20 <_strtod_l+0x580>)
 800ab20:	f1c3 030f 	rsb	r3, r3, #15
 800ab24:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ab28:	ed91 7b00 	vldr	d7, [r1]
 800ab2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab2e:	ec4b ab16 	vmov	d6, sl, fp
 800ab32:	1acb      	subs	r3, r1, r3
 800ab34:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ab38:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab3c:	ed92 6b00 	vldr	d6, [r2]
 800ab40:	e796      	b.n	800aa70 <_strtod_l+0x3d0>
 800ab42:	3116      	adds	r1, #22
 800ab44:	dba8      	blt.n	800aa98 <_strtod_l+0x3f8>
 800ab46:	4b36      	ldr	r3, [pc, #216]	@ (800ac20 <_strtod_l+0x580>)
 800ab48:	1b3c      	subs	r4, r7, r4
 800ab4a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ab4e:	ed94 7b00 	vldr	d7, [r4]
 800ab52:	ec4b ab16 	vmov	d6, sl, fp
 800ab56:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ab5a:	e78b      	b.n	800aa74 <_strtod_l+0x3d4>
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	ec4b ab17 	vmov	d7, sl, fp
 800ab62:	4e30      	ldr	r6, [pc, #192]	@ (800ac24 <_strtod_l+0x584>)
 800ab64:	1112      	asrs	r2, r2, #4
 800ab66:	4601      	mov	r1, r0
 800ab68:	2a01      	cmp	r2, #1
 800ab6a:	dc23      	bgt.n	800abb4 <_strtod_l+0x514>
 800ab6c:	b108      	cbz	r0, 800ab72 <_strtod_l+0x4d2>
 800ab6e:	ec5b ab17 	vmov	sl, fp, d7
 800ab72:	4a2c      	ldr	r2, [pc, #176]	@ (800ac24 <_strtod_l+0x584>)
 800ab74:	482c      	ldr	r0, [pc, #176]	@ (800ac28 <_strtod_l+0x588>)
 800ab76:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab7a:	ed92 7b00 	vldr	d7, [r2]
 800ab7e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab82:	ec4b ab16 	vmov	d6, sl, fp
 800ab86:	4a29      	ldr	r2, [pc, #164]	@ (800ac2c <_strtod_l+0x58c>)
 800ab88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab8c:	ee17 1a90 	vmov	r1, s15
 800ab90:	400a      	ands	r2, r1
 800ab92:	4282      	cmp	r2, r0
 800ab94:	ec5b ab17 	vmov	sl, fp, d7
 800ab98:	d898      	bhi.n	800aacc <_strtod_l+0x42c>
 800ab9a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ab9e:	4282      	cmp	r2, r0
 800aba0:	bf86      	itte	hi
 800aba2:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ac30 <_strtod_l+0x590>
 800aba6:	f04f 3aff 	movhi.w	sl, #4294967295
 800abaa:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800abae:	2200      	movs	r2, #0
 800abb0:	9206      	str	r2, [sp, #24]
 800abb2:	e076      	b.n	800aca2 <_strtod_l+0x602>
 800abb4:	f012 0f01 	tst.w	r2, #1
 800abb8:	d004      	beq.n	800abc4 <_strtod_l+0x524>
 800abba:	ed96 6b00 	vldr	d6, [r6]
 800abbe:	2001      	movs	r0, #1
 800abc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abc4:	3101      	adds	r1, #1
 800abc6:	1052      	asrs	r2, r2, #1
 800abc8:	3608      	adds	r6, #8
 800abca:	e7cd      	b.n	800ab68 <_strtod_l+0x4c8>
 800abcc:	d0ef      	beq.n	800abae <_strtod_l+0x50e>
 800abce:	4252      	negs	r2, r2
 800abd0:	f012 000f 	ands.w	r0, r2, #15
 800abd4:	d00a      	beq.n	800abec <_strtod_l+0x54c>
 800abd6:	4912      	ldr	r1, [pc, #72]	@ (800ac20 <_strtod_l+0x580>)
 800abd8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800abdc:	ed91 7b00 	vldr	d7, [r1]
 800abe0:	ec4b ab16 	vmov	d6, sl, fp
 800abe4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800abe8:	ec5b ab17 	vmov	sl, fp, d7
 800abec:	1112      	asrs	r2, r2, #4
 800abee:	d0de      	beq.n	800abae <_strtod_l+0x50e>
 800abf0:	2a1f      	cmp	r2, #31
 800abf2:	dd1f      	ble.n	800ac34 <_strtod_l+0x594>
 800abf4:	2400      	movs	r4, #0
 800abf6:	4625      	mov	r5, r4
 800abf8:	9407      	str	r4, [sp, #28]
 800abfa:	4626      	mov	r6, r4
 800abfc:	9a05      	ldr	r2, [sp, #20]
 800abfe:	2322      	movs	r3, #34	@ 0x22
 800ac00:	f04f 0a00 	mov.w	sl, #0
 800ac04:	f04f 0b00 	mov.w	fp, #0
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	e76a      	b.n	800aae2 <_strtod_l+0x442>
 800ac0c:	0800cca1 	.word	0x0800cca1
 800ac10:	0800cf68 	.word	0x0800cf68
 800ac14:	0800cc99 	.word	0x0800cc99
 800ac18:	0800ccd0 	.word	0x0800ccd0
 800ac1c:	0800ce09 	.word	0x0800ce09
 800ac20:	0800cea0 	.word	0x0800cea0
 800ac24:	0800ce78 	.word	0x0800ce78
 800ac28:	7ca00000 	.word	0x7ca00000
 800ac2c:	7ff00000 	.word	0x7ff00000
 800ac30:	7fefffff 	.word	0x7fefffff
 800ac34:	f012 0110 	ands.w	r1, r2, #16
 800ac38:	bf18      	it	ne
 800ac3a:	216a      	movne	r1, #106	@ 0x6a
 800ac3c:	9106      	str	r1, [sp, #24]
 800ac3e:	ec4b ab17 	vmov	d7, sl, fp
 800ac42:	49af      	ldr	r1, [pc, #700]	@ (800af00 <_strtod_l+0x860>)
 800ac44:	2000      	movs	r0, #0
 800ac46:	07d6      	lsls	r6, r2, #31
 800ac48:	d504      	bpl.n	800ac54 <_strtod_l+0x5b4>
 800ac4a:	ed91 6b00 	vldr	d6, [r1]
 800ac4e:	2001      	movs	r0, #1
 800ac50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac54:	1052      	asrs	r2, r2, #1
 800ac56:	f101 0108 	add.w	r1, r1, #8
 800ac5a:	d1f4      	bne.n	800ac46 <_strtod_l+0x5a6>
 800ac5c:	b108      	cbz	r0, 800ac62 <_strtod_l+0x5c2>
 800ac5e:	ec5b ab17 	vmov	sl, fp, d7
 800ac62:	9a06      	ldr	r2, [sp, #24]
 800ac64:	b1b2      	cbz	r2, 800ac94 <_strtod_l+0x5f4>
 800ac66:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800ac6a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800ac6e:	2a00      	cmp	r2, #0
 800ac70:	4658      	mov	r0, fp
 800ac72:	dd0f      	ble.n	800ac94 <_strtod_l+0x5f4>
 800ac74:	2a1f      	cmp	r2, #31
 800ac76:	dd55      	ble.n	800ad24 <_strtod_l+0x684>
 800ac78:	2a34      	cmp	r2, #52	@ 0x34
 800ac7a:	bfde      	ittt	le
 800ac7c:	f04f 32ff 	movle.w	r2, #4294967295
 800ac80:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800ac84:	408a      	lslle	r2, r1
 800ac86:	f04f 0a00 	mov.w	sl, #0
 800ac8a:	bfcc      	ite	gt
 800ac8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac90:	ea02 0b00 	andle.w	fp, r2, r0
 800ac94:	ec4b ab17 	vmov	d7, sl, fp
 800ac98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca0:	d0a8      	beq.n	800abf4 <_strtod_l+0x554>
 800aca2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aca4:	9805      	ldr	r0, [sp, #20]
 800aca6:	f8cd 9000 	str.w	r9, [sp]
 800acaa:	462a      	mov	r2, r5
 800acac:	f7ff f8de 	bl	8009e6c <__s2b>
 800acb0:	9007      	str	r0, [sp, #28]
 800acb2:	2800      	cmp	r0, #0
 800acb4:	f43f af0a 	beq.w	800aacc <_strtod_l+0x42c>
 800acb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acba:	1b3f      	subs	r7, r7, r4
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfb4      	ite	lt
 800acc0:	463b      	movlt	r3, r7
 800acc2:	2300      	movge	r3, #0
 800acc4:	930a      	str	r3, [sp, #40]	@ 0x28
 800acc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc8:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800aef0 <_strtod_l+0x850>
 800accc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800acd0:	2400      	movs	r4, #0
 800acd2:	930d      	str	r3, [sp, #52]	@ 0x34
 800acd4:	4625      	mov	r5, r4
 800acd6:	9b07      	ldr	r3, [sp, #28]
 800acd8:	9805      	ldr	r0, [sp, #20]
 800acda:	6859      	ldr	r1, [r3, #4]
 800acdc:	f7ff f81e 	bl	8009d1c <_Balloc>
 800ace0:	4606      	mov	r6, r0
 800ace2:	2800      	cmp	r0, #0
 800ace4:	f43f aef6 	beq.w	800aad4 <_strtod_l+0x434>
 800ace8:	9b07      	ldr	r3, [sp, #28]
 800acea:	691a      	ldr	r2, [r3, #16]
 800acec:	ec4b ab19 	vmov	d9, sl, fp
 800acf0:	3202      	adds	r2, #2
 800acf2:	f103 010c 	add.w	r1, r3, #12
 800acf6:	0092      	lsls	r2, r2, #2
 800acf8:	300c      	adds	r0, #12
 800acfa:	f000 fef3 	bl	800bae4 <memcpy>
 800acfe:	eeb0 0b49 	vmov.f64	d0, d9
 800ad02:	9805      	ldr	r0, [sp, #20]
 800ad04:	aa14      	add	r2, sp, #80	@ 0x50
 800ad06:	a913      	add	r1, sp, #76	@ 0x4c
 800ad08:	f7ff fbe4 	bl	800a4d4 <__d2b>
 800ad0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f43f aee0 	beq.w	800aad4 <_strtod_l+0x434>
 800ad14:	9805      	ldr	r0, [sp, #20]
 800ad16:	2101      	movs	r1, #1
 800ad18:	f7ff f93e 	bl	8009f98 <__i2b>
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	b940      	cbnz	r0, 800ad32 <_strtod_l+0x692>
 800ad20:	2500      	movs	r5, #0
 800ad22:	e6d7      	b.n	800aad4 <_strtod_l+0x434>
 800ad24:	f04f 31ff 	mov.w	r1, #4294967295
 800ad28:	fa01 f202 	lsl.w	r2, r1, r2
 800ad2c:	ea02 0a0a 	and.w	sl, r2, sl
 800ad30:	e7b0      	b.n	800ac94 <_strtod_l+0x5f4>
 800ad32:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800ad34:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad36:	2f00      	cmp	r7, #0
 800ad38:	bfab      	itete	ge
 800ad3a:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800ad3c:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800ad3e:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800ad42:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800ad46:	bfac      	ite	ge
 800ad48:	eb07 0903 	addge.w	r9, r7, r3
 800ad4c:	eba3 0807 	sublt.w	r8, r3, r7
 800ad50:	9b06      	ldr	r3, [sp, #24]
 800ad52:	1aff      	subs	r7, r7, r3
 800ad54:	4417      	add	r7, r2
 800ad56:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800ad5a:	4a6a      	ldr	r2, [pc, #424]	@ (800af04 <_strtod_l+0x864>)
 800ad5c:	3f01      	subs	r7, #1
 800ad5e:	4297      	cmp	r7, r2
 800ad60:	da51      	bge.n	800ae06 <_strtod_l+0x766>
 800ad62:	1bd1      	subs	r1, r2, r7
 800ad64:	291f      	cmp	r1, #31
 800ad66:	eba3 0301 	sub.w	r3, r3, r1
 800ad6a:	f04f 0201 	mov.w	r2, #1
 800ad6e:	dc3e      	bgt.n	800adee <_strtod_l+0x74e>
 800ad70:	408a      	lsls	r2, r1
 800ad72:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad74:	2200      	movs	r2, #0
 800ad76:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad78:	eb09 0703 	add.w	r7, r9, r3
 800ad7c:	4498      	add	r8, r3
 800ad7e:	9b06      	ldr	r3, [sp, #24]
 800ad80:	45b9      	cmp	r9, r7
 800ad82:	4498      	add	r8, r3
 800ad84:	464b      	mov	r3, r9
 800ad86:	bfa8      	it	ge
 800ad88:	463b      	movge	r3, r7
 800ad8a:	4543      	cmp	r3, r8
 800ad8c:	bfa8      	it	ge
 800ad8e:	4643      	movge	r3, r8
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bfc2      	ittt	gt
 800ad94:	1aff      	subgt	r7, r7, r3
 800ad96:	eba8 0803 	subgt.w	r8, r8, r3
 800ad9a:	eba9 0903 	subgt.w	r9, r9, r3
 800ad9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd16      	ble.n	800add2 <_strtod_l+0x732>
 800ada4:	4629      	mov	r1, r5
 800ada6:	9805      	ldr	r0, [sp, #20]
 800ada8:	461a      	mov	r2, r3
 800adaa:	f7ff f9ad 	bl	800a108 <__pow5mult>
 800adae:	4605      	mov	r5, r0
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0b5      	beq.n	800ad20 <_strtod_l+0x680>
 800adb4:	4601      	mov	r1, r0
 800adb6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800adb8:	9805      	ldr	r0, [sp, #20]
 800adba:	f7ff f903 	bl	8009fc4 <__multiply>
 800adbe:	900f      	str	r0, [sp, #60]	@ 0x3c
 800adc0:	2800      	cmp	r0, #0
 800adc2:	f43f ae87 	beq.w	800aad4 <_strtod_l+0x434>
 800adc6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800adc8:	9805      	ldr	r0, [sp, #20]
 800adca:	f7fe ffe7 	bl	8009d9c <_Bfree>
 800adce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800add0:	9312      	str	r3, [sp, #72]	@ 0x48
 800add2:	2f00      	cmp	r7, #0
 800add4:	dc1b      	bgt.n	800ae0e <_strtod_l+0x76e>
 800add6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800add8:	2b00      	cmp	r3, #0
 800adda:	dd21      	ble.n	800ae20 <_strtod_l+0x780>
 800addc:	4631      	mov	r1, r6
 800adde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ade0:	9805      	ldr	r0, [sp, #20]
 800ade2:	f7ff f991 	bl	800a108 <__pow5mult>
 800ade6:	4606      	mov	r6, r0
 800ade8:	b9d0      	cbnz	r0, 800ae20 <_strtod_l+0x780>
 800adea:	2600      	movs	r6, #0
 800adec:	e672      	b.n	800aad4 <_strtod_l+0x434>
 800adee:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800adf2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800adf6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800adfa:	37e2      	adds	r7, #226	@ 0xe2
 800adfc:	fa02 f107 	lsl.w	r1, r2, r7
 800ae00:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae02:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae04:	e7b8      	b.n	800ad78 <_strtod_l+0x6d8>
 800ae06:	2200      	movs	r2, #0
 800ae08:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	e7f9      	b.n	800ae02 <_strtod_l+0x762>
 800ae0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae10:	9805      	ldr	r0, [sp, #20]
 800ae12:	463a      	mov	r2, r7
 800ae14:	f7ff f9d2 	bl	800a1bc <__lshift>
 800ae18:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d1db      	bne.n	800add6 <_strtod_l+0x736>
 800ae1e:	e659      	b.n	800aad4 <_strtod_l+0x434>
 800ae20:	f1b8 0f00 	cmp.w	r8, #0
 800ae24:	dd07      	ble.n	800ae36 <_strtod_l+0x796>
 800ae26:	4631      	mov	r1, r6
 800ae28:	9805      	ldr	r0, [sp, #20]
 800ae2a:	4642      	mov	r2, r8
 800ae2c:	f7ff f9c6 	bl	800a1bc <__lshift>
 800ae30:	4606      	mov	r6, r0
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d0d9      	beq.n	800adea <_strtod_l+0x74a>
 800ae36:	f1b9 0f00 	cmp.w	r9, #0
 800ae3a:	dd08      	ble.n	800ae4e <_strtod_l+0x7ae>
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	9805      	ldr	r0, [sp, #20]
 800ae40:	464a      	mov	r2, r9
 800ae42:	f7ff f9bb 	bl	800a1bc <__lshift>
 800ae46:	4605      	mov	r5, r0
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	f43f ae43 	beq.w	800aad4 <_strtod_l+0x434>
 800ae4e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ae50:	9805      	ldr	r0, [sp, #20]
 800ae52:	4632      	mov	r2, r6
 800ae54:	f7ff fa3a 	bl	800a2cc <__mdiff>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	f43f ae3a 	beq.w	800aad4 <_strtod_l+0x434>
 800ae60:	2300      	movs	r3, #0
 800ae62:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ae66:	60c3      	str	r3, [r0, #12]
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7ff fa13 	bl	800a294 <__mcmp>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	da4c      	bge.n	800af0c <_strtod_l+0x86c>
 800ae72:	ea58 080a 	orrs.w	r8, r8, sl
 800ae76:	d172      	bne.n	800af5e <_strtod_l+0x8be>
 800ae78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d16e      	bne.n	800af5e <_strtod_l+0x8be>
 800ae80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae84:	0d1b      	lsrs	r3, r3, #20
 800ae86:	051b      	lsls	r3, r3, #20
 800ae88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae8c:	d967      	bls.n	800af5e <_strtod_l+0x8be>
 800ae8e:	6963      	ldr	r3, [r4, #20]
 800ae90:	b913      	cbnz	r3, 800ae98 <_strtod_l+0x7f8>
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	dd62      	ble.n	800af5e <_strtod_l+0x8be>
 800ae98:	4621      	mov	r1, r4
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	9805      	ldr	r0, [sp, #20]
 800ae9e:	f7ff f98d 	bl	800a1bc <__lshift>
 800aea2:	4629      	mov	r1, r5
 800aea4:	4604      	mov	r4, r0
 800aea6:	f7ff f9f5 	bl	800a294 <__mcmp>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	dd57      	ble.n	800af5e <_strtod_l+0x8be>
 800aeae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aeb2:	9a06      	ldr	r2, [sp, #24]
 800aeb4:	0d1b      	lsrs	r3, r3, #20
 800aeb6:	051b      	lsls	r3, r3, #20
 800aeb8:	2a00      	cmp	r2, #0
 800aeba:	d06e      	beq.n	800af9a <_strtod_l+0x8fa>
 800aebc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aec0:	d86b      	bhi.n	800af9a <_strtod_l+0x8fa>
 800aec2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aec6:	f67f ae99 	bls.w	800abfc <_strtod_l+0x55c>
 800aeca:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800aef8 <_strtod_l+0x858>
 800aece:	ec4b ab16 	vmov	d6, sl, fp
 800aed2:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <_strtod_l+0x868>)
 800aed4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aed8:	ee17 2a90 	vmov	r2, s15
 800aedc:	4013      	ands	r3, r2
 800aede:	ec5b ab17 	vmov	sl, fp, d7
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f47f ae01 	bne.w	800aaea <_strtod_l+0x44a>
 800aee8:	9a05      	ldr	r2, [sp, #20]
 800aeea:	2322      	movs	r3, #34	@ 0x22
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	e5fc      	b.n	800aaea <_strtod_l+0x44a>
 800aef0:	ffc00000 	.word	0xffc00000
 800aef4:	41dfffff 	.word	0x41dfffff
 800aef8:	00000000 	.word	0x00000000
 800aefc:	39500000 	.word	0x39500000
 800af00:	0800cf90 	.word	0x0800cf90
 800af04:	fffffc02 	.word	0xfffffc02
 800af08:	7ff00000 	.word	0x7ff00000
 800af0c:	46d9      	mov	r9, fp
 800af0e:	d15d      	bne.n	800afcc <_strtod_l+0x92c>
 800af10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af14:	f1b8 0f00 	cmp.w	r8, #0
 800af18:	d02a      	beq.n	800af70 <_strtod_l+0x8d0>
 800af1a:	4aa9      	ldr	r2, [pc, #676]	@ (800b1c0 <_strtod_l+0xb20>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d12a      	bne.n	800af76 <_strtod_l+0x8d6>
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	4652      	mov	r2, sl
 800af24:	b1fb      	cbz	r3, 800af66 <_strtod_l+0x8c6>
 800af26:	4ba7      	ldr	r3, [pc, #668]	@ (800b1c4 <_strtod_l+0xb24>)
 800af28:	ea0b 0303 	and.w	r3, fp, r3
 800af2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af30:	f04f 31ff 	mov.w	r1, #4294967295
 800af34:	d81a      	bhi.n	800af6c <_strtod_l+0x8cc>
 800af36:	0d1b      	lsrs	r3, r3, #20
 800af38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af3c:	fa01 f303 	lsl.w	r3, r1, r3
 800af40:	429a      	cmp	r2, r3
 800af42:	d118      	bne.n	800af76 <_strtod_l+0x8d6>
 800af44:	4ba0      	ldr	r3, [pc, #640]	@ (800b1c8 <_strtod_l+0xb28>)
 800af46:	4599      	cmp	r9, r3
 800af48:	d102      	bne.n	800af50 <_strtod_l+0x8b0>
 800af4a:	3201      	adds	r2, #1
 800af4c:	f43f adc2 	beq.w	800aad4 <_strtod_l+0x434>
 800af50:	4b9c      	ldr	r3, [pc, #624]	@ (800b1c4 <_strtod_l+0xb24>)
 800af52:	ea09 0303 	and.w	r3, r9, r3
 800af56:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800af5a:	f04f 0a00 	mov.w	sl, #0
 800af5e:	9b06      	ldr	r3, [sp, #24]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1b2      	bne.n	800aeca <_strtod_l+0x82a>
 800af64:	e5c1      	b.n	800aaea <_strtod_l+0x44a>
 800af66:	f04f 33ff 	mov.w	r3, #4294967295
 800af6a:	e7e9      	b.n	800af40 <_strtod_l+0x8a0>
 800af6c:	460b      	mov	r3, r1
 800af6e:	e7e7      	b.n	800af40 <_strtod_l+0x8a0>
 800af70:	ea53 030a 	orrs.w	r3, r3, sl
 800af74:	d09b      	beq.n	800aeae <_strtod_l+0x80e>
 800af76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af78:	b1c3      	cbz	r3, 800afac <_strtod_l+0x90c>
 800af7a:	ea13 0f09 	tst.w	r3, r9
 800af7e:	d0ee      	beq.n	800af5e <_strtod_l+0x8be>
 800af80:	9a06      	ldr	r2, [sp, #24]
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	f1b8 0f00 	cmp.w	r8, #0
 800af8a:	d013      	beq.n	800afb4 <_strtod_l+0x914>
 800af8c:	f7ff fb6d 	bl	800a66a <sulp>
 800af90:	ee39 7b00 	vadd.f64	d7, d9, d0
 800af94:	ec5b ab17 	vmov	sl, fp, d7
 800af98:	e7e1      	b.n	800af5e <_strtod_l+0x8be>
 800af9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800afa2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800afa6:	f04f 3aff 	mov.w	sl, #4294967295
 800afaa:	e7d8      	b.n	800af5e <_strtod_l+0x8be>
 800afac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afae:	ea13 0f0a 	tst.w	r3, sl
 800afb2:	e7e4      	b.n	800af7e <_strtod_l+0x8de>
 800afb4:	f7ff fb59 	bl	800a66a <sulp>
 800afb8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800afbc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc4:	ec5b ab10 	vmov	sl, fp, d0
 800afc8:	d1c9      	bne.n	800af5e <_strtod_l+0x8be>
 800afca:	e617      	b.n	800abfc <_strtod_l+0x55c>
 800afcc:	4629      	mov	r1, r5
 800afce:	4620      	mov	r0, r4
 800afd0:	f7ff fad8 	bl	800a584 <__ratio>
 800afd4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800afd8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800afdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe0:	d85d      	bhi.n	800b09e <_strtod_l+0x9fe>
 800afe2:	f1b8 0f00 	cmp.w	r8, #0
 800afe6:	d164      	bne.n	800b0b2 <_strtod_l+0xa12>
 800afe8:	f1ba 0f00 	cmp.w	sl, #0
 800afec:	d14b      	bne.n	800b086 <_strtod_l+0x9e6>
 800afee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aff2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d160      	bne.n	800b0bc <_strtod_l+0xa1c>
 800affa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800affe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b006:	d401      	bmi.n	800b00c <_strtod_l+0x96c>
 800b008:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b00c:	eeb1 ab48 	vneg.f64	d10, d8
 800b010:	486c      	ldr	r0, [pc, #432]	@ (800b1c4 <_strtod_l+0xb24>)
 800b012:	496e      	ldr	r1, [pc, #440]	@ (800b1cc <_strtod_l+0xb2c>)
 800b014:	ea09 0700 	and.w	r7, r9, r0
 800b018:	428f      	cmp	r7, r1
 800b01a:	ec53 2b1a 	vmov	r2, r3, d10
 800b01e:	d17d      	bne.n	800b11c <_strtod_l+0xa7c>
 800b020:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b024:	ec4b ab1c 	vmov	d12, sl, fp
 800b028:	eeb0 0b4c 	vmov.f64	d0, d12
 800b02c:	f7ff f9e2 	bl	800a3f4 <__ulp>
 800b030:	4864      	ldr	r0, [pc, #400]	@ (800b1c4 <_strtod_l+0xb24>)
 800b032:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b036:	ee1c 3a90 	vmov	r3, s25
 800b03a:	4a65      	ldr	r2, [pc, #404]	@ (800b1d0 <_strtod_l+0xb30>)
 800b03c:	ea03 0100 	and.w	r1, r3, r0
 800b040:	4291      	cmp	r1, r2
 800b042:	ec5b ab1c 	vmov	sl, fp, d12
 800b046:	d93c      	bls.n	800b0c2 <_strtod_l+0xa22>
 800b048:	ee19 2a90 	vmov	r2, s19
 800b04c:	4b5e      	ldr	r3, [pc, #376]	@ (800b1c8 <_strtod_l+0xb28>)
 800b04e:	429a      	cmp	r2, r3
 800b050:	d104      	bne.n	800b05c <_strtod_l+0x9bc>
 800b052:	ee19 3a10 	vmov	r3, s18
 800b056:	3301      	adds	r3, #1
 800b058:	f43f ad3c 	beq.w	800aad4 <_strtod_l+0x434>
 800b05c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800b1c8 <_strtod_l+0xb28>
 800b060:	f04f 3aff 	mov.w	sl, #4294967295
 800b064:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b066:	9805      	ldr	r0, [sp, #20]
 800b068:	f7fe fe98 	bl	8009d9c <_Bfree>
 800b06c:	9805      	ldr	r0, [sp, #20]
 800b06e:	4631      	mov	r1, r6
 800b070:	f7fe fe94 	bl	8009d9c <_Bfree>
 800b074:	9805      	ldr	r0, [sp, #20]
 800b076:	4629      	mov	r1, r5
 800b078:	f7fe fe90 	bl	8009d9c <_Bfree>
 800b07c:	9805      	ldr	r0, [sp, #20]
 800b07e:	4621      	mov	r1, r4
 800b080:	f7fe fe8c 	bl	8009d9c <_Bfree>
 800b084:	e627      	b.n	800acd6 <_strtod_l+0x636>
 800b086:	f1ba 0f01 	cmp.w	sl, #1
 800b08a:	d103      	bne.n	800b094 <_strtod_l+0x9f4>
 800b08c:	f1bb 0f00 	cmp.w	fp, #0
 800b090:	f43f adb4 	beq.w	800abfc <_strtod_l+0x55c>
 800b094:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b098:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b09c:	e7b8      	b.n	800b010 <_strtod_l+0x970>
 800b09e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b0a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b0a6:	f1b8 0f00 	cmp.w	r8, #0
 800b0aa:	d0af      	beq.n	800b00c <_strtod_l+0x96c>
 800b0ac:	eeb0 ab48 	vmov.f64	d10, d8
 800b0b0:	e7ae      	b.n	800b010 <_strtod_l+0x970>
 800b0b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b0b6:	eeb0 8b4a 	vmov.f64	d8, d10
 800b0ba:	e7a9      	b.n	800b010 <_strtod_l+0x970>
 800b0bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b0c0:	e7a6      	b.n	800b010 <_strtod_l+0x970>
 800b0c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b0c6:	9b06      	ldr	r3, [sp, #24]
 800b0c8:	46d9      	mov	r9, fp
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1ca      	bne.n	800b064 <_strtod_l+0x9c4>
 800b0ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0d2:	0d1b      	lsrs	r3, r3, #20
 800b0d4:	051b      	lsls	r3, r3, #20
 800b0d6:	429f      	cmp	r7, r3
 800b0d8:	d1c4      	bne.n	800b064 <_strtod_l+0x9c4>
 800b0da:	ec51 0b18 	vmov	r0, r1, d8
 800b0de:	f7f5 fb13 	bl	8000708 <__aeabi_d2lz>
 800b0e2:	f7f5 fae3 	bl	80006ac <__aeabi_l2d>
 800b0e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800b0ea:	ec41 0b17 	vmov	d7, r0, r1
 800b0ee:	ea49 090a 	orr.w	r9, r9, sl
 800b0f2:	ea59 0908 	orrs.w	r9, r9, r8
 800b0f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b0fa:	d03c      	beq.n	800b176 <_strtod_l+0xad6>
 800b0fc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b1a8 <_strtod_l+0xb08>
 800b100:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b108:	f53f acef 	bmi.w	800aaea <_strtod_l+0x44a>
 800b10c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800b1b0 <_strtod_l+0xb10>
 800b110:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b118:	dda4      	ble.n	800b064 <_strtod_l+0x9c4>
 800b11a:	e4e6      	b.n	800aaea <_strtod_l+0x44a>
 800b11c:	9906      	ldr	r1, [sp, #24]
 800b11e:	b1e1      	cbz	r1, 800b15a <_strtod_l+0xaba>
 800b120:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800b124:	d819      	bhi.n	800b15a <_strtod_l+0xaba>
 800b126:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12e:	d811      	bhi.n	800b154 <_strtod_l+0xab4>
 800b130:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b134:	ee18 3a10 	vmov	r3, s16
 800b138:	2b01      	cmp	r3, #1
 800b13a:	bf38      	it	cc
 800b13c:	2301      	movcc	r3, #1
 800b13e:	ee08 3a10 	vmov	s16, r3
 800b142:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b146:	f1b8 0f00 	cmp.w	r8, #0
 800b14a:	d111      	bne.n	800b170 <_strtod_l+0xad0>
 800b14c:	eeb1 7b48 	vneg.f64	d7, d8
 800b150:	ec53 2b17 	vmov	r2, r3, d7
 800b154:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800b158:	1bcb      	subs	r3, r1, r7
 800b15a:	eeb0 0b49 	vmov.f64	d0, d9
 800b15e:	ec43 2b1a 	vmov	d10, r2, r3
 800b162:	f7ff f947 	bl	800a3f4 <__ulp>
 800b166:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800b16a:	ec5b ab19 	vmov	sl, fp, d9
 800b16e:	e7aa      	b.n	800b0c6 <_strtod_l+0xa26>
 800b170:	eeb0 7b48 	vmov.f64	d7, d8
 800b174:	e7ec      	b.n	800b150 <_strtod_l+0xab0>
 800b176:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800b1b8 <_strtod_l+0xb18>
 800b17a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b182:	f57f af6f 	bpl.w	800b064 <_strtod_l+0x9c4>
 800b186:	e4b0      	b.n	800aaea <_strtod_l+0x44a>
 800b188:	2300      	movs	r3, #0
 800b18a:	9308      	str	r3, [sp, #32]
 800b18c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b18e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	f7ff bac4 	b.w	800a71e <_strtod_l+0x7e>
 800b196:	2a65      	cmp	r2, #101	@ 0x65
 800b198:	f43f abbf 	beq.w	800a91a <_strtod_l+0x27a>
 800b19c:	2a45      	cmp	r2, #69	@ 0x45
 800b19e:	f43f abbc 	beq.w	800a91a <_strtod_l+0x27a>
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	f7ff bbf4 	b.w	800a990 <_strtod_l+0x2f0>
 800b1a8:	94a03595 	.word	0x94a03595
 800b1ac:	3fdfffff 	.word	0x3fdfffff
 800b1b0:	35afe535 	.word	0x35afe535
 800b1b4:	3fe00000 	.word	0x3fe00000
 800b1b8:	94a03595 	.word	0x94a03595
 800b1bc:	3fcfffff 	.word	0x3fcfffff
 800b1c0:	000fffff 	.word	0x000fffff
 800b1c4:	7ff00000 	.word	0x7ff00000
 800b1c8:	7fefffff 	.word	0x7fefffff
 800b1cc:	7fe00000 	.word	0x7fe00000
 800b1d0:	7c9fffff 	.word	0x7c9fffff

0800b1d4 <_strtod_r>:
 800b1d4:	4b01      	ldr	r3, [pc, #4]	@ (800b1dc <_strtod_r+0x8>)
 800b1d6:	f7ff ba63 	b.w	800a6a0 <_strtod_l>
 800b1da:	bf00      	nop
 800b1dc:	2400007c 	.word	0x2400007c

0800b1e0 <_strtol_l.isra.0>:
 800b1e0:	2b24      	cmp	r3, #36	@ 0x24
 800b1e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e6:	4686      	mov	lr, r0
 800b1e8:	4690      	mov	r8, r2
 800b1ea:	d801      	bhi.n	800b1f0 <_strtol_l.isra.0+0x10>
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d106      	bne.n	800b1fe <_strtol_l.isra.0+0x1e>
 800b1f0:	f7fd fe78 	bl	8008ee4 <__errno>
 800b1f4:	2316      	movs	r3, #22
 800b1f6:	6003      	str	r3, [r0, #0]
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fe:	4834      	ldr	r0, [pc, #208]	@ (800b2d0 <_strtol_l.isra.0+0xf0>)
 800b200:	460d      	mov	r5, r1
 800b202:	462a      	mov	r2, r5
 800b204:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b208:	5d06      	ldrb	r6, [r0, r4]
 800b20a:	f016 0608 	ands.w	r6, r6, #8
 800b20e:	d1f8      	bne.n	800b202 <_strtol_l.isra.0+0x22>
 800b210:	2c2d      	cmp	r4, #45	@ 0x2d
 800b212:	d110      	bne.n	800b236 <_strtol_l.isra.0+0x56>
 800b214:	782c      	ldrb	r4, [r5, #0]
 800b216:	2601      	movs	r6, #1
 800b218:	1c95      	adds	r5, r2, #2
 800b21a:	f033 0210 	bics.w	r2, r3, #16
 800b21e:	d115      	bne.n	800b24c <_strtol_l.isra.0+0x6c>
 800b220:	2c30      	cmp	r4, #48	@ 0x30
 800b222:	d10d      	bne.n	800b240 <_strtol_l.isra.0+0x60>
 800b224:	782a      	ldrb	r2, [r5, #0]
 800b226:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b22a:	2a58      	cmp	r2, #88	@ 0x58
 800b22c:	d108      	bne.n	800b240 <_strtol_l.isra.0+0x60>
 800b22e:	786c      	ldrb	r4, [r5, #1]
 800b230:	3502      	adds	r5, #2
 800b232:	2310      	movs	r3, #16
 800b234:	e00a      	b.n	800b24c <_strtol_l.isra.0+0x6c>
 800b236:	2c2b      	cmp	r4, #43	@ 0x2b
 800b238:	bf04      	itt	eq
 800b23a:	782c      	ldrbeq	r4, [r5, #0]
 800b23c:	1c95      	addeq	r5, r2, #2
 800b23e:	e7ec      	b.n	800b21a <_strtol_l.isra.0+0x3a>
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1f6      	bne.n	800b232 <_strtol_l.isra.0+0x52>
 800b244:	2c30      	cmp	r4, #48	@ 0x30
 800b246:	bf14      	ite	ne
 800b248:	230a      	movne	r3, #10
 800b24a:	2308      	moveq	r3, #8
 800b24c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b250:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b254:	2200      	movs	r2, #0
 800b256:	fbbc f9f3 	udiv	r9, ip, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b260:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b264:	2f09      	cmp	r7, #9
 800b266:	d80f      	bhi.n	800b288 <_strtol_l.isra.0+0xa8>
 800b268:	463c      	mov	r4, r7
 800b26a:	42a3      	cmp	r3, r4
 800b26c:	dd1b      	ble.n	800b2a6 <_strtol_l.isra.0+0xc6>
 800b26e:	1c57      	adds	r7, r2, #1
 800b270:	d007      	beq.n	800b282 <_strtol_l.isra.0+0xa2>
 800b272:	4581      	cmp	r9, r0
 800b274:	d314      	bcc.n	800b2a0 <_strtol_l.isra.0+0xc0>
 800b276:	d101      	bne.n	800b27c <_strtol_l.isra.0+0x9c>
 800b278:	45a2      	cmp	sl, r4
 800b27a:	db11      	blt.n	800b2a0 <_strtol_l.isra.0+0xc0>
 800b27c:	fb00 4003 	mla	r0, r0, r3, r4
 800b280:	2201      	movs	r2, #1
 800b282:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b286:	e7eb      	b.n	800b260 <_strtol_l.isra.0+0x80>
 800b288:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b28c:	2f19      	cmp	r7, #25
 800b28e:	d801      	bhi.n	800b294 <_strtol_l.isra.0+0xb4>
 800b290:	3c37      	subs	r4, #55	@ 0x37
 800b292:	e7ea      	b.n	800b26a <_strtol_l.isra.0+0x8a>
 800b294:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b298:	2f19      	cmp	r7, #25
 800b29a:	d804      	bhi.n	800b2a6 <_strtol_l.isra.0+0xc6>
 800b29c:	3c57      	subs	r4, #87	@ 0x57
 800b29e:	e7e4      	b.n	800b26a <_strtol_l.isra.0+0x8a>
 800b2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a4:	e7ed      	b.n	800b282 <_strtol_l.isra.0+0xa2>
 800b2a6:	1c53      	adds	r3, r2, #1
 800b2a8:	d108      	bne.n	800b2bc <_strtol_l.isra.0+0xdc>
 800b2aa:	2322      	movs	r3, #34	@ 0x22
 800b2ac:	f8ce 3000 	str.w	r3, [lr]
 800b2b0:	4660      	mov	r0, ip
 800b2b2:	f1b8 0f00 	cmp.w	r8, #0
 800b2b6:	d0a0      	beq.n	800b1fa <_strtol_l.isra.0+0x1a>
 800b2b8:	1e69      	subs	r1, r5, #1
 800b2ba:	e006      	b.n	800b2ca <_strtol_l.isra.0+0xea>
 800b2bc:	b106      	cbz	r6, 800b2c0 <_strtol_l.isra.0+0xe0>
 800b2be:	4240      	negs	r0, r0
 800b2c0:	f1b8 0f00 	cmp.w	r8, #0
 800b2c4:	d099      	beq.n	800b1fa <_strtol_l.isra.0+0x1a>
 800b2c6:	2a00      	cmp	r2, #0
 800b2c8:	d1f6      	bne.n	800b2b8 <_strtol_l.isra.0+0xd8>
 800b2ca:	f8c8 1000 	str.w	r1, [r8]
 800b2ce:	e794      	b.n	800b1fa <_strtol_l.isra.0+0x1a>
 800b2d0:	0800cfb9 	.word	0x0800cfb9

0800b2d4 <_strtol_r>:
 800b2d4:	f7ff bf84 	b.w	800b1e0 <_strtol_l.isra.0>

0800b2d8 <__ssputs_r>:
 800b2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2dc:	688e      	ldr	r6, [r1, #8]
 800b2de:	461f      	mov	r7, r3
 800b2e0:	42be      	cmp	r6, r7
 800b2e2:	680b      	ldr	r3, [r1, #0]
 800b2e4:	4682      	mov	sl, r0
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	4690      	mov	r8, r2
 800b2ea:	d82d      	bhi.n	800b348 <__ssputs_r+0x70>
 800b2ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2f4:	d026      	beq.n	800b344 <__ssputs_r+0x6c>
 800b2f6:	6965      	ldr	r5, [r4, #20]
 800b2f8:	6909      	ldr	r1, [r1, #16]
 800b2fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2fe:	eba3 0901 	sub.w	r9, r3, r1
 800b302:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b306:	1c7b      	adds	r3, r7, #1
 800b308:	444b      	add	r3, r9
 800b30a:	106d      	asrs	r5, r5, #1
 800b30c:	429d      	cmp	r5, r3
 800b30e:	bf38      	it	cc
 800b310:	461d      	movcc	r5, r3
 800b312:	0553      	lsls	r3, r2, #21
 800b314:	d527      	bpl.n	800b366 <__ssputs_r+0x8e>
 800b316:	4629      	mov	r1, r5
 800b318:	f7fe fc74 	bl	8009c04 <_malloc_r>
 800b31c:	4606      	mov	r6, r0
 800b31e:	b360      	cbz	r0, 800b37a <__ssputs_r+0xa2>
 800b320:	6921      	ldr	r1, [r4, #16]
 800b322:	464a      	mov	r2, r9
 800b324:	f000 fbde 	bl	800bae4 <memcpy>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	6126      	str	r6, [r4, #16]
 800b336:	6165      	str	r5, [r4, #20]
 800b338:	444e      	add	r6, r9
 800b33a:	eba5 0509 	sub.w	r5, r5, r9
 800b33e:	6026      	str	r6, [r4, #0]
 800b340:	60a5      	str	r5, [r4, #8]
 800b342:	463e      	mov	r6, r7
 800b344:	42be      	cmp	r6, r7
 800b346:	d900      	bls.n	800b34a <__ssputs_r+0x72>
 800b348:	463e      	mov	r6, r7
 800b34a:	6820      	ldr	r0, [r4, #0]
 800b34c:	4632      	mov	r2, r6
 800b34e:	4641      	mov	r1, r8
 800b350:	f000 fb6a 	bl	800ba28 <memmove>
 800b354:	68a3      	ldr	r3, [r4, #8]
 800b356:	1b9b      	subs	r3, r3, r6
 800b358:	60a3      	str	r3, [r4, #8]
 800b35a:	6823      	ldr	r3, [r4, #0]
 800b35c:	4433      	add	r3, r6
 800b35e:	6023      	str	r3, [r4, #0]
 800b360:	2000      	movs	r0, #0
 800b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b366:	462a      	mov	r2, r5
 800b368:	f000 ff4f 	bl	800c20a <_realloc_r>
 800b36c:	4606      	mov	r6, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	d1e0      	bne.n	800b334 <__ssputs_r+0x5c>
 800b372:	6921      	ldr	r1, [r4, #16]
 800b374:	4650      	mov	r0, sl
 800b376:	f7fe fbd1 	bl	8009b1c <_free_r>
 800b37a:	230c      	movs	r3, #12
 800b37c:	f8ca 3000 	str.w	r3, [sl]
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b386:	81a3      	strh	r3, [r4, #12]
 800b388:	f04f 30ff 	mov.w	r0, #4294967295
 800b38c:	e7e9      	b.n	800b362 <__ssputs_r+0x8a>
	...

0800b390 <_svfiprintf_r>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	4698      	mov	r8, r3
 800b396:	898b      	ldrh	r3, [r1, #12]
 800b398:	061b      	lsls	r3, r3, #24
 800b39a:	b09d      	sub	sp, #116	@ 0x74
 800b39c:	4607      	mov	r7, r0
 800b39e:	460d      	mov	r5, r1
 800b3a0:	4614      	mov	r4, r2
 800b3a2:	d510      	bpl.n	800b3c6 <_svfiprintf_r+0x36>
 800b3a4:	690b      	ldr	r3, [r1, #16]
 800b3a6:	b973      	cbnz	r3, 800b3c6 <_svfiprintf_r+0x36>
 800b3a8:	2140      	movs	r1, #64	@ 0x40
 800b3aa:	f7fe fc2b 	bl	8009c04 <_malloc_r>
 800b3ae:	6028      	str	r0, [r5, #0]
 800b3b0:	6128      	str	r0, [r5, #16]
 800b3b2:	b930      	cbnz	r0, 800b3c2 <_svfiprintf_r+0x32>
 800b3b4:	230c      	movs	r3, #12
 800b3b6:	603b      	str	r3, [r7, #0]
 800b3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3bc:	b01d      	add	sp, #116	@ 0x74
 800b3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c2:	2340      	movs	r3, #64	@ 0x40
 800b3c4:	616b      	str	r3, [r5, #20]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ca:	2320      	movs	r3, #32
 800b3cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3d4:	2330      	movs	r3, #48	@ 0x30
 800b3d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b574 <_svfiprintf_r+0x1e4>
 800b3da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3de:	f04f 0901 	mov.w	r9, #1
 800b3e2:	4623      	mov	r3, r4
 800b3e4:	469a      	mov	sl, r3
 800b3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3ea:	b10a      	cbz	r2, 800b3f0 <_svfiprintf_r+0x60>
 800b3ec:	2a25      	cmp	r2, #37	@ 0x25
 800b3ee:	d1f9      	bne.n	800b3e4 <_svfiprintf_r+0x54>
 800b3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b3f4:	d00b      	beq.n	800b40e <_svfiprintf_r+0x7e>
 800b3f6:	465b      	mov	r3, fp
 800b3f8:	4622      	mov	r2, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f7ff ff6b 	bl	800b2d8 <__ssputs_r>
 800b402:	3001      	adds	r0, #1
 800b404:	f000 80a7 	beq.w	800b556 <_svfiprintf_r+0x1c6>
 800b408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b40a:	445a      	add	r2, fp
 800b40c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b40e:	f89a 3000 	ldrb.w	r3, [sl]
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 809f 	beq.w	800b556 <_svfiprintf_r+0x1c6>
 800b418:	2300      	movs	r3, #0
 800b41a:	f04f 32ff 	mov.w	r2, #4294967295
 800b41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b422:	f10a 0a01 	add.w	sl, sl, #1
 800b426:	9304      	str	r3, [sp, #16]
 800b428:	9307      	str	r3, [sp, #28]
 800b42a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b42e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b430:	4654      	mov	r4, sl
 800b432:	2205      	movs	r2, #5
 800b434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b438:	484e      	ldr	r0, [pc, #312]	@ (800b574 <_svfiprintf_r+0x1e4>)
 800b43a:	f7f4 ff51 	bl	80002e0 <memchr>
 800b43e:	9a04      	ldr	r2, [sp, #16]
 800b440:	b9d8      	cbnz	r0, 800b47a <_svfiprintf_r+0xea>
 800b442:	06d0      	lsls	r0, r2, #27
 800b444:	bf44      	itt	mi
 800b446:	2320      	movmi	r3, #32
 800b448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b44c:	0711      	lsls	r1, r2, #28
 800b44e:	bf44      	itt	mi
 800b450:	232b      	movmi	r3, #43	@ 0x2b
 800b452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b456:	f89a 3000 	ldrb.w	r3, [sl]
 800b45a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b45c:	d015      	beq.n	800b48a <_svfiprintf_r+0xfa>
 800b45e:	9a07      	ldr	r2, [sp, #28]
 800b460:	4654      	mov	r4, sl
 800b462:	2000      	movs	r0, #0
 800b464:	f04f 0c0a 	mov.w	ip, #10
 800b468:	4621      	mov	r1, r4
 800b46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b46e:	3b30      	subs	r3, #48	@ 0x30
 800b470:	2b09      	cmp	r3, #9
 800b472:	d94b      	bls.n	800b50c <_svfiprintf_r+0x17c>
 800b474:	b1b0      	cbz	r0, 800b4a4 <_svfiprintf_r+0x114>
 800b476:	9207      	str	r2, [sp, #28]
 800b478:	e014      	b.n	800b4a4 <_svfiprintf_r+0x114>
 800b47a:	eba0 0308 	sub.w	r3, r0, r8
 800b47e:	fa09 f303 	lsl.w	r3, r9, r3
 800b482:	4313      	orrs	r3, r2
 800b484:	9304      	str	r3, [sp, #16]
 800b486:	46a2      	mov	sl, r4
 800b488:	e7d2      	b.n	800b430 <_svfiprintf_r+0xa0>
 800b48a:	9b03      	ldr	r3, [sp, #12]
 800b48c:	1d19      	adds	r1, r3, #4
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	9103      	str	r1, [sp, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfbb      	ittet	lt
 800b496:	425b      	neglt	r3, r3
 800b498:	f042 0202 	orrlt.w	r2, r2, #2
 800b49c:	9307      	strge	r3, [sp, #28]
 800b49e:	9307      	strlt	r3, [sp, #28]
 800b4a0:	bfb8      	it	lt
 800b4a2:	9204      	strlt	r2, [sp, #16]
 800b4a4:	7823      	ldrb	r3, [r4, #0]
 800b4a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4a8:	d10a      	bne.n	800b4c0 <_svfiprintf_r+0x130>
 800b4aa:	7863      	ldrb	r3, [r4, #1]
 800b4ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ae:	d132      	bne.n	800b516 <_svfiprintf_r+0x186>
 800b4b0:	9b03      	ldr	r3, [sp, #12]
 800b4b2:	1d1a      	adds	r2, r3, #4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	9203      	str	r2, [sp, #12]
 800b4b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4bc:	3402      	adds	r4, #2
 800b4be:	9305      	str	r3, [sp, #20]
 800b4c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b584 <_svfiprintf_r+0x1f4>
 800b4c4:	7821      	ldrb	r1, [r4, #0]
 800b4c6:	2203      	movs	r2, #3
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	f7f4 ff09 	bl	80002e0 <memchr>
 800b4ce:	b138      	cbz	r0, 800b4e0 <_svfiprintf_r+0x150>
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	eba0 000a 	sub.w	r0, r0, sl
 800b4d6:	2240      	movs	r2, #64	@ 0x40
 800b4d8:	4082      	lsls	r2, r0
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	3401      	adds	r4, #1
 800b4de:	9304      	str	r3, [sp, #16]
 800b4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4e4:	4824      	ldr	r0, [pc, #144]	@ (800b578 <_svfiprintf_r+0x1e8>)
 800b4e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4ea:	2206      	movs	r2, #6
 800b4ec:	f7f4 fef8 	bl	80002e0 <memchr>
 800b4f0:	2800      	cmp	r0, #0
 800b4f2:	d036      	beq.n	800b562 <_svfiprintf_r+0x1d2>
 800b4f4:	4b21      	ldr	r3, [pc, #132]	@ (800b57c <_svfiprintf_r+0x1ec>)
 800b4f6:	bb1b      	cbnz	r3, 800b540 <_svfiprintf_r+0x1b0>
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	3307      	adds	r3, #7
 800b4fc:	f023 0307 	bic.w	r3, r3, #7
 800b500:	3308      	adds	r3, #8
 800b502:	9303      	str	r3, [sp, #12]
 800b504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b506:	4433      	add	r3, r6
 800b508:	9309      	str	r3, [sp, #36]	@ 0x24
 800b50a:	e76a      	b.n	800b3e2 <_svfiprintf_r+0x52>
 800b50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b510:	460c      	mov	r4, r1
 800b512:	2001      	movs	r0, #1
 800b514:	e7a8      	b.n	800b468 <_svfiprintf_r+0xd8>
 800b516:	2300      	movs	r3, #0
 800b518:	3401      	adds	r4, #1
 800b51a:	9305      	str	r3, [sp, #20]
 800b51c:	4619      	mov	r1, r3
 800b51e:	f04f 0c0a 	mov.w	ip, #10
 800b522:	4620      	mov	r0, r4
 800b524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b528:	3a30      	subs	r2, #48	@ 0x30
 800b52a:	2a09      	cmp	r2, #9
 800b52c:	d903      	bls.n	800b536 <_svfiprintf_r+0x1a6>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0c6      	beq.n	800b4c0 <_svfiprintf_r+0x130>
 800b532:	9105      	str	r1, [sp, #20]
 800b534:	e7c4      	b.n	800b4c0 <_svfiprintf_r+0x130>
 800b536:	fb0c 2101 	mla	r1, ip, r1, r2
 800b53a:	4604      	mov	r4, r0
 800b53c:	2301      	movs	r3, #1
 800b53e:	e7f0      	b.n	800b522 <_svfiprintf_r+0x192>
 800b540:	ab03      	add	r3, sp, #12
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	462a      	mov	r2, r5
 800b546:	4b0e      	ldr	r3, [pc, #56]	@ (800b580 <_svfiprintf_r+0x1f0>)
 800b548:	a904      	add	r1, sp, #16
 800b54a:	4638      	mov	r0, r7
 800b54c:	f7fc fca0 	bl	8007e90 <_printf_float>
 800b550:	1c42      	adds	r2, r0, #1
 800b552:	4606      	mov	r6, r0
 800b554:	d1d6      	bne.n	800b504 <_svfiprintf_r+0x174>
 800b556:	89ab      	ldrh	r3, [r5, #12]
 800b558:	065b      	lsls	r3, r3, #25
 800b55a:	f53f af2d 	bmi.w	800b3b8 <_svfiprintf_r+0x28>
 800b55e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b560:	e72c      	b.n	800b3bc <_svfiprintf_r+0x2c>
 800b562:	ab03      	add	r3, sp, #12
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	462a      	mov	r2, r5
 800b568:	4b05      	ldr	r3, [pc, #20]	@ (800b580 <_svfiprintf_r+0x1f0>)
 800b56a:	a904      	add	r1, sp, #16
 800b56c:	4638      	mov	r0, r7
 800b56e:	f7fc ff17 	bl	80083a0 <_printf_i>
 800b572:	e7ed      	b.n	800b550 <_svfiprintf_r+0x1c0>
 800b574:	0800cdb5 	.word	0x0800cdb5
 800b578:	0800cdbf 	.word	0x0800cdbf
 800b57c:	08007e91 	.word	0x08007e91
 800b580:	0800b2d9 	.word	0x0800b2d9
 800b584:	0800cdbb 	.word	0x0800cdbb

0800b588 <__sfputc_r>:
 800b588:	6893      	ldr	r3, [r2, #8]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	b410      	push	{r4}
 800b590:	6093      	str	r3, [r2, #8]
 800b592:	da08      	bge.n	800b5a6 <__sfputc_r+0x1e>
 800b594:	6994      	ldr	r4, [r2, #24]
 800b596:	42a3      	cmp	r3, r4
 800b598:	db01      	blt.n	800b59e <__sfputc_r+0x16>
 800b59a:	290a      	cmp	r1, #10
 800b59c:	d103      	bne.n	800b5a6 <__sfputc_r+0x1e>
 800b59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5a2:	f7fd bbb8 	b.w	8008d16 <__swbuf_r>
 800b5a6:	6813      	ldr	r3, [r2, #0]
 800b5a8:	1c58      	adds	r0, r3, #1
 800b5aa:	6010      	str	r0, [r2, #0]
 800b5ac:	7019      	strb	r1, [r3, #0]
 800b5ae:	4608      	mov	r0, r1
 800b5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <__sfputs_r>:
 800b5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	460f      	mov	r7, r1
 800b5bc:	4614      	mov	r4, r2
 800b5be:	18d5      	adds	r5, r2, r3
 800b5c0:	42ac      	cmp	r4, r5
 800b5c2:	d101      	bne.n	800b5c8 <__sfputs_r+0x12>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	e007      	b.n	800b5d8 <__sfputs_r+0x22>
 800b5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5cc:	463a      	mov	r2, r7
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7ff ffda 	bl	800b588 <__sfputc_r>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d1f3      	bne.n	800b5c0 <__sfputs_r+0xa>
 800b5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5dc <_vfiprintf_r>:
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	b09d      	sub	sp, #116	@ 0x74
 800b5e4:	4614      	mov	r4, r2
 800b5e6:	4698      	mov	r8, r3
 800b5e8:	4606      	mov	r6, r0
 800b5ea:	b118      	cbz	r0, 800b5f4 <_vfiprintf_r+0x18>
 800b5ec:	6a03      	ldr	r3, [r0, #32]
 800b5ee:	b90b      	cbnz	r3, 800b5f4 <_vfiprintf_r+0x18>
 800b5f0:	f7fd fa86 	bl	8008b00 <__sinit>
 800b5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5f6:	07d9      	lsls	r1, r3, #31
 800b5f8:	d405      	bmi.n	800b606 <_vfiprintf_r+0x2a>
 800b5fa:	89ab      	ldrh	r3, [r5, #12]
 800b5fc:	059a      	lsls	r2, r3, #22
 800b5fe:	d402      	bmi.n	800b606 <_vfiprintf_r+0x2a>
 800b600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b602:	f7fd fc9a 	bl	8008f3a <__retarget_lock_acquire_recursive>
 800b606:	89ab      	ldrh	r3, [r5, #12]
 800b608:	071b      	lsls	r3, r3, #28
 800b60a:	d501      	bpl.n	800b610 <_vfiprintf_r+0x34>
 800b60c:	692b      	ldr	r3, [r5, #16]
 800b60e:	b99b      	cbnz	r3, 800b638 <_vfiprintf_r+0x5c>
 800b610:	4629      	mov	r1, r5
 800b612:	4630      	mov	r0, r6
 800b614:	f7fd fbbe 	bl	8008d94 <__swsetup_r>
 800b618:	b170      	cbz	r0, 800b638 <_vfiprintf_r+0x5c>
 800b61a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b61c:	07dc      	lsls	r4, r3, #31
 800b61e:	d504      	bpl.n	800b62a <_vfiprintf_r+0x4e>
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	b01d      	add	sp, #116	@ 0x74
 800b626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62a:	89ab      	ldrh	r3, [r5, #12]
 800b62c:	0598      	lsls	r0, r3, #22
 800b62e:	d4f7      	bmi.n	800b620 <_vfiprintf_r+0x44>
 800b630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b632:	f7fd fc83 	bl	8008f3c <__retarget_lock_release_recursive>
 800b636:	e7f3      	b.n	800b620 <_vfiprintf_r+0x44>
 800b638:	2300      	movs	r3, #0
 800b63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b63c:	2320      	movs	r3, #32
 800b63e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b642:	f8cd 800c 	str.w	r8, [sp, #12]
 800b646:	2330      	movs	r3, #48	@ 0x30
 800b648:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7f8 <_vfiprintf_r+0x21c>
 800b64c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b650:	f04f 0901 	mov.w	r9, #1
 800b654:	4623      	mov	r3, r4
 800b656:	469a      	mov	sl, r3
 800b658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b65c:	b10a      	cbz	r2, 800b662 <_vfiprintf_r+0x86>
 800b65e:	2a25      	cmp	r2, #37	@ 0x25
 800b660:	d1f9      	bne.n	800b656 <_vfiprintf_r+0x7a>
 800b662:	ebba 0b04 	subs.w	fp, sl, r4
 800b666:	d00b      	beq.n	800b680 <_vfiprintf_r+0xa4>
 800b668:	465b      	mov	r3, fp
 800b66a:	4622      	mov	r2, r4
 800b66c:	4629      	mov	r1, r5
 800b66e:	4630      	mov	r0, r6
 800b670:	f7ff ffa1 	bl	800b5b6 <__sfputs_r>
 800b674:	3001      	adds	r0, #1
 800b676:	f000 80a7 	beq.w	800b7c8 <_vfiprintf_r+0x1ec>
 800b67a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b67c:	445a      	add	r2, fp
 800b67e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b680:	f89a 3000 	ldrb.w	r3, [sl]
 800b684:	2b00      	cmp	r3, #0
 800b686:	f000 809f 	beq.w	800b7c8 <_vfiprintf_r+0x1ec>
 800b68a:	2300      	movs	r3, #0
 800b68c:	f04f 32ff 	mov.w	r2, #4294967295
 800b690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b694:	f10a 0a01 	add.w	sl, sl, #1
 800b698:	9304      	str	r3, [sp, #16]
 800b69a:	9307      	str	r3, [sp, #28]
 800b69c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6a2:	4654      	mov	r4, sl
 800b6a4:	2205      	movs	r2, #5
 800b6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6aa:	4853      	ldr	r0, [pc, #332]	@ (800b7f8 <_vfiprintf_r+0x21c>)
 800b6ac:	f7f4 fe18 	bl	80002e0 <memchr>
 800b6b0:	9a04      	ldr	r2, [sp, #16]
 800b6b2:	b9d8      	cbnz	r0, 800b6ec <_vfiprintf_r+0x110>
 800b6b4:	06d1      	lsls	r1, r2, #27
 800b6b6:	bf44      	itt	mi
 800b6b8:	2320      	movmi	r3, #32
 800b6ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6be:	0713      	lsls	r3, r2, #28
 800b6c0:	bf44      	itt	mi
 800b6c2:	232b      	movmi	r3, #43	@ 0x2b
 800b6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ce:	d015      	beq.n	800b6fc <_vfiprintf_r+0x120>
 800b6d0:	9a07      	ldr	r2, [sp, #28]
 800b6d2:	4654      	mov	r4, sl
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	f04f 0c0a 	mov.w	ip, #10
 800b6da:	4621      	mov	r1, r4
 800b6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6e0:	3b30      	subs	r3, #48	@ 0x30
 800b6e2:	2b09      	cmp	r3, #9
 800b6e4:	d94b      	bls.n	800b77e <_vfiprintf_r+0x1a2>
 800b6e6:	b1b0      	cbz	r0, 800b716 <_vfiprintf_r+0x13a>
 800b6e8:	9207      	str	r2, [sp, #28]
 800b6ea:	e014      	b.n	800b716 <_vfiprintf_r+0x13a>
 800b6ec:	eba0 0308 	sub.w	r3, r0, r8
 800b6f0:	fa09 f303 	lsl.w	r3, r9, r3
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	9304      	str	r3, [sp, #16]
 800b6f8:	46a2      	mov	sl, r4
 800b6fa:	e7d2      	b.n	800b6a2 <_vfiprintf_r+0xc6>
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	1d19      	adds	r1, r3, #4
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	9103      	str	r1, [sp, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfbb      	ittet	lt
 800b708:	425b      	neglt	r3, r3
 800b70a:	f042 0202 	orrlt.w	r2, r2, #2
 800b70e:	9307      	strge	r3, [sp, #28]
 800b710:	9307      	strlt	r3, [sp, #28]
 800b712:	bfb8      	it	lt
 800b714:	9204      	strlt	r2, [sp, #16]
 800b716:	7823      	ldrb	r3, [r4, #0]
 800b718:	2b2e      	cmp	r3, #46	@ 0x2e
 800b71a:	d10a      	bne.n	800b732 <_vfiprintf_r+0x156>
 800b71c:	7863      	ldrb	r3, [r4, #1]
 800b71e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b720:	d132      	bne.n	800b788 <_vfiprintf_r+0x1ac>
 800b722:	9b03      	ldr	r3, [sp, #12]
 800b724:	1d1a      	adds	r2, r3, #4
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	9203      	str	r2, [sp, #12]
 800b72a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b72e:	3402      	adds	r4, #2
 800b730:	9305      	str	r3, [sp, #20]
 800b732:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b808 <_vfiprintf_r+0x22c>
 800b736:	7821      	ldrb	r1, [r4, #0]
 800b738:	2203      	movs	r2, #3
 800b73a:	4650      	mov	r0, sl
 800b73c:	f7f4 fdd0 	bl	80002e0 <memchr>
 800b740:	b138      	cbz	r0, 800b752 <_vfiprintf_r+0x176>
 800b742:	9b04      	ldr	r3, [sp, #16]
 800b744:	eba0 000a 	sub.w	r0, r0, sl
 800b748:	2240      	movs	r2, #64	@ 0x40
 800b74a:	4082      	lsls	r2, r0
 800b74c:	4313      	orrs	r3, r2
 800b74e:	3401      	adds	r4, #1
 800b750:	9304      	str	r3, [sp, #16]
 800b752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b756:	4829      	ldr	r0, [pc, #164]	@ (800b7fc <_vfiprintf_r+0x220>)
 800b758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b75c:	2206      	movs	r2, #6
 800b75e:	f7f4 fdbf 	bl	80002e0 <memchr>
 800b762:	2800      	cmp	r0, #0
 800b764:	d03f      	beq.n	800b7e6 <_vfiprintf_r+0x20a>
 800b766:	4b26      	ldr	r3, [pc, #152]	@ (800b800 <_vfiprintf_r+0x224>)
 800b768:	bb1b      	cbnz	r3, 800b7b2 <_vfiprintf_r+0x1d6>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	3307      	adds	r3, #7
 800b76e:	f023 0307 	bic.w	r3, r3, #7
 800b772:	3308      	adds	r3, #8
 800b774:	9303      	str	r3, [sp, #12]
 800b776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b778:	443b      	add	r3, r7
 800b77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b77c:	e76a      	b.n	800b654 <_vfiprintf_r+0x78>
 800b77e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b782:	460c      	mov	r4, r1
 800b784:	2001      	movs	r0, #1
 800b786:	e7a8      	b.n	800b6da <_vfiprintf_r+0xfe>
 800b788:	2300      	movs	r3, #0
 800b78a:	3401      	adds	r4, #1
 800b78c:	9305      	str	r3, [sp, #20]
 800b78e:	4619      	mov	r1, r3
 800b790:	f04f 0c0a 	mov.w	ip, #10
 800b794:	4620      	mov	r0, r4
 800b796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b79a:	3a30      	subs	r2, #48	@ 0x30
 800b79c:	2a09      	cmp	r2, #9
 800b79e:	d903      	bls.n	800b7a8 <_vfiprintf_r+0x1cc>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d0c6      	beq.n	800b732 <_vfiprintf_r+0x156>
 800b7a4:	9105      	str	r1, [sp, #20]
 800b7a6:	e7c4      	b.n	800b732 <_vfiprintf_r+0x156>
 800b7a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e7f0      	b.n	800b794 <_vfiprintf_r+0x1b8>
 800b7b2:	ab03      	add	r3, sp, #12
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	462a      	mov	r2, r5
 800b7b8:	4b12      	ldr	r3, [pc, #72]	@ (800b804 <_vfiprintf_r+0x228>)
 800b7ba:	a904      	add	r1, sp, #16
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7fc fb67 	bl	8007e90 <_printf_float>
 800b7c2:	4607      	mov	r7, r0
 800b7c4:	1c78      	adds	r0, r7, #1
 800b7c6:	d1d6      	bne.n	800b776 <_vfiprintf_r+0x19a>
 800b7c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7ca:	07d9      	lsls	r1, r3, #31
 800b7cc:	d405      	bmi.n	800b7da <_vfiprintf_r+0x1fe>
 800b7ce:	89ab      	ldrh	r3, [r5, #12]
 800b7d0:	059a      	lsls	r2, r3, #22
 800b7d2:	d402      	bmi.n	800b7da <_vfiprintf_r+0x1fe>
 800b7d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7d6:	f7fd fbb1 	bl	8008f3c <__retarget_lock_release_recursive>
 800b7da:	89ab      	ldrh	r3, [r5, #12]
 800b7dc:	065b      	lsls	r3, r3, #25
 800b7de:	f53f af1f 	bmi.w	800b620 <_vfiprintf_r+0x44>
 800b7e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7e4:	e71e      	b.n	800b624 <_vfiprintf_r+0x48>
 800b7e6:	ab03      	add	r3, sp, #12
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	4b05      	ldr	r3, [pc, #20]	@ (800b804 <_vfiprintf_r+0x228>)
 800b7ee:	a904      	add	r1, sp, #16
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7fc fdd5 	bl	80083a0 <_printf_i>
 800b7f6:	e7e4      	b.n	800b7c2 <_vfiprintf_r+0x1e6>
 800b7f8:	0800cdb5 	.word	0x0800cdb5
 800b7fc:	0800cdbf 	.word	0x0800cdbf
 800b800:	08007e91 	.word	0x08007e91
 800b804:	0800b5b7 	.word	0x0800b5b7
 800b808:	0800cdbb 	.word	0x0800cdbb

0800b80c <__sflush_r>:
 800b80c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b814:	0716      	lsls	r6, r2, #28
 800b816:	4605      	mov	r5, r0
 800b818:	460c      	mov	r4, r1
 800b81a:	d454      	bmi.n	800b8c6 <__sflush_r+0xba>
 800b81c:	684b      	ldr	r3, [r1, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dc02      	bgt.n	800b828 <__sflush_r+0x1c>
 800b822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b824:	2b00      	cmp	r3, #0
 800b826:	dd48      	ble.n	800b8ba <__sflush_r+0xae>
 800b828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b82a:	2e00      	cmp	r6, #0
 800b82c:	d045      	beq.n	800b8ba <__sflush_r+0xae>
 800b82e:	2300      	movs	r3, #0
 800b830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b834:	682f      	ldr	r7, [r5, #0]
 800b836:	6a21      	ldr	r1, [r4, #32]
 800b838:	602b      	str	r3, [r5, #0]
 800b83a:	d030      	beq.n	800b89e <__sflush_r+0x92>
 800b83c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	0759      	lsls	r1, r3, #29
 800b842:	d505      	bpl.n	800b850 <__sflush_r+0x44>
 800b844:	6863      	ldr	r3, [r4, #4]
 800b846:	1ad2      	subs	r2, r2, r3
 800b848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b84a:	b10b      	cbz	r3, 800b850 <__sflush_r+0x44>
 800b84c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b84e:	1ad2      	subs	r2, r2, r3
 800b850:	2300      	movs	r3, #0
 800b852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b854:	6a21      	ldr	r1, [r4, #32]
 800b856:	4628      	mov	r0, r5
 800b858:	47b0      	blx	r6
 800b85a:	1c43      	adds	r3, r0, #1
 800b85c:	89a3      	ldrh	r3, [r4, #12]
 800b85e:	d106      	bne.n	800b86e <__sflush_r+0x62>
 800b860:	6829      	ldr	r1, [r5, #0]
 800b862:	291d      	cmp	r1, #29
 800b864:	d82b      	bhi.n	800b8be <__sflush_r+0xb2>
 800b866:	4a2a      	ldr	r2, [pc, #168]	@ (800b910 <__sflush_r+0x104>)
 800b868:	40ca      	lsrs	r2, r1
 800b86a:	07d6      	lsls	r6, r2, #31
 800b86c:	d527      	bpl.n	800b8be <__sflush_r+0xb2>
 800b86e:	2200      	movs	r2, #0
 800b870:	6062      	str	r2, [r4, #4]
 800b872:	04d9      	lsls	r1, r3, #19
 800b874:	6922      	ldr	r2, [r4, #16]
 800b876:	6022      	str	r2, [r4, #0]
 800b878:	d504      	bpl.n	800b884 <__sflush_r+0x78>
 800b87a:	1c42      	adds	r2, r0, #1
 800b87c:	d101      	bne.n	800b882 <__sflush_r+0x76>
 800b87e:	682b      	ldr	r3, [r5, #0]
 800b880:	b903      	cbnz	r3, 800b884 <__sflush_r+0x78>
 800b882:	6560      	str	r0, [r4, #84]	@ 0x54
 800b884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b886:	602f      	str	r7, [r5, #0]
 800b888:	b1b9      	cbz	r1, 800b8ba <__sflush_r+0xae>
 800b88a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b88e:	4299      	cmp	r1, r3
 800b890:	d002      	beq.n	800b898 <__sflush_r+0x8c>
 800b892:	4628      	mov	r0, r5
 800b894:	f7fe f942 	bl	8009b1c <_free_r>
 800b898:	2300      	movs	r3, #0
 800b89a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b89c:	e00d      	b.n	800b8ba <__sflush_r+0xae>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	47b0      	blx	r6
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	1c50      	adds	r0, r2, #1
 800b8a8:	d1c9      	bne.n	800b83e <__sflush_r+0x32>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d0c6      	beq.n	800b83e <__sflush_r+0x32>
 800b8b0:	2b1d      	cmp	r3, #29
 800b8b2:	d001      	beq.n	800b8b8 <__sflush_r+0xac>
 800b8b4:	2b16      	cmp	r3, #22
 800b8b6:	d11e      	bne.n	800b8f6 <__sflush_r+0xea>
 800b8b8:	602f      	str	r7, [r5, #0]
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	e022      	b.n	800b904 <__sflush_r+0xf8>
 800b8be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c2:	b21b      	sxth	r3, r3
 800b8c4:	e01b      	b.n	800b8fe <__sflush_r+0xf2>
 800b8c6:	690f      	ldr	r7, [r1, #16]
 800b8c8:	2f00      	cmp	r7, #0
 800b8ca:	d0f6      	beq.n	800b8ba <__sflush_r+0xae>
 800b8cc:	0793      	lsls	r3, r2, #30
 800b8ce:	680e      	ldr	r6, [r1, #0]
 800b8d0:	bf08      	it	eq
 800b8d2:	694b      	ldreq	r3, [r1, #20]
 800b8d4:	600f      	str	r7, [r1, #0]
 800b8d6:	bf18      	it	ne
 800b8d8:	2300      	movne	r3, #0
 800b8da:	eba6 0807 	sub.w	r8, r6, r7
 800b8de:	608b      	str	r3, [r1, #8]
 800b8e0:	f1b8 0f00 	cmp.w	r8, #0
 800b8e4:	dde9      	ble.n	800b8ba <__sflush_r+0xae>
 800b8e6:	6a21      	ldr	r1, [r4, #32]
 800b8e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8ea:	4643      	mov	r3, r8
 800b8ec:	463a      	mov	r2, r7
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	47b0      	blx	r6
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	dc08      	bgt.n	800b908 <__sflush_r+0xfc>
 800b8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b908:	4407      	add	r7, r0
 800b90a:	eba8 0800 	sub.w	r8, r8, r0
 800b90e:	e7e7      	b.n	800b8e0 <__sflush_r+0xd4>
 800b910:	20400001 	.word	0x20400001

0800b914 <_fflush_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	690b      	ldr	r3, [r1, #16]
 800b918:	4605      	mov	r5, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	b913      	cbnz	r3, 800b924 <_fflush_r+0x10>
 800b91e:	2500      	movs	r5, #0
 800b920:	4628      	mov	r0, r5
 800b922:	bd38      	pop	{r3, r4, r5, pc}
 800b924:	b118      	cbz	r0, 800b92e <_fflush_r+0x1a>
 800b926:	6a03      	ldr	r3, [r0, #32]
 800b928:	b90b      	cbnz	r3, 800b92e <_fflush_r+0x1a>
 800b92a:	f7fd f8e9 	bl	8008b00 <__sinit>
 800b92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d0f3      	beq.n	800b91e <_fflush_r+0xa>
 800b936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b938:	07d0      	lsls	r0, r2, #31
 800b93a:	d404      	bmi.n	800b946 <_fflush_r+0x32>
 800b93c:	0599      	lsls	r1, r3, #22
 800b93e:	d402      	bmi.n	800b946 <_fflush_r+0x32>
 800b940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b942:	f7fd fafa 	bl	8008f3a <__retarget_lock_acquire_recursive>
 800b946:	4628      	mov	r0, r5
 800b948:	4621      	mov	r1, r4
 800b94a:	f7ff ff5f 	bl	800b80c <__sflush_r>
 800b94e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b950:	07da      	lsls	r2, r3, #31
 800b952:	4605      	mov	r5, r0
 800b954:	d4e4      	bmi.n	800b920 <_fflush_r+0xc>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	059b      	lsls	r3, r3, #22
 800b95a:	d4e1      	bmi.n	800b920 <_fflush_r+0xc>
 800b95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b95e:	f7fd faed 	bl	8008f3c <__retarget_lock_release_recursive>
 800b962:	e7dd      	b.n	800b920 <_fflush_r+0xc>

0800b964 <__swhatbuf_r>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	460c      	mov	r4, r1
 800b968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b96c:	2900      	cmp	r1, #0
 800b96e:	b096      	sub	sp, #88	@ 0x58
 800b970:	4615      	mov	r5, r2
 800b972:	461e      	mov	r6, r3
 800b974:	da0d      	bge.n	800b992 <__swhatbuf_r+0x2e>
 800b976:	89a3      	ldrh	r3, [r4, #12]
 800b978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b97c:	f04f 0100 	mov.w	r1, #0
 800b980:	bf14      	ite	ne
 800b982:	2340      	movne	r3, #64	@ 0x40
 800b984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b988:	2000      	movs	r0, #0
 800b98a:	6031      	str	r1, [r6, #0]
 800b98c:	602b      	str	r3, [r5, #0]
 800b98e:	b016      	add	sp, #88	@ 0x58
 800b990:	bd70      	pop	{r4, r5, r6, pc}
 800b992:	466a      	mov	r2, sp
 800b994:	f000 f874 	bl	800ba80 <_fstat_r>
 800b998:	2800      	cmp	r0, #0
 800b99a:	dbec      	blt.n	800b976 <__swhatbuf_r+0x12>
 800b99c:	9901      	ldr	r1, [sp, #4]
 800b99e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9a6:	4259      	negs	r1, r3
 800b9a8:	4159      	adcs	r1, r3
 800b9aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9ae:	e7eb      	b.n	800b988 <__swhatbuf_r+0x24>

0800b9b0 <__smakebuf_r>:
 800b9b0:	898b      	ldrh	r3, [r1, #12]
 800b9b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9b4:	079d      	lsls	r5, r3, #30
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	d507      	bpl.n	800b9cc <__smakebuf_r+0x1c>
 800b9bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	6123      	str	r3, [r4, #16]
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	6163      	str	r3, [r4, #20]
 800b9c8:	b003      	add	sp, #12
 800b9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9cc:	ab01      	add	r3, sp, #4
 800b9ce:	466a      	mov	r2, sp
 800b9d0:	f7ff ffc8 	bl	800b964 <__swhatbuf_r>
 800b9d4:	9f00      	ldr	r7, [sp, #0]
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	4639      	mov	r1, r7
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f7fe f912 	bl	8009c04 <_malloc_r>
 800b9e0:	b948      	cbnz	r0, 800b9f6 <__smakebuf_r+0x46>
 800b9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e6:	059a      	lsls	r2, r3, #22
 800b9e8:	d4ee      	bmi.n	800b9c8 <__smakebuf_r+0x18>
 800b9ea:	f023 0303 	bic.w	r3, r3, #3
 800b9ee:	f043 0302 	orr.w	r3, r3, #2
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	e7e2      	b.n	800b9bc <__smakebuf_r+0xc>
 800b9f6:	89a3      	ldrh	r3, [r4, #12]
 800b9f8:	6020      	str	r0, [r4, #0]
 800b9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9fe:	81a3      	strh	r3, [r4, #12]
 800ba00:	9b01      	ldr	r3, [sp, #4]
 800ba02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba06:	b15b      	cbz	r3, 800ba20 <__smakebuf_r+0x70>
 800ba08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f000 f849 	bl	800baa4 <_isatty_r>
 800ba12:	b128      	cbz	r0, 800ba20 <__smakebuf_r+0x70>
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	f043 0301 	orr.w	r3, r3, #1
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	431d      	orrs	r5, r3
 800ba24:	81a5      	strh	r5, [r4, #12]
 800ba26:	e7cf      	b.n	800b9c8 <__smakebuf_r+0x18>

0800ba28 <memmove>:
 800ba28:	4288      	cmp	r0, r1
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	eb01 0402 	add.w	r4, r1, r2
 800ba30:	d902      	bls.n	800ba38 <memmove+0x10>
 800ba32:	4284      	cmp	r4, r0
 800ba34:	4623      	mov	r3, r4
 800ba36:	d807      	bhi.n	800ba48 <memmove+0x20>
 800ba38:	1e43      	subs	r3, r0, #1
 800ba3a:	42a1      	cmp	r1, r4
 800ba3c:	d008      	beq.n	800ba50 <memmove+0x28>
 800ba3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba46:	e7f8      	b.n	800ba3a <memmove+0x12>
 800ba48:	4402      	add	r2, r0
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	428a      	cmp	r2, r1
 800ba4e:	d100      	bne.n	800ba52 <memmove+0x2a>
 800ba50:	bd10      	pop	{r4, pc}
 800ba52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba5a:	e7f7      	b.n	800ba4c <memmove+0x24>

0800ba5c <strncmp>:
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	b16a      	cbz	r2, 800ba7c <strncmp+0x20>
 800ba60:	3901      	subs	r1, #1
 800ba62:	1884      	adds	r4, r0, r2
 800ba64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d103      	bne.n	800ba78 <strncmp+0x1c>
 800ba70:	42a0      	cmp	r0, r4
 800ba72:	d001      	beq.n	800ba78 <strncmp+0x1c>
 800ba74:	2a00      	cmp	r2, #0
 800ba76:	d1f5      	bne.n	800ba64 <strncmp+0x8>
 800ba78:	1ad0      	subs	r0, r2, r3
 800ba7a:	bd10      	pop	{r4, pc}
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	e7fc      	b.n	800ba7a <strncmp+0x1e>

0800ba80 <_fstat_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4d07      	ldr	r5, [pc, #28]	@ (800baa0 <_fstat_r+0x20>)
 800ba84:	2300      	movs	r3, #0
 800ba86:	4604      	mov	r4, r0
 800ba88:	4608      	mov	r0, r1
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	602b      	str	r3, [r5, #0]
 800ba8e:	f7f7 fb7c 	bl	800318a <_fstat>
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	d102      	bne.n	800ba9c <_fstat_r+0x1c>
 800ba96:	682b      	ldr	r3, [r5, #0]
 800ba98:	b103      	cbz	r3, 800ba9c <_fstat_r+0x1c>
 800ba9a:	6023      	str	r3, [r4, #0]
 800ba9c:	bd38      	pop	{r3, r4, r5, pc}
 800ba9e:	bf00      	nop
 800baa0:	24000620 	.word	0x24000620

0800baa4 <_isatty_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4d06      	ldr	r5, [pc, #24]	@ (800bac0 <_isatty_r+0x1c>)
 800baa8:	2300      	movs	r3, #0
 800baaa:	4604      	mov	r4, r0
 800baac:	4608      	mov	r0, r1
 800baae:	602b      	str	r3, [r5, #0]
 800bab0:	f7f7 fb7b 	bl	80031aa <_isatty>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d102      	bne.n	800babe <_isatty_r+0x1a>
 800bab8:	682b      	ldr	r3, [r5, #0]
 800baba:	b103      	cbz	r3, 800babe <_isatty_r+0x1a>
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	bd38      	pop	{r3, r4, r5, pc}
 800bac0:	24000620 	.word	0x24000620

0800bac4 <_sbrk_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d06      	ldr	r5, [pc, #24]	@ (800bae0 <_sbrk_r+0x1c>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f7 fb84 	bl	80031dc <_sbrk>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_sbrk_r+0x1a>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_sbrk_r+0x1a>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	24000620 	.word	0x24000620

0800bae4 <memcpy>:
 800bae4:	440a      	add	r2, r1
 800bae6:	4291      	cmp	r1, r2
 800bae8:	f100 33ff 	add.w	r3, r0, #4294967295
 800baec:	d100      	bne.n	800baf0 <memcpy+0xc>
 800baee:	4770      	bx	lr
 800baf0:	b510      	push	{r4, lr}
 800baf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bafa:	4291      	cmp	r1, r2
 800bafc:	d1f9      	bne.n	800baf2 <memcpy+0xe>
 800bafe:	bd10      	pop	{r4, pc}

0800bb00 <nan>:
 800bb00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb08 <nan+0x8>
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	7ff80000 	.word	0x7ff80000

0800bb10 <__assert_func>:
 800bb10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb12:	4614      	mov	r4, r2
 800bb14:	461a      	mov	r2, r3
 800bb16:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <__assert_func+0x2c>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	68d8      	ldr	r0, [r3, #12]
 800bb1e:	b14c      	cbz	r4, 800bb34 <__assert_func+0x24>
 800bb20:	4b07      	ldr	r3, [pc, #28]	@ (800bb40 <__assert_func+0x30>)
 800bb22:	9100      	str	r1, [sp, #0]
 800bb24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb28:	4906      	ldr	r1, [pc, #24]	@ (800bb44 <__assert_func+0x34>)
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	f000 fba8 	bl	800c280 <fiprintf>
 800bb30:	f000 fbb8 	bl	800c2a4 <abort>
 800bb34:	4b04      	ldr	r3, [pc, #16]	@ (800bb48 <__assert_func+0x38>)
 800bb36:	461c      	mov	r4, r3
 800bb38:	e7f3      	b.n	800bb22 <__assert_func+0x12>
 800bb3a:	bf00      	nop
 800bb3c:	2400002c 	.word	0x2400002c
 800bb40:	0800cdce 	.word	0x0800cdce
 800bb44:	0800cddb 	.word	0x0800cddb
 800bb48:	0800ce09 	.word	0x0800ce09

0800bb4c <_calloc_r>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	fba1 5402 	umull	r5, r4, r1, r2
 800bb52:	b934      	cbnz	r4, 800bb62 <_calloc_r+0x16>
 800bb54:	4629      	mov	r1, r5
 800bb56:	f7fe f855 	bl	8009c04 <_malloc_r>
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	b928      	cbnz	r0, 800bb6a <_calloc_r+0x1e>
 800bb5e:	4630      	mov	r0, r6
 800bb60:	bd70      	pop	{r4, r5, r6, pc}
 800bb62:	220c      	movs	r2, #12
 800bb64:	6002      	str	r2, [r0, #0]
 800bb66:	2600      	movs	r6, #0
 800bb68:	e7f9      	b.n	800bb5e <_calloc_r+0x12>
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	f7fd f967 	bl	8008e40 <memset>
 800bb72:	e7f4      	b.n	800bb5e <_calloc_r+0x12>

0800bb74 <rshift>:
 800bb74:	6903      	ldr	r3, [r0, #16]
 800bb76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb82:	f100 0414 	add.w	r4, r0, #20
 800bb86:	dd45      	ble.n	800bc14 <rshift+0xa0>
 800bb88:	f011 011f 	ands.w	r1, r1, #31
 800bb8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb94:	d10c      	bne.n	800bbb0 <rshift+0x3c>
 800bb96:	f100 0710 	add.w	r7, r0, #16
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	42b1      	cmp	r1, r6
 800bb9e:	d334      	bcc.n	800bc0a <rshift+0x96>
 800bba0:	1a9b      	subs	r3, r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	1eea      	subs	r2, r5, #3
 800bba6:	4296      	cmp	r6, r2
 800bba8:	bf38      	it	cc
 800bbaa:	2300      	movcc	r3, #0
 800bbac:	4423      	add	r3, r4
 800bbae:	e015      	b.n	800bbdc <rshift+0x68>
 800bbb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bbb4:	f1c1 0820 	rsb	r8, r1, #32
 800bbb8:	40cf      	lsrs	r7, r1
 800bbba:	f105 0e04 	add.w	lr, r5, #4
 800bbbe:	46a1      	mov	r9, r4
 800bbc0:	4576      	cmp	r6, lr
 800bbc2:	46f4      	mov	ip, lr
 800bbc4:	d815      	bhi.n	800bbf2 <rshift+0x7e>
 800bbc6:	1a9a      	subs	r2, r3, r2
 800bbc8:	0092      	lsls	r2, r2, #2
 800bbca:	3a04      	subs	r2, #4
 800bbcc:	3501      	adds	r5, #1
 800bbce:	42ae      	cmp	r6, r5
 800bbd0:	bf38      	it	cc
 800bbd2:	2200      	movcc	r2, #0
 800bbd4:	18a3      	adds	r3, r4, r2
 800bbd6:	50a7      	str	r7, [r4, r2]
 800bbd8:	b107      	cbz	r7, 800bbdc <rshift+0x68>
 800bbda:	3304      	adds	r3, #4
 800bbdc:	1b1a      	subs	r2, r3, r4
 800bbde:	42a3      	cmp	r3, r4
 800bbe0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbe4:	bf08      	it	eq
 800bbe6:	2300      	moveq	r3, #0
 800bbe8:	6102      	str	r2, [r0, #16]
 800bbea:	bf08      	it	eq
 800bbec:	6143      	streq	r3, [r0, #20]
 800bbee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf2:	f8dc c000 	ldr.w	ip, [ip]
 800bbf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bbfa:	ea4c 0707 	orr.w	r7, ip, r7
 800bbfe:	f849 7b04 	str.w	r7, [r9], #4
 800bc02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc06:	40cf      	lsrs	r7, r1
 800bc08:	e7da      	b.n	800bbc0 <rshift+0x4c>
 800bc0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc12:	e7c3      	b.n	800bb9c <rshift+0x28>
 800bc14:	4623      	mov	r3, r4
 800bc16:	e7e1      	b.n	800bbdc <rshift+0x68>

0800bc18 <__hexdig_fun>:
 800bc18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bc1c:	2b09      	cmp	r3, #9
 800bc1e:	d802      	bhi.n	800bc26 <__hexdig_fun+0xe>
 800bc20:	3820      	subs	r0, #32
 800bc22:	b2c0      	uxtb	r0, r0
 800bc24:	4770      	bx	lr
 800bc26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bc2a:	2b05      	cmp	r3, #5
 800bc2c:	d801      	bhi.n	800bc32 <__hexdig_fun+0x1a>
 800bc2e:	3847      	subs	r0, #71	@ 0x47
 800bc30:	e7f7      	b.n	800bc22 <__hexdig_fun+0xa>
 800bc32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bc36:	2b05      	cmp	r3, #5
 800bc38:	d801      	bhi.n	800bc3e <__hexdig_fun+0x26>
 800bc3a:	3827      	subs	r0, #39	@ 0x27
 800bc3c:	e7f1      	b.n	800bc22 <__hexdig_fun+0xa>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	4770      	bx	lr
	...

0800bc44 <__gethex>:
 800bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc48:	b085      	sub	sp, #20
 800bc4a:	468a      	mov	sl, r1
 800bc4c:	9302      	str	r3, [sp, #8]
 800bc4e:	680b      	ldr	r3, [r1, #0]
 800bc50:	9001      	str	r0, [sp, #4]
 800bc52:	4690      	mov	r8, r2
 800bc54:	1c9c      	adds	r4, r3, #2
 800bc56:	46a1      	mov	r9, r4
 800bc58:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc5c:	2830      	cmp	r0, #48	@ 0x30
 800bc5e:	d0fa      	beq.n	800bc56 <__gethex+0x12>
 800bc60:	eba9 0303 	sub.w	r3, r9, r3
 800bc64:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc68:	f7ff ffd6 	bl	800bc18 <__hexdig_fun>
 800bc6c:	4605      	mov	r5, r0
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d168      	bne.n	800bd44 <__gethex+0x100>
 800bc72:	49a0      	ldr	r1, [pc, #640]	@ (800bef4 <__gethex+0x2b0>)
 800bc74:	2201      	movs	r2, #1
 800bc76:	4648      	mov	r0, r9
 800bc78:	f7ff fef0 	bl	800ba5c <strncmp>
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d167      	bne.n	800bd52 <__gethex+0x10e>
 800bc82:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc86:	4626      	mov	r6, r4
 800bc88:	f7ff ffc6 	bl	800bc18 <__hexdig_fun>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d062      	beq.n	800bd56 <__gethex+0x112>
 800bc90:	4623      	mov	r3, r4
 800bc92:	7818      	ldrb	r0, [r3, #0]
 800bc94:	2830      	cmp	r0, #48	@ 0x30
 800bc96:	4699      	mov	r9, r3
 800bc98:	f103 0301 	add.w	r3, r3, #1
 800bc9c:	d0f9      	beq.n	800bc92 <__gethex+0x4e>
 800bc9e:	f7ff ffbb 	bl	800bc18 <__hexdig_fun>
 800bca2:	fab0 f580 	clz	r5, r0
 800bca6:	096d      	lsrs	r5, r5, #5
 800bca8:	f04f 0b01 	mov.w	fp, #1
 800bcac:	464a      	mov	r2, r9
 800bcae:	4616      	mov	r6, r2
 800bcb0:	3201      	adds	r2, #1
 800bcb2:	7830      	ldrb	r0, [r6, #0]
 800bcb4:	f7ff ffb0 	bl	800bc18 <__hexdig_fun>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d1f8      	bne.n	800bcae <__gethex+0x6a>
 800bcbc:	498d      	ldr	r1, [pc, #564]	@ (800bef4 <__gethex+0x2b0>)
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7ff fecb 	bl	800ba5c <strncmp>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d13f      	bne.n	800bd4a <__gethex+0x106>
 800bcca:	b944      	cbnz	r4, 800bcde <__gethex+0x9a>
 800bccc:	1c74      	adds	r4, r6, #1
 800bcce:	4622      	mov	r2, r4
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	3201      	adds	r2, #1
 800bcd4:	7830      	ldrb	r0, [r6, #0]
 800bcd6:	f7ff ff9f 	bl	800bc18 <__hexdig_fun>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d1f8      	bne.n	800bcd0 <__gethex+0x8c>
 800bcde:	1ba4      	subs	r4, r4, r6
 800bce0:	00a7      	lsls	r7, r4, #2
 800bce2:	7833      	ldrb	r3, [r6, #0]
 800bce4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bce8:	2b50      	cmp	r3, #80	@ 0x50
 800bcea:	d13e      	bne.n	800bd6a <__gethex+0x126>
 800bcec:	7873      	ldrb	r3, [r6, #1]
 800bcee:	2b2b      	cmp	r3, #43	@ 0x2b
 800bcf0:	d033      	beq.n	800bd5a <__gethex+0x116>
 800bcf2:	2b2d      	cmp	r3, #45	@ 0x2d
 800bcf4:	d034      	beq.n	800bd60 <__gethex+0x11c>
 800bcf6:	1c71      	adds	r1, r6, #1
 800bcf8:	2400      	movs	r4, #0
 800bcfa:	7808      	ldrb	r0, [r1, #0]
 800bcfc:	f7ff ff8c 	bl	800bc18 <__hexdig_fun>
 800bd00:	1e43      	subs	r3, r0, #1
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b18      	cmp	r3, #24
 800bd06:	d830      	bhi.n	800bd6a <__gethex+0x126>
 800bd08:	f1a0 0210 	sub.w	r2, r0, #16
 800bd0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd10:	f7ff ff82 	bl	800bc18 <__hexdig_fun>
 800bd14:	f100 3cff 	add.w	ip, r0, #4294967295
 800bd18:	fa5f fc8c 	uxtb.w	ip, ip
 800bd1c:	f1bc 0f18 	cmp.w	ip, #24
 800bd20:	f04f 030a 	mov.w	r3, #10
 800bd24:	d91e      	bls.n	800bd64 <__gethex+0x120>
 800bd26:	b104      	cbz	r4, 800bd2a <__gethex+0xe6>
 800bd28:	4252      	negs	r2, r2
 800bd2a:	4417      	add	r7, r2
 800bd2c:	f8ca 1000 	str.w	r1, [sl]
 800bd30:	b1ed      	cbz	r5, 800bd6e <__gethex+0x12a>
 800bd32:	f1bb 0f00 	cmp.w	fp, #0
 800bd36:	bf0c      	ite	eq
 800bd38:	2506      	moveq	r5, #6
 800bd3a:	2500      	movne	r5, #0
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	b005      	add	sp, #20
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	2500      	movs	r5, #0
 800bd46:	462c      	mov	r4, r5
 800bd48:	e7b0      	b.n	800bcac <__gethex+0x68>
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d1c7      	bne.n	800bcde <__gethex+0x9a>
 800bd4e:	4627      	mov	r7, r4
 800bd50:	e7c7      	b.n	800bce2 <__gethex+0x9e>
 800bd52:	464e      	mov	r6, r9
 800bd54:	462f      	mov	r7, r5
 800bd56:	2501      	movs	r5, #1
 800bd58:	e7c3      	b.n	800bce2 <__gethex+0x9e>
 800bd5a:	2400      	movs	r4, #0
 800bd5c:	1cb1      	adds	r1, r6, #2
 800bd5e:	e7cc      	b.n	800bcfa <__gethex+0xb6>
 800bd60:	2401      	movs	r4, #1
 800bd62:	e7fb      	b.n	800bd5c <__gethex+0x118>
 800bd64:	fb03 0002 	mla	r0, r3, r2, r0
 800bd68:	e7ce      	b.n	800bd08 <__gethex+0xc4>
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	e7de      	b.n	800bd2c <__gethex+0xe8>
 800bd6e:	eba6 0309 	sub.w	r3, r6, r9
 800bd72:	3b01      	subs	r3, #1
 800bd74:	4629      	mov	r1, r5
 800bd76:	2b07      	cmp	r3, #7
 800bd78:	dc0a      	bgt.n	800bd90 <__gethex+0x14c>
 800bd7a:	9801      	ldr	r0, [sp, #4]
 800bd7c:	f7fd ffce 	bl	8009d1c <_Balloc>
 800bd80:	4604      	mov	r4, r0
 800bd82:	b940      	cbnz	r0, 800bd96 <__gethex+0x152>
 800bd84:	4b5c      	ldr	r3, [pc, #368]	@ (800bef8 <__gethex+0x2b4>)
 800bd86:	4602      	mov	r2, r0
 800bd88:	21e4      	movs	r1, #228	@ 0xe4
 800bd8a:	485c      	ldr	r0, [pc, #368]	@ (800befc <__gethex+0x2b8>)
 800bd8c:	f7ff fec0 	bl	800bb10 <__assert_func>
 800bd90:	3101      	adds	r1, #1
 800bd92:	105b      	asrs	r3, r3, #1
 800bd94:	e7ef      	b.n	800bd76 <__gethex+0x132>
 800bd96:	f100 0a14 	add.w	sl, r0, #20
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4655      	mov	r5, sl
 800bd9e:	469b      	mov	fp, r3
 800bda0:	45b1      	cmp	r9, r6
 800bda2:	d337      	bcc.n	800be14 <__gethex+0x1d0>
 800bda4:	f845 bb04 	str.w	fp, [r5], #4
 800bda8:	eba5 050a 	sub.w	r5, r5, sl
 800bdac:	10ad      	asrs	r5, r5, #2
 800bdae:	6125      	str	r5, [r4, #16]
 800bdb0:	4658      	mov	r0, fp
 800bdb2:	f7fe f8a5 	bl	8009f00 <__hi0bits>
 800bdb6:	016d      	lsls	r5, r5, #5
 800bdb8:	f8d8 6000 	ldr.w	r6, [r8]
 800bdbc:	1a2d      	subs	r5, r5, r0
 800bdbe:	42b5      	cmp	r5, r6
 800bdc0:	dd54      	ble.n	800be6c <__gethex+0x228>
 800bdc2:	1bad      	subs	r5, r5, r6
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7fe fc2e 	bl	800a628 <__any_on>
 800bdcc:	4681      	mov	r9, r0
 800bdce:	b178      	cbz	r0, 800bdf0 <__gethex+0x1ac>
 800bdd0:	1e6b      	subs	r3, r5, #1
 800bdd2:	1159      	asrs	r1, r3, #5
 800bdd4:	f003 021f 	and.w	r2, r3, #31
 800bdd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bddc:	f04f 0901 	mov.w	r9, #1
 800bde0:	fa09 f202 	lsl.w	r2, r9, r2
 800bde4:	420a      	tst	r2, r1
 800bde6:	d003      	beq.n	800bdf0 <__gethex+0x1ac>
 800bde8:	454b      	cmp	r3, r9
 800bdea:	dc36      	bgt.n	800be5a <__gethex+0x216>
 800bdec:	f04f 0902 	mov.w	r9, #2
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f7ff febe 	bl	800bb74 <rshift>
 800bdf8:	442f      	add	r7, r5
 800bdfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdfe:	42bb      	cmp	r3, r7
 800be00:	da42      	bge.n	800be88 <__gethex+0x244>
 800be02:	9801      	ldr	r0, [sp, #4]
 800be04:	4621      	mov	r1, r4
 800be06:	f7fd ffc9 	bl	8009d9c <_Bfree>
 800be0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be0c:	2300      	movs	r3, #0
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	25a3      	movs	r5, #163	@ 0xa3
 800be12:	e793      	b.n	800bd3c <__gethex+0xf8>
 800be14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800be18:	2a2e      	cmp	r2, #46	@ 0x2e
 800be1a:	d012      	beq.n	800be42 <__gethex+0x1fe>
 800be1c:	2b20      	cmp	r3, #32
 800be1e:	d104      	bne.n	800be2a <__gethex+0x1e6>
 800be20:	f845 bb04 	str.w	fp, [r5], #4
 800be24:	f04f 0b00 	mov.w	fp, #0
 800be28:	465b      	mov	r3, fp
 800be2a:	7830      	ldrb	r0, [r6, #0]
 800be2c:	9303      	str	r3, [sp, #12]
 800be2e:	f7ff fef3 	bl	800bc18 <__hexdig_fun>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	f000 000f 	and.w	r0, r0, #15
 800be38:	4098      	lsls	r0, r3
 800be3a:	ea4b 0b00 	orr.w	fp, fp, r0
 800be3e:	3304      	adds	r3, #4
 800be40:	e7ae      	b.n	800bda0 <__gethex+0x15c>
 800be42:	45b1      	cmp	r9, r6
 800be44:	d8ea      	bhi.n	800be1c <__gethex+0x1d8>
 800be46:	492b      	ldr	r1, [pc, #172]	@ (800bef4 <__gethex+0x2b0>)
 800be48:	9303      	str	r3, [sp, #12]
 800be4a:	2201      	movs	r2, #1
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7ff fe05 	bl	800ba5c <strncmp>
 800be52:	9b03      	ldr	r3, [sp, #12]
 800be54:	2800      	cmp	r0, #0
 800be56:	d1e1      	bne.n	800be1c <__gethex+0x1d8>
 800be58:	e7a2      	b.n	800bda0 <__gethex+0x15c>
 800be5a:	1ea9      	subs	r1, r5, #2
 800be5c:	4620      	mov	r0, r4
 800be5e:	f7fe fbe3 	bl	800a628 <__any_on>
 800be62:	2800      	cmp	r0, #0
 800be64:	d0c2      	beq.n	800bdec <__gethex+0x1a8>
 800be66:	f04f 0903 	mov.w	r9, #3
 800be6a:	e7c1      	b.n	800bdf0 <__gethex+0x1ac>
 800be6c:	da09      	bge.n	800be82 <__gethex+0x23e>
 800be6e:	1b75      	subs	r5, r6, r5
 800be70:	4621      	mov	r1, r4
 800be72:	9801      	ldr	r0, [sp, #4]
 800be74:	462a      	mov	r2, r5
 800be76:	f7fe f9a1 	bl	800a1bc <__lshift>
 800be7a:	1b7f      	subs	r7, r7, r5
 800be7c:	4604      	mov	r4, r0
 800be7e:	f100 0a14 	add.w	sl, r0, #20
 800be82:	f04f 0900 	mov.w	r9, #0
 800be86:	e7b8      	b.n	800bdfa <__gethex+0x1b6>
 800be88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be8c:	42bd      	cmp	r5, r7
 800be8e:	dd6f      	ble.n	800bf70 <__gethex+0x32c>
 800be90:	1bed      	subs	r5, r5, r7
 800be92:	42ae      	cmp	r6, r5
 800be94:	dc34      	bgt.n	800bf00 <__gethex+0x2bc>
 800be96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d022      	beq.n	800bee4 <__gethex+0x2a0>
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d024      	beq.n	800beec <__gethex+0x2a8>
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d115      	bne.n	800bed2 <__gethex+0x28e>
 800bea6:	42ae      	cmp	r6, r5
 800bea8:	d113      	bne.n	800bed2 <__gethex+0x28e>
 800beaa:	2e01      	cmp	r6, #1
 800beac:	d10b      	bne.n	800bec6 <__gethex+0x282>
 800beae:	9a02      	ldr	r2, [sp, #8]
 800beb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	2301      	movs	r3, #1
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	f8ca 3000 	str.w	r3, [sl]
 800bebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bec0:	2562      	movs	r5, #98	@ 0x62
 800bec2:	601c      	str	r4, [r3, #0]
 800bec4:	e73a      	b.n	800bd3c <__gethex+0xf8>
 800bec6:	1e71      	subs	r1, r6, #1
 800bec8:	4620      	mov	r0, r4
 800beca:	f7fe fbad 	bl	800a628 <__any_on>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1ed      	bne.n	800beae <__gethex+0x26a>
 800bed2:	9801      	ldr	r0, [sp, #4]
 800bed4:	4621      	mov	r1, r4
 800bed6:	f7fd ff61 	bl	8009d9c <_Bfree>
 800beda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bedc:	2300      	movs	r3, #0
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	2550      	movs	r5, #80	@ 0x50
 800bee2:	e72b      	b.n	800bd3c <__gethex+0xf8>
 800bee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1f3      	bne.n	800bed2 <__gethex+0x28e>
 800beea:	e7e0      	b.n	800beae <__gethex+0x26a>
 800beec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1dd      	bne.n	800beae <__gethex+0x26a>
 800bef2:	e7ee      	b.n	800bed2 <__gethex+0x28e>
 800bef4:	0800cdb3 	.word	0x0800cdb3
 800bef8:	0800cd49 	.word	0x0800cd49
 800befc:	0800ce0a 	.word	0x0800ce0a
 800bf00:	1e6f      	subs	r7, r5, #1
 800bf02:	f1b9 0f00 	cmp.w	r9, #0
 800bf06:	d130      	bne.n	800bf6a <__gethex+0x326>
 800bf08:	b127      	cbz	r7, 800bf14 <__gethex+0x2d0>
 800bf0a:	4639      	mov	r1, r7
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f7fe fb8b 	bl	800a628 <__any_on>
 800bf12:	4681      	mov	r9, r0
 800bf14:	117a      	asrs	r2, r7, #5
 800bf16:	2301      	movs	r3, #1
 800bf18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bf1c:	f007 071f 	and.w	r7, r7, #31
 800bf20:	40bb      	lsls	r3, r7
 800bf22:	4213      	tst	r3, r2
 800bf24:	4629      	mov	r1, r5
 800bf26:	4620      	mov	r0, r4
 800bf28:	bf18      	it	ne
 800bf2a:	f049 0902 	orrne.w	r9, r9, #2
 800bf2e:	f7ff fe21 	bl	800bb74 <rshift>
 800bf32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bf36:	1b76      	subs	r6, r6, r5
 800bf38:	2502      	movs	r5, #2
 800bf3a:	f1b9 0f00 	cmp.w	r9, #0
 800bf3e:	d047      	beq.n	800bfd0 <__gethex+0x38c>
 800bf40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d015      	beq.n	800bf74 <__gethex+0x330>
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d017      	beq.n	800bf7c <__gethex+0x338>
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d109      	bne.n	800bf64 <__gethex+0x320>
 800bf50:	f019 0f02 	tst.w	r9, #2
 800bf54:	d006      	beq.n	800bf64 <__gethex+0x320>
 800bf56:	f8da 3000 	ldr.w	r3, [sl]
 800bf5a:	ea49 0903 	orr.w	r9, r9, r3
 800bf5e:	f019 0f01 	tst.w	r9, #1
 800bf62:	d10e      	bne.n	800bf82 <__gethex+0x33e>
 800bf64:	f045 0510 	orr.w	r5, r5, #16
 800bf68:	e032      	b.n	800bfd0 <__gethex+0x38c>
 800bf6a:	f04f 0901 	mov.w	r9, #1
 800bf6e:	e7d1      	b.n	800bf14 <__gethex+0x2d0>
 800bf70:	2501      	movs	r5, #1
 800bf72:	e7e2      	b.n	800bf3a <__gethex+0x2f6>
 800bf74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf76:	f1c3 0301 	rsb	r3, r3, #1
 800bf7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0f0      	beq.n	800bf64 <__gethex+0x320>
 800bf82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf86:	f104 0314 	add.w	r3, r4, #20
 800bf8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf92:	f04f 0c00 	mov.w	ip, #0
 800bf96:	4618      	mov	r0, r3
 800bf98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bfa0:	d01b      	beq.n	800bfda <__gethex+0x396>
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	6002      	str	r2, [r0, #0]
 800bfa6:	2d02      	cmp	r5, #2
 800bfa8:	f104 0314 	add.w	r3, r4, #20
 800bfac:	d13c      	bne.n	800c028 <__gethex+0x3e4>
 800bfae:	f8d8 2000 	ldr.w	r2, [r8]
 800bfb2:	3a01      	subs	r2, #1
 800bfb4:	42b2      	cmp	r2, r6
 800bfb6:	d109      	bne.n	800bfcc <__gethex+0x388>
 800bfb8:	1171      	asrs	r1, r6, #5
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfc0:	f006 061f 	and.w	r6, r6, #31
 800bfc4:	fa02 f606 	lsl.w	r6, r2, r6
 800bfc8:	421e      	tst	r6, r3
 800bfca:	d13a      	bne.n	800c042 <__gethex+0x3fe>
 800bfcc:	f045 0520 	orr.w	r5, r5, #32
 800bfd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfd2:	601c      	str	r4, [r3, #0]
 800bfd4:	9b02      	ldr	r3, [sp, #8]
 800bfd6:	601f      	str	r7, [r3, #0]
 800bfd8:	e6b0      	b.n	800bd3c <__gethex+0xf8>
 800bfda:	4299      	cmp	r1, r3
 800bfdc:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfe0:	d8d9      	bhi.n	800bf96 <__gethex+0x352>
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	459b      	cmp	fp, r3
 800bfe6:	db17      	blt.n	800c018 <__gethex+0x3d4>
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	9801      	ldr	r0, [sp, #4]
 800bfec:	3101      	adds	r1, #1
 800bfee:	f7fd fe95 	bl	8009d1c <_Balloc>
 800bff2:	4681      	mov	r9, r0
 800bff4:	b918      	cbnz	r0, 800bffe <__gethex+0x3ba>
 800bff6:	4b1a      	ldr	r3, [pc, #104]	@ (800c060 <__gethex+0x41c>)
 800bff8:	4602      	mov	r2, r0
 800bffa:	2184      	movs	r1, #132	@ 0x84
 800bffc:	e6c5      	b.n	800bd8a <__gethex+0x146>
 800bffe:	6922      	ldr	r2, [r4, #16]
 800c000:	3202      	adds	r2, #2
 800c002:	f104 010c 	add.w	r1, r4, #12
 800c006:	0092      	lsls	r2, r2, #2
 800c008:	300c      	adds	r0, #12
 800c00a:	f7ff fd6b 	bl	800bae4 <memcpy>
 800c00e:	4621      	mov	r1, r4
 800c010:	9801      	ldr	r0, [sp, #4]
 800c012:	f7fd fec3 	bl	8009d9c <_Bfree>
 800c016:	464c      	mov	r4, r9
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c020:	6122      	str	r2, [r4, #16]
 800c022:	2201      	movs	r2, #1
 800c024:	615a      	str	r2, [r3, #20]
 800c026:	e7be      	b.n	800bfa6 <__gethex+0x362>
 800c028:	6922      	ldr	r2, [r4, #16]
 800c02a:	455a      	cmp	r2, fp
 800c02c:	dd0b      	ble.n	800c046 <__gethex+0x402>
 800c02e:	2101      	movs	r1, #1
 800c030:	4620      	mov	r0, r4
 800c032:	f7ff fd9f 	bl	800bb74 <rshift>
 800c036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c03a:	3701      	adds	r7, #1
 800c03c:	42bb      	cmp	r3, r7
 800c03e:	f6ff aee0 	blt.w	800be02 <__gethex+0x1be>
 800c042:	2501      	movs	r5, #1
 800c044:	e7c2      	b.n	800bfcc <__gethex+0x388>
 800c046:	f016 061f 	ands.w	r6, r6, #31
 800c04a:	d0fa      	beq.n	800c042 <__gethex+0x3fe>
 800c04c:	4453      	add	r3, sl
 800c04e:	f1c6 0620 	rsb	r6, r6, #32
 800c052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c056:	f7fd ff53 	bl	8009f00 <__hi0bits>
 800c05a:	42b0      	cmp	r0, r6
 800c05c:	dbe7      	blt.n	800c02e <__gethex+0x3ea>
 800c05e:	e7f0      	b.n	800c042 <__gethex+0x3fe>
 800c060:	0800cd49 	.word	0x0800cd49

0800c064 <L_shift>:
 800c064:	f1c2 0208 	rsb	r2, r2, #8
 800c068:	0092      	lsls	r2, r2, #2
 800c06a:	b570      	push	{r4, r5, r6, lr}
 800c06c:	f1c2 0620 	rsb	r6, r2, #32
 800c070:	6843      	ldr	r3, [r0, #4]
 800c072:	6804      	ldr	r4, [r0, #0]
 800c074:	fa03 f506 	lsl.w	r5, r3, r6
 800c078:	432c      	orrs	r4, r5
 800c07a:	40d3      	lsrs	r3, r2
 800c07c:	6004      	str	r4, [r0, #0]
 800c07e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c082:	4288      	cmp	r0, r1
 800c084:	d3f4      	bcc.n	800c070 <L_shift+0xc>
 800c086:	bd70      	pop	{r4, r5, r6, pc}

0800c088 <__match>:
 800c088:	b530      	push	{r4, r5, lr}
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	b914      	cbnz	r4, 800c09a <__match+0x12>
 800c094:	6003      	str	r3, [r0, #0]
 800c096:	2001      	movs	r0, #1
 800c098:	bd30      	pop	{r4, r5, pc}
 800c09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c0a2:	2d19      	cmp	r5, #25
 800c0a4:	bf98      	it	ls
 800c0a6:	3220      	addls	r2, #32
 800c0a8:	42a2      	cmp	r2, r4
 800c0aa:	d0f0      	beq.n	800c08e <__match+0x6>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e7f3      	b.n	800c098 <__match+0x10>

0800c0b0 <__hexnan>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	680b      	ldr	r3, [r1, #0]
 800c0b6:	6801      	ldr	r1, [r0, #0]
 800c0b8:	115e      	asrs	r6, r3, #5
 800c0ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0be:	f013 031f 	ands.w	r3, r3, #31
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	bf18      	it	ne
 800c0c6:	3604      	addne	r6, #4
 800c0c8:	2500      	movs	r5, #0
 800c0ca:	1f37      	subs	r7, r6, #4
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	4690      	mov	r8, r2
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0d6:	46b9      	mov	r9, r7
 800c0d8:	463c      	mov	r4, r7
 800c0da:	9502      	str	r5, [sp, #8]
 800c0dc:	46ab      	mov	fp, r5
 800c0de:	784a      	ldrb	r2, [r1, #1]
 800c0e0:	1c4b      	adds	r3, r1, #1
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	b342      	cbz	r2, 800c138 <__hexnan+0x88>
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	9105      	str	r1, [sp, #20]
 800c0ea:	9204      	str	r2, [sp, #16]
 800c0ec:	f7ff fd94 	bl	800bc18 <__hexdig_fun>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d151      	bne.n	800c198 <__hexnan+0xe8>
 800c0f4:	9a04      	ldr	r2, [sp, #16]
 800c0f6:	9905      	ldr	r1, [sp, #20]
 800c0f8:	2a20      	cmp	r2, #32
 800c0fa:	d818      	bhi.n	800c12e <__hexnan+0x7e>
 800c0fc:	9b02      	ldr	r3, [sp, #8]
 800c0fe:	459b      	cmp	fp, r3
 800c100:	dd13      	ble.n	800c12a <__hexnan+0x7a>
 800c102:	454c      	cmp	r4, r9
 800c104:	d206      	bcs.n	800c114 <__hexnan+0x64>
 800c106:	2d07      	cmp	r5, #7
 800c108:	dc04      	bgt.n	800c114 <__hexnan+0x64>
 800c10a:	462a      	mov	r2, r5
 800c10c:	4649      	mov	r1, r9
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff ffa8 	bl	800c064 <L_shift>
 800c114:	4544      	cmp	r4, r8
 800c116:	d952      	bls.n	800c1be <__hexnan+0x10e>
 800c118:	2300      	movs	r3, #0
 800c11a:	f1a4 0904 	sub.w	r9, r4, #4
 800c11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c122:	f8cd b008 	str.w	fp, [sp, #8]
 800c126:	464c      	mov	r4, r9
 800c128:	461d      	mov	r5, r3
 800c12a:	9903      	ldr	r1, [sp, #12]
 800c12c:	e7d7      	b.n	800c0de <__hexnan+0x2e>
 800c12e:	2a29      	cmp	r2, #41	@ 0x29
 800c130:	d157      	bne.n	800c1e2 <__hexnan+0x132>
 800c132:	3102      	adds	r1, #2
 800c134:	f8ca 1000 	str.w	r1, [sl]
 800c138:	f1bb 0f00 	cmp.w	fp, #0
 800c13c:	d051      	beq.n	800c1e2 <__hexnan+0x132>
 800c13e:	454c      	cmp	r4, r9
 800c140:	d206      	bcs.n	800c150 <__hexnan+0xa0>
 800c142:	2d07      	cmp	r5, #7
 800c144:	dc04      	bgt.n	800c150 <__hexnan+0xa0>
 800c146:	462a      	mov	r2, r5
 800c148:	4649      	mov	r1, r9
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff ff8a 	bl	800c064 <L_shift>
 800c150:	4544      	cmp	r4, r8
 800c152:	d936      	bls.n	800c1c2 <__hexnan+0x112>
 800c154:	f1a8 0204 	sub.w	r2, r8, #4
 800c158:	4623      	mov	r3, r4
 800c15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c15e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c162:	429f      	cmp	r7, r3
 800c164:	d2f9      	bcs.n	800c15a <__hexnan+0xaa>
 800c166:	1b3b      	subs	r3, r7, r4
 800c168:	f023 0303 	bic.w	r3, r3, #3
 800c16c:	3304      	adds	r3, #4
 800c16e:	3401      	adds	r4, #1
 800c170:	3e03      	subs	r6, #3
 800c172:	42b4      	cmp	r4, r6
 800c174:	bf88      	it	hi
 800c176:	2304      	movhi	r3, #4
 800c178:	4443      	add	r3, r8
 800c17a:	2200      	movs	r2, #0
 800c17c:	f843 2b04 	str.w	r2, [r3], #4
 800c180:	429f      	cmp	r7, r3
 800c182:	d2fb      	bcs.n	800c17c <__hexnan+0xcc>
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	b91b      	cbnz	r3, 800c190 <__hexnan+0xe0>
 800c188:	4547      	cmp	r7, r8
 800c18a:	d128      	bne.n	800c1de <__hexnan+0x12e>
 800c18c:	2301      	movs	r3, #1
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	2005      	movs	r0, #5
 800c192:	b007      	add	sp, #28
 800c194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c198:	3501      	adds	r5, #1
 800c19a:	2d08      	cmp	r5, #8
 800c19c:	f10b 0b01 	add.w	fp, fp, #1
 800c1a0:	dd06      	ble.n	800c1b0 <__hexnan+0x100>
 800c1a2:	4544      	cmp	r4, r8
 800c1a4:	d9c1      	bls.n	800c12a <__hexnan+0x7a>
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1ac:	2501      	movs	r5, #1
 800c1ae:	3c04      	subs	r4, #4
 800c1b0:	6822      	ldr	r2, [r4, #0]
 800c1b2:	f000 000f 	and.w	r0, r0, #15
 800c1b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c1ba:	6020      	str	r0, [r4, #0]
 800c1bc:	e7b5      	b.n	800c12a <__hexnan+0x7a>
 800c1be:	2508      	movs	r5, #8
 800c1c0:	e7b3      	b.n	800c12a <__hexnan+0x7a>
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0dd      	beq.n	800c184 <__hexnan+0xd4>
 800c1c8:	f1c3 0320 	rsb	r3, r3, #32
 800c1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d0:	40da      	lsrs	r2, r3
 800c1d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c1d6:	4013      	ands	r3, r2
 800c1d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c1dc:	e7d2      	b.n	800c184 <__hexnan+0xd4>
 800c1de:	3f04      	subs	r7, #4
 800c1e0:	e7d0      	b.n	800c184 <__hexnan+0xd4>
 800c1e2:	2004      	movs	r0, #4
 800c1e4:	e7d5      	b.n	800c192 <__hexnan+0xe2>

0800c1e6 <__ascii_mbtowc>:
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	b901      	cbnz	r1, 800c1ec <__ascii_mbtowc+0x6>
 800c1ea:	a901      	add	r1, sp, #4
 800c1ec:	b142      	cbz	r2, 800c200 <__ascii_mbtowc+0x1a>
 800c1ee:	b14b      	cbz	r3, 800c204 <__ascii_mbtowc+0x1e>
 800c1f0:	7813      	ldrb	r3, [r2, #0]
 800c1f2:	600b      	str	r3, [r1, #0]
 800c1f4:	7812      	ldrb	r2, [r2, #0]
 800c1f6:	1e10      	subs	r0, r2, #0
 800c1f8:	bf18      	it	ne
 800c1fa:	2001      	movne	r0, #1
 800c1fc:	b002      	add	sp, #8
 800c1fe:	4770      	bx	lr
 800c200:	4610      	mov	r0, r2
 800c202:	e7fb      	b.n	800c1fc <__ascii_mbtowc+0x16>
 800c204:	f06f 0001 	mvn.w	r0, #1
 800c208:	e7f8      	b.n	800c1fc <__ascii_mbtowc+0x16>

0800c20a <_realloc_r>:
 800c20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20e:	4607      	mov	r7, r0
 800c210:	4614      	mov	r4, r2
 800c212:	460d      	mov	r5, r1
 800c214:	b921      	cbnz	r1, 800c220 <_realloc_r+0x16>
 800c216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c21a:	4611      	mov	r1, r2
 800c21c:	f7fd bcf2 	b.w	8009c04 <_malloc_r>
 800c220:	b92a      	cbnz	r2, 800c22e <_realloc_r+0x24>
 800c222:	f7fd fc7b 	bl	8009b1c <_free_r>
 800c226:	4625      	mov	r5, r4
 800c228:	4628      	mov	r0, r5
 800c22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c22e:	f000 f840 	bl	800c2b2 <_malloc_usable_size_r>
 800c232:	4284      	cmp	r4, r0
 800c234:	4606      	mov	r6, r0
 800c236:	d802      	bhi.n	800c23e <_realloc_r+0x34>
 800c238:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c23c:	d8f4      	bhi.n	800c228 <_realloc_r+0x1e>
 800c23e:	4621      	mov	r1, r4
 800c240:	4638      	mov	r0, r7
 800c242:	f7fd fcdf 	bl	8009c04 <_malloc_r>
 800c246:	4680      	mov	r8, r0
 800c248:	b908      	cbnz	r0, 800c24e <_realloc_r+0x44>
 800c24a:	4645      	mov	r5, r8
 800c24c:	e7ec      	b.n	800c228 <_realloc_r+0x1e>
 800c24e:	42b4      	cmp	r4, r6
 800c250:	4622      	mov	r2, r4
 800c252:	4629      	mov	r1, r5
 800c254:	bf28      	it	cs
 800c256:	4632      	movcs	r2, r6
 800c258:	f7ff fc44 	bl	800bae4 <memcpy>
 800c25c:	4629      	mov	r1, r5
 800c25e:	4638      	mov	r0, r7
 800c260:	f7fd fc5c 	bl	8009b1c <_free_r>
 800c264:	e7f1      	b.n	800c24a <_realloc_r+0x40>

0800c266 <__ascii_wctomb>:
 800c266:	4603      	mov	r3, r0
 800c268:	4608      	mov	r0, r1
 800c26a:	b141      	cbz	r1, 800c27e <__ascii_wctomb+0x18>
 800c26c:	2aff      	cmp	r2, #255	@ 0xff
 800c26e:	d904      	bls.n	800c27a <__ascii_wctomb+0x14>
 800c270:	228a      	movs	r2, #138	@ 0x8a
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	4770      	bx	lr
 800c27a:	700a      	strb	r2, [r1, #0]
 800c27c:	2001      	movs	r0, #1
 800c27e:	4770      	bx	lr

0800c280 <fiprintf>:
 800c280:	b40e      	push	{r1, r2, r3}
 800c282:	b503      	push	{r0, r1, lr}
 800c284:	4601      	mov	r1, r0
 800c286:	ab03      	add	r3, sp, #12
 800c288:	4805      	ldr	r0, [pc, #20]	@ (800c2a0 <fiprintf+0x20>)
 800c28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c28e:	6800      	ldr	r0, [r0, #0]
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	f7ff f9a3 	bl	800b5dc <_vfiprintf_r>
 800c296:	b002      	add	sp, #8
 800c298:	f85d eb04 	ldr.w	lr, [sp], #4
 800c29c:	b003      	add	sp, #12
 800c29e:	4770      	bx	lr
 800c2a0:	2400002c 	.word	0x2400002c

0800c2a4 <abort>:
 800c2a4:	b508      	push	{r3, lr}
 800c2a6:	2006      	movs	r0, #6
 800c2a8:	f000 f834 	bl	800c314 <raise>
 800c2ac:	2001      	movs	r0, #1
 800c2ae:	f7f6 ff38 	bl	8003122 <_exit>

0800c2b2 <_malloc_usable_size_r>:
 800c2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2b6:	1f18      	subs	r0, r3, #4
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	bfbc      	itt	lt
 800c2bc:	580b      	ldrlt	r3, [r1, r0]
 800c2be:	18c0      	addlt	r0, r0, r3
 800c2c0:	4770      	bx	lr

0800c2c2 <_raise_r>:
 800c2c2:	291f      	cmp	r1, #31
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	d904      	bls.n	800c2d6 <_raise_r+0x14>
 800c2cc:	2316      	movs	r3, #22
 800c2ce:	6003      	str	r3, [r0, #0]
 800c2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d4:	bd38      	pop	{r3, r4, r5, pc}
 800c2d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2d8:	b112      	cbz	r2, 800c2e0 <_raise_r+0x1e>
 800c2da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2de:	b94b      	cbnz	r3, 800c2f4 <_raise_r+0x32>
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	f000 f831 	bl	800c348 <_getpid_r>
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	4601      	mov	r1, r0
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2f0:	f000 b818 	b.w	800c324 <_kill_r>
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d00a      	beq.n	800c30e <_raise_r+0x4c>
 800c2f8:	1c59      	adds	r1, r3, #1
 800c2fa:	d103      	bne.n	800c304 <_raise_r+0x42>
 800c2fc:	2316      	movs	r3, #22
 800c2fe:	6003      	str	r3, [r0, #0]
 800c300:	2001      	movs	r0, #1
 800c302:	e7e7      	b.n	800c2d4 <_raise_r+0x12>
 800c304:	2100      	movs	r1, #0
 800c306:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c30a:	4620      	mov	r0, r4
 800c30c:	4798      	blx	r3
 800c30e:	2000      	movs	r0, #0
 800c310:	e7e0      	b.n	800c2d4 <_raise_r+0x12>
	...

0800c314 <raise>:
 800c314:	4b02      	ldr	r3, [pc, #8]	@ (800c320 <raise+0xc>)
 800c316:	4601      	mov	r1, r0
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f7ff bfd2 	b.w	800c2c2 <_raise_r>
 800c31e:	bf00      	nop
 800c320:	2400002c 	.word	0x2400002c

0800c324 <_kill_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4d07      	ldr	r5, [pc, #28]	@ (800c344 <_kill_r+0x20>)
 800c328:	2300      	movs	r3, #0
 800c32a:	4604      	mov	r4, r0
 800c32c:	4608      	mov	r0, r1
 800c32e:	4611      	mov	r1, r2
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	f7f6 fee6 	bl	8003102 <_kill>
 800c336:	1c43      	adds	r3, r0, #1
 800c338:	d102      	bne.n	800c340 <_kill_r+0x1c>
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	b103      	cbz	r3, 800c340 <_kill_r+0x1c>
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	bd38      	pop	{r3, r4, r5, pc}
 800c342:	bf00      	nop
 800c344:	24000620 	.word	0x24000620

0800c348 <_getpid_r>:
 800c348:	f7f6 bed3 	b.w	80030f2 <_getpid>

0800c34c <_init>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	bf00      	nop
 800c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c352:	bc08      	pop	{r3}
 800c354:	469e      	mov	lr, r3
 800c356:	4770      	bx	lr

0800c358 <_fini>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	bf00      	nop
 800c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35e:	bc08      	pop	{r3}
 800c360:	469e      	mov	lr, r3
 800c362:	4770      	bx	lr
