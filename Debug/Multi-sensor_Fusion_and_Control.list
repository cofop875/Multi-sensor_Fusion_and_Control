
Multi-sensor_Fusion_and_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b18c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800b430  0800b430  0000c430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bcf4  0800bcf4  0000ccf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bcfc  0800bcfc  0000ccfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bd00  0800bd00  0000cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  0800bd04  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000320  240001e0  0800bee4  0000d1e0  2**2
                  ALLOC
  8 ._user_heap_stack 00001700  24000500  0800bee4  0000d500  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001151c  00000000  00000000  0000d20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002847  00000000  00000000  0001e72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e00  00000000  00000000  00020f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000aa1  00000000  00000000  00021d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003805e  00000000  00000000  00022819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013349  00000000  00000000  0005a877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ab79  00000000  00000000  0006dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c8739  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d0c  00000000  00000000  001c877c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  001cd488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b414 	.word	0x0800b414

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800b414 	.word	0x0800b414

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <ICM20948_CS_Select>:

/**
 * @brief 選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為低電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Select(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000784:	4808      	ldr	r0, [pc, #32]	@ (80007a8 <ICM20948_CS_Select+0x30>)
 8000786:	f002 fb7b 	bl	8002e80 <HAL_GPIO_WritePin>
    // HAL_Delay(1) 太長，但對於基本功能通常可行。若有高速通訊問題可考慮更精確的延遲或移除。
    // 若 SPI 時脈很慢，此延遲可能不需要或可以縮短。
    // 為了確保穩定性，保留一個非常短的延遲或直接移除，取決於 SPI 時脈和硬體特性。
    // 如果 SPI 時脈在 MHz 等級，CPU 指令本身可能就足夠。
    // 這裡保留 HAL_Delay(1) 作為一個保守的選擇，但可以根據實際測試進行優化。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲替代 HAL_Delay(1)
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	e002      	b.n	8000796 <ICM20948_CS_Select+0x1e>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3301      	adds	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b09      	cmp	r3, #9
 800079a:	ddf9      	ble.n	8000790 <ICM20948_CS_Select+0x18>
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	58020c00 	.word	0x58020c00

080007ac <ICM20948_CS_Deselect>:

/**
 * @brief 取消選取 ICM-20948 的 SPI 片選 (CS) 引腳 (設為高電位)。
 * @note  使用 main.h 中定義的 ICM20948_CS_GPIO_Port 和 ICM20948_CS_Pin。
 */
void ICM20948_CS_Deselect(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007b8:	4808      	ldr	r0, [pc, #32]	@ (80007dc <ICM20948_CS_Deselect+0x30>)
 80007ba:	f002 fb61 	bl	8002e80 <HAL_GPIO_WritePin>
    // Datasheet 建議 SCLK 下降沿到 CS 高電位至少 20ns (tCSH)
    // 同上，HAL_Delay(1) 可能過長。
    for (volatile int i = 0; i < 10; i++); // 非常短的延遲
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	e002      	b.n	80007ca <ICM20948_CS_Deselect+0x1e>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3301      	adds	r3, #1
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b09      	cmp	r3, #9
 80007ce:	ddf9      	ble.n	80007c4 <ICM20948_CS_Deselect+0x18>
}
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	58020c00 	.word	0x58020c00

080007e0 <ICM20948_WriteByte>:
 * @brief 透過 SPI 寫入單一位元組數據至 ICM-20948 指定暫存器。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為0代表寫入)。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_WriteByte(uint8_t reg_addr, uint8_t data) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	4613      	mov	r3, r2
 80007ee:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_buffer[2];
    HAL_StatusTypeDef status;

    tx_buffer[0] = reg_addr & 0x7F; // 寫入操作，MSB 為 0
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	733b      	strb	r3, [r7, #12]
    tx_buffer[1] = data;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	737b      	strb	r3, [r7, #13]

    ICM20948_CS_Select();
 80007fe:	f7ff ffbb 	bl	8000778 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, tx_buffer, 2, SPI_TIMEOUT);
 8000802:	f107 010c 	add.w	r1, r7, #12
 8000806:	2364      	movs	r3, #100	@ 0x64
 8000808:	2202      	movs	r2, #2
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <ICM20948_WriteByte+0x44>)
 800080c:	f005 fdcc 	bl	80063a8 <HAL_SPI_Transmit>
 8000810:	4603      	mov	r3, r0
 8000812:	73fb      	strb	r3, [r7, #15]
    ICM20948_CS_Deselect();
 8000814:	f7ff ffca 	bl	80007ac <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理，例如記錄錯誤或重試
    }
    return status;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2400028c 	.word	0x2400028c

08000828 <ICM20948_ReadByte>:
 * @brief 透過 SPI 從 ICM-20948 指定暫存器讀取單一位元組數據。
 * @param reg_addr: 目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadByte(uint8_t reg_addr, uint8_t *pData) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	6039      	str	r1, [r7, #0]
 8000832:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800083a:	b2db      	uxtb	r3, r3
 800083c:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 800083e:	f7ff ff9b 	bl	8000778 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送要讀取的暫存器位址
 8000842:	f107 010e 	add.w	r1, r7, #14
 8000846:	2364      	movs	r3, #100	@ 0x64
 8000848:	2201      	movs	r2, #1
 800084a:	480b      	ldr	r0, [pc, #44]	@ (8000878 <ICM20948_ReadByte+0x50>)
 800084c:	f005 fdac 	bl	80063a8 <HAL_SPI_Transmit>
 8000850:	4603      	mov	r3, r0
 8000852:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d107      	bne.n	800086a <ICM20948_ReadByte+0x42>
        status = HAL_SPI_Receive(&hspi1, pData, 1, SPI_TIMEOUT); // 接收數據
 800085a:	2364      	movs	r3, #100	@ 0x64
 800085c:	2201      	movs	r2, #1
 800085e:	6839      	ldr	r1, [r7, #0]
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <ICM20948_ReadByte+0x50>)
 8000862:	f005 ff8f 	bl	8006784 <HAL_SPI_Receive>
 8000866:	4603      	mov	r3, r0
 8000868:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 800086a:	f7ff ff9f 	bl	80007ac <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 800086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2400028c 	.word	0x2400028c

0800087c <ICM20948_ReadBytes>:
 * @param reg_addr: 起始目標暫存器位址 (7位元，最高位元為1代表讀取)。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @param count:    要讀取的位元組數量。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadBytes(uint8_t reg_addr, uint8_t *pData, uint16_t count) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	80bb      	strh	r3, [r7, #4]
    uint8_t tx_byte;
    HAL_StatusTypeDef status;

    tx_byte = reg_addr | 0x80; // 讀取操作，MSB 為 1
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000892:	b2db      	uxtb	r3, r3
 8000894:	73bb      	strb	r3, [r7, #14]

    ICM20948_CS_Select();
 8000896:	f7ff ff6f 	bl	8000778 <ICM20948_CS_Select>
    status = HAL_SPI_Transmit(&hspi1, &tx_byte, 1, SPI_TIMEOUT); // 發送起始暫存器位址
 800089a:	f107 010e 	add.w	r1, r7, #14
 800089e:	2364      	movs	r3, #100	@ 0x64
 80008a0:	2201      	movs	r2, #1
 80008a2:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <ICM20948_ReadBytes+0x54>)
 80008a4:	f005 fd80 	bl	80063a8 <HAL_SPI_Transmit>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d107      	bne.n	80008c2 <ICM20948_ReadBytes+0x46>
        status = HAL_SPI_Receive(&hspi1, pData, count, SPI_TIMEOUT); // 連續接收多個位元組
 80008b2:	88ba      	ldrh	r2, [r7, #4]
 80008b4:	2364      	movs	r3, #100	@ 0x64
 80008b6:	6839      	ldr	r1, [r7, #0]
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <ICM20948_ReadBytes+0x54>)
 80008ba:	f005 ff63 	bl	8006784 <HAL_SPI_Receive>
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
    }
    ICM20948_CS_Deselect();
 80008c2:	f7ff ff73 	bl	80007ac <ICM20948_CS_Deselect>

    if (status != HAL_OK) {
        // 可在此處加入錯誤處理
    }
    return status;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400028c 	.word	0x2400028c

080008d4 <ICM20948_SelectUserBank>:
 * @param bank: 要選擇的庫編號 (0, 1, 2, 或 3)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 * @note  REG_BANK_SEL 暫存器在所有庫中皆可存取。
 * 位元 [5:4] 用於選擇庫: 00 for UB0, 01 for UB1, 10 for UB2, 11 for UB3.
 */
HAL_StatusTypeDef ICM20948_SelectUserBank(uint8_t bank) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
    if (bank > 3) {
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d901      	bls.n	80008e8 <ICM20948_SelectUserBank+0x14>
        return HAL_ERROR; // 無效的庫編號
 80008e4:	2301      	movs	r3, #1
 80008e6:	e007      	b.n	80008f8 <ICM20948_SelectUserBank+0x24>
    // REG_BANK_SEL (0x7F) 的位元 [5:4] (USER_BANK) 控制庫選擇
    // bank 0 -> 0x00
    // bank 1 -> 0x10
    // bank 2 -> 0x20
    // bank 3 -> 0x30
    return ICM20948_WriteByte(ICM20948_REG_BANK_SEL, (bank << 4));
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	207f      	movs	r0, #127	@ 0x7f
 80008f2:	f7ff ff75 	bl	80007e0 <ICM20948_WriteByte>
 80008f6:	4603      	mov	r3, r0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <AK09916_WriteByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，寫入單一位元組數據至 AK09916 磁力計指定暫存器。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param data:     要寫入的數據。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_WriteByteViaICM(uint8_t reg_addr, uint8_t data) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t current_bank_sel_val;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 8000910:	2303      	movs	r3, #3
 8000912:	73fb      	strb	r3, [r7, #15]
    // status = ICM20948_ReadByte(ICM20948_REG_BANK_SEL, &current_bank_sel_val);
    // if (status != HAL_OK) return status;
    // current_bank_sel_val = (current_bank_sel_val >> 4) & 0x03; // 提取庫號

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 8000914:	7bfb      	ldrb	r3, [r7, #15]
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffdc 	bl	80008d4 <ICM20948_SelectUserBank>
 800091c:	4603      	mov	r3, r0
 800091e:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <AK09916_WriteByteViaICM+0x2a>
 8000926:	7bbb      	ldrb	r3, [r7, #14]
 8000928:	e040      	b.n	80009ac <AK09916_WriteByteViaICM+0xac>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR，不含 R/W 位元，表示寫入)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR); //  R/W bit is 0 for write
 800092a:	210c      	movs	r1, #12
 800092c:	2003      	movs	r0, #3
 800092e:	f7ff ff57 	bl	80007e0 <ICM20948_WriteByte>
 8000932:	4603      	mov	r3, r0
 8000934:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d004      	beq.n	8000946 <AK09916_WriteByteViaICM+0x46>
        ICM20948_SelectUserBank(0); // 嘗試恢復到庫0
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff ffc9 	bl	80008d4 <ICM20948_SelectUserBank>
        return status;
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	e032      	b.n	80009ac <AK09916_WriteByteViaICM+0xac>
    }

    // 3. 設定要寫入的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4619      	mov	r1, r3
 800094a:	2004      	movs	r0, #4
 800094c:	f7ff ff48 	bl	80007e0 <ICM20948_WriteByte>
 8000950:	4603      	mov	r3, r0
 8000952:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000954:	7bbb      	ldrb	r3, [r7, #14]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <AK09916_WriteByteViaICM+0x64>
        ICM20948_SelectUserBank(0);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ffba 	bl	80008d4 <ICM20948_SelectUserBank>
        return status;
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	e023      	b.n	80009ac <AK09916_WriteByteViaICM+0xac>
    }

    // 4. 設定要寫入的數據
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_DO, data);
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	4619      	mov	r1, r3
 8000968:	2006      	movs	r0, #6
 800096a:	f7ff ff39 	bl	80007e0 <ICM20948_WriteByte>
 800096e:	4603      	mov	r3, r0
 8000970:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d004      	beq.n	8000982 <AK09916_WriteByteViaICM+0x82>
        ICM20948_SelectUserBank(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ffab 	bl	80008d4 <ICM20948_SelectUserBank>
        return status;
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	e014      	b.n	80009ac <AK09916_WriteByteViaICM+0xac>
    }

    // 5. 致能 I2C 從裝置 0，並設定為寫入一個位元組，觸發傳輸
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000982:	2181      	movs	r1, #129	@ 0x81
 8000984:	2005      	movs	r0, #5
 8000986:	f7ff ff2b 	bl	80007e0 <ICM20948_WriteByte>
 800098a:	4603      	mov	r3, r0
 800098c:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) {
 800098e:	7bbb      	ldrb	r3, [r7, #14]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d004      	beq.n	800099e <AK09916_WriteByteViaICM+0x9e>
        ICM20948_SelectUserBank(0);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff9d 	bl	80008d4 <ICM20948_SelectUserBank>
        return status;
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	e006      	b.n	80009ac <AK09916_WriteByteViaICM+0xac>
    //    理想情況下，應該檢查 I2C_MST_STATUS 暫存器中的 I2C_SLV0_NACK 或 I2C_IF_DONE 位元。
    //    為簡化，這裡使用固定延遲。在實際應用中，需要更可靠的同步機制。
    //    ICM20948 datasheet 7.6節: "The I2C Master interface issues a STOP condition specific to the transaction length."
    //    "The I2C Master interface will stretch the main processor’s clock when an I2C transaction is in progress." (if I2C_MST_P_NSR=1 in I2C_MST_CTRL)
    //    這裡假設 I2C_MST_P_NSR=0 (預設)，所以需要軟體延遲或狀態檢查。
    HAL_Delay(20); // 稍微增加延遲以確保傳輸完成 (這個延遲可能需要調整，取決於 I2C 速度和目標設備)
 800099e:	2014      	movs	r0, #20
 80009a0:	f001 ff32 	bl	8002808 <HAL_Delay>
    //    status = ICM20948_ReadByte(0x17, &i2c_mst_status_val); // I2C_MST_STATUS (UB0)
    //    if (status != HAL_OK) return status;
    //    if (i2c_mst_status_val & 0x01) { /* I2C_SLV0_NACK */ return HAL_ERROR; }

    // 操作完成後，建議切換回常用的庫，例如庫 0
    return ICM20948_SelectUserBank(0);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff ff95 	bl	80008d4 <ICM20948_SelectUserBank>
 80009aa:	4603      	mov	r3, r0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <AK09916_ReadByteViaICM>:
 * @brief 透過 ICM-20948 的 I2C 主機介面，從 AK09916 磁力計指定暫存器讀取單一位元組數據。
 * @param reg_addr: AK09916 的目標暫存器位址。
 * @param pData:    指向儲存讀取數據的緩衝區指標。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadByteViaICM(uint8_t reg_addr, uint8_t *pData) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t temp_data;
    uint8_t target_bank = 3; // I2C 主機控制相關暫存器在庫 3
 80009c0:	2303      	movs	r3, #3
 80009c2:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0; // 外部感測器數據在庫 0
 80009c4:	2300      	movs	r3, #0
 80009c6:	73bb      	strb	r3, [r7, #14]

    // 1. 切換到使用者庫 3，設定 I2C 從裝置相關暫存器
    status = ICM20948_SelectUserBank(target_bank);
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff82 	bl	80008d4 <ICM20948_SelectUserBank>
 80009d0:	4603      	mov	r3, r0
 80009d2:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80009d4:	7b7b      	ldrb	r3, [r7, #13]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <AK09916_ReadByteViaICM+0x2a>
 80009da:	7b7b      	ldrb	r3, [r7, #13]
 80009dc:	e04a      	b.n	8000a74 <AK09916_ReadByteViaICM+0xc0>

    // 2. 設定從裝置位址 (AK09916_I2C_ADDR | 0x80，設定 R/W 位元為讀取)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80);
 80009de:	218c      	movs	r1, #140	@ 0x8c
 80009e0:	2003      	movs	r0, #3
 80009e2:	f7ff fefd 	bl	80007e0 <ICM20948_WriteByte>
 80009e6:	4603      	mov	r3, r0
 80009e8:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 80009ea:	7b7b      	ldrb	r3, [r7, #13]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <AK09916_ReadByteViaICM+0x48>
        ICM20948_SelectUserBank(data_read_bank); // 嘗試恢復
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff6e 	bl	80008d4 <ICM20948_SelectUserBank>
        return status;
 80009f8:	7b7b      	ldrb	r3, [r7, #13]
 80009fa:	e03b      	b.n	8000a74 <AK09916_ReadByteViaICM+0xc0>
    }

    // 3. 設定要讀取的 AK09916 內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4619      	mov	r1, r3
 8000a00:	2004      	movs	r0, #4
 8000a02:	f7ff feed 	bl	80007e0 <ICM20948_WriteByte>
 8000a06:	4603      	mov	r3, r0
 8000a08:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000a0a:	7b7b      	ldrb	r3, [r7, #13]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d005      	beq.n	8000a1c <AK09916_ReadByteViaICM+0x68>
        ICM20948_SelectUserBank(data_read_bank);
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ff5e 	bl	80008d4 <ICM20948_SelectUserBank>
        return status;
 8000a18:	7b7b      	ldrb	r3, [r7, #13]
 8000a1a:	e02b      	b.n	8000a74 <AK09916_ReadByteViaICM+0xc0>
    // 4. 致能 I2C 從裝置 0，設定為讀取一個位元組，並觸發讀取
    //   I2C_SLV0_EN (bit 7) = 1 (致能)
    //   I2C_SLV0_LENG (bits 3:0) = 1 (傳輸 1 個位元組)
    //   I2C_SLV0_REG_DIS (bit 5) = 0 (寫入 reg_addr)
    //   I2C_SLV0_BYTE_SW (bit 6) = 0 (預設)
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | 0x01);
 8000a1c:	2181      	movs	r1, #129	@ 0x81
 8000a1e:	2005      	movs	r0, #5
 8000a20:	f7ff fede 	bl	80007e0 <ICM20948_WriteByte>
 8000a24:	4603      	mov	r3, r0
 8000a26:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) {
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d005      	beq.n	8000a3a <AK09916_ReadByteViaICM+0x86>
        ICM20948_SelectUserBank(data_read_bank);
 8000a2e:	7bbb      	ldrb	r3, [r7, #14]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff4f 	bl	80008d4 <ICM20948_SelectUserBank>
        return status;
 8000a36:	7b7b      	ldrb	r3, [r7, #13]
 8000a38:	e01c      	b.n	8000a74 <AK09916_ReadByteViaICM+0xc0>
    }

    // 5. 等待 I2C 傳輸完成並數據就緒
    HAL_Delay(5); // 這個延遲可能需要調整，最好是檢查狀態位元
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	f001 fee4 	bl	8002808 <HAL_Delay>

    // 6. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff46 	bl	80008d4 <ICM20948_SelectUserBank>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000a4c:	7b7b      	ldrb	r3, [r7, #13]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <AK09916_ReadByteViaICM+0xa2>
 8000a52:	7b7b      	ldrb	r3, [r7, #13]
 8000a54:	e00e      	b.n	8000a74 <AK09916_ReadByteViaICM+0xc0>

    // 7. 從 EXT_SLV_SENS_DATA_00 讀取數據
    //    ICM-20948 會自動將從 SLV0 讀到的數據放入 EXT_SLV_SENS_DATA_00 開始的暫存器中
    status = ICM20948_ReadByte(ICM20948_EXT_SLV_SENS_DATA_00, &temp_data);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	203b      	movs	r0, #59	@ 0x3b
 8000a5e:	f7ff fee3 	bl	8000828 <ICM20948_ReadByte>
 8000a62:	4603      	mov	r3, r0
 8000a64:	737b      	strb	r3, [r7, #13]
    if (status == HAL_OK) {
 8000a66:	7b7b      	ldrb	r3, [r7, #13]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <AK09916_ReadByteViaICM+0xbe>
        *pData = temp_data;
 8000a6c:	7b3a      	ldrb	r2, [r7, #12]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <ICM20948_Init>:

/**
 * @brief 初始化 ICM-20948 感測器 (包括加速計、陀螺儀和磁力計)。
 * @return HAL_StatusTypeDef: 初始化成功則返回 HAL_OK，否則返回 HAL_ERROR。
 */
HAL_StatusTypeDef ICM20948_Init(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	70fb      	strb	r3, [r7, #3]
    uint8_t who_am_i_val = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	70bb      	strb	r3, [r7, #2]
    uint8_t ak09916_wia2_val = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	707b      	strb	r3, [r7, #1]

    // --- 0. 確保 SPI CS 引腳初始為高電位 ---
    ICM20948_CS_Deselect(); // 使用更新後的 CS 控制函式
 8000a8e:	f7ff fe8d 	bl	80007ac <ICM20948_CS_Deselect>
    HAL_Delay(10); // 等待感測器上電穩定
 8000a92:	200a      	movs	r0, #10
 8000a94:	f001 feb8 	bl	8002808 <HAL_Delay>

    // --- 1. 選擇使用者庫 0 ---
    status = ICM20948_SelectUserBank(0);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff1b 	bl	80008d4 <ICM20948_SelectUserBank>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR; // 如果切換庫失敗，則初始化失敗
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <ICM20948_Init+0x30>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e133      	b.n	8000d14 <ICM20948_Init+0x298>

    // --- 2. 檢查 WHO_AM_I 暫存器 ---
    status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000aac:	1cbb      	adds	r3, r7, #2
 8000aae:	4619      	mov	r1, r3
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff feb9 	bl	8000828 <ICM20948_ReadByte>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK || who_am_i_val != 0xEA) { // 0xEA 是 ICM-20948 的預期值
 8000aba:	78fb      	ldrb	r3, [r7, #3]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <ICM20948_Init+0x4a>
 8000ac0:	78bb      	ldrb	r3, [r7, #2]
 8000ac2:	2bea      	cmp	r3, #234	@ 0xea
 8000ac4:	d037      	beq.n	8000b36 <ICM20948_Init+0xba>
        // 可以嘗試多次讀取 WHO_AM_I，因為有時第一次通訊可能不穩定
        HAL_Delay(1);
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f001 fe9e 	bl	8002808 <HAL_Delay>
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        for (int i = 0; i < 10; i++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	e01f      	b.n	8000b12 <ICM20948_Init+0x96>
            status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000ad2:	1cbb      	adds	r3, r7, #2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fea6 	bl	8000828 <ICM20948_ReadByte>
 8000adc:	4603      	mov	r3, r0
 8000ade:	70fb      	strb	r3, [r7, #3]
            if (status == HAL_OK) {
 8000ae0:	78fb      	ldrb	r3, [r7, #3]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d108      	bne.n	8000af8 <ICM20948_Init+0x7c>
                printf("WHO_AM_I: 0x%02X (Attempt %d)\r\n", who_am_i_val, i + 1);
 8000ae6:	78bb      	ldrb	r3, [r7, #2]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	461a      	mov	r2, r3
 8000af0:	488a      	ldr	r0, [pc, #552]	@ (8000d1c <ICM20948_Init+0x2a0>)
 8000af2:	f007 f89f 	bl	8007c34 <iprintf>
 8000af6:	e006      	b.n	8000b06 <ICM20948_Init+0x8a>
            } else {
                printf("Read WHO_AM_I FAILED, Status: %d (Attempt %d)\r\n", status, i + 1);
 8000af8:	78f9      	ldrb	r1, [r7, #3]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3301      	adds	r3, #1
 8000afe:	461a      	mov	r2, r3
 8000b00:	4887      	ldr	r0, [pc, #540]	@ (8000d20 <ICM20948_Init+0x2a4>)
 8000b02:	f007 f897 	bl	8007c34 <iprintf>
            }
            HAL_Delay(50);
 8000b06:	2032      	movs	r0, #50	@ 0x32
 8000b08:	f001 fe7e 	bl	8002808 <HAL_Delay>
        for (int i = 0; i < 10; i++) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	dddc      	ble.n	8000ad2 <ICM20948_Init+0x56>
        }
        // 嘗試多次讀取@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        status = ICM20948_ReadByte(ICM20948_WHO_AM_I, &who_am_i_val);
 8000b18:	1cbb      	adds	r3, r7, #2
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe83 	bl	8000828 <ICM20948_ReadByte>
 8000b22:	4603      	mov	r3, r0
 8000b24:	70fb      	strb	r3, [r7, #3]
        if (status != HAL_OK || who_am_i_val != 0xEA) {
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <ICM20948_Init+0xb6>
 8000b2c:	78bb      	ldrb	r3, [r7, #2]
 8000b2e:	2bea      	cmp	r3, #234	@ 0xea
 8000b30:	d001      	beq.n	8000b36 <ICM20948_Init+0xba>
             return HAL_ERROR; // 裝置識別失敗
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0ee      	b.n	8000d14 <ICM20948_Init+0x298>
        }
    }

    // --- 3. 重設並喚醒裝置 ---
    // 寫入 0x80 到 PWR_MGMT_1 (DEVICE_RESET = 1)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x80);
 8000b36:	2180      	movs	r1, #128	@ 0x80
 8000b38:	2006      	movs	r0, #6
 8000b3a:	f7ff fe51 	bl	80007e0 <ICM20948_WriteByte>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <ICM20948_Init+0xd0>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e0e3      	b.n	8000d14 <ICM20948_Init+0x298>
    HAL_Delay(100); // 等待重設完成 (Datasheet 建議 100ms)
 8000b4c:	2064      	movs	r0, #100	@ 0x64
 8000b4e:	f001 fe5b 	bl	8002808 <HAL_Delay>

    // 從睡眠模式喚醒，並選擇時脈源
    // 寫入 0x01 到 PWR_MGMT_1 (CLKSEL = 1，選擇最佳可用時脈源，通常是內部20MHz振盪器, 自動選擇)
    // SLEEP = 0 (正常模式), TEMP_DIS = 0 (溫度感測器致能)
    status = ICM20948_WriteByte(ICM20948_PWR_MGMT_1, 0x01);
 8000b52:	2101      	movs	r1, #1
 8000b54:	2006      	movs	r0, #6
 8000b56:	f7ff fe43 	bl	80007e0 <ICM20948_WriteByte>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <ICM20948_Init+0xec>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e0d5      	b.n	8000d14 <ICM20948_Init+0x298>
    HAL_Delay(50); // 等待時脈穩定
 8000b68:	2032      	movs	r0, #50	@ 0x32
 8000b6a:	f001 fe4d 	bl	8002808 <HAL_Delay>

    // --- 4. 配置加速計和陀螺儀 ---
    // 切換到使用者庫 2
    status = ICM20948_SelectUserBank(2);
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f7ff feb0 	bl	80008d4 <ICM20948_SelectUserBank>
 8000b74:	4603      	mov	r3, r0
 8000b76:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <ICM20948_Init+0x106>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e0c8      	b.n	8000d14 <ICM20948_Init+0x298>
    // ACCEL_DLPFCFG: 加速計數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±2g, DLPF 致能 (ACCEL_FCHOICE=0), DLPFCFG = 1 (約 246Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // ACCEL_CONFIG = (DLPFCFG << 3) | (ACCEL_FS_SEL << 1) | ACCEL_FCHOICE
    //              = (001 << 3)   | (00 << 1)        | 0
    //              = 0x08
    status = ICM20948_WriteByte(ICM20948_ACCEL_CONFIG, (0x01 << 3) | (0x00 << 1) | 0x00);
 8000b82:	2108      	movs	r1, #8
 8000b84:	2014      	movs	r0, #20
 8000b86:	f7ff fe2b 	bl	80007e0 <ICM20948_WriteByte>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d004      	beq.n	8000b9e <ICM20948_Init+0x122>
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fe9d 	bl	80008d4 <ICM20948_SelectUserBank>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e0ba      	b.n	8000d14 <ICM20948_Init+0x298>
    current_accel_sensitivity = ACCEL_SENSITIVITY_2G; // 更新當前靈敏度
 8000b9e:	4b61      	ldr	r3, [pc, #388]	@ (8000d24 <ICM20948_Init+0x2a8>)
 8000ba0:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8000ba4:	601a      	str	r2, [r3, #0]
    // GYRO_DLPFCFG: 陀螺儀數位低通濾波器配置 (bits 5:3)
    // 這裡設定為 ±250dps, DLPF 致能 (GYRO_FCHOICE=0), DLPFCFG = 1 (約 196.6Hz 頻寬, 3dB BW; ODR 1.125kHz)
    // GYRO_CONFIG_1 = (DLPFCFG << 3) | (GYRO_FS_SEL << 1) | GYRO_FCHOICE
    //               = (001 << 3)   | (00 << 1)       | 0
    //               = 0x08
    status = ICM20948_WriteByte(ICM20948_GYRO_CONFIG_1, (0x01 << 3) | (0x00 << 1) | 0x00);
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f7ff fe19 	bl	80007e0 <ICM20948_WriteByte>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d004      	beq.n	8000bc2 <ICM20948_Init+0x146>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fe8b 	bl	80008d4 <ICM20948_SelectUserBank>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e0a8      	b.n	8000d14 <ICM20948_Init+0x298>
    current_gyro_sensitivity = GYRO_SENSITIVITY_250DPS; // 更新當前靈敏度
 8000bc2:	4b59      	ldr	r3, [pc, #356]	@ (8000d28 <ICM20948_Init+0x2ac>)
 8000bc4:	4a59      	ldr	r2, [pc, #356]	@ (8000d2c <ICM20948_Init+0x2b0>)
 8000bc6:	601a      	str	r2, [r3, #0]
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
    // status = ICM20948_WriteByte(ICM20948_ACCEL_SMPLRT_DIV_1, 0x00); // 加速計 ODR 高位元組
    // if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fe83 	bl	80008d4 <ICM20948_SelectUserBank>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <ICM20948_Init+0x160>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e09b      	b.n	8000d14 <ICM20948_Init+0x298>

    // --- 5. 配置 I2C 主機介面以與 AK09916 通訊 ---
    // 致能 I2C 主機模式 (USER_CTRL 的 I2C_MST_EN 位元 (bit 5))
    uint8_t user_ctrl_val;
    status = ICM20948_ReadByte(ICM20948_USER_CTRL, &user_ctrl_val);
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff fe21 	bl	8000828 <ICM20948_ReadByte>
 8000be6:	4603      	mov	r3, r0
 8000be8:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <ICM20948_Init+0x178>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e08f      	b.n	8000d14 <ICM20948_Init+0x298>
    user_ctrl_val |= (1 << 5); // 設定 I2C_MST_EN = 1 (啟用 I2C Master)
 8000bf4:	783b      	ldrb	r3, [r7, #0]
 8000bf6:	f043 0320 	orr.w	r3, r3, #32
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	703b      	strb	r3, [r7, #0]
    user_ctrl_val |= (1 << 4); // 設定 I2C_IF_DIS = 1 (為 SPI 模式禁用 ICM 的 I2C Slave 介面)
 8000bfe:	783b      	ldrb	r3, [r7, #0]
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	703b      	strb	r3, [r7, #0]
    // user_ctrl_val &= ~(1 << 6); // 確保 I2C_IF_DIS = 0, 使能SPI和I2C同時工作 (如果需要SPI訪問ICM本身)
    status = ICM20948_WriteByte(ICM20948_USER_CTRL, user_ctrl_val);
 8000c08:	783b      	ldrb	r3, [r7, #0]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f7ff fde7 	bl	80007e0 <ICM20948_WriteByte>
 8000c12:	4603      	mov	r3, r0
 8000c14:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <ICM20948_Init+0x1a4>
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e079      	b.n	8000d14 <ICM20948_Init+0x298>
    HAL_Delay(50); // 等待 I2C 主機介面穩定
 8000c20:	2032      	movs	r0, #50	@ 0x32
 8000c22:	f001 fdf1 	bl	8002808 <HAL_Delay>

    // 切換到使用者庫 3
    status = ICM20948_SelectUserBank(3);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f7ff fe54 	bl	80008d4 <ICM20948_SelectUserBank>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d004      	beq.n	8000c40 <ICM20948_Init+0x1c4>
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fe4c 	bl	80008d4 <ICM20948_SelectUserBank>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e069      	b.n	8000d14 <ICM20948_Init+0x298>

    // 設定 I2C 主機時脈頻率 (I2C_MST_CTRL 的 I2C_MST_CLK bits 3:0)
    // 例如，設定為 400kHz (datasheet 建議值 0x07 for 345.6 kHz to 400 kHz)
    // 0x0D for ~100kHz if needed for stability with AK09916
    status = ICM20948_WriteByte(ICM20948_I2C_MST_CTRL, 0x07);
 8000c40:	2107      	movs	r1, #7
 8000c42:	2001      	movs	r0, #1
 8000c44:	f7ff fdcc 	bl	80007e0 <ICM20948_WriteByte>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) { ICM20948_SelectUserBank(0); return HAL_ERROR; }
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d004      	beq.n	8000c5c <ICM20948_Init+0x1e0>
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fe3e 	bl	80008d4 <ICM20948_SelectUserBank>
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e05b      	b.n	8000d14 <ICM20948_Init+0x298>
    HAL_Delay(50);
 8000c5c:	2032      	movs	r0, #50	@ 0x32
 8000c5e:	f001 fdd3 	bl	8002808 <HAL_Delay>

    // 切換回使用者庫 0
    status = ICM20948_SelectUserBank(0);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fe36 	bl	80008d4 <ICM20948_SelectUserBank>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) return HAL_ERROR;
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <ICM20948_Init+0x1fa>
 8000c72:	2301      	movs	r3, #1
 8000c74:	e04e      	b.n	8000d14 <ICM20948_Init+0x298>
//    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    // ... (ICM I2C Master 設定完成後)

    // --- 6. 初始化 AK09916 磁力計 ---
    // **先嘗試軟復位 AK09916**
    status = AK09916_WriteByteViaICM(AK09916_CNTL3, 0x01);
 8000c76:	2101      	movs	r1, #1
 8000c78:	2032      	movs	r0, #50	@ 0x32
 8000c7a:	f7ff fe41 	bl	8000900 <AK09916_WriteByteViaICM>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 8000c82:	78fb      	ldrb	r3, [r7, #3]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <ICM20948_Init+0x21c>
        printf("AK09916 Soft Reset FAILED!\r\n");
 8000c88:	4829      	ldr	r0, [pc, #164]	@ (8000d30 <ICM20948_Init+0x2b4>)
 8000c8a:	f007 f83b 	bl	8007d04 <puts>
        ICM20948_SelectUserBank(0); // 切回 UB0
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fe20 	bl	80008d4 <ICM20948_SelectUserBank>
        return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e03d      	b.n	8000d14 <ICM20948_Init+0x298>
    }
    HAL_Delay(100); // 等待復位完成
 8000c98:	2064      	movs	r0, #100	@ 0x64
 8000c9a:	f001 fdb5 	bl	8002808 <HAL_Delay>
    // status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x00); // Power-down
    // if (status != HAL_OK) { /* 錯誤處理 */ }
    // HAL_Delay(10);

    // **然後再檢查 AK09916 WIA2**
    status = AK09916_ReadByteViaICM(AK09916_WIA2, &ak09916_wia2_val);
 8000c9e:	1c7b      	adds	r3, r7, #1
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fe86 	bl	80009b4 <AK09916_ReadByteViaICM>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d009      	beq.n	8000cc6 <ICM20948_Init+0x24a>
        printf("Reading AK09916 WIA2 FAILED after reset! Status: %d\r\n", status);
 8000cb2:	78fb      	ldrb	r3, [r7, #3]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481f      	ldr	r0, [pc, #124]	@ (8000d34 <ICM20948_Init+0x2b8>)
 8000cb8:	f006 ffbc 	bl	8007c34 <iprintf>
        ICM20948_SelectUserBank(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fe09 	bl	80008d4 <ICM20948_SelectUserBank>
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e026      	b.n	8000d14 <ICM20948_Init+0x298>
    }
    if (ak09916_wia2_val != 0x09) {
 8000cc6:	787b      	ldrb	r3, [r7, #1]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	d009      	beq.n	8000ce0 <ICM20948_Init+0x264>
        printf("AK09916 WIA2 is 0x%02X, expected 0x09, after reset!\r\n", ak09916_wia2_val);
 8000ccc:	787b      	ldrb	r3, [r7, #1]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4819      	ldr	r0, [pc, #100]	@ (8000d38 <ICM20948_Init+0x2bc>)
 8000cd2:	f006 ffaf 	bl	8007c34 <iprintf>
        ICM20948_SelectUserBank(0);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fdfc 	bl	80008d4 <ICM20948_SelectUserBank>
        return HAL_ERROR; // AK09916 識別失敗
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e019      	b.n	8000d14 <ICM20948_Init+0x298>
    }
    printf("AK09916 WIA2 OK: 0x%02X\r\n", ak09916_wia2_val);
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4815      	ldr	r0, [pc, #84]	@ (8000d3c <ICM20948_Init+0x2c0>)
 8000ce6:	f006 ffa5 	bl	8007c34 <iprintf>

    // **如果 WIA2 正確，再設定最終的操作模式**
    status = AK09916_WriteByteViaICM(AK09916_CNTL2, 0x08); // 例如連續量測模式 4 (100Hz)
 8000cea:	2108      	movs	r1, #8
 8000cec:	2031      	movs	r0, #49	@ 0x31
 8000cee:	f7ff fe07 	bl	8000900 <AK09916_WriteByteViaICM>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	70fb      	strb	r3, [r7, #3]
    if (status != HAL_OK) {
 8000cf6:	78fb      	ldrb	r3, [r7, #3]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d007      	beq.n	8000d0c <ICM20948_Init+0x290>
        printf("Setting AK09916 Mode FAILED!\r\n");
 8000cfc:	4810      	ldr	r0, [pc, #64]	@ (8000d40 <ICM20948_Init+0x2c4>)
 8000cfe:	f007 f801 	bl	8007d04 <puts>
        ICM20948_SelectUserBank(0);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fde6 	bl	80008d4 <ICM20948_SelectUserBank>
        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e003      	b.n	8000d14 <ICM20948_Init+0x298>
    }
    HAL_Delay(50); // 等待模式設定生效
 8000d0c:	2032      	movs	r0, #50	@ 0x32
 8000d0e:	f001 fd7b 	bl	8002808 <HAL_Delay>
    //    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    return HAL_OK; // 初始化成功
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	0800b430 	.word	0x0800b430
 8000d20:	0800b450 	.word	0x0800b450
 8000d24:	24000000 	.word	0x24000000
 8000d28:	24000004 	.word	0x24000004
 8000d2c:	43030000 	.word	0x43030000
 8000d30:	0800b480 	.word	0x0800b480
 8000d34:	0800b49c 	.word	0x0800b49c
 8000d38:	0800b4d4 	.word	0x0800b4d4
 8000d3c:	0800b50c 	.word	0x0800b50c
 8000d40:	0800b528 	.word	0x0800b528

08000d44 <ICM20948_ReadAccelGyroRaw>:
 * @brief 從 ICM-20948 讀取加速計和陀螺儀的原始數據。
 * @param pAccel: 指向儲存加速計原始數據的陣列 (int16_t[3])。
 * @param pGyro:  指向儲存陀螺儀原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadAccelGyroRaw(int16_t* pAccel, int16_t* pGyro) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
    uint8_t raw_data[12]; // 6 bytes for accel (X,Y,Z), 6 bytes for gyro (X,Y,Z)
    HAL_StatusTypeDef status;

    // 1. 確保在使用者庫 0 (感測器數據通常在庫 0)
    status = ICM20948_SelectUserBank(0); // 雖然大部分情況下已在庫0，但確保一下無妨
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fdc0 	bl	80008d4 <ICM20948_SelectUserBank>
 8000d54:	4603      	mov	r3, r0
 8000d56:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000d58:	7dfb      	ldrb	r3, [r7, #23]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <ICM20948_ReadAccelGyroRaw+0x1e>
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	e04e      	b.n	8000e00 <ICM20948_ReadAccelGyroRaw+0xbc>

    // 2. 從 ACCEL_XOUT_H (0x2D) 開始連續讀取 12 個位元組的數據
    //    ACCEL_XOUT_H to GYRO_ZOUT_L
    status = ICM20948_ReadBytes(ICM20948_ACCEL_XOUT_H, raw_data, 12);
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	220c      	movs	r2, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	202d      	movs	r0, #45	@ 0x2d
 8000d6c:	f7ff fd86 	bl	800087c <ICM20948_ReadBytes>
 8000d70:	4603      	mov	r3, r0
 8000d72:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <ICM20948_ReadAccelGyroRaw+0x3a>
 8000d7a:	7dfb      	ldrb	r3, [r7, #23]
 8000d7c:	e040      	b.n	8000e00 <ICM20948_ReadAccelGyroRaw+0xbc>

    // 3. 解析數據 (高位元組在前，大端模式 Big-Endian)
    // 加速計數據
    pAccel[0] = (int16_t)((raw_data[0] << 8) | raw_data[1]);  // Accel X
 8000d7e:	7a3b      	ldrb	r3, [r7, #8]
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	b21a      	sxth	r2, r3
 8000d86:	7a7b      	ldrb	r3, [r7, #9]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	801a      	strh	r2, [r3, #0]
    pAccel[1] = (int16_t)((raw_data[2] << 8) | raw_data[3]);  // Accel Y
 8000d92:	7abb      	ldrb	r3, [r7, #10]
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	b219      	sxth	r1, r3
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3302      	adds	r3, #2
 8000da2:	430a      	orrs	r2, r1
 8000da4:	b212      	sxth	r2, r2
 8000da6:	801a      	strh	r2, [r3, #0]
    pAccel[2] = (int16_t)((raw_data[4] << 8) | raw_data[5]);  // Accel Z
 8000da8:	7b3b      	ldrb	r3, [r7, #12]
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	b219      	sxth	r1, r3
 8000db0:	7b7b      	ldrb	r3, [r7, #13]
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3304      	adds	r3, #4
 8000db8:	430a      	orrs	r2, r1
 8000dba:	b212      	sxth	r2, r2
 8000dbc:	801a      	strh	r2, [r3, #0]
    // 陀螺儀數據
    pGyro[0] = (int16_t)((raw_data[6] << 8) | raw_data[7]);   // Gyro X
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	b21a      	sxth	r2, r3
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	801a      	strh	r2, [r3, #0]
    pGyro[1] = (int16_t)((raw_data[8] << 8) | raw_data[9]);   // Gyro Y
 8000dd2:	7c3b      	ldrb	r3, [r7, #16]
 8000dd4:	b21b      	sxth	r3, r3
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b219      	sxth	r1, r3
 8000dda:	7c7b      	ldrb	r3, [r7, #17]
 8000ddc:	b21a      	sxth	r2, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	3302      	adds	r3, #2
 8000de2:	430a      	orrs	r2, r1
 8000de4:	b212      	sxth	r2, r2
 8000de6:	801a      	strh	r2, [r3, #0]
    pGyro[2] = (int16_t)((raw_data[10] << 8) | raw_data[11]); // Gyro Z
 8000de8:	7cbb      	ldrb	r3, [r7, #18]
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b219      	sxth	r1, r3
 8000df0:	7cfb      	ldrb	r3, [r7, #19]
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3304      	adds	r3, #4
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	b212      	sxth	r2, r2
 8000dfc:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <AK09916_ReadBytesViaICM>:
 * @param reg_addr: AK09916 的起始暫存器位址。
 * @param pBuffer:  指向儲存讀取數據的緩衝區。
 * @param count:    要讀取的位元組數量 (AK09916 通常一次讀取 8 bytes: HXL to ST2)。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef AK09916_ReadBytesViaICM(uint8_t reg_addr, uint8_t *pBuffer, uint8_t count) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t target_bank = 3;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read_bank = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73bb      	strb	r3, [r7, #14]

    if (count == 0 || count > 8) { // EXT_SLV_SENS_DATA 暫存器最多支援讀取連續的外部數據長度有限制 (SLV0 可讀取 SLV0_LENG 個 bytes)
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <AK09916_ReadBytesViaICM+0x24>
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d901      	bls.n	8000e30 <AK09916_ReadBytesViaICM+0x28>
                                  // ICM20948 EXT_SLV_SENS_DATA_xx 最多有 24 個 bytes (00-23) 給所有 4 個 slave
                                  // SLV0_LENG 最大值是 15 (0xF)
        return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e056      	b.n	8000ede <AK09916_ReadBytesViaICM+0xd6>
    }

    // 1. 切換到使用者庫 3
    status = ICM20948_SelectUserBank(target_bank);
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd4e 	bl	80008d4 <ICM20948_SelectUserBank>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000e3c:	7b7b      	ldrb	r3, [r7, #13]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <AK09916_ReadBytesViaICM+0x3e>
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
 8000e44:	e04b      	b.n	8000ede <AK09916_ReadBytesViaICM+0xd6>

    // 2. 設定從裝置位址為讀取模式
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_ADDR, AK09916_I2C_ADDR | 0x80); // Add R/W bit for read
 8000e46:	218c      	movs	r1, #140	@ 0x8c
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f7ff fcc9 	bl	80007e0 <ICM20948_WriteByte>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000e52:	7b7b      	ldrb	r3, [r7, #13]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d005      	beq.n	8000e64 <AK09916_ReadBytesViaICM+0x5c>
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fd3a 	bl	80008d4 <ICM20948_SelectUserBank>
 8000e60:	7b7b      	ldrb	r3, [r7, #13]
 8000e62:	e03c      	b.n	8000ede <AK09916_ReadBytesViaICM+0xd6>

    // 3. 設定要讀取的 AK09916 起始內部暫存器位址
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_REG, reg_addr);
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4619      	mov	r1, r3
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f7ff fcb9 	bl	80007e0 <ICM20948_WriteByte>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000e72:	7b7b      	ldrb	r3, [r7, #13]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <AK09916_ReadBytesViaICM+0x7c>
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fd2a 	bl	80008d4 <ICM20948_SelectUserBank>
 8000e80:	7b7b      	ldrb	r3, [r7, #13]
 8000e82:	e02c      	b.n	8000ede <AK09916_ReadBytesViaICM+0xd6>

    // 4. 致能 I2C SLV0，設定讀取位元組數量，並觸發事務
    //    I2C_SLV0_EN (bit 7) = 1
    //    I2C_SLV0_LENG (bits 3:0) = count
    status = ICM20948_WriteByte(ICM20948_I2C_SLV0_CTRL, 0x80 | count);
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2005      	movs	r0, #5
 8000e90:	f7ff fca6 	bl	80007e0 <ICM20948_WriteByte>
 8000e94:	4603      	mov	r3, r0
 8000e96:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) { ICM20948_SelectUserBank(data_read_bank); return status; }
 8000e98:	7b7b      	ldrb	r3, [r7, #13]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d005      	beq.n	8000eaa <AK09916_ReadBytesViaICM+0xa2>
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fd17 	bl	80008d4 <ICM20948_SelectUserBank>
 8000ea6:	7b7b      	ldrb	r3, [r7, #13]
 8000ea8:	e019      	b.n	8000ede <AK09916_ReadBytesViaICM+0xd6>

    // 等待 I2C 傳輸完成，這個延遲需要足夠長以完成 'count' 個位元組的讀取
    // 每個位元組大約需要 8/I2C_Clock_Freq + ACK/NACK 時間。
    // 若 I2C 400kHz, 1 byte 約 25us. 8 bytes ~ 200us.
    HAL_Delay(count + 2); // 粗略延遲，最好檢查 I2C_MST_STATUS 或使用中斷
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	3302      	adds	r3, #2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fcaa 	bl	8002808 <HAL_Delay>
                          // (count * 25us / 1000) + 1 ms 作為基本延遲

    // 5. 切換回使用者庫 0 以讀取外部感測器數據
    status = ICM20948_SelectUserBank(data_read_bank);
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fd0c 	bl	80008d4 <ICM20948_SelectUserBank>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000ec0:	7b7b      	ldrb	r3, [r7, #13]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <AK09916_ReadBytesViaICM+0xc2>
 8000ec6:	7b7b      	ldrb	r3, [r7, #13]
 8000ec8:	e009      	b.n	8000ede <AK09916_ReadBytesViaICM+0xd6>

    // 6. 從 EXT_SLV_SENS_DATA_00 開始讀取數據
    status = ICM20948_ReadBytes(ICM20948_EXT_SLV_SENS_DATA_00, pBuffer, count);
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	203b      	movs	r0, #59	@ 0x3b
 8000ed4:	f7ff fcd2 	bl	800087c <ICM20948_ReadBytes>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	737b      	strb	r3, [r7, #13]
    return status;
 8000edc:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <ICM20948_ReadMagRaw>:
/**
 * @brief 從 ICM-20948 (透過其 I2C 主機從 AK09916) 讀取磁力計的原始數據。
 * @param pMag:   指向儲存磁力計原始數據的陣列 (int16_t[3])。
 * @return HAL_StatusTypeDef: HAL 操作狀態。
 */
HAL_StatusTypeDef ICM20948_ReadMagRaw(int16_t* pMag) {
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
                           // RSV (0x17) 是保留位元組
    HAL_StatusTypeDef status;
    uint8_t st1_val;

    // 1. 檢查 AK09916 是否有新數據 (DRDY 位元在 ST1 (0x10) 暫存器)
    status = AK09916_ReadByteViaICM(AK09916_ST1, &st1_val);
 8000eee:	f107 030b 	add.w	r3, r7, #11
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2010      	movs	r0, #16
 8000ef6:	f7ff fd5d 	bl	80009b4 <AK09916_ReadByteViaICM>
 8000efa:	4603      	mov	r3, r0
 8000efc:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000efe:	7dfb      	ldrb	r3, [r7, #23]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <ICM20948_ReadMagRaw+0x22>
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	e035      	b.n	8000f74 <ICM20948_ReadMagRaw+0x8e>

    if (!(st1_val & 0x01)) { // 檢查 DRDY (Data Ready) 位元 (bit 0)
 8000f08:	7afb      	ldrb	r3, [r7, #11]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <ICM20948_ReadMagRaw+0x30>
        return HAL_BUSY; // 數據尚未就緒 (Not an error, just not ready)
 8000f12:	2302      	movs	r3, #2
 8000f14:	e02e      	b.n	8000f74 <ICM20948_ReadMagRaw+0x8e>
    }

    // 2. 從 AK09916_HXL (0x11) 開始讀取 8 個位元組 (HXL to ST2)
    //    讀取 ST2 (0x18) 是為了讓 AK09916 準備下一次量測 (清除 DRDY 狀態並觸發下一次)
    status = AK09916_ReadBytesViaICM(AK09916_HXL, mag_buffer, 8);
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2011      	movs	r0, #17
 8000f20:	f7ff ff72 	bl	8000e08 <AK09916_ReadBytesViaICM>
 8000f24:	4603      	mov	r3, r0
 8000f26:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <ICM20948_ReadMagRaw+0x4c>
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
 8000f30:	e020      	b.n	8000f74 <ICM20948_ReadMagRaw+0x8e>

    // 3. 解析數據 (低位元組在前，小端模式 Little-Endian for AK09916)
    pMag[0] = (int16_t)(((uint16_t)mag_buffer[1] << 8) | mag_buffer[0]); // Mag X (HXH, HXL)
 8000f32:	7b7b      	ldrb	r3, [r7, #13]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	7b3b      	ldrb	r3, [r7, #12]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	801a      	strh	r2, [r3, #0]
    pMag[1] = (int16_t)(((uint16_t)mag_buffer[3] << 8) | mag_buffer[2]); // Mag Y (HYH, HYL)
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b219      	sxth	r1, r3
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3302      	adds	r3, #2
 8000f56:	430a      	orrs	r2, r1
 8000f58:	b212      	sxth	r2, r2
 8000f5a:	801a      	strh	r2, [r3, #0]
    pMag[2] = (int16_t)(((uint16_t)mag_buffer[5] << 8) | mag_buffer[4]); // Mag Z (HZH, HZL)
 8000f5c:	7c7b      	ldrb	r3, [r7, #17]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b219      	sxth	r1, r3
 8000f64:	7c3b      	ldrb	r3, [r7, #16]
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	b212      	sxth	r2, r2
 8000f70:	801a      	strh	r2, [r3, #0]
    // if (mag_buffer[7] & 0x08) { /* Overflow occurred */ }

    // 重要: 讀取 ST2 暫存器後，AK09916 會清除 DRDY (Data Ready) 狀態，
    // 並在下一個量測週期後再次設定 DRDY。

    return HAL_OK;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <ICM20948_ConvertAccelRawToG>:
/**
 * @brief 將加速計原始數據轉換為 g (重力加速度)。
 * @param pAccelRaw: 指向加速計原始數據陣列 (int16_t[3])。
 * @param pAccelG:   指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertAccelRawToG(const int16_t* pAccelRaw, float* pAccelG) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    pAccelG[0] = (float)pAccelRaw[0] / current_accel_sensitivity;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <ICM20948_ConvertAccelRawToG+0x78>)
 8000f96:	ed93 7a00 	vldr	s14, [r3]
 8000f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[1] = (float)pAccelRaw[1] / current_accel_sensitivity;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <ICM20948_ConvertAccelRawToG+0x78>)
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
    pAccelG[2] = (float)pAccelRaw[2] / current_accel_sensitivity;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fce:	ee07 3a90 	vmov	s15, r3
 8000fd2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <ICM20948_ConvertAccelRawToG+0x78>)
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3308      	adds	r3, #8
 8000fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe4:	edc3 7a00 	vstr	s15, [r3]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	24000000 	.word	0x24000000

08000ff8 <ICM20948_ConvertGyroRawToDPS>:
/**
 * @brief 將陀螺儀原始數據轉換為 dps (度/秒)。
 * @param pGyroRaw: 指向陀螺儀原始數據陣列 (int16_t[3])。
 * @param pGyroDPS: 指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertGyroRawToDPS(const int16_t* pGyroRaw, float* pGyroDPS) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
    pGyroDPS[0] = (float)pGyroRaw[0] / current_gyro_sensitivity;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[1] = (float)pGyroRaw[1] / current_gyro_sensitivity;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3302      	adds	r3, #2
 8001024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	3304      	adds	r3, #4
 800103a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800103e:	edc3 7a00 	vstr	s15, [r3]
    pGyroDPS[2] = (float)pGyroRaw[2] / current_gyro_sensitivity;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3304      	adds	r3, #4
 8001046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <ICM20948_ConvertGyroRawToDPS+0x78>)
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	3308      	adds	r3, #8
 800105c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001060:	edc3 7a00 	vstr	s15, [r3]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	24000004 	.word	0x24000004

08001074 <ICM20948_ConvertMagRawToUT>:
/**
 * @brief 將磁力計原始數據轉換為 µT (微特斯拉)。
 * @param pMagRaw: 指向磁力計原始數據陣列 (int16_t[3])。
 * @param pMagUT:  指向儲存轉換後數據的陣列 (float[3])。
 */
void ICM20948_ConvertMagRawToUT(const int16_t* pMagRaw, float* pMagUT) {
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
    // AK09916 的靈敏度是固定的 0.15 µT/LSB
    pMagUT[0] = (float)pMagRaw[0] * MAG_SENSITIVITY_UT_LSB;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80010e8 <ICM20948_ConvertMagRawToUT+0x74>
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[1] = (float)pMagRaw[1] * MAG_SENSITIVITY_UT_LSB;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3302      	adds	r3, #2
 800109e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3304      	adds	r3, #4
 80010ae:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80010e8 <ICM20948_ConvertMagRawToUT+0x74>
 80010b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b6:	edc3 7a00 	vstr	s15, [r3]
    pMagUT[2] = (float)pMagRaw[2] * MAG_SENSITIVITY_UT_LSB;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3308      	adds	r3, #8
 80010ce:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80010e8 <ICM20948_ConvertMagRawToUT+0x74>
 80010d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d6:	edc3 7a00 	vstr	s15, [r3]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	3e19999a 	.word	0x3e19999a

080010ec <ICM20948_Main>:
void ICM20948_Main(){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	@ 0x30
 80010f0:	af0a      	add	r7, sp, #40	@ 0x28
	// 讀取加速計和陀螺儀原始數據
		     if (ICM20948_ReadAccelGyroRaw(accel_raw, gyro_raw) == HAL_OK) {
 80010f2:	493c      	ldr	r1, [pc, #240]	@ (80011e4 <ICM20948_Main+0xf8>)
 80010f4:	483c      	ldr	r0, [pc, #240]	@ (80011e8 <ICM20948_Main+0xfc>)
 80010f6:	f7ff fe25 	bl	8000d44 <ICM20948_ReadAccelGyroRaw>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d135      	bne.n	800116c <ICM20948_Main+0x80>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertAccelRawToG(accel_raw, accel_g);
 8001100:	493a      	ldr	r1, [pc, #232]	@ (80011ec <ICM20948_Main+0x100>)
 8001102:	4839      	ldr	r0, [pc, #228]	@ (80011e8 <ICM20948_Main+0xfc>)
 8001104:	f7ff ff3a 	bl	8000f7c <ICM20948_ConvertAccelRawToG>
		       ICM20948_ConvertGyroRawToDPS(gyro_raw, gyro_dps);
 8001108:	4939      	ldr	r1, [pc, #228]	@ (80011f0 <ICM20948_Main+0x104>)
 800110a:	4836      	ldr	r0, [pc, #216]	@ (80011e4 <ICM20948_Main+0xf8>)
 800110c:	f7ff ff74 	bl	8000ff8 <ICM20948_ConvertGyroRawToDPS>

		       // 透過 UART 輸出 (或使用除錯器查看變數)
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		              accel_g[0], accel_g[1], accel_g[2],
 8001110:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <ICM20948_Main+0x100>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001116:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
		              accel_g[0], accel_g[1], accel_g[2],
 800111a:	4b34      	ldr	r3, [pc, #208]	@ (80011ec <ICM20948_Main+0x100>)
 800111c:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001120:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		              accel_g[0], accel_g[1], accel_g[2],
 8001124:	4b31      	ldr	r3, [pc, #196]	@ (80011ec <ICM20948_Main+0x100>)
 8001126:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800112a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 800112e:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <ICM20948_Main+0x104>)
 8001130:	edd3 5a00 	vldr	s11, [r3]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001134:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <ICM20948_Main+0x104>)
 800113a:	edd3 4a01 	vldr	s9, [r3, #4]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800113e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
		               gyro_dps[0], gyro_dps[1], gyro_dps[2]);
 8001142:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <ICM20948_Main+0x104>)
 8001144:	edd3 3a02 	vldr	s7, [r3, #8]
		       printf("Accel(g): X=%.2f, Y=%.2f, Z=%.2f | Gyro(dps): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001148:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800114c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8001150:	ed8d 4b06 	vstr	d4, [sp, #24]
 8001154:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001158:	ed8d 6b02 	vstr	d6, [sp, #8]
 800115c:	ed8d 7b00 	vstr	d7, [sp]
 8001160:	ec53 2b12 	vmov	r2, r3, d2
 8001164:	4823      	ldr	r0, [pc, #140]	@ (80011f4 <ICM20948_Main+0x108>)
 8001166:	f006 fd65 	bl	8007c34 <iprintf>
 800116a:	e002      	b.n	8001172 <ICM20948_Main+0x86>
	//	       printf("%s"); // 或 HAL_UART_Transmit(&huartx, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);

		     } else {
		    	 //讀取 Accel/Gyro 數據失敗
		       printf("Failed to read Accel/Gyro data!\r\n");
 800116c:	4822      	ldr	r0, [pc, #136]	@ (80011f8 <ICM20948_Main+0x10c>)
 800116e:	f006 fdc9 	bl	8007d04 <puts>
		     }

		     // 讀取磁力計原始數據
		     HAL_StatusTypeDef mag_status = ICM20948_ReadMagRaw(mag_raw);
 8001172:	4822      	ldr	r0, [pc, #136]	@ (80011fc <ICM20948_Main+0x110>)
 8001174:	f7ff feb7 	bl	8000ee6 <ICM20948_ReadMagRaw>
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
		     if (mag_status == HAL_OK) {
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d11c      	bne.n	80011bc <ICM20948_Main+0xd0>
		       // 將原始數據轉換為物理單位
		       ICM20948_ConvertMagRawToUT(mag_raw, mag_uT);
 8001182:	491f      	ldr	r1, [pc, #124]	@ (8001200 <ICM20948_Main+0x114>)
 8001184:	481d      	ldr	r0, [pc, #116]	@ (80011fc <ICM20948_Main+0x110>)
 8001186:	f7ff ff75 	bl	8001074 <ICM20948_ConvertMagRawToUT>

		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <ICM20948_Main+0x114>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8001190:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <ICM20948_Main+0x114>)
 8001196:	edd3 7a01 	vldr	s15, [r3, #4]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 800119a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
		               mag_uT[0], mag_uT[1], mag_uT[2]);
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <ICM20948_Main+0x114>)
 80011a0:	edd3 6a02 	vldr	s13, [r3, #8]
		       printf("Mag(uT): X=%.2f, Y=%.2f, Z=%.2f\r\n",
 80011a4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011a8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80011ac:	ed8d 7b00 	vstr	d7, [sp]
 80011b0:	ec53 2b15 	vmov	r2, r3, d5
 80011b4:	4813      	ldr	r0, [pc, #76]	@ (8001204 <ICM20948_Main+0x118>)
 80011b6:	f006 fd3d 	bl	8007c34 <iprintf>
 80011ba:	e009      	b.n	80011d0 <ICM20948_Main+0xe4>
	//	       printf("%s");

		     } else if (mag_status == HAL_BUSY) {
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d103      	bne.n	80011ca <ICM20948_Main+0xde>
		       //printf("磁力計數據尚未就緒 (DRDY=0)\r\n");
		    	 printf("(HAL_BUSY DRDY=0)\r\n");
 80011c2:	4811      	ldr	r0, [pc, #68]	@ (8001208 <ICM20948_Main+0x11c>)
 80011c4:	f006 fd9e 	bl	8007d04 <puts>
 80011c8:	e002      	b.n	80011d0 <ICM20948_Main+0xe4>
		       // 這是正常情況，因為磁力計更新速率可能較慢或與主迴圈不同步
		     }
		     else {
		    	 //讀取 Mag 數據失敗!
		       printf("Failed to read Mag !\r\n");
 80011ca:	4810      	ldr	r0, [pc, #64]	@ (800120c <ICM20948_Main+0x120>)
 80011cc:	f006 fd9a 	bl	8007d04 <puts>
		     }

		     printf("----------------------------------------\r\n");
 80011d0:	480f      	ldr	r0, [pc, #60]	@ (8001210 <ICM20948_Main+0x124>)
 80011d2:	f006 fd97 	bl	8007d04 <puts>
		     HAL_Delay(100); // 每秒讀取一次數據
 80011d6:	2064      	movs	r0, #100	@ 0x64
 80011d8:	f001 fb16 	bl	8002808 <HAL_Delay>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24000204 	.word	0x24000204
 80011e8:	240001fc 	.word	0x240001fc
 80011ec:	24000214 	.word	0x24000214
 80011f0:	24000220 	.word	0x24000220
 80011f4:	0800b548 	.word	0x0800b548
 80011f8:	0800b590 	.word	0x0800b590
 80011fc:	2400020c 	.word	0x2400020c
 8001200:	2400022c 	.word	0x2400022c
 8001204:	0800b5b4 	.word	0x0800b5b4
 8001208:	0800b5d8 	.word	0x0800b5d8
 800120c:	0800b5ec 	.word	0x0800b5ec
 8001210:	0800b604 	.word	0x0800b604

08001214 <icm42688p_select>:
#define ICM42688P_NCS_PIN  GPIO_PIN_11

// --- 內部輔助函數 ---

// 選中 ICM-42688-P (nCS 拉低)
static void icm42688p_select(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_NCS_PORT, ICM42688P_NCS_PIN, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121e:	4802      	ldr	r0, [pc, #8]	@ (8001228 <icm42688p_select+0x14>)
 8001220:	f001 fe2e 	bl	8002e80 <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	58020400 	.word	0x58020400

0800122c <icm42688p_deselect>:

// 取消選中 ICM-42688-P (nCS 拉高)
static void icm42688p_deselect(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ICM42688P_NCS_PORT, ICM42688P_NCS_PIN, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001236:	4802      	ldr	r0, [pc, #8]	@ (8001240 <icm42688p_deselect+0x14>)
 8001238:	f001 fe22 	bl	8002e80 <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58020400 	.word	0x58020400

08001244 <icm42688p_write_register>:

// 寫入單個暫存器
// 根據 ICM-42688-P SPI 協議, 寫入時, 位址位元組的 MSB (bit 7) 為 0
static HAL_StatusTypeDef icm42688p_write_register(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t value) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef status1, status2;
    uint8_t command = reg & 0x7F; // 清除 MSB (bit 7) 表示寫入操作
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]

    icm42688p_select();
 800125e:	f7ff ffd9 	bl	8001214 <icm42688p_select>
    status1 = HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT);
 8001262:	f107 010d 	add.w	r1, r7, #13
 8001266:	2364      	movs	r3, #100	@ 0x64
 8001268:	2201      	movs	r2, #1
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f005 f89c 	bl	80063a8 <HAL_SPI_Transmit>
 8001270:	4603      	mov	r3, r0
 8001272:	73bb      	strb	r3, [r7, #14]
    if (status1 == HAL_OK) {
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <icm42688p_write_register+0x48>
        status2 = HAL_SPI_Transmit(hspi, &value, 1, ICM42688P_SPI_TIMEOUT);
 800127a:	1cb9      	adds	r1, r7, #2
 800127c:	2364      	movs	r3, #100	@ 0x64
 800127e:	2201      	movs	r2, #1
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f005 f891 	bl	80063a8 <HAL_SPI_Transmit>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e001      	b.n	8001290 <icm42688p_write_register+0x4c>
    } else {
        status2 = status1; // 如果第一次傳輸失敗，直接返回該狀態
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	73fb      	strb	r3, [r7, #15]
    }
    icm42688p_deselect();
 8001290:	f7ff ffcc 	bl	800122c <icm42688p_deselect>

    if (status1!= HAL_OK) return status1;
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <icm42688p_write_register+0x5a>
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	e000      	b.n	80012a0 <icm42688p_write_register+0x5c>
    return status2;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <icm42688p_read_register>:

// 讀取單個暫存器
// 根據 ICM-42688-P SPI 協議, 讀取時, 位址位元組的 MSB (bit 7) 為 1
static uint8_t icm42688p_read_register(SPI_HandleTypeDef *hspi, uint8_t reg) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
    uint8_t command = reg | 0x80; // 設定 MSB (bit 7) 表示讀取操作
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]
    uint8_t data_read = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	73bb      	strb	r3, [r7, #14]

    icm42688p_select();
 80012c2:	f7ff ffa7 	bl	8001214 <icm42688p_select>
    HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT);
 80012c6:	f107 010f 	add.w	r1, r7, #15
 80012ca:	2364      	movs	r3, #100	@ 0x64
 80012cc:	2201      	movs	r2, #1
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f005 f86a 	bl	80063a8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, &data_read, 1, ICM42688P_SPI_TIMEOUT);
 80012d4:	f107 010e 	add.w	r1, r7, #14
 80012d8:	2364      	movs	r3, #100	@ 0x64
 80012da:	2201      	movs	r2, #1
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f005 fa51 	bl	8006784 <HAL_SPI_Receive>
    icm42688p_deselect();
 80012e2:	f7ff ffa3 	bl	800122c <icm42688p_deselect>

    return data_read;
 80012e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <icm42688p_read_multiple_registers>:

// 連續讀取多個暫存器
static HAL_StatusTypeDef icm42688p_read_multiple_registers(SPI_HandleTypeDef *hspi, uint8_t start_reg, uint8_t *buffer, uint8_t len) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	72fb      	strb	r3, [r7, #11]
 8001300:	4613      	mov	r3, r2
 8001302:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;
    uint8_t command = start_reg | 0x80; // 設定 MSB (bit 7) 表示讀取操作
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800130a:	b2db      	uxtb	r3, r3
 800130c:	75bb      	strb	r3, [r7, #22]

    icm42688p_select();
 800130e:	f7ff ff81 	bl	8001214 <icm42688p_select>
    HAL_SPI_Transmit(hspi, &command, 1, ICM42688P_SPI_TIMEOUT); // 發送起始位址
 8001312:	f107 0116 	add.w	r1, r7, #22
 8001316:	2364      	movs	r3, #100	@ 0x64
 8001318:	2201      	movs	r2, #1
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f005 f844 	bl	80063a8 <HAL_SPI_Transmit>
    status = HAL_SPI_Receive(hspi, buffer, len, ICM42688P_SPI_TIMEOUT); // 連續讀取數據
 8001320:	7abb      	ldrb	r3, [r7, #10]
 8001322:	b29a      	uxth	r2, r3
 8001324:	2364      	movs	r3, #100	@ 0x64
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f005 fa2b 	bl	8006784 <HAL_SPI_Receive>
 800132e:	4603      	mov	r3, r0
 8001330:	75fb      	strb	r3, [r7, #23]
    icm42688p_deselect();
 8001332:	f7ff ff7b 	bl	800122c <icm42688p_deselect>

    return status;
 8001336:	7dfb      	ldrb	r3, [r7, #23]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <icm42688p_set_bank>:

// 切換暫存器庫 (0 for User Bank 0, 1 for User Bank 1, etc.)
static HAL_StatusTypeDef icm42688p_set_bank(SPI_HandleTypeDef *hspi, uint8_t bank) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
    return icm42688p_write_register(hspi, ICM42688P_REG_BANK_SEL, bank);
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	461a      	mov	r2, r3
 8001350:	2176      	movs	r1, #118	@ 0x76
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff76 	bl	8001244 <icm42688p_write_register>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <icm42688p_init>:

// --- 公開函數實作 ---

// 初始化 ICM-42688-P
uint8_t icm42688p_init(SPI_HandleTypeDef *hspi) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    uint8_t who_am_i_value;
    uint8_t temp_reg_val;

    icm42688p_deselect(); // 確保 nCS 初始為高電位
 800136c:	f7ff ff5e 	bl	800122c <icm42688p_deselect>
    HAL_Delay(10); // 感測器上電後短暫延遲
 8001370:	200a      	movs	r0, #10
 8001372:	f001 fa49 	bl	8002808 <HAL_Delay>

    // 1. 切換到 User Bank 0 (大部分配置暫存器位於此)
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001376:	2100      	movs	r1, #0
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffe1 	bl	8001340 <icm42688p_set_bank>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <icm42688p_init+0x2a>
        printf("ICM Error: Set Bank 0 failed\r\n");
 8001384:	482d      	ldr	r0, [pc, #180]	@ (800143c <icm42688p_init+0xd8>)
 8001386:	f006 fcbd 	bl	8007d04 <puts>
        return 0; // 返回 0 表示初始化失敗
 800138a:	2300      	movs	r3, #0
 800138c:	e051      	b.n	8001432 <icm42688p_init+0xce>
    }
    HAL_Delay(100); // 切換 Bank 後延遲(此處數值原為1，某些情況貌似太快導致who_am_i_value = 0x0，初始化失敗，可視情況調整!)
 800138e:	2064      	movs	r0, #100	@ 0x64
 8001390:	f001 fa3a 	bl	8002808 <HAL_Delay>

    // 2. 讀取 WHO_AM_I 暫存器進行驗證
    who_am_i_value = icm42688p_read_who_am_i(hspi); // 此函數內部已處理 Bank 切換
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f855 	bl	8001444 <icm42688p_read_who_am_i>
 800139a:	4603      	mov	r3, r0
 800139c:	73fb      	strb	r3, [r7, #15]
    if (who_am_i_value!= ICM42688P_WHO_AM_I_VALUE) {
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	2b47      	cmp	r3, #71	@ 0x47
 80013a2:	d007      	beq.n	80013b4 <icm42688p_init+0x50>
        printf("ICM Error: WHO_AM_I check failed. Expected 0x%02X, Got 0x%02X\r\n", ICM42688P_WHO_AM_I_VALUE, who_am_i_value);
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	461a      	mov	r2, r3
 80013a8:	2147      	movs	r1, #71	@ 0x47
 80013aa:	4825      	ldr	r0, [pc, #148]	@ (8001440 <icm42688p_init+0xdc>)
 80013ac:	f006 fc42 	bl	8007c34 <iprintf>
        return 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	e03e      	b.n	8001432 <icm42688p_init+0xce>
    // printf("ICM Info: WHO_AM_I = 0x%02X (OK)\r\n", who_am_i_value);

    // 3. 配置電源管理 PWR_MGMT0 (0x4E)
    //    啟用加速計和陀螺儀，均設為低噪音 (LN) 模式
    //    ACCEL_MODE[1:0] = 11 (LN), GYRO_MODE[1:0] = 11 (LN) -> 0b00001111 = 0x0F
    if (icm42688p_write_register(hspi, ICM42688P_REG_PWR_MGMT0, ICM42688P_PWR_MGMT0_ACCEL_LN | ICM42688P_PWR_MGMT0_GYRO_LN)!= HAL_OK) {
 80013b4:	220f      	movs	r2, #15
 80013b6:	214e      	movs	r1, #78	@ 0x4e
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff43 	bl	8001244 <icm42688p_write_register>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <icm42688p_init+0x64>
        // printf("ICM Error: PWR_MGMT0 config failed\r\n"); // 移至 main.c
        return 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e034      	b.n	8001432 <icm42688p_init+0xce>
    }
    HAL_Delay(1); // 模式更改後需要穩定時間 (datasheet 建議 1ms for gyro, 1ms for accel from sleep to LN)
 80013c8:	2001      	movs	r0, #1
 80013ca:	f001 fa1d 	bl	8002808 <HAL_Delay>

    // 4. 配置陀螺儀 GYRO_CONFIG0 (0x4F)
    //    設定 ODR = 1kHz (0x06), FS_SEL = ±2000 dps (0x00 << 4)
    if (icm42688p_write_register(hspi, ICM42688P_REG_GYRO_CONFIG0, ICM42688P_GYRO_FS_SEL_2000DPS | ICM42688P_ODR_1KHZ)!= HAL_OK) {
 80013ce:	2206      	movs	r2, #6
 80013d0:	214f      	movs	r1, #79	@ 0x4f
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff36 	bl	8001244 <icm42688p_write_register>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <icm42688p_init+0x7e>
        // printf("ICM Error: GYRO_CONFIG0 failed\r\n"); // 移至 main.c
        return 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	e027      	b.n	8001432 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f001 fa10 	bl	8002808 <HAL_Delay>

    // 5. 配置加速計 ACCEL_CONFIG0 (0x50)
    //    設定 ODR = 1kHz (0x06), FS_SEL = ±16g (0x00 << 4)
    if (icm42688p_write_register(hspi, ICM42688P_REG_ACCEL_CONFIG0, ICM42688P_ACCEL_FS_SEL_16G | ICM42688P_ODR_1KHZ)!= HAL_OK) {
 80013e8:	2206      	movs	r2, #6
 80013ea:	2150      	movs	r1, #80	@ 0x50
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff29 	bl	8001244 <icm42688p_write_register>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <icm42688p_init+0x98>
        // printf("ICM Error: ACCEL_CONFIG0 failed\r\n"); // 移至 main.c
        return 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e01a      	b.n	8001432 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f001 fa03 	bl	8002808 <HAL_Delay>

    // 6. (重要) 清除 INT_ASYNC_RESET 位 (INT_CONFIG1, 0x64, bit 4)
    //    根據 datasheet 建議，為確保 INT1/INT2 正常工作，應清除此位
    //    此暫存器位於 User Bank 0
    temp_reg_val = icm42688p_read_register(hspi, ICM42688P_REG_INT_CONFIG1); // 內部已處理 Bank 切換
 8001402:	2164      	movs	r1, #100	@ 0x64
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff4f 	bl	80012a8 <icm42688p_read_register>
 800140a:	4603      	mov	r3, r0
 800140c:	73bb      	strb	r3, [r7, #14]
    if (icm42688p_write_register(hspi, ICM42688P_REG_INT_CONFIG1, temp_reg_val & ~ICM42688P_INT_ASYNC_RESET_BIT)!= HAL_OK) {
 800140e:	7bbb      	ldrb	r3, [r7, #14]
 8001410:	f023 0310 	bic.w	r3, r3, #16
 8001414:	b2db      	uxtb	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	2164      	movs	r1, #100	@ 0x64
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ff12 	bl	8001244 <icm42688p_write_register>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <icm42688p_init+0xc6>
        // printf("ICM Error: INT_CONFIG1 (clear INT_ASYNC_RESET) failed\r\n"); // 移至 main.c
        return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	e003      	b.n	8001432 <icm42688p_init+0xce>
    }
    HAL_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f001 f9ec 	bl	8002808 <HAL_Delay>

    // printf("ICM-42688-P 初始化成功。\r\n"); // 移至 main.c
    return 1; // 返回 1 表示初始化成功
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	0800b630 	.word	0x0800b630
 8001440:	0800b650 	.word	0x0800b650

08001444 <icm42688p_read_who_am_i>:

// 讀取 WHO_AM_I 暫存器
uint8_t icm42688p_read_who_am_i(SPI_HandleTypeDef *hspi) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
    // 確保在 Bank 0 讀取
    // 注意: icm42688p_read_register 內部不處理 bank 切換，調用者需確保 bank 正確
    // 為安全起見，在此處明確設定 bank
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 800144c:	2100      	movs	r1, #0
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff76 	bl	8001340 <icm42688p_set_bank>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <icm42688p_read_who_am_i+0x1a>
         // 實際應用中應處理此錯誤
//        printf("ICM Error: Set Bank 0 failed in read_who_am_i\r\n");
        return 0; // 返回錯誤值
 800145a:	2300      	movs	r3, #0
 800145c:	e007      	b.n	800146e <icm42688p_read_who_am_i+0x2a>
    }
    HAL_Delay(10); // Bank 切換後延遲
 800145e:	200a      	movs	r0, #10
 8001460:	f001 f9d2 	bl	8002808 <HAL_Delay>
    return icm42688p_read_register(hspi, ICM42688P_REG_WHO_AM_I);
 8001464:	2175      	movs	r1, #117	@ 0x75
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ff1e 	bl	80012a8 <icm42688p_read_register>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <icm42688p_read_gyro_raw>:

// 讀取陀螺儀原始數據 (3軸)
void icm42688p_read_gyro_raw(SPI_HandleTypeDef *hspi, int16_t* gyro_data) {
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    uint8_t raw_data_buffer[3]; // 用於儲存 X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // 確保在 Bank 0 讀取
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff5c 	bl	8001340 <icm42688p_set_bank>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <icm42688p_read_gyro_raw+0x30>
//        printf("ICM Error: Set Bank 0 failed in read_gyro_raw\r\n");
        gyro_data[0] = 0; // Gyro X 清零
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	801a      	strh	r2, [r3, #0]
        gyro_data[1] = 0; // Gyro Y 清零
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3302      	adds	r3, #2
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
        gyro_data[2] = 0; // Gyro Z 清零
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3304      	adds	r3, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	801a      	strh	r2, [r3, #0]
        return;
 80014a4:	e038      	b.n	8001518 <icm42688p_read_gyro_raw+0xa2>
    }
    HAL_Delay(1); // 短暫延遲確保 Bank 切換完成
 80014a6:	2001      	movs	r0, #1
 80014a8:	f001 f9ae 	bl	8002808 <HAL_Delay>

    if(icm42688p_read_multiple_registers(hspi, ICM42688P_REG_GYRO_DATA_X1_UI, raw_data_buffer, 6)!= HAL_OK) {
 80014ac:	f107 020c 	add.w	r2, r7, #12
 80014b0:	2306      	movs	r3, #6
 80014b2:	2125      	movs	r1, #37	@ 0x25
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff1b 	bl	80012f0 <icm42688p_read_multiple_registers>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <icm42688p_read_gyro_raw+0x62>
//        printf("ICM Error: Failed to read gyro data\r\n");
        gyro_data[0] = 0; // Gyro X 清零
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	801a      	strh	r2, [r3, #0]
        gyro_data[1] = 0; // Gyro Y 清零
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	3302      	adds	r3, #2
 80014ca:	2200      	movs	r2, #0
 80014cc:	801a      	strh	r2, [r3, #0]
        gyro_data[2] = 0; // Gyro Z 清零
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	801a      	strh	r2, [r3, #0]
        return;
 80014d6:	e01f      	b.n	8001518 <icm42688p_read_gyro_raw+0xa2>
    }

    gyro_data[0] = (int16_t)(raw_data_buffer[0] << 8 | raw_data_buffer[1]); // Gyro X
 80014d8:	7b3b      	ldrb	r3, [r7, #12]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	7b7b      	ldrb	r3, [r7, #13]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	801a      	strh	r2, [r3, #0]
    gyro_data[1] = (int16_t)(raw_data_buffer[2] << 8 | raw_data_buffer[4]); // Gyro Y
 80014ec:	7bbb      	ldrb	r3, [r7, #14]
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b219      	sxth	r1, r3
 80014f4:	7c3b      	ldrb	r3, [r7, #16]
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3302      	adds	r3, #2
 80014fc:	430a      	orrs	r2, r1
 80014fe:	b212      	sxth	r2, r2
 8001500:	801a      	strh	r2, [r3, #0]
    gyro_data[2] = (int16_t)(raw_data_buffer[5] << 8 | raw_data_buffer[6]); // Gyro Z
 8001502:	7c7b      	ldrb	r3, [r7, #17]
 8001504:	b21b      	sxth	r3, r3
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b219      	sxth	r1, r3
 800150a:	7cbb      	ldrb	r3, [r7, #18]
 800150c:	b21a      	sxth	r2, r3
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3304      	adds	r3, #4
 8001512:	430a      	orrs	r2, r1
 8001514:	b212      	sxth	r2, r2
 8001516:	801a      	strh	r2, [r3, #0]
}
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <icm42688p_read_accel_raw>:

// 讀取加速計原始數據 (3軸)
void icm42688p_read_accel_raw(SPI_HandleTypeDef *hspi, int16_t* accel_data) {
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
    uint8_t raw_data_buffer[3]; // 用於儲存 X_MSB, X_LSB, Y_MSB, Y_LSB, Z_MSB, Z_LSB

    // 確保在 Bank 0 讀取
    if (icm42688p_set_bank(hspi, 0)!= HAL_OK) {
 8001528:	2100      	movs	r1, #0
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff08 	bl	8001340 <icm42688p_set_bank>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <icm42688p_read_accel_raw+0x30>
//        printf("ICM Error: Set Bank 0 failed in read_accel_raw\r\n");
        accel_data[0] = 0; // Accel X 清零
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2200      	movs	r2, #0
 800153a:	801a      	strh	r2, [r3, #0]
        accel_data[1] = 0; // Accel Y 清零
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3302      	adds	r3, #2
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
        accel_data[2] = 0; // Accel Z 清零
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	3304      	adds	r3, #4
 8001548:	2200      	movs	r2, #0
 800154a:	801a      	strh	r2, [r3, #0]
        return;
 800154c:	e038      	b.n	80015c0 <icm42688p_read_accel_raw+0xa2>
    }
    HAL_Delay(1);
 800154e:	2001      	movs	r0, #1
 8001550:	f001 f95a 	bl	8002808 <HAL_Delay>

    if(icm42688p_read_multiple_registers(hspi, ICM42688P_REG_ACCEL_DATA_X1_UI, raw_data_buffer, 6)!= HAL_OK) {
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	2306      	movs	r3, #6
 800155a:	211f      	movs	r1, #31
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fec7 	bl	80012f0 <icm42688p_read_multiple_registers>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <icm42688p_read_accel_raw+0x62>
//        printf("ICM Error: Failed to read accel data\r\n");
        accel_data[0] = 0; // Accel X 清零
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	2200      	movs	r2, #0
 800156c:	801a      	strh	r2, [r3, #0]
        accel_data[1] = 0; // Accel Y 清零
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	3302      	adds	r3, #2
 8001572:	2200      	movs	r2, #0
 8001574:	801a      	strh	r2, [r3, #0]
        accel_data[2] = 0; // Accel Z 清零
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3304      	adds	r3, #4
 800157a:	2200      	movs	r2, #0
 800157c:	801a      	strh	r2, [r3, #0]
        return;
 800157e:	e01f      	b.n	80015c0 <icm42688p_read_accel_raw+0xa2>
    }

    accel_data[0] = (int16_t)(raw_data_buffer[0] << 8 | raw_data_buffer[1]); // Accel X
 8001580:	7b3b      	ldrb	r3, [r7, #12]
 8001582:	b21b      	sxth	r3, r3
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7b7b      	ldrb	r3, [r7, #13]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21a      	sxth	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	801a      	strh	r2, [r3, #0]
    accel_data[1] = (int16_t)(raw_data_buffer[2] << 8 | raw_data_buffer[4]); // Accel Y
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	b21b      	sxth	r3, r3
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b219      	sxth	r1, r3
 800159c:	7c3b      	ldrb	r3, [r7, #16]
 800159e:	b21a      	sxth	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	3302      	adds	r3, #2
 80015a4:	430a      	orrs	r2, r1
 80015a6:	b212      	sxth	r2, r2
 80015a8:	801a      	strh	r2, [r3, #0]
    accel_data[2] = (int16_t)(raw_data_buffer[5] << 8 | raw_data_buffer[6]); // Accel Z
 80015aa:	7c7b      	ldrb	r3, [r7, #17]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b219      	sxth	r1, r3
 80015b2:	7cbb      	ldrb	r3, [r7, #18]
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3304      	adds	r3, #4
 80015ba:	430a      	orrs	r2, r1
 80015bc:	b212      	sxth	r2, r2
 80015be:	801a      	strh	r2, [r3, #0]
}
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <icp20100_read_register>:
  * @param  hi2c: I2C 控制代碼。
  * @param  reg_addr: 要讀取的暫存器位址。
  * @param  data: 指向儲存讀取數據的緩衝區。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_read_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t *data) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b088      	sub	sp, #32
 80015ca:	af04      	add	r7, sp, #16
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	460b      	mov	r3, r1
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Mem_Read(hi2c, ICP20100_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, 1, I2C_TIMEOUT)!= HAL_OK) {
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	2364      	movs	r3, #100	@ 0x64
 80015da:	9302      	str	r3, [sp, #8]
 80015dc:	2301      	movs	r3, #1
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2301      	movs	r3, #1
 80015e6:	21c6      	movs	r1, #198	@ 0xc6
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f001 fe13 	bl	8003214 <HAL_I2C_Mem_Read>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <icp20100_read_register+0x32>
        return ICP20100_ERROR_I2C;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <icp20100_read_register+0x34>
    }
    return ICP20100_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <icp20100_write_register>:
  * @param  hi2c: I2C 控制代碼。
  * @param  reg_addr: 要寫入的暫存器位址。
  * @param  data: 要寫入的數據。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_write_register(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t data) {
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af04      	add	r7, sp, #16
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	70fb      	strb	r3, [r7, #3]
 800160e:	4613      	mov	r3, r2
 8001610:	70bb      	strb	r3, [r7, #2]
    if (HAL_I2C_Mem_Write(hi2c, ICP20100_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, &data, 1, I2C_TIMEOUT)!= HAL_OK) {
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	b29a      	uxth	r2, r3
 8001616:	2364      	movs	r3, #100	@ 0x64
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	2301      	movs	r3, #1
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	1cbb      	adds	r3, r7, #2
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2301      	movs	r3, #1
 8001624:	21c6      	movs	r1, #198	@ 0xc6
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f001 fce0 	bl	8002fec <HAL_I2C_Mem_Write>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <icp20100_write_register+0x34>
        return ICP20100_ERROR_I2C;
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <icp20100_write_register+0x36>
    }
    return ICP20100_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <icp20100_read_burst>:
  * @param  start_reg_addr: 起始暫存器位址。
  * @param  data: 指向儲存讀取數據的緩衝區。
  * @param  len: 要讀取的位元組數。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
static ICP20100_StatusTypeDef icp20100_read_burst(I2C_HandleTypeDef *hi2c, uint8_t start_reg_addr, uint8_t *data, uint16_t len) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af04      	add	r7, sp, #16
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	72fb      	strb	r3, [r7, #11]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Read(hi2c, ICP20100_I2C_ADDR, start_reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, I2C_TIMEOUT)!= HAL_OK) {
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	b29a      	uxth	r2, r3
 8001658:	2364      	movs	r3, #100	@ 0x64
 800165a:	9302      	str	r3, [sp, #8]
 800165c:	893b      	ldrh	r3, [r7, #8]
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2301      	movs	r3, #1
 8001666:	21c6      	movs	r1, #198	@ 0xc6
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f001 fdd3 	bl	8003214 <HAL_I2C_Mem_Read>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <icp20100_read_burst+0x38>
        return ICP20100_ERROR_I2C;
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <icp20100_read_burst+0x3a>
    }
    return ICP20100_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <icp20100_init>:
  *         此為簡化版初始化，主要針對 Version B 晶片。
  *         完整的 Version A 初始化較複雜，涉及 OTP 讀取與配置，此處未完全實作。
  * @param  hi2c: I2C_HandleTypeDef 指標，指向 I2C 控制代碼。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
ICP20100_StatusTypeDef icp20100_init(I2C_HandleTypeDef *hi2c) {
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
    uint8_t device_id = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	757b      	strb	r3, [r7, #21]
    uint8_t version = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	753b      	strb	r3, [r7, #20]
    uint8_t otp_status2 = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	74fb      	strb	r3, [r7, #19]
    uint8_t mode_sync_status = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	74bb      	strb	r3, [r7, #18]

    // 1. 檢查 I2C 通訊是否正常 (嘗試讀取 DEVICE_ID)
    if (icp20100_read_register(hi2c, ICP20100_REG_DEVICE_ID, &device_id)!= ICP20100_OK) {
 800169a:	f107 0315 	add.w	r3, r7, #21
 800169e:	461a      	mov	r2, r3
 80016a0:	210c      	movs	r1, #12
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff8f 	bl	80015c6 <icp20100_read_register>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <icp20100_init+0x30>
        //printf("Error: Failed to communicate with ICP-20100.\r\n");
        return ICP20100_ERROR_I2C;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e076      	b.n	80017a0 <icp20100_init+0x11e>
    }

    // 2. 核對 DEVICE_ID
    if (device_id!= ICP20100_EXPECTED_DEVICE_ID) {
 80016b2:	7d7b      	ldrb	r3, [r7, #21]
 80016b4:	2b63      	cmp	r3, #99	@ 0x63
 80016b6:	d001      	beq.n	80016bc <icp20100_init+0x3a>
        //printf("Error: ICP-20100 Device ID mismatch. Expected 0x%02X, Got 0x%02X\r\n", ICP20100_EXPECTED_DEVICE_ID, device_id);
        return ICP20100_ERROR_ID_MISMATCH;
 80016b8:	2302      	movs	r3, #2
 80016ba:	e071      	b.n	80017a0 <icp20100_init+0x11e>
    }
    //printf("ICP-20100 Device ID: 0x%02X - OK\r\n", device_id);

    // 3. 讀取 ASIC 版本
    if (icp20100_read_register(hi2c, ICP20100_REG_VERSION, &version)!= ICP20100_OK) {
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	461a      	mov	r2, r3
 80016c2:	21d3      	movs	r1, #211	@ 0xd3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff7e 	bl	80015c6 <icp20100_read_register>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <icp20100_init+0x52>
        //printf("Error: Failed to read ICP-20100 version.\r\n");
        return ICP20100_ERROR_I2C;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e065      	b.n	80017a0 <icp20100_init+0x11e>
    // 4. 根據資料手冊 S6.5 Boot Sequence 進行簡化初始化
    //    對於 Version B (version == 0xB2)，大部分 OTP 配置已完成。
    //    對於 Version A (version == 0x00)，需要更複雜的 OTP 處理。
    //    本簡化範例假設 Version B 或 Version A 已完成 OTP boot。

    if (version == ICP20100_ASIC_VERSION_B) {
 80016d4:	7d3b      	ldrb	r3, [r7, #20]
 80016d6:	2bb2      	cmp	r3, #178	@ 0xb2
 80016d8:	d00e      	beq.n	80016f8 <icp20100_init+0x76>
        //printf("ICP-20100 Version B detected. Simplified initialization.\r\n");
        // Version B 通常不需要額外的 OTP 載入步驟
    } else if (version == 0x00) { // Version A
 80016da:	7d3b      	ldrb	r3, [r7, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10b      	bne.n	80016f8 <icp20100_init+0x76>
        //printf("ICP-20100 Version A detected. Checking BOOT_UP_STATUS.\r\n");
        // 檢查 BOOT_UP_STATUS (OTP_STATUS2)
        if (icp20100_read_register(hi2c, ICP20100_REG_OTP_STATUS2, &otp_status2)!= ICP20100_OK) {
 80016e0:	f107 0313 	add.w	r3, r7, #19
 80016e4:	461a      	mov	r2, r3
 80016e6:	21bf      	movs	r1, #191	@ 0xbf
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff6c 	bl	80015c6 <icp20100_read_register>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <icp20100_init+0x76>
            return ICP20100_ERROR_I2C;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e053      	b.n	80017a0 <icp20100_init+0x11e>
    }

    // 5. 解鎖主暫存器 (寫入任意值，然後寫入 0x00 以鎖定)
    //    根據資料手冊 S6.5，初始化序列中會操作 MASTER_LOCK。
    //    為確保可配置模式，先解鎖。
    if (icp20100_write_register(hi2c, ICP20100_REG_MASTER_LOCK, 0x01)!= ICP20100_OK) { // 寫入非0值解鎖
 80016f8:	2201      	movs	r2, #1
 80016fa:	21be      	movs	r1, #190	@ 0xbe
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff80 	bl	8001602 <icp20100_write_register>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <icp20100_init+0x8a>
         //printf("Error: Failed to unlock master registers.\r\n");
        return ICP20100_ERROR_I2C;
 8001708:	2301      	movs	r3, #1
 800170a:	e049      	b.n	80017a0 <icp20100_init+0x11e>
    }

    // 6. 等待模式同步狀態 (MODE_SYNC_STATUS in DEVICE_STATUS) 變為 1
    //    根據資料手冊 S6.6，寫入 MODE_SELECT 前，MODE_SYNC_STATUS 需為 1。
    uint8_t retry_count = 10;
 800170c:	230a      	movs	r3, #10
 800170e:	75fb      	strb	r3, [r7, #23]
    do {
        if (icp20100_read_register(hi2c, ICP20100_REG_DEVICE_STATUS, &mode_sync_status)!= ICP20100_OK) {
 8001710:	f107 0312 	add.w	r3, r7, #18
 8001714:	461a      	mov	r2, r3
 8001716:	21cd      	movs	r1, #205	@ 0xcd
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff54 	bl	80015c6 <icp20100_read_register>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <icp20100_init+0xa6>
            return ICP20100_ERROR_I2C;
 8001724:	2301      	movs	r3, #1
 8001726:	e03b      	b.n	80017a0 <icp20100_init+0x11e>
        }
        if (mode_sync_status & 0x01) break; // MODE_SYNC_STATUS is bit 0
 8001728:	7cbb      	ldrb	r3, [r7, #18]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <icp20100_init+0xc4>
        HAL_Delay(10); // 短暫延遲
 8001732:	200a      	movs	r0, #10
 8001734:	f001 f868 	bl	8002808 <HAL_Delay>
        retry_count--;
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	3b01      	subs	r3, #1
 800173c:	75fb      	strb	r3, [r7, #23]
    } while (retry_count > 0);
 800173e:	7dfb      	ldrb	r3, [r7, #23]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e5      	bne.n	8001710 <icp20100_init+0x8e>
 8001744:	e000      	b.n	8001748 <icp20100_init+0xc6>
        if (mode_sync_status & 0x01) break; // MODE_SYNC_STATUS is bit 0
 8001746:	bf00      	nop
    //    Bit  4 FORCED_MEAS_TRIGGER = 0 (N/A for continuous)
    //    Bit  3 MEAS_MODE = 1 (Continuous measurements)
    //    Bit  2 POWER_MODE = 0 (Normal mode: active during meas, else standby)
    //    Bits 1:0 FIFO_READOUT_MODE = 00 (Pressure first)
    //    Value = 0b00001000 = 0x08
    uint8_t mode_select_val = 0x08;
 8001748:	2308      	movs	r3, #8
 800174a:	75bb      	strb	r3, [r7, #22]
    if (icp20100_write_register(hi2c, ICP20100_REG_MODE_SELECT, mode_select_val)!= ICP20100_OK) {
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	461a      	mov	r2, r3
 8001750:	21c0      	movs	r1, #192	@ 0xc0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff55 	bl	8001602 <icp20100_write_register>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <icp20100_init+0xe0>
        //printf("Error: Failed to set measurement mode.\r\n");
        return ICP20100_ERROR_I2C;
 800175e:	2301      	movs	r3, #1
 8001760:	e01e      	b.n	80017a0 <icp20100_init+0x11e>
    }
   // printf("ICP-20100 set to Mode0 continuous measurement.\r\n");

    // 8. 鎖定主暫存器 (寫入 0x00)
    if (icp20100_write_register(hi2c, ICP20100_REG_MASTER_LOCK, 0x00)!= ICP20100_OK) {
 8001762:	2200      	movs	r2, #0
 8001764:	21be      	movs	r1, #190	@ 0xbe
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff4b 	bl	8001602 <icp20100_write_register>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <icp20100_init+0xf4>
        //printf("Error: Failed to lock master registers.\r\n");
        return ICP20100_ERROR_I2C;
 8001772:	2301      	movs	r3, #1
 8001774:	e014      	b.n	80017a0 <icp20100_init+0x11e>
    }

    // 延遲替代 HAL_Delay(1000)暫時解決HAL_Delay時會當掉問題
    	      for (volatile int i = 0; i < 1000; i++){
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e00c      	b.n	8001796 <icp20100_init+0x114>
    	    	  for (volatile int q = 0; q < 1000; q++);
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	e002      	b.n	8001788 <icp20100_init+0x106>
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3301      	adds	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800178e:	dbf8      	blt.n	8001782 <icp20100_init+0x100>
    	      for (volatile int i = 0; i < 1000; i++){
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800179c:	dbee      	blt.n	800177c <icp20100_init+0xfa>
    	      }
//    HAL_Delay(10); // 等待模式穩定

    return ICP20100_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <icp20100_get_pressure_temp>:
  * @param  hi2c: I2C_HandleTypeDef 指標，指向 I2C 控制代碼。
  * @param  pressure: float 指標，用於儲存讀取到的大氣壓力值 (單位: Pa)。
  * @param  temperature: float 指標，用於儲存讀取到的溫度值 (單位: Celsius)。
  * @retval ICP20100_StatusTypeDef 狀態碼。
  */
ICP20100_StatusTypeDef icp20100_get_pressure_temp(I2C_HandleTypeDef *hi2c, float *pressure, float *temperature) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
    //uint8_t raw_data; // 用於儲存壓力 (3 bytes) 和溫度 (3 bytes) 的原始數據
    uint8_t raw_data[6];// 用於儲存壓力 (3 bytes) 和溫度 (3 bytes) 的原始數據
    // 連續讀取 6 個位元組的數據 (PRESS_DATA_0 到 TEMP_DATA_2)
    // 順序：P0, P1, P2, T0, T1, T2
    if (icp20100_read_burst(hi2c, ICP20100_REG_PRESS_DATA_0, raw_data, 6)!= ICP20100_OK) {
 80017b4:	f107 0210 	add.w	r2, r7, #16
 80017b8:	2306      	movs	r3, #6
 80017ba:	21fa      	movs	r1, #250	@ 0xfa
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff ff3f 	bl	8001640 <icp20100_read_burst>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <icp20100_get_pressure_temp+0x24>
        //printf("Error: Failed to read P/T data burst.\r\n");
        return ICP20100_ERROR_I2C;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e052      	b.n	8001872 <icp20100_get_pressure_temp+0xca>
    }

    // 解析 20 位元壓力數據 (二補數)
    // P_OUT[19:0] = {PRESS_DATA_2[3:0], PRESS_DATA_1[7:0], PRESS_DATA_0[7:0]}
    // 假設 raw_data 順序: raw_data[0]=P0, raw_data[1]=P1, raw_data[2]=P2_MSB(含P2[3:0])
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 80017cc:	7cbb      	ldrb	r3, [r7, #18]
 80017ce:	041b      	lsls	r3, r3, #16
 80017d0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                        ((int32_t)raw_data[1] << 8) | \
 80017d4:	7c7b      	ldrb	r3, [r7, #17]
 80017d6:	021b      	lsls	r3, r3, #8
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 80017d8:	4313      	orrs	r3, r2
                        ((int32_t)raw_data[0]);
 80017da:	7c3a      	ldrb	r2, [r7, #16]
    int32_t p_out_raw = ((int32_t)(raw_data[2] & 0x0F) << 16) | \
 80017dc:	4313      	orrs	r3, r2
 80017de:	61fb      	str	r3, [r7, #28]

    // 符號擴展 (如果第 20 位元為 1，則為負數)
    if (p_out_raw & (1 << 19)) {
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <icp20100_get_pressure_temp+0x4a>
        p_out_raw |= ~((1 << 20) - 1); // 將高位置為 1 以進行符號擴展
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	4b23      	ldr	r3, [pc, #140]	@ (800187c <icp20100_get_pressure_temp+0xd4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61fb      	str	r3, [r7, #28]
    }

    // 解析 20 位元溫度數據 (二補數)
    // T_OUT[19:0] = {TEMP_DATA_2[3:0], TEMP_DATA_1[7:0], TEMP_DATA_0[7:0]}
    // 假設 raw_data 順序: raw_data[3]=T0, raw_data[4]=T1, raw_data[5]=T2_MSB(含T2[3:0])
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 80017f2:	7d7b      	ldrb	r3, [r7, #21]
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
                        ((int32_t)raw_data[4] << 8) | \
 80017fa:	7d3b      	ldrb	r3, [r7, #20]
 80017fc:	021b      	lsls	r3, r3, #8
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 80017fe:	4313      	orrs	r3, r2
                        ((int32_t)raw_data[3]);
 8001800:	7cfa      	ldrb	r2, [r7, #19]
    int32_t t_out_raw = ((int32_t)(raw_data[5] & 0x0F) << 16) | \
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]

    // 符號擴展
    if (t_out_raw & (1 << 19)) {
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <icp20100_get_pressure_temp+0x70>
        t_out_raw |= ~((1 << 20) - 1);
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <icp20100_get_pressure_temp+0xd4>)
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
    }

    // 轉換為實際物理值
    // 壓力轉換公式: P_Pa = * 1000
    *pressure = ((((float)p_out_raw / (float)(1 << 17)) * 40.0f) + 70.0f) * 1000.0f;
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001822:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001880 <icp20100_get_pressure_temp+0xd8>
 8001826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001884 <icp20100_get_pressure_temp+0xdc>
 800182e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001832:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001888 <icp20100_get_pressure_temp+0xe0>
 8001836:	ee77 7a87 	vadd.f32	s15, s15, s14
 800183a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800188c <icp20100_get_pressure_temp+0xe4>
 800183e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	edc3 7a00 	vstr	s15, [r3]

    // 溫度轉換公式: T_C = (T_OUT / 2^18) * 65 + 25
    *temperature = (((float)t_out_raw / (float)(1 << 18)) * 65.0f) + 25.0f;
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001852:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001890 <icp20100_get_pressure_temp+0xe8>
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001894 <icp20100_get_pressure_temp+0xec>
 800185e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001862:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001866:	ee77 7a87 	vadd.f32	s15, s15, s14
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	edc3 7a00 	vstr	s15, [r3]

    return ICP20100_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	fff00000 	.word	0xfff00000
 8001880:	48000000 	.word	0x48000000
 8001884:	42200000 	.word	0x42200000
 8001888:	428c0000 	.word	0x428c0000
 800188c:	447a0000 	.word	0x447a0000
 8001890:	48800000 	.word	0x48800000
 8001894:	42820000 	.word	0x42820000

08001898 <ICP20100_Main>:
void ICP20100_Main(I2C_HandleTypeDef *hi2c){
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]

	float pressure, temperature;
	ICP20100_StatusTypeDef sensor_status;
	  // 讀取壓力與溫度數據
	  sensor_status = icp20100_get_pressure_temp(hi2c, &pressure, &temperature);
 80018a0:	f107 020c 	add.w	r2, r7, #12
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff7c 	bl	80017a8 <icp20100_get_pressure_temp>
 80018b0:	4603      	mov	r3, r0
 80018b2:	75fb      	strb	r3, [r7, #23]

	  if (sensor_status == ICP20100_OK) {
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10e      	bne.n	80018d8 <ICP20100_Main+0x40>
		// 透過 printf 輸出數據
		// 使用者已實作 _write，printf 應能正常工作
		printf("Pressure: %.2f Pa, Temperature: %.2f C\r\n", pressure, temperature);
 80018ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80018be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ca:	ed8d 7b00 	vstr	d7, [sp]
 80018ce:	ec53 2b16 	vmov	r2, r3, d6
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <ICP20100_Main+0x50>)
 80018d4:	f006 f9ae 	bl	8007c34 <iprintf>
	  }
	  // 延遲替代 HAL_Delay(1000)暫時解決HAL_Delay時會當掉問題
//		  for (volatile int i = 0; i < 1000; i++){
//			  for (volatile int q = 0; q < 1000; q++);
//		  }
	  HAL_Delay(100);
 80018d8:	2064      	movs	r0, #100	@ 0x64
 80018da:	f000 ff95 	bl	8002808 <HAL_Delay>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	0800b690 	.word	0x0800b690

080018ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001904:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001908:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800190c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001914:	e000      	b.n	8001918 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001916:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001918:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f9      	beq.n	8001916 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001922:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001942:	f000 fb31 	bl	8001fa8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001946:	f000 fecd 	bl	80026e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194a:	f000 f8bd 	bl	8001ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194e:	f000 fa27 	bl	8001da0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001952:	f000 f975 	bl	8001c40 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001956:	f000 f933 	bl	8001bc0 <MX_I2C2_Init>
  MX_SPI2_Init();
 800195a:	f000 f9c9 	bl	8001cf0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
//  int WWE = 0;
  	// Initialize ICM-20948
  	  printf("ICM-20948 System initialization...\r\n");
 800195e:	4847      	ldr	r0, [pc, #284]	@ (8001a7c <main+0x140>)
 8001960:	f006 f9d0 	bl	8007d04 <puts>
  	if (ICM20948_Init() == HAL_OK) {
 8001964:	f7ff f88a 	bl	8000a7c <ICM20948_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d103      	bne.n	8001976 <main+0x3a>
  	  printf("ICM-20948 Initialization Successfully\r\n");
 800196e:	4844      	ldr	r0, [pc, #272]	@ (8001a80 <main+0x144>)
 8001970:	f006 f9c8 	bl	8007d04 <puts>
 8001974:	e004      	b.n	8001980 <main+0x44>
  	} else {
  	  printf("ICM-20948 Initialization FAILED\r\n");
 8001976:	4843      	ldr	r0, [pc, #268]	@ (8001a84 <main+0x148>)
 8001978:	f006 f9c4 	bl	8007d04 <puts>
  	  Error_Handler();
 800197c:	f000 fb40 	bl	8002000 <Error_Handler>
  	}
  	HAL_Delay(1000);
 8001980:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001984:	f000 ff40 	bl	8002808 <HAL_Delay>
  	// 初始化 ICP-20100 感測器
  	printf("ICP-20100 System initialization...\r\n");
 8001988:	483f      	ldr	r0, [pc, #252]	@ (8001a88 <main+0x14c>)
 800198a:	f006 f9bb 	bl	8007d04 <puts>
	ICP20100_StatusTypeDef sensor_status = icp20100_init(&hi2c2);
 800198e:	483f      	ldr	r0, [pc, #252]	@ (8001a8c <main+0x150>)
 8001990:	f7ff fe77 	bl	8001682 <icp20100_init>
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
	if (sensor_status == ICP20100_OK) {
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <main+0x7c>
	  printf("ICP-20100 Initialized Successfully.\r\n");
 800199e:	483c      	ldr	r0, [pc, #240]	@ (8001a90 <main+0x154>)
 80019a0:	f006 f9b0 	bl	8007d04 <puts>
	  while(1) {
		  // 錯誤狀態
	  }
	}
	/* Initialize ICM-42688-P sensor */
	  printf("ICM-42688-P System initialization...\r\n");
 80019a4:	483b      	ldr	r0, [pc, #236]	@ (8001a94 <main+0x158>)
 80019a6:	f006 f9ad 	bl	8007d04 <puts>
	if (icm42688p_init(&hspi2)) {
 80019aa:	483b      	ldr	r0, [pc, #236]	@ (8001a98 <main+0x15c>)
 80019ac:	f7ff fcda 	bl	8001364 <icm42688p_init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00b      	beq.n	80019ce <main+0x92>
 80019b6:	e006      	b.n	80019c6 <main+0x8a>
	  printf("ICP-20100 Initialization Failed. Error Code: %d\r\n", sensor_status);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4837      	ldr	r0, [pc, #220]	@ (8001a9c <main+0x160>)
 80019be:	f006 f939 	bl	8007c34 <iprintf>
	  while(1) {
 80019c2:	bf00      	nop
 80019c4:	e7fd      	b.n	80019c2 <main+0x86>
	  // 初始化成功信息已在 icm42688p_init 內部（或此處）打印
	  printf("ICM-42688-P initialization Successfully.\r\n");
 80019c6:	4836      	ldr	r0, [pc, #216]	@ (8001aa0 <main+0x164>)
 80019c8:	f006 f99c 	bl	8007d04 <puts>
 80019cc:	e006      	b.n	80019dc <main+0xa0>
	} else {
	  printf("ICM-42688-P  Initialization failed Check your connection or configuration.\r\n");
 80019ce:	4835      	ldr	r0, [pc, #212]	@ (8001aa4 <main+0x168>)
 80019d0:	f006 f998 	bl	8007d04 <puts>
	  // 可以在此處加入錯誤處理邏輯，例如進入無限迴圈
	  while(1) {
		  // 錯誤狀態，閃爍 LED 或其他指示
//    	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); // 假設 LD1 已配置
		  HAL_Delay(200);
 80019d4:	20c8      	movs	r0, #200	@ 0xc8
 80019d6:	f000 ff17 	bl	8002808 <HAL_Delay>
 80019da:	e7fb      	b.n	80019d4 <main+0x98>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("ICM20948 \n");
 80019dc:	4832      	ldr	r0, [pc, #200]	@ (8001aa8 <main+0x16c>)
 80019de:	f006 f991 	bl	8007d04 <puts>
	  ICM20948_Main();
 80019e2:	f7ff fb83 	bl	80010ec <ICM20948_Main>
	  HAL_Delay(1000);
 80019e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ea:	f000 ff0d 	bl	8002808 <HAL_Delay>
	  printf("ICP20100 \n");
 80019ee:	482f      	ldr	r0, [pc, #188]	@ (8001aac <main+0x170>)
 80019f0:	f006 f988 	bl	8007d04 <puts>
	  ICP20100_Main(&hi2c2);
 80019f4:	4825      	ldr	r0, [pc, #148]	@ (8001a8c <main+0x150>)
 80019f6:	f7ff ff4f 	bl	8001898 <ICP20100_Main>
	  HAL_Delay(1000);
 80019fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019fe:	f000 ff03 	bl	8002808 <HAL_Delay>
	  // 讀取加速計原始數據
	  icm42688p_read_accel_raw(&hspi2, accel_data);
 8001a02:	492b      	ldr	r1, [pc, #172]	@ (8001ab0 <main+0x174>)
 8001a04:	4824      	ldr	r0, [pc, #144]	@ (8001a98 <main+0x15c>)
 8001a06:	f7ff fd8a 	bl	800151e <icm42688p_read_accel_raw>
	  // 讀取陀螺儀原始數據
	  icm42688p_read_gyro_raw(&hspi2, gyro_data);
 8001a0a:	492a      	ldr	r1, [pc, #168]	@ (8001ab4 <main+0x178>)
 8001a0c:	4822      	ldr	r0, [pc, #136]	@ (8001a98 <main+0x15c>)
 8001a0e:	f7ff fd32 	bl	8001476 <icm42688p_read_gyro_raw>
	  // 透過 printf 輸出數據 (繁體中文標籤)
	  // 確保 accel_data 和 gyro_data 陣列的索引正確 (0=X, 1=Y, 2=Z)
	  printf("icm42688p \n");
 8001a12:	4829      	ldr	r0, [pc, #164]	@ (8001ab8 <main+0x17c>)
 8001a14:	f006 f976 	bl	8007d04 <puts>
	  printf("accel_data: X=%6d, Y=%6d, Z=%6d\r\n", accel_data[0], accel_data[1], accel_data[2]);
 8001a18:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <main+0x174>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <main+0x174>)
 8001a22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <main+0x174>)
 8001a2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a2e:	4823      	ldr	r0, [pc, #140]	@ (8001abc <main+0x180>)
 8001a30:	f006 f900 	bl	8007c34 <iprintf>
	  printf("gyro_data: X=%6d, Y=%6d, Z=%6d\r\n\r\n", gyro_data[0], gyro_data[1], gyro_data[2]);
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <main+0x178>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <main+0x178>)
 8001a3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <main+0x178>)
 8001a46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a4a:	481d      	ldr	r0, [pc, #116]	@ (8001ac0 <main+0x184>)
 8001a4c:	f006 f8f2 	bl	8007c34 <iprintf>
	  HAL_Delay(1000);
 8001a50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a54:	f000 fed8 	bl	8002808 <HAL_Delay>
	 // <<< 新增：呼叫封裝好的函數 >>>
	 //ICM42688P_Main(&hspi2); // <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 新增這一行

	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	4819      	ldr	r0, [pc, #100]	@ (8001ac4 <main+0x188>)
 8001a5e:	f001 fa0f 	bl	8002e80 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001a62:	2064      	movs	r0, #100	@ 0x64
 8001a64:	f000 fed0 	bl	8002808 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4815      	ldr	r0, [pc, #84]	@ (8001ac4 <main+0x188>)
 8001a6e:	f001 fa07 	bl	8002e80 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001a72:	2064      	movs	r0, #100	@ 0x64
 8001a74:	f000 fec8 	bl	8002808 <HAL_Delay>
  {
 8001a78:	e7b0      	b.n	80019dc <main+0xa0>
 8001a7a:	bf00      	nop
 8001a7c:	0800b6bc 	.word	0x0800b6bc
 8001a80:	0800b6e0 	.word	0x0800b6e0
 8001a84:	0800b708 	.word	0x0800b708
 8001a88:	0800b72c 	.word	0x0800b72c
 8001a8c:	24000238 	.word	0x24000238
 8001a90:	0800b750 	.word	0x0800b750
 8001a94:	0800b7ac 	.word	0x0800b7ac
 8001a98:	24000314 	.word	0x24000314
 8001a9c:	0800b778 	.word	0x0800b778
 8001aa0:	0800b7d4 	.word	0x0800b7d4
 8001aa4:	0800b800 	.word	0x0800b800
 8001aa8:	0800b84c 	.word	0x0800b84c
 8001aac:	0800b858 	.word	0x0800b858
 8001ab0:	2400039c 	.word	0x2400039c
 8001ab4:	240003a4 	.word	0x240003a4
 8001ab8:	0800b864 	.word	0x0800b864
 8001abc:	0800b870 	.word	0x0800b870
 8001ac0:	0800b894 	.word	0x0800b894
 8001ac4:	58021000 	.word	0x58021000

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b09c      	sub	sp, #112	@ 0x70
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad2:	224c      	movs	r2, #76	@ 0x4c
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f006 fa16 	bl	8007f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2220      	movs	r2, #32
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fa10 	bl	8007f08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f002 f807 	bl	8003afc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4b31      	ldr	r3, [pc, #196]	@ (8001bb8 <SystemClock_Config+0xf0>)
 8001af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af6:	4a30      	ldr	r2, [pc, #192]	@ (8001bb8 <SystemClock_Config+0xf0>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001afe:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb8 <SystemClock_Config+0xf0>)
 8001b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <SystemClock_Config+0xf4>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b10:	4a2a      	ldr	r2, [pc, #168]	@ (8001bbc <SystemClock_Config+0xf4>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b28      	ldr	r3, [pc, #160]	@ (8001bbc <SystemClock_Config+0xf4>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b24:	bf00      	nop
 8001b26:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <SystemClock_Config+0xf4>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b32:	d1f8      	bne.n	8001b26 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b34:	2302      	movs	r3, #2
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b40:	2302      	movs	r3, #2
 8001b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b44:	2300      	movs	r3, #0
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b4c:	230a      	movs	r3, #10
 8001b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b50:	2302      	movs	r3, #2
 8001b52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001b60:	2302      	movs	r3, #2
 8001b62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 ffff 	bl	8003b70 <HAL_RCC_OscConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b78:	f000 fa42 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7c:	233f      	movs	r3, #63	@ 0x3f
 8001b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b90:	2340      	movs	r3, #64	@ 0x40
 8001b92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fc3f 	bl	8004424 <HAL_RCC_ClockConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001bac:	f000 fa28 	bl	8002000 <Error_Handler>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3770      	adds	r7, #112	@ 0x70
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	58000400 	.word	0x58000400
 8001bbc:	58024800 	.word	0x58024800

08001bc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c38 <MX_I2C2_Init+0x78>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c3c <MX_I2C2_Init+0x7c>)
 8001bce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bdc:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001be2:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001be8:	4b12      	ldr	r3, [pc, #72]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bfa:	480e      	ldr	r0, [pc, #56]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001bfc:	f001 f95a 	bl	8002eb4 <HAL_I2C_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c06:	f000 f9fb 	bl	8002000 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001c0e:	f001 fedd 	bl	80039cc <HAL_I2CEx_ConfigAnalogFilter>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c18:	f000 f9f2 	bl	8002000 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_I2C2_Init+0x74>)
 8001c20:	f001 ff1f 	bl	8003a62 <HAL_I2CEx_ConfigDigitalFilter>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c2a:	f000 f9e9 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	24000238 	.word	0x24000238
 8001c38:	40005800 	.word	0x40005800
 8001c3c:	00707cbb 	.word	0x00707cbb

08001c40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c44:	4b28      	ldr	r3, [pc, #160]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c46:	4a29      	ldr	r2, [pc, #164]	@ (8001cec <MX_SPI1_Init+0xac>)
 8001c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c4c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c52:	4b25      	ldr	r3, [pc, #148]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c58:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c66:	4b20      	ldr	r3, [pc, #128]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c70:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001c98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <MX_SPI1_Init+0xa8>)
 8001cd6:	f004 fa43 	bl	8006160 <HAL_SPI_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001ce0:	f000 f98e 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2400028c 	.word	0x2400028c
 8001cec:	40013000 	.word	0x40013000

08001cf0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cf4:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001cf6:	4a29      	ldr	r2, [pc, #164]	@ (8001d9c <MX_SPI2_Init+0xac>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cfa:	4b27      	ldr	r3, [pc, #156]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001cfc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d00:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d02:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d14:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d26:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001d2c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001d40:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d54:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d84:	4804      	ldr	r0, [pc, #16]	@ (8001d98 <MX_SPI2_Init+0xa8>)
 8001d86:	f004 f9eb 	bl	8006160 <HAL_SPI_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001d90:	f000 f936 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	24000314 	.word	0x24000314
 8001d9c:	40003800 	.word	0x40003800

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	@ 0x30
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001db6:	4b67      	ldr	r3, [pc, #412]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbc:	4a65      	ldr	r2, [pc, #404]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
 8001dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc6:	4b63      	ldr	r3, [pc, #396]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dda:	4a5e      	ldr	r2, [pc, #376]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de4:	4b5b      	ldr	r3, [pc, #364]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b58      	ldr	r3, [pc, #352]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001df8:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e02:	4b54      	ldr	r3, [pc, #336]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e10:	4b50      	ldr	r3, [pc, #320]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e16:	4a4f      	ldr	r2, [pc, #316]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e20:	4b4c      	ldr	r3, [pc, #304]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2e:	4b49      	ldr	r3, [pc, #292]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e34:	4a47      	ldr	r2, [pc, #284]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e3e:	4b45      	ldr	r3, [pc, #276]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4c:	4b41      	ldr	r3, [pc, #260]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e52:	4a40      	ldr	r2, [pc, #256]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e70:	4a38      	ldr	r2, [pc, #224]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e72:	f043 0310 	orr.w	r3, r3, #16
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e7a:	4b36      	ldr	r3, [pc, #216]	@ (8001f54 <MX_GPIO_Init+0x1b4>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NCS1_ICM42688P_GPIO_Port, SPI2_NCS1_ICM42688P_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e8e:	4832      	ldr	r0, [pc, #200]	@ (8001f58 <MX_GPIO_Init+0x1b8>)
 8001e90:	f000 fff6 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM20948_CS_GPIO_Port, ICM20948_CS_Pin, GPIO_PIN_SET);
 8001e94:	2201      	movs	r2, #1
 8001e96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e9a:	4830      	ldr	r0, [pc, #192]	@ (8001f5c <MX_GPIO_Init+0x1bc>)
 8001e9c:	f000 fff0 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	482e      	ldr	r0, [pc, #184]	@ (8001f60 <MX_GPIO_Init+0x1c0>)
 8001ea6:	f000 ffeb 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ICM20948_DRDY_Pin */
  GPIO_InitStruct.Pin = ICM20948_DRDY_Pin;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICM20948_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4829      	ldr	r0, [pc, #164]	@ (8001f64 <MX_GPIO_Init+0x1c4>)
 8001ebe:	f000 fe2f 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NCS1_ICM42688P_Pin */
  GPIO_InitStruct.Pin = SPI2_NCS1_ICM42688P_Pin;
 8001ec2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI2_NCS1_ICM42688P_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	481f      	ldr	r0, [pc, #124]	@ (8001f58 <MX_GPIO_Init+0x1b8>)
 8001edc:	f000 fe20 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ICM20948_CS_Pin */
  GPIO_InitStruct.Pin = ICM20948_CS_Pin;
 8001ee0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ICM20948_CS_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 031c 	add.w	r3, r7, #28
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4818      	ldr	r0, [pc, #96]	@ (8001f5c <MX_GPIO_Init+0x1bc>)
 8001efa:	f000 fe11 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ICP20100_DRDY_Pin */
  GPIO_InitStruct.Pin = ICP20100_DRDY_Pin;
 8001efe:	2320      	movs	r3, #32
 8001f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ICP20100_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4815      	ldr	r0, [pc, #84]	@ (8001f68 <MX_GPIO_Init+0x1c8>)
 8001f12:	f000 fe05 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_INT2_ICM42688P_Pin */
  GPIO_InitStruct.Pin = DRDY_INT2_ICM42688P_Pin;
 8001f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DRDY_INT2_ICM42688P_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4810      	ldr	r0, [pc, #64]	@ (8001f6c <MX_GPIO_Init+0x1cc>)
 8001f2c:	f000 fdf8 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <MX_GPIO_Init+0x1c0>)
 8001f48:	f000 fdea 	bl	8002b20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f4c:	bf00      	nop
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58020400 	.word	0x58020400
 8001f5c:	58020c00 	.word	0x58020c00
 8001f60:	58021000 	.word	0x58021000
 8001f64:	58021400 	.word	0x58021400
 8001f68:	58021800 	.word	0x58021800
 8001f6c:	58020000 	.word	0x58020000

08001f70 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e009      	b.n	8001f96 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	60ba      	str	r2, [r7, #8]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fcae 	bl	80018ec <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dbf1      	blt.n	8001f82 <_write+0x12>
  }
  return len;
 8001f9e:	687b      	ldr	r3, [r7, #4]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001fba:	f000 fd39 	bl	8002a30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001fca:	231f      	movs	r3, #31
 8001fcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001fce:	2387      	movs	r3, #135	@ 0x87
 8001fd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fea:	463b      	mov	r3, r7
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fd57 	bl	8002aa0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ff2:	2004      	movs	r0, #4
 8001ff4:	f000 fd34 	bl	8002a60 <HAL_MPU_Enable>

}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <Error_Handler+0x8>

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_MspInit+0x30>)
 8002014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002018:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_MspInit+0x30>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_MspInit+0x30>)
 8002024:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	58024400 	.word	0x58024400

08002040 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b0ba      	sub	sp, #232	@ 0xe8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	22c0      	movs	r2, #192	@ 0xc0
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f005 ff51 	bl	8007f08 <memset>
  if(hi2c->Instance==I2C2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a26      	ldr	r2, [pc, #152]	@ (8002104 <HAL_I2C_MspInit+0xc4>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d145      	bne.n	80020fc <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002070:	f04f 0208 	mov.w	r2, #8
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	4618      	mov	r0, r3
 8002088:	f002 fcfc 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002092:	f7ff ffb5 	bl	8002000 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002096:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <HAL_I2C_MspInit+0xc8>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800209c:	4a1a      	ldr	r2, [pc, #104]	@ (8002108 <HAL_I2C_MspInit+0xc8>)
 800209e:	f043 0320 	orr.w	r3, r3, #32
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020a6:	4b18      	ldr	r3, [pc, #96]	@ (8002108 <HAL_I2C_MspInit+0xc8>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = ICP20100_SDA_Pin|ICP20100_SCL_Pin;
 80020b4:	2303      	movs	r3, #3
 80020b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ba:	2312      	movs	r3, #18
 80020bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c6:	2302      	movs	r3, #2
 80020c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020cc:	2304      	movs	r3, #4
 80020ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020d6:	4619      	mov	r1, r3
 80020d8:	480c      	ldr	r0, [pc, #48]	@ (800210c <HAL_I2C_MspInit+0xcc>)
 80020da:	f000 fd21 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <HAL_I2C_MspInit+0xc8>)
 80020e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020e4:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <HAL_I2C_MspInit+0xc8>)
 80020e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_I2C_MspInit+0xc8>)
 80020f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80020fc:	bf00      	nop
 80020fe:	37e8      	adds	r7, #232	@ 0xe8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40005800 	.word	0x40005800
 8002108:	58024400 	.word	0x58024400
 800210c:	58021400 	.word	0x58021400

08002110 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0c0      	sub	sp, #256	@ 0x100
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800212c:	22c0      	movs	r2, #192	@ 0xc0
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f005 fee9 	bl	8007f08 <memset>
  if(hspi->Instance==SPI1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a84      	ldr	r2, [pc, #528]	@ (800234c <HAL_SPI_MspInit+0x23c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	f040 8090 	bne.w	8002262 <HAL_SPI_MspInit+0x152>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002142:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002154:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fc93 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002164:	f7ff ff4c 	bl	8002000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002168:	4b79      	ldr	r3, [pc, #484]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800216a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800216e:	4a78      	ldr	r2, [pc, #480]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002170:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002174:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800217a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800217e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800218c:	4a70      	ldr	r2, [pc, #448]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002196:	4b6e      	ldr	r3, [pc, #440]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021aa:	4a69      	ldr	r2, [pc, #420]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b4:	4b66      	ldr	r3, [pc, #408]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b63      	ldr	r3, [pc, #396]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c8:	4a61      	ldr	r2, [pc, #388]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d2:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80021d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ICM20948_SCK_Pin;
 80021e0:	2320      	movs	r3, #32
 80021e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021f8:	2305      	movs	r3, #5
 80021fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(ICM20948_SCK_GPIO_Port, &GPIO_InitStruct);
 80021fe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002202:	4619      	mov	r1, r3
 8002204:	4853      	ldr	r0, [pc, #332]	@ (8002354 <HAL_SPI_MspInit+0x244>)
 8002206:	f000 fc8b 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MISO_Pin;
 800220a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800220e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002224:	2305      	movs	r3, #5
 8002226:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(ICM20948_MISO_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800222e:	4619      	mov	r1, r3
 8002230:	4849      	ldr	r0, [pc, #292]	@ (8002358 <HAL_SPI_MspInit+0x248>)
 8002232:	f000 fc75 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ICM20948_MOSI_Pin;
 8002236:	2320      	movs	r3, #32
 8002238:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224e:	2305      	movs	r3, #5
 8002250:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(ICM20948_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002258:	4619      	mov	r1, r3
 800225a:	4840      	ldr	r0, [pc, #256]	@ (800235c <HAL_SPI_MspInit+0x24c>)
 800225c:	f000 fc60 	bl	8002b20 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002260:	e06f      	b.n	8002342 <HAL_SPI_MspInit+0x232>
  else if(hspi->Instance==SPI2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a3e      	ldr	r2, [pc, #248]	@ (8002360 <HAL_SPI_MspInit+0x250>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d16a      	bne.n	8002342 <HAL_SPI_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800226c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002278:	2300      	movs	r3, #0
 800227a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002282:	4618      	mov	r0, r3
 8002284:	f002 fbfe 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_SPI_MspInit+0x182>
      Error_Handler();
 800228e:	f7ff feb7 	bl	8002000 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002292:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 8002294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002298:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 800229a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800229e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b0:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022b6:	4a26      	ldr	r2, [pc, #152]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c0:	4b23      	ldr	r3, [pc, #140]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	4b20      	ldr	r3, [pc, #128]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022de:	4b1c      	ldr	r3, [pc, #112]	@ (8002350 <HAL_SPI_MspInit+0x240>)
 80022e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_ICM_Pin|SPI2_MOSI_ICM_Pin;
 80022ec:	230c      	movs	r3, #12
 80022ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fe:	2302      	movs	r3, #2
 8002300:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002304:	2305      	movs	r3, #5
 8002306:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800230a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800230e:	4619      	mov	r1, r3
 8002310:	4814      	ldr	r0, [pc, #80]	@ (8002364 <HAL_SPI_MspInit+0x254>)
 8002312:	f000 fc05 	bl	8002b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_SCK_ICM_Pin;
 8002316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800231a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002330:	2305      	movs	r3, #5
 8002332:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(SPI2_SCK_ICM_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800233a:	4619      	mov	r1, r3
 800233c:	4805      	ldr	r0, [pc, #20]	@ (8002354 <HAL_SPI_MspInit+0x244>)
 800233e:	f000 fbef 	bl	8002b20 <HAL_GPIO_Init>
}
 8002342:	bf00      	nop
 8002344:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40013000 	.word	0x40013000
 8002350:	58024400 	.word	0x58024400
 8002354:	58020000 	.word	0x58020000
 8002358:	58021800 	.word	0x58021800
 800235c:	58020400 	.word	0x58020400
 8002360:	40003800 	.word	0x40003800
 8002364:	58020800 	.word	0x58020800

08002368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <NMI_Handler+0x4>

08002370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <MemManage_Handler+0x4>

08002380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <UsageFault_Handler+0x4>

08002390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023be:	f000 fa03 	bl	80027c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  return 1;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_kill>:

int _kill(int pid, int sig)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e0:	f005 fde4 	bl	8007fac <__errno>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2216      	movs	r2, #22
 80023e8:	601a      	str	r2, [r3, #0]
  return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_exit>:

void _exit (int status)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffe7 	bl	80023d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <_exit+0x12>

0800240c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	e00a      	b.n	8002434 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800241e:	f3af 8000 	nop.w
 8002422:	4601      	mov	r1, r0
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	60ba      	str	r2, [r7, #8]
 800242a:	b2ca      	uxtb	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbf0      	blt.n	800241e <_read+0x12>
  }

  return len;
 800243c:	687b      	ldr	r3, [r7, #4]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800246e:	605a      	str	r2, [r3, #4]
  return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_isatty>:

int _isatty(int file)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b8:	4a14      	ldr	r2, [pc, #80]	@ (800250c <_sbrk+0x5c>)
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <_sbrk+0x60>)
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <_sbrk+0x64>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <_sbrk+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e0:	f005 fd64 	bl	8007fac <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	220c      	movs	r2, #12
 80024e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	e009      	b.n	8002504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f6:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <_sbrk+0x64>)
 8002500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	24080000 	.word	0x24080000
 8002510:	00000f00 	.word	0x00000f00
 8002514:	240003ac 	.word	0x240003ac
 8002518:	24000500 	.word	0x24000500

0800251c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002520:	4b43      	ldr	r3, [pc, #268]	@ (8002630 <SystemInit+0x114>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <SystemInit+0x114>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002530:	4b40      	ldr	r3, [pc, #256]	@ (8002634 <SystemInit+0x118>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	2b06      	cmp	r3, #6
 800253a:	d807      	bhi.n	800254c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800253c:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <SystemInit+0x118>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 030f 	bic.w	r3, r3, #15
 8002544:	4a3b      	ldr	r2, [pc, #236]	@ (8002634 <SystemInit+0x118>)
 8002546:	f043 0307 	orr.w	r3, r3, #7
 800254a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800254c:	4b3a      	ldr	r3, [pc, #232]	@ (8002638 <SystemInit+0x11c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a39      	ldr	r2, [pc, #228]	@ (8002638 <SystemInit+0x11c>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002558:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <SystemInit+0x11c>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800255e:	4b36      	ldr	r3, [pc, #216]	@ (8002638 <SystemInit+0x11c>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4935      	ldr	r1, [pc, #212]	@ (8002638 <SystemInit+0x11c>)
 8002564:	4b35      	ldr	r3, [pc, #212]	@ (800263c <SystemInit+0x120>)
 8002566:	4013      	ands	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800256a:	4b32      	ldr	r3, [pc, #200]	@ (8002634 <SystemInit+0x118>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002576:	4b2f      	ldr	r3, [pc, #188]	@ (8002634 <SystemInit+0x118>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f023 030f 	bic.w	r3, r3, #15
 800257e:	4a2d      	ldr	r2, [pc, #180]	@ (8002634 <SystemInit+0x118>)
 8002580:	f043 0307 	orr.w	r3, r3, #7
 8002584:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002586:	4b2c      	ldr	r3, [pc, #176]	@ (8002638 <SystemInit+0x11c>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800258c:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <SystemInit+0x11c>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002592:	4b29      	ldr	r3, [pc, #164]	@ (8002638 <SystemInit+0x11c>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002598:	4b27      	ldr	r3, [pc, #156]	@ (8002638 <SystemInit+0x11c>)
 800259a:	4a29      	ldr	r2, [pc, #164]	@ (8002640 <SystemInit+0x124>)
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800259e:	4b26      	ldr	r3, [pc, #152]	@ (8002638 <SystemInit+0x11c>)
 80025a0:	4a28      	ldr	r2, [pc, #160]	@ (8002644 <SystemInit+0x128>)
 80025a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025a4:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <SystemInit+0x11c>)
 80025a6:	4a28      	ldr	r2, [pc, #160]	@ (8002648 <SystemInit+0x12c>)
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025aa:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <SystemInit+0x11c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025b0:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <SystemInit+0x11c>)
 80025b2:	4a25      	ldr	r2, [pc, #148]	@ (8002648 <SystemInit+0x12c>)
 80025b4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025b6:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <SystemInit+0x11c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002638 <SystemInit+0x11c>)
 80025be:	4a22      	ldr	r2, [pc, #136]	@ (8002648 <SystemInit+0x12c>)
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <SystemInit+0x11c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <SystemInit+0x11c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002638 <SystemInit+0x11c>)
 80025ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025d4:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <SystemInit+0x11c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <SystemInit+0x130>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <SystemInit+0x134>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e6:	d202      	bcs.n	80025ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <SystemInit+0x138>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <SystemInit+0x11c>)
 80025f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d113      	bne.n	8002624 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <SystemInit+0x11c>)
 80025fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002602:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <SystemInit+0x11c>)
 8002604:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002608:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <SystemInit+0x13c>)
 800260e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002612:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <SystemInit+0x11c>)
 8002616:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800261a:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <SystemInit+0x11c>)
 800261c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002620:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00
 8002634:	52002000 	.word	0x52002000
 8002638:	58024400 	.word	0x58024400
 800263c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002640:	02020200 	.word	0x02020200
 8002644:	01ff0000 	.word	0x01ff0000
 8002648:	01010280 	.word	0x01010280
 800264c:	5c001000 	.word	0x5c001000
 8002650:	ffff0000 	.word	0xffff0000
 8002654:	51008108 	.word	0x51008108
 8002658:	52004000 	.word	0x52004000

0800265c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <ExitRun0Mode+0x2c>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a08      	ldr	r2, [pc, #32]	@ (8002688 <ExitRun0Mode+0x2c>)
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800266c:	bf00      	nop
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <ExitRun0Mode+0x2c>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f9      	beq.n	800266e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	58024800 	.word	0x58024800

0800268c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800268c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80026c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002690:	f7ff ffe4 	bl	800265c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002694:	f7ff ff42 	bl	800251c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002698:	480c      	ldr	r0, [pc, #48]	@ (80026cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800269a:	490d      	ldr	r1, [pc, #52]	@ (80026d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b0:	4c0a      	ldr	r4, [pc, #40]	@ (80026dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026be:	f005 fc7b 	bl	8007fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c2:	f7ff f93b 	bl	800193c <main>
  bx  lr
 80026c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80026cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026d0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80026d4:	0800bd04 	.word	0x0800bd04
  ldr r2, =_sbss
 80026d8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80026dc:	24000500 	.word	0x24000500

080026e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <ADC3_IRQHandler>
	...

080026e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ea:	2003      	movs	r0, #3
 80026ec:	f000 f96e 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026f0:	f002 f84e 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <HAL_Init+0x68>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	4913      	ldr	r1, [pc, #76]	@ (8002750 <HAL_Init+0x6c>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
 800270c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800270e:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <HAL_Init+0x68>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	4a0e      	ldr	r2, [pc, #56]	@ (8002750 <HAL_Init+0x6c>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
 8002724:	4a0b      	ldr	r2, [pc, #44]	@ (8002754 <HAL_Init+0x70>)
 8002726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002728:	4a0b      	ldr	r2, [pc, #44]	@ (8002758 <HAL_Init+0x74>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800272e:	200f      	movs	r0, #15
 8002730:	f000 f814 	bl	800275c <HAL_InitTick>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e002      	b.n	8002744 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800273e:	f7ff fc65 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400
 8002750:	0800b8b8 	.word	0x0800b8b8
 8002754:	2400000c 	.word	0x2400000c
 8002758:	24000008 	.word	0x24000008

0800275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002764:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <HAL_InitTick+0x60>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e021      	b.n	80027b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <HAL_InitTick+0x64>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_InitTick+0x60>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002782:	fbb2 f3f3 	udiv	r3, r2, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f945 	bl	8002a16 <HAL_SYSTICK_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e00e      	b.n	80027b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b0f      	cmp	r3, #15
 800279a:	d80a      	bhi.n	80027b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800279c:	2200      	movs	r2, #0
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	f04f 30ff 	mov.w	r0, #4294967295
 80027a4:	f000 f91d 	bl	80029e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a8:	4a06      	ldr	r2, [pc, #24]	@ (80027c4 <HAL_InitTick+0x68>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	24000014 	.word	0x24000014
 80027c0:	24000008 	.word	0x24000008
 80027c4:	24000010 	.word	0x24000010

080027c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_IncTick+0x20>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_IncTick+0x24>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <HAL_IncTick+0x24>)
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	24000014 	.word	0x24000014
 80027ec:	240003b0 	.word	0x240003b0

080027f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return uwTick;
 80027f4:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <HAL_GetTick+0x14>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	240003b0 	.word	0x240003b0

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff ffee 	bl	80027f0 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_Delay+0x44>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffde 	bl	80027f0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24000014 	.word	0x24000014

08002850 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <HAL_GetREVID+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	0c1b      	lsrs	r3, r3, #16
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	5c001000 	.word	0x5c001000

08002868 <__NVIC_SetPriorityGrouping>:
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <__NVIC_SetPriorityGrouping+0x40>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002884:	4013      	ands	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	4313      	orrs	r3, r2
 8002894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002896:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	60d3      	str	r3, [r2, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00
 80028ac:	05fa0000 	.word	0x05fa0000

080028b0 <__NVIC_GetPriorityGrouping>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <__NVIC_GetPriorityGrouping+0x18>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f003 0307 	and.w	r3, r3, #7
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_SetPriority>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	@ (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <SysTick_Config>:
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f7ff ff8e 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff47 	bl	8002868 <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029f0:	f7ff ff5e 	bl	80028b0 <__NVIC_GetPriorityGrouping>
 80029f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff90 	bl	8002920 <NVIC_EncodePriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5f 	bl	80028cc <__NVIC_SetPriority>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffb2 	bl	8002988 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002a34:	f3bf 8f5f 	dmb	sy
}
 8002a38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <HAL_MPU_Disable+0x28>)
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3e:	4a06      	ldr	r2, [pc, #24]	@ (8002a58 <HAL_MPU_Disable+0x28>)
 8002a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a44:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_MPU_Disable+0x2c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00
 8002a5c:	e000ed90 	.word	0xe000ed90

08002a60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a68:	4a0b      	ldr	r2, [pc, #44]	@ (8002a98 <HAL_MPU_Enable+0x38>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_MPU_Enable+0x3c>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a76:	4a09      	ldr	r2, [pc, #36]	@ (8002a9c <HAL_MPU_Enable+0x3c>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a7e:	f3bf 8f4f 	dsb	sy
}
 8002a82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a84:	f3bf 8f6f 	isb	sy
}
 8002a88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed90 	.word	0xe000ed90
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	785a      	ldrb	r2, [r3, #1]
 8002aac:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002aae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002abc:	4a17      	ldr	r2, [pc, #92]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7b1b      	ldrb	r3, [r3, #12]
 8002ac8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7adb      	ldrb	r3, [r3, #11]
 8002ace:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7a9b      	ldrb	r3, [r3, #10]
 8002ad6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ad8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7b5b      	ldrb	r3, [r3, #13]
 8002ade:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ae0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7b9b      	ldrb	r3, [r3, #14]
 8002ae6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ae8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7bdb      	ldrb	r3, [r3, #15]
 8002aee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002af0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7a5b      	ldrb	r3, [r3, #9]
 8002af6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002af8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7a1b      	ldrb	r3, [r3, #8]
 8002afe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b00:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b08:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b0a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b0c:	6113      	str	r3, [r2, #16]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000ed90 	.word	0xe000ed90

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	@ 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002b2e:	4b89      	ldr	r3, [pc, #548]	@ (8002d54 <HAL_GPIO_Init+0x234>)
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b32:	e194      	b.n	8002e5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8186 	beq.w	8002e58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_GPIO_Init+0x44>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d130      	bne.n	8002bc6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0201 	and.w	r2, r3, #1
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d017      	beq.n	8002c02 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d123      	bne.n	8002c56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80e0 	beq.w	8002e58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c98:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <HAL_GPIO_Init+0x238>)
 8002c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d58 <HAL_GPIO_Init+0x238>)
 8002ca0:	f043 0302 	orr.w	r3, r3, #2
 8002ca4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_GPIO_Init+0x238>)
 8002caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb6:	4a29      	ldr	r2, [pc, #164]	@ (8002d5c <HAL_GPIO_Init+0x23c>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a20      	ldr	r2, [pc, #128]	@ (8002d60 <HAL_GPIO_Init+0x240>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d052      	beq.n	8002d88 <HAL_GPIO_Init+0x268>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <HAL_GPIO_Init+0x244>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d031      	beq.n	8002d4e <HAL_GPIO_Init+0x22e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <HAL_GPIO_Init+0x248>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d02b      	beq.n	8002d4a <HAL_GPIO_Init+0x22a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <HAL_GPIO_Init+0x24c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d025      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8002d70 <HAL_GPIO_Init+0x250>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01f      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <HAL_GPIO_Init+0x254>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d019      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8002d78 <HAL_GPIO_Init+0x258>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a19      	ldr	r2, [pc, #100]	@ (8002d7c <HAL_GPIO_Init+0x25c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x216>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a18      	ldr	r2, [pc, #96]	@ (8002d80 <HAL_GPIO_Init+0x260>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x212>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <HAL_GPIO_Init+0x264>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x20e>
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	e02d      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d2e:	230a      	movs	r3, #10
 8002d30:	e02b      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d32:	2308      	movs	r3, #8
 8002d34:	e029      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e027      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d3a:	2306      	movs	r3, #6
 8002d3c:	e025      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d3e:	2305      	movs	r3, #5
 8002d40:	e023      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e021      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d46:	2303      	movs	r3, #3
 8002d48:	e01f      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e01d      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e01b      	b.n	8002d8a <HAL_GPIO_Init+0x26a>
 8002d52:	bf00      	nop
 8002d54:	58000080 	.word	0x58000080
 8002d58:	58024400 	.word	0x58024400
 8002d5c:	58000400 	.word	0x58000400
 8002d60:	58020000 	.word	0x58020000
 8002d64:	58020400 	.word	0x58020400
 8002d68:	58020800 	.word	0x58020800
 8002d6c:	58020c00 	.word	0x58020c00
 8002d70:	58021000 	.word	0x58021000
 8002d74:	58021400 	.word	0x58021400
 8002d78:	58021800 	.word	0x58021800
 8002d7c:	58021c00 	.word	0x58021c00
 8002d80:	58022000 	.word	0x58022000
 8002d84:	58022400 	.word	0x58022400
 8002d88:	2300      	movs	r3, #0
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	f002 0203 	and.w	r2, r2, #3
 8002d90:	0092      	lsls	r2, r2, #2
 8002d92:	4093      	lsls	r3, r2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d9a:	4938      	ldr	r1, [pc, #224]	@ (8002e7c <HAL_GPIO_Init+0x35c>)
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	089b      	lsrs	r3, r3, #2
 8002da0:	3302      	adds	r3, #2
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002dce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f ae63 	bne.w	8002b34 <HAL_GPIO_Init+0x14>
  }
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3724      	adds	r7, #36	@ 0x24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	58000400 	.word	0x58000400

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e08b      	b.n	8002fde <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff f8b0 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	@ 0x24
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e006      	b.n	8002f3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d108      	bne.n	8002f56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	e007      	b.n	8002f66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <HAL_I2C_Init+0x134>)
 8002f72:	430b      	orrs	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69d9      	ldr	r1, [r3, #28]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	02008000 	.word	0x02008000

08002fec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b20      	cmp	r3, #32
 8003010:	f040 80f9 	bne.w	8003206 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_I2C_Mem_Write+0x34>
 800301a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0ed      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_I2C_Mem_Write+0x4e>
 8003036:	2302      	movs	r3, #2
 8003038:	e0e6      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003042:	f7ff fbd5 	bl	80027f0 <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2319      	movs	r3, #25
 800304e:	2201      	movs	r2, #1
 8003050:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fac3 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0d1      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2221      	movs	r2, #33	@ 0x21
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2240      	movs	r2, #64	@ 0x40
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800308c:	88f8      	ldrh	r0, [r7, #6]
 800308e:	893a      	ldrh	r2, [r7, #8]
 8003090:	8979      	ldrh	r1, [r7, #10]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4603      	mov	r3, r0
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f9d3 	bl	8003448 <I2C_RequestMemoryWrite>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0a9      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2bff      	cmp	r3, #255	@ 0xff
 80030bc:	d90e      	bls.n	80030dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	22ff      	movs	r2, #255	@ 0xff
 80030c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	2300      	movs	r3, #0
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fc47 	bl	8003968 <I2C_TransferConfig>
 80030da:	e00f      	b.n	80030fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	8979      	ldrh	r1, [r7, #10]
 80030ee:	2300      	movs	r3, #0
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fc36 	bl	8003968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fac6 	bl	8003692 <I2C_WaitOnTXISFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e07b      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d034      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x1c8>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d130      	bne.n	80031b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	2200      	movs	r2, #0
 800315a:	2180      	movs	r1, #128	@ 0x80
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fa3f 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e04d      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2bff      	cmp	r3, #255	@ 0xff
 8003174:	d90e      	bls.n	8003194 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	22ff      	movs	r2, #255	@ 0xff
 800317a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fbeb 	bl	8003968 <I2C_TransferConfig>
 8003192:	e00f      	b.n	80031b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	2300      	movs	r3, #0
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fbda 	bl	8003968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d19e      	bne.n	80030fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 faac 	bl	8003720 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e01a      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2220      	movs	r2, #32
 80031d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_I2C_Mem_Write+0x224>)
 80031e6:	400b      	ands	r3, r1
 80031e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	fe00e800 	.word	0xfe00e800

08003214 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	817b      	strh	r3, [r7, #10]
 8003226:	460b      	mov	r3, r1
 8003228:	813b      	strh	r3, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b20      	cmp	r3, #32
 8003238:	f040 80fd 	bne.w	8003436 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_I2C_Mem_Read+0x34>
 8003242:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800324e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0f1      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_I2C_Mem_Read+0x4e>
 800325e:	2302      	movs	r3, #2
 8003260:	e0ea      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800326a:	f7ff fac1 	bl	80027f0 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2319      	movs	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f9af 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0d5      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2222      	movs	r2, #34	@ 0x22
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2240      	movs	r2, #64	@ 0x40
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a3a      	ldr	r2, [r7, #32]
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032b4:	88f8      	ldrh	r0, [r7, #6]
 80032b6:	893a      	ldrh	r2, [r7, #8]
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	4603      	mov	r3, r0
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f913 	bl	80034f0 <I2C_RequestMemoryRead>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0ad      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2bff      	cmp	r3, #255	@ 0xff
 80032e4:	d90e      	bls.n	8003304 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	22ff      	movs	r2, #255	@ 0xff
 80032ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	8979      	ldrh	r1, [r7, #10]
 80032f4:	4b52      	ldr	r3, [pc, #328]	@ (8003440 <HAL_I2C_Mem_Read+0x22c>)
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fb33 	bl	8003968 <I2C_TransferConfig>
 8003302:	e00f      	b.n	8003324 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	b2da      	uxtb	r2, r3
 8003314:	8979      	ldrh	r1, [r7, #10]
 8003316:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <HAL_I2C_Mem_Read+0x22c>)
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fb22 	bl	8003968 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332a:	2200      	movs	r2, #0
 800332c:	2104      	movs	r1, #4
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f956 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07c      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d034      	beq.n	80033e4 <HAL_I2C_Mem_Read+0x1d0>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d130      	bne.n	80033e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	2200      	movs	r2, #0
 800338a:	2180      	movs	r1, #128	@ 0x80
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f927 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e04d      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2bff      	cmp	r3, #255	@ 0xff
 80033a4:	d90e      	bls.n	80033c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	22ff      	movs	r2, #255	@ 0xff
 80033aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	8979      	ldrh	r1, [r7, #10]
 80033b4:	2300      	movs	r3, #0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fad3 	bl	8003968 <I2C_TransferConfig>
 80033c2:	e00f      	b.n	80033e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	8979      	ldrh	r1, [r7, #10]
 80033d6:	2300      	movs	r3, #0
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 fac2 	bl	8003968 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d19a      	bne.n	8003324 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f994 	bl	8003720 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e01a      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2220      	movs	r2, #32
 8003408:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	4b0b      	ldr	r3, [pc, #44]	@ (8003444 <HAL_I2C_Mem_Read+0x230>)
 8003416:	400b      	ands	r3, r1
 8003418:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	e000      	b.n	8003438 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003436:	2302      	movs	r3, #2
  }
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	80002400 	.word	0x80002400
 8003444:	fe00e800 	.word	0xfe00e800

08003448 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af02      	add	r7, sp, #8
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	461a      	mov	r2, r3
 8003456:	4603      	mov	r3, r0
 8003458:	817b      	strh	r3, [r7, #10]
 800345a:	460b      	mov	r3, r1
 800345c:	813b      	strh	r3, [r7, #8]
 800345e:	4613      	mov	r3, r2
 8003460:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	8979      	ldrh	r1, [r7, #10]
 8003468:	4b20      	ldr	r3, [pc, #128]	@ (80034ec <I2C_RequestMemoryWrite+0xa4>)
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fa79 	bl	8003968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	69b9      	ldr	r1, [r7, #24]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f909 	bl	8003692 <I2C_WaitOnTXISFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e02c      	b.n	80034e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003490:	893b      	ldrh	r3, [r7, #8]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	629a      	str	r2, [r3, #40]	@ 0x28
 800349a:	e015      	b.n	80034c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	69b9      	ldr	r1, [r7, #24]
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f8ef 	bl	8003692 <I2C_WaitOnTXISFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e012      	b.n	80034e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034be:	893b      	ldrh	r3, [r7, #8]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2180      	movs	r1, #128	@ 0x80
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f884 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	80002000 	.word	0x80002000

080034f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	817b      	strh	r3, [r7, #10]
 8003502:	460b      	mov	r3, r1
 8003504:	813b      	strh	r3, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	b2da      	uxtb	r2, r3
 800350e:	8979      	ldrh	r1, [r7, #10]
 8003510:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <I2C_RequestMemoryRead+0xa4>)
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2300      	movs	r3, #0
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fa26 	bl	8003968 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f8b6 	bl	8003692 <I2C_WaitOnTXISFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e02c      	b.n	800358a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d105      	bne.n	8003542 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003536:	893b      	ldrh	r3, [r7, #8]
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003540:	e015      	b.n	800356e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003542:	893b      	ldrh	r3, [r7, #8]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	b29b      	uxth	r3, r3
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 f89c 	bl	8003692 <I2C_WaitOnTXISFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e012      	b.n	800358a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003564:	893b      	ldrh	r3, [r7, #8]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2200      	movs	r2, #0
 8003576:	2140      	movs	r1, #64	@ 0x40
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f831 	bl	80035e0 <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	80002000 	.word	0x80002000

08003598 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d103      	bne.n	80035b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2200      	movs	r2, #0
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d007      	beq.n	80035d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	619a      	str	r2, [r3, #24]
  }
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f0:	e03b      	b.n	800366a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	6839      	ldr	r1, [r7, #0]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f8d6 	bl	80037a8 <I2C_IsErrorOccurred>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e041      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360c:	d02d      	beq.n	800366a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7ff f8ef 	bl	80027f0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x44>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d122      	bne.n	800366a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	429a      	cmp	r2, r3
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	429a      	cmp	r2, r3
 8003640:	d113      	bne.n	800366a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e00f      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0b4      	beq.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800369e:	e033      	b.n	8003708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f87f 	bl	80037a8 <I2C_IsErrorOccurred>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e031      	b.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d025      	beq.n	8003708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036bc:	f7ff f898 	bl	80027f0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d11a      	bne.n	8003708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d013      	beq.n	8003708 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b02      	cmp	r3, #2
 8003714:	d1c4      	bne.n	80036a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800372c:	e02f      	b.n	800378e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f838 	bl	80037a8 <I2C_IsErrorOccurred>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e02d      	b.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7ff f855 	bl	80027f0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d11a      	bne.n	800378e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b20      	cmp	r3, #32
 8003764:	d013      	beq.n	800378e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e007      	b.n	800379e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b20      	cmp	r3, #32
 800379a:	d1c8      	bne.n	800372e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	@ 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d068      	beq.n	80038a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2210      	movs	r2, #16
 80037da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037dc:	e049      	b.n	8003872 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d045      	beq.n	8003872 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7ff f803 	bl	80027f0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_IsErrorOccurred+0x54>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d13a      	bne.n	8003872 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003806:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800380e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800381a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800381e:	d121      	bne.n	8003864 <I2C_IsErrorOccurred+0xbc>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003826:	d01d      	beq.n	8003864 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003828:	7cfb      	ldrb	r3, [r7, #19]
 800382a:	2b20      	cmp	r3, #32
 800382c:	d01a      	beq.n	8003864 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800383c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800383e:	f7fe ffd7 	bl	80027f0 <HAL_GetTick>
 8003842:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003844:	e00e      	b.n	8003864 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003846:	f7fe ffd3 	bl	80027f0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b19      	cmp	r3, #25
 8003852:	d907      	bls.n	8003864 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f043 0320 	orr.w	r3, r3, #32
 800385a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003862:	e006      	b.n	8003872 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b20      	cmp	r3, #32
 8003870:	d1e9      	bne.n	8003846 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	2b20      	cmp	r3, #32
 800387e:	d003      	beq.n	8003888 <I2C_IsErrorOccurred+0xe0>
 8003880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0aa      	beq.n	80037de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003888:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2220      	movs	r2, #32
 8003896:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	f043 0304 	orr.w	r3, r3, #4
 800389e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f043 0308 	orr.w	r3, r3, #8
 80038e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800390c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01c      	beq.n	8003956 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fe3b 	bl	8003598 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <I2C_IsErrorOccurred+0x1bc>)
 800392e:	400b      	ands	r3, r1
 8003930:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003956:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800395a:	4618      	mov	r0, r3
 800395c:	3728      	adds	r7, #40	@ 0x28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	fe00e800 	.word	0xfe00e800

08003968 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	4613      	mov	r3, r2
 8003978:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003980:	7a7b      	ldrb	r3, [r7, #9]
 8003982:	041b      	lsls	r3, r3, #16
 8003984:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003988:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	4313      	orrs	r3, r2
 8003992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003996:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	0d5b      	lsrs	r3, r3, #21
 80039a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039a6:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <I2C_TransferConfig+0x60>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	43db      	mvns	r3, r3
 80039ac:	ea02 0103 	and.w	r1, r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	03ff63ff 	.word	0x03ff63ff

080039cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d138      	bne.n	8003a54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e032      	b.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	@ 0x24
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	e000      	b.n	8003a56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a54:	2302      	movs	r3, #2
  }
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d139      	bne.n	8003aec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e033      	b.n	8003aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2224      	movs	r2, #36	@ 0x24
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ab4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_PWREx_ConfigSupply+0x70>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d00a      	beq.n	8003b26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b10:	4b16      	ldr	r3, [pc, #88]	@ (8003b6c <HAL_PWREx_ConfigSupply+0x70>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d001      	beq.n	8003b22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e01f      	b.n	8003b62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e01d      	b.n	8003b62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b26:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <HAL_PWREx_ConfigSupply+0x70>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 0207 	bic.w	r2, r3, #7
 8003b2e:	490f      	ldr	r1, [pc, #60]	@ (8003b6c <HAL_PWREx_ConfigSupply+0x70>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b36:	f7fe fe5b 	bl	80027f0 <HAL_GetTick>
 8003b3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b3c:	e009      	b.n	8003b52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b3e:	f7fe fe57 	bl	80027f0 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b4c:	d901      	bls.n	8003b52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e007      	b.n	8003b62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b52:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <HAL_PWREx_ConfigSupply+0x70>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b5e:	d1ee      	bne.n	8003b3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	58024800 	.word	0x58024800

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	@ 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d102      	bne.n	8003b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f000 bc48 	b.w	8004414 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8088 	beq.w	8003ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b92:	4b99      	ldr	r3, [pc, #612]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b9c:	4b96      	ldr	r3, [pc, #600]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d007      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x48>
 8003ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003baa:	2b18      	cmp	r3, #24
 8003bac:	d111      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
 8003bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b8f      	ldr	r3, [pc, #572]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d06d      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x130>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d169      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f000 bc21 	b.w	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x7a>
 8003bdc:	4b86      	ldr	r3, [pc, #536]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a85      	ldr	r2, [pc, #532]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e02e      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x9c>
 8003bf2:	4b81      	ldr	r3, [pc, #516]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a80      	ldr	r2, [pc, #512]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a7d      	ldr	r2, [pc, #500]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e01d      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c14:	d10c      	bne.n	8003c30 <HAL_RCC_OscConfig+0xc0>
 8003c16:	4b78      	ldr	r3, [pc, #480]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a77      	ldr	r2, [pc, #476]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	4b75      	ldr	r3, [pc, #468]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a74      	ldr	r2, [pc, #464]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e00b      	b.n	8003c48 <HAL_RCC_OscConfig+0xd8>
 8003c30:	4b71      	ldr	r3, [pc, #452]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a70      	ldr	r2, [pc, #448]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6d      	ldr	r2, [pc, #436]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe fdce 	bl	80027f0 <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe fdca 	bl	80027f0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e3d4      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c6a:	4b63      	ldr	r3, [pc, #396]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0xe8>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fdba 	bl	80027f0 <HAL_GetTick>
 8003c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fe fdb6 	bl	80027f0 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	@ 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e3c0      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c92:	4b59      	ldr	r3, [pc, #356]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x110>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80ca 	beq.w	8003e44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb0:	4b51      	ldr	r3, [pc, #324]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cba:	4b4f      	ldr	r3, [pc, #316]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x166>
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	2b18      	cmp	r3, #24
 8003cca:	d156      	bne.n	8003d7a <HAL_RCC_OscConfig+0x20a>
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d151      	bne.n	8003d7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd6:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_RCC_OscConfig+0x17e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e392      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cee:	4b42      	ldr	r3, [pc, #264]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 0219 	bic.w	r2, r3, #25
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	493f      	ldr	r1, [pc, #252]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fd76 	bl	80027f0 <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fe fd72 	bl	80027f0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e37c      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d1a:	4b37      	ldr	r3, [pc, #220]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	f7fe fd93 	bl	8002850 <HAL_GetREVID>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d817      	bhi.n	8003d64 <HAL_RCC_OscConfig+0x1f4>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	2b40      	cmp	r3, #64	@ 0x40
 8003d3a:	d108      	bne.n	8003d4e <HAL_RCC_OscConfig+0x1de>
 8003d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d44:	4a2c      	ldr	r2, [pc, #176]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4c:	e07a      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	031b      	lsls	r3, r3, #12
 8003d5c:	4926      	ldr	r1, [pc, #152]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d62:	e06f      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b24      	ldr	r3, [pc, #144]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	4921      	ldr	r1, [pc, #132]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d78:	e064      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d047      	beq.n	8003e12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d82:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0219 	bic.w	r2, r3, #25
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	491a      	ldr	r1, [pc, #104]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe fd2c 	bl	80027f0 <HAL_GetTick>
 8003d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9c:	f7fe fd28 	bl	80027f0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e332      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dae:	4b12      	ldr	r3, [pc, #72]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dba:	f7fe fd49 	bl	8002850 <HAL_GetREVID>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d819      	bhi.n	8003dfc <HAL_RCC_OscConfig+0x28c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b40      	cmp	r3, #64	@ 0x40
 8003dce:	d108      	bne.n	8003de2 <HAL_RCC_OscConfig+0x272>
 8003dd0:	4b09      	ldr	r3, [pc, #36]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003dd8:	4a07      	ldr	r2, [pc, #28]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dde:	6053      	str	r3, [r2, #4]
 8003de0:	e030      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
 8003de2:	4b05      	ldr	r3, [pc, #20]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	031b      	lsls	r3, r3, #12
 8003df0:	4901      	ldr	r1, [pc, #4]	@ (8003df8 <HAL_RCC_OscConfig+0x288>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
 8003df6:	e025      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
 8003df8:	58024400 	.word	0x58024400
 8003dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	4997      	ldr	r1, [pc, #604]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
 8003e10:	e018      	b.n	8003e44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e12:	4b95      	ldr	r3, [pc, #596]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a94      	ldr	r2, [pc, #592]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fe fce7 	bl	80027f0 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fe fce3 	bl	80027f0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e2ed      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e38:	4b8b      	ldr	r3, [pc, #556]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1f0      	bne.n	8003e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a9 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e52:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e5c:	4b82      	ldr	r3, [pc, #520]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d007      	beq.n	8003e78 <HAL_RCC_OscConfig+0x308>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b18      	cmp	r3, #24
 8003e6c:	d13a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x374>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0303 	and.w	r3, r3, #3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d135      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e78:	4b7b      	ldr	r3, [pc, #492]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_OscConfig+0x320>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d001      	beq.n	8003e90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e2c1      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e90:	f7fe fcde 	bl	8002850 <HAL_GetREVID>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d817      	bhi.n	8003ece <HAL_RCC_OscConfig+0x35e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	d108      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x348>
 8003ea6:	4b70      	ldr	r3, [pc, #448]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003eae:	4a6e      	ldr	r2, [pc, #440]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003eb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003eb6:	e075      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	069b      	lsls	r3, r3, #26
 8003ec6:	4968      	ldr	r1, [pc, #416]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ecc:	e06a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ece:	4b66      	ldr	r3, [pc, #408]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	4962      	ldr	r1, [pc, #392]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ee2:	e05f      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d042      	beq.n	8003f72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003eec:	4b5e      	ldr	r3, [pc, #376]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fc7a 	bl	80027f0 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f00:	f7fe fc76 	bl	80027f0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e280      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f12:	4b55      	ldr	r3, [pc, #340]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f1e:	f7fe fc97 	bl	8002850 <HAL_GetREVID>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d817      	bhi.n	8003f5c <HAL_RCC_OscConfig+0x3ec>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d108      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3d6>
 8003f34:	4b4c      	ldr	r3, [pc, #304]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f42:	6053      	str	r3, [r2, #4]
 8003f44:	e02e      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
 8003f46:	4b48      	ldr	r3, [pc, #288]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	069b      	lsls	r3, r3, #26
 8003f54:	4944      	ldr	r1, [pc, #272]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
 8003f5a:	e023      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
 8003f5c:	4b42      	ldr	r3, [pc, #264]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	493f      	ldr	r1, [pc, #252]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60cb      	str	r3, [r1, #12]
 8003f70:	e018      	b.n	8003fa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003f72:	4b3d      	ldr	r3, [pc, #244]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a3c      	ldr	r2, [pc, #240]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fe fc37 	bl	80027f0 <HAL_GetTick>
 8003f82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f86:	f7fe fc33 	bl	80027f0 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e23d      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f98:	4b33      	ldr	r3, [pc, #204]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d036      	beq.n	800401e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d019      	beq.n	8003fec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fe fc14 	bl	80027f0 <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fcc:	f7fe fc10 	bl	80027f0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e21a      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fde:	4b22      	ldr	r3, [pc, #136]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x45c>
 8003fea:	e018      	b.n	800401e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fec:	4b1e      	ldr	r3, [pc, #120]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fe fbfa 	bl	80027f0 <HAL_GetTick>
 8003ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004000:	f7fe fbf6 	bl	80027f0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e200      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004012:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8004014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d039      	beq.n	800409e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01c      	beq.n	800406c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a0c      	ldr	r2, [pc, #48]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 8004038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800403c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800403e:	f7fe fbd7 	bl	80027f0 <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004046:	f7fe fbd3 	bl	80027f0 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e1dd      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004058:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <HAL_RCC_OscConfig+0x4f8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x4d6>
 8004064:	e01b      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
 8004066:	bf00      	nop
 8004068:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800406c:	4b9b      	ldr	r3, [pc, #620]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a9a      	ldr	r2, [pc, #616]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004076:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004078:	f7fe fbba 	bl	80027f0 <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004080:	f7fe fbb6 	bl	80027f0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1c0      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004092:	4b92      	ldr	r3, [pc, #584]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8081 	beq.w	80041ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80040ac:	4b8c      	ldr	r3, [pc, #560]	@ (80042e0 <HAL_RCC_OscConfig+0x770>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a8b      	ldr	r2, [pc, #556]	@ (80042e0 <HAL_RCC_OscConfig+0x770>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b8:	f7fe fb9a 	bl	80027f0 <HAL_GetTick>
 80040bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fe fb96 	bl	80027f0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b64      	cmp	r3, #100	@ 0x64
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e1a0      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d2:	4b83      	ldr	r3, [pc, #524]	@ (80042e0 <HAL_RCC_OscConfig+0x770>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x584>
 80040e6:	4b7d      	ldr	r3, [pc, #500]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ea:	4a7c      	ldr	r2, [pc, #496]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f2:	e02d      	b.n	8004150 <HAL_RCC_OscConfig+0x5e0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10c      	bne.n	8004116 <HAL_RCC_OscConfig+0x5a6>
 80040fc:	4b77      	ldr	r3, [pc, #476]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004100:	4a76      	ldr	r2, [pc, #472]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	@ 0x70
 8004108:	4b74      	ldr	r3, [pc, #464]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410c:	4a73      	ldr	r2, [pc, #460]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800410e:	f023 0304 	bic.w	r3, r3, #4
 8004112:	6713      	str	r3, [r2, #112]	@ 0x70
 8004114:	e01c      	b.n	8004150 <HAL_RCC_OscConfig+0x5e0>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b05      	cmp	r3, #5
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c8>
 800411e:	4b6f      	ldr	r3, [pc, #444]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004122:	4a6e      	ldr	r2, [pc, #440]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004124:	f043 0304 	orr.w	r3, r3, #4
 8004128:	6713      	str	r3, [r2, #112]	@ 0x70
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412e:	4a6b      	ldr	r2, [pc, #428]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6713      	str	r3, [r2, #112]	@ 0x70
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0x5e0>
 8004138:	4b68      	ldr	r3, [pc, #416]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800413a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413c:	4a67      	ldr	r2, [pc, #412]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6713      	str	r3, [r2, #112]	@ 0x70
 8004144:	4b65      	ldr	r3, [pc, #404]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004148:	4a64      	ldr	r2, [pc, #400]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800414a:	f023 0304 	bic.w	r3, r3, #4
 800414e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004158:	f7fe fb4a 	bl	80027f0 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800415e:	e00a      	b.n	8004176 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004160:	f7fe fb46 	bl	80027f0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e14e      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004176:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0ee      	beq.n	8004160 <HAL_RCC_OscConfig+0x5f0>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fe fb34 	bl	80027f0 <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7fe fb30 	bl	80027f0 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e138      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041a2:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 812d 	beq.w	8004412 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041b8:	4b48      	ldr	r3, [pc, #288]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c0:	2b18      	cmp	r3, #24
 80041c2:	f000 80bd 	beq.w	8004340 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	f040 809e 	bne.w	800430c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d0:	4b42      	ldr	r3, [pc, #264]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a41      	ldr	r2, [pc, #260]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fe fb08 	bl	80027f0 <HAL_GetTick>
 80041e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fe fb04 	bl	80027f0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e10e      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80041f6:	4b39      	ldr	r3, [pc, #228]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004202:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004206:	4b37      	ldr	r3, [pc, #220]	@ (80042e4 <HAL_RCC_OscConfig+0x774>)
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	430a      	orrs	r2, r1
 8004216:	4931      	ldr	r1, [pc, #196]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	628b      	str	r3, [r1, #40]	@ 0x28
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	3b01      	subs	r3, #1
 8004222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422a:	3b01      	subs	r3, #1
 800422c:	025b      	lsls	r3, r3, #9
 800422e:	b29b      	uxth	r3, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	3b01      	subs	r3, #1
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	3b01      	subs	r3, #1
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800424c:	4923      	ldr	r1, [pc, #140]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004252:	4b22      	ldr	r3, [pc, #136]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	4a21      	ldr	r2, [pc, #132]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800425e:	4b1f      	ldr	r3, [pc, #124]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004262:	4b21      	ldr	r3, [pc, #132]	@ (80042e8 <HAL_RCC_OscConfig+0x778>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800426a:	00d2      	lsls	r2, r2, #3
 800426c:	491b      	ldr	r1, [pc, #108]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004272:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	f023 020c 	bic.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4917      	ldr	r1, [pc, #92]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004284:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	f023 0202 	bic.w	r2, r3, #2
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	4912      	ldr	r1, [pc, #72]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004296:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4a10      	ldr	r2, [pc, #64]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a2:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	4a0d      	ldr	r2, [pc, #52]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80042ba:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042be:	4a07      	ldr	r2, [pc, #28]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c6:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <HAL_RCC_OscConfig+0x76c>)
 80042cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fe fa8d 	bl	80027f0 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042d8:	e011      	b.n	80042fe <HAL_RCC_OscConfig+0x78e>
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
 80042e0:	58024800 	.word	0x58024800
 80042e4:	fffffc0c 	.word	0xfffffc0c
 80042e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fe fa80 	bl	80027f0 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e08a      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042fe:	4b47      	ldr	r3, [pc, #284]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x77c>
 800430a:	e082      	b.n	8004412 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430c:	4b43      	ldr	r3, [pc, #268]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a42      	ldr	r2, [pc, #264]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe fa6a 	bl	80027f0 <HAL_GetTick>
 800431c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004320:	f7fe fa66 	bl	80027f0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e070      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004332:	4b3a      	ldr	r3, [pc, #232]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x7b0>
 800433e:	e068      	b.n	8004412 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004340:	4b36      	ldr	r3, [pc, #216]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004346:	4b35      	ldr	r3, [pc, #212]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	2b01      	cmp	r3, #1
 8004352:	d031      	beq.n	80043b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	f003 0203 	and.w	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d12a      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436e:	429a      	cmp	r2, r3
 8004370:	d122      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d11a      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	0a5b      	lsrs	r3, r3, #9
 8004386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d111      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	0c1b      	lsrs	r3, r3, #16
 8004398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d108      	bne.n	80043b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	0e1b      	lsrs	r3, r3, #24
 80043aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d001      	beq.n	80043bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e02b      	b.n	8004414 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d01f      	beq.n	8004412 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	4a11      	ldr	r2, [pc, #68]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043de:	f7fe fa07 	bl	80027f0 <HAL_GetTick>
 80043e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80043e4:	bf00      	nop
 80043e6:	f7fe fa03 	bl	80027f0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d0f9      	beq.n	80043e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 80043f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <HAL_RCC_OscConfig+0x8b0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043fe:	00d2      	lsls	r2, r2, #3
 8004400:	4906      	ldr	r1, [pc, #24]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004402:	4313      	orrs	r3, r2
 8004404:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004406:	4b05      	ldr	r3, [pc, #20]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	4a04      	ldr	r2, [pc, #16]	@ (800441c <HAL_RCC_OscConfig+0x8ac>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3730      	adds	r7, #48	@ 0x30
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	58024400 	.word	0x58024400
 8004420:	ffff0007 	.word	0xffff0007

08004424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e19c      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004438:	4b8a      	ldr	r3, [pc, #552]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d910      	bls.n	8004468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b87      	ldr	r3, [pc, #540]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 020f 	bic.w	r2, r3, #15
 800444e:	4985      	ldr	r1, [pc, #532]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b83      	ldr	r3, [pc, #524]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e184      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	4b7b      	ldr	r3, [pc, #492]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004480:	429a      	cmp	r2, r3
 8004482:	d908      	bls.n	8004496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004484:	4b78      	ldr	r3, [pc, #480]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	4975      	ldr	r1, [pc, #468]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004492:	4313      	orrs	r3, r2
 8004494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	4b70      	ldr	r3, [pc, #448]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d908      	bls.n	80044c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	496a      	ldr	r1, [pc, #424]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d010      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	4b64      	ldr	r3, [pc, #400]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044dc:	429a      	cmp	r2, r3
 80044de:	d908      	bls.n	80044f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e0:	4b61      	ldr	r3, [pc, #388]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	495e      	ldr	r1, [pc, #376]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	4b59      	ldr	r3, [pc, #356]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800450a:	429a      	cmp	r2, r3
 800450c:	d908      	bls.n	8004520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800450e:	4b56      	ldr	r3, [pc, #344]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4953      	ldr	r1, [pc, #332]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800451c:	4313      	orrs	r3, r2
 800451e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d010      	beq.n	800454e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	4b4d      	ldr	r3, [pc, #308]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	429a      	cmp	r2, r3
 800453a:	d908      	bls.n	800454e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b4a      	ldr	r3, [pc, #296]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	f023 020f 	bic.w	r2, r3, #15
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4947      	ldr	r1, [pc, #284]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800454a:	4313      	orrs	r3, r2
 800454c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d055      	beq.n	8004606 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800455a:	4b43      	ldr	r3, [pc, #268]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4940      	ldr	r1, [pc, #256]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004568:	4313      	orrs	r3, r2
 800456a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d107      	bne.n	8004584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004574:	4b3c      	ldr	r3, [pc, #240]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d121      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0f6      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d107      	bne.n	800459c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800458c:	4b36      	ldr	r3, [pc, #216]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d115      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0ea      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045a4:	4b30      	ldr	r3, [pc, #192]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0de      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0d6      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c4:	4b28      	ldr	r3, [pc, #160]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f023 0207 	bic.w	r2, r3, #7
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4925      	ldr	r1, [pc, #148]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d6:	f7fe f90b 	bl	80027f0 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045de:	f7fe f907 	bl	80027f0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e0be      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	429a      	cmp	r2, r3
 8004604:	d1eb      	bne.n	80045de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d010      	beq.n	8004634 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	4b14      	ldr	r3, [pc, #80]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	429a      	cmp	r2, r3
 8004620:	d208      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004622:	4b11      	ldr	r3, [pc, #68]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f023 020f 	bic.w	r2, r3, #15
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	490e      	ldr	r1, [pc, #56]	@ (8004668 <HAL_RCC_ClockConfig+0x244>)
 8004630:	4313      	orrs	r3, r2
 8004632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004634:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d214      	bcs.n	800466c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 020f 	bic.w	r2, r3, #15
 800464a:	4906      	ldr	r1, [pc, #24]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <HAL_RCC_ClockConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e086      	b.n	8004772 <HAL_RCC_ClockConfig+0x34e>
 8004664:	52002000 	.word	0x52002000
 8004668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	4b3f      	ldr	r3, [pc, #252]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004684:	429a      	cmp	r2, r3
 8004686:	d208      	bcs.n	800469a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004688:	4b3c      	ldr	r3, [pc, #240]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4939      	ldr	r1, [pc, #228]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004696:	4313      	orrs	r3, r2
 8004698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	4b34      	ldr	r3, [pc, #208]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d208      	bcs.n	80046c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046b6:	4b31      	ldr	r3, [pc, #196]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	492e      	ldr	r1, [pc, #184]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	4b28      	ldr	r3, [pc, #160]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d208      	bcs.n	80046f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046e4:	4b25      	ldr	r3, [pc, #148]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	4922      	ldr	r1, [pc, #136]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800470e:	429a      	cmp	r2, r3
 8004710:	d208      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004712:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4917      	ldr	r1, [pc, #92]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004720:	4313      	orrs	r3, r2
 8004722:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004724:	f000 f834 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b14      	ldr	r3, [pc, #80]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	4912      	ldr	r1, [pc, #72]	@ (8004780 <HAL_RCC_ClockConfig+0x35c>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
 8004740:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004742:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <HAL_RCC_ClockConfig+0x358>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	4a0d      	ldr	r2, [pc, #52]	@ (8004780 <HAL_RCC_ClockConfig+0x35c>)
 800474c:	5cd3      	ldrb	r3, [r2, r3]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <HAL_RCC_ClockConfig+0x360>)
 800475a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800475c:	4a0a      	ldr	r2, [pc, #40]	@ (8004788 <HAL_RCC_ClockConfig+0x364>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <HAL_RCC_ClockConfig+0x368>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fff8 	bl	800275c <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	58024400 	.word	0x58024400
 8004780:	0800b8b8 	.word	0x0800b8b8
 8004784:	2400000c 	.word	0x2400000c
 8004788:	24000008 	.word	0x24000008
 800478c:	24000010 	.word	0x24000010

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	@ 0x24
 8004794:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004796:	4bb3      	ldr	r3, [pc, #716]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800479e:	2b18      	cmp	r3, #24
 80047a0:	f200 8155 	bhi.w	8004a4e <HAL_RCC_GetSysClockFreq+0x2be>
 80047a4:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	08004811 	.word	0x08004811
 80047b0:	08004a4f 	.word	0x08004a4f
 80047b4:	08004a4f 	.word	0x08004a4f
 80047b8:	08004a4f 	.word	0x08004a4f
 80047bc:	08004a4f 	.word	0x08004a4f
 80047c0:	08004a4f 	.word	0x08004a4f
 80047c4:	08004a4f 	.word	0x08004a4f
 80047c8:	08004a4f 	.word	0x08004a4f
 80047cc:	08004837 	.word	0x08004837
 80047d0:	08004a4f 	.word	0x08004a4f
 80047d4:	08004a4f 	.word	0x08004a4f
 80047d8:	08004a4f 	.word	0x08004a4f
 80047dc:	08004a4f 	.word	0x08004a4f
 80047e0:	08004a4f 	.word	0x08004a4f
 80047e4:	08004a4f 	.word	0x08004a4f
 80047e8:	08004a4f 	.word	0x08004a4f
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	08004a4f 	.word	0x08004a4f
 80047f4:	08004a4f 	.word	0x08004a4f
 80047f8:	08004a4f 	.word	0x08004a4f
 80047fc:	08004a4f 	.word	0x08004a4f
 8004800:	08004a4f 	.word	0x08004a4f
 8004804:	08004a4f 	.word	0x08004a4f
 8004808:	08004a4f 	.word	0x08004a4f
 800480c:	08004843 	.word	0x08004843
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004810:	4b94      	ldr	r3, [pc, #592]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800481c:	4b91      	ldr	r3, [pc, #580]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	4a90      	ldr	r2, [pc, #576]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
 800482c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800482e:	e111      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004830:	4b8d      	ldr	r3, [pc, #564]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004832:	61bb      	str	r3, [r7, #24]
      break;
 8004834:	e10e      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004836:	4b8d      	ldr	r3, [pc, #564]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004838:	61bb      	str	r3, [r7, #24]
      break;
 800483a:	e10b      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800483c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800483e:	61bb      	str	r3, [r7, #24]
      break;
 8004840:	e108      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004842:	4b88      	ldr	r3, [pc, #544]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800484c:	4b85      	ldr	r3, [pc, #532]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004856:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004858:	4b82      	ldr	r3, [pc, #520]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800485a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004862:	4b80      	ldr	r3, [pc, #512]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004866:	08db      	lsrs	r3, r3, #3
 8004868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80e1 	beq.w	8004a48 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b02      	cmp	r3, #2
 800488a:	f000 8083 	beq.w	8004994 <HAL_RCC_GetSysClockFreq+0x204>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f200 80a1 	bhi.w	80049d8 <HAL_RCC_GetSysClockFreq+0x248>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x114>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d056      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x1c0>
 80048a2:	e099      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d02d      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	08db      	lsrs	r3, r3, #3
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	4a6b      	ldr	r2, [pc, #428]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b62      	ldr	r3, [pc, #392]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800490a:	e087      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b51      	ldr	r3, [pc, #324]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004932:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800494e:	e065      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b40      	ldr	r3, [pc, #256]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a02 	vldr	s12, [r7, #8]
 8004976:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004992:	e043      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a80 <HAL_RCC_GetSysClockFreq+0x2f0>
 80049a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049d6:	e021      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 80049e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f2:	ee07 3a90 	vmov	s15, r3
 80049f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80049fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a20:	0a5b      	lsrs	r3, r3, #9
 8004a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a26:	3301      	adds	r3, #1
 8004a28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a40:	ee17 3a90 	vmov	r3, s15
 8004a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
      break;
 8004a4c:	e002      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a4e:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a50:	61bb      	str	r3, [r7, #24]
      break;
 8004a52:	bf00      	nop
  }

  return sysclockfreq;
 8004a54:	69bb      	ldr	r3, [r7, #24]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	@ 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	58024400 	.word	0x58024400
 8004a68:	03d09000 	.word	0x03d09000
 8004a6c:	003d0900 	.word	0x003d0900
 8004a70:	017d7840 	.word	0x017d7840
 8004a74:	46000000 	.word	0x46000000
 8004a78:	4c742400 	.word	0x4c742400
 8004a7c:	4a742400 	.word	0x4a742400
 8004a80:	4bbebc20 	.word	0x4bbebc20

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b0ca      	sub	sp, #296	@ 0x128
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a90:	2300      	movs	r3, #0
 8004a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004aa8:	2500      	movs	r5, #0
 8004aaa:	ea54 0305 	orrs.w	r3, r4, r5
 8004aae:	d049      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ab6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004aba:	d02f      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004abc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ac0:	d828      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ac2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ac6:	d01a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ac8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004acc:	d822      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ad6:	d007      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ad8:	e01c      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ada:	4bb8      	ldr	r3, [pc, #736]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	4ab7      	ldr	r2, [pc, #732]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ae6:	e01a      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	3308      	adds	r3, #8
 8004aee:	2102      	movs	r1, #2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f9d1 	bl	8005e98 <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004afc:	e00f      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	3328      	adds	r3, #40	@ 0x28
 8004b04:	2102      	movs	r1, #2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fa78 	bl	8005ffc <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b12:	e004      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b1a:	e000      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004b26:	4ba5      	ldr	r3, [pc, #660]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b34:	4aa1      	ldr	r2, [pc, #644]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b36:	430b      	orrs	r3, r1
 8004b38:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b3a:	e003      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004b50:	f04f 0900 	mov.w	r9, #0
 8004b54:	ea58 0309 	orrs.w	r3, r8, r9
 8004b58:	d047      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d82a      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b81 	.word	0x08004b81
 8004b70:	08004b8f 	.word	0x08004b8f
 8004b74:	08004ba5 	.word	0x08004ba5
 8004b78:	08004bc3 	.word	0x08004bc3
 8004b7c:	08004bc3 	.word	0x08004bc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b80:	4b8e      	ldr	r3, [pc, #568]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	4a8d      	ldr	r2, [pc, #564]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b8c:	e01a      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b92:	3308      	adds	r3, #8
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 f97e 	bl	8005e98 <RCCEx_PLL2_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ba2:	e00f      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba8:	3328      	adds	r3, #40	@ 0x28
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fa25 	bl	8005ffc <RCCEx_PLL3_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bcc:	4b7b      	ldr	r3, [pc, #492]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	f023 0107 	bic.w	r1, r3, #7
 8004bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bda:	4a78      	ldr	r2, [pc, #480]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8004be0:	e003      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004bf6:	f04f 0b00 	mov.w	fp, #0
 8004bfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bfe:	d04c      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0a:	d030      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c10:	d829      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c14:	d02d      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004c16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c18:	d825      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c1a:	2b80      	cmp	r3, #128	@ 0x80
 8004c1c:	d018      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004c1e:	2b80      	cmp	r3, #128	@ 0x80
 8004c20:	d821      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004c26:	2b40      	cmp	r3, #64	@ 0x40
 8004c28:	d007      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004c2a:	e01c      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2c:	4b63      	ldr	r3, [pc, #396]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	4a62      	ldr	r2, [pc, #392]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c38:	e01c      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3e:	3308      	adds	r3, #8
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 f928 	bl	8005e98 <RCCEx_PLL2_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c4e:	e011      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c54:	3328      	adds	r3, #40	@ 0x28
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f9cf 	bl	8005ffc <RCCEx_PLL3_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c64:	e006      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c6c:	e002      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c80:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c8c:	430b      	orrs	r3, r1
 8004c8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c90:	e003      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ca6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004cb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	d053      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004cc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004cc6:	d035      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004cc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ccc:	d82e      	bhi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004cd2:	d031      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004cd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004cd8:	d828      	bhi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004cda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cde:	d01a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ce4:	d822      	bhi.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cee:	d007      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004cf0:	e01c      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf2:	4b32      	ldr	r3, [pc, #200]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	4a31      	ldr	r2, [pc, #196]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cfe:	e01c      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d04:	3308      	adds	r3, #8
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 f8c5 	bl	8005e98 <RCCEx_PLL2_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d14:	e011      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	3328      	adds	r3, #40	@ 0x28
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 f96c 	bl	8005ffc <RCCEx_PLL3_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d2a:	e006      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d32:	e002      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d34:	bf00      	nop
 8004d36:	e000      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d42:	4b1e      	ldr	r3, [pc, #120]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d46:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d52:	4a1a      	ldr	r2, [pc, #104]	@ (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d58:	e003      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d72:	2300      	movs	r3, #0
 8004d74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	d056      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d8e:	d038      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d94:	d831      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d9a:	d034      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004da0:	d82b      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004da2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004da6:	d01d      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004da8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dac:	d825      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004db2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004db8:	e01f      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004dba:	bf00      	nop
 8004dbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc0:	4ba2      	ldr	r3, [pc, #648]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	4aa1      	ldr	r2, [pc, #644]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dcc:	e01c      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd2:	3308      	adds	r3, #8
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f85e 	bl	8005e98 <RCCEx_PLL2_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	3328      	adds	r3, #40	@ 0x28
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 f905 	bl	8005ffc <RCCEx_PLL3_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e10:	4b8e      	ldr	r3, [pc, #568]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e20:	4a8a      	ldr	r2, [pc, #552]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e22:	430b      	orrs	r3, r1
 8004e24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e26:	e003      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	d03a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e56:	2b30      	cmp	r3, #48	@ 0x30
 8004e58:	d01f      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e5a:	2b30      	cmp	r3, #48	@ 0x30
 8004e5c:	d819      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d00c      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d815      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d019      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d111      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6e:	4b77      	ldr	r3, [pc, #476]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	4a76      	ldr	r2, [pc, #472]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e7a:	e011      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e80:	3308      	adds	r3, #8
 8004e82:	2102      	movs	r1, #2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 f807 	bl	8005e98 <RCCEx_PLL2_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e90:	e006      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e98:	e002      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ea8:	4b68      	ldr	r3, [pc, #416]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eb6:	4a65      	ldr	r2, [pc, #404]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ebc:	e003      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ece:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004ed2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004edc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	d051      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef0:	d035      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ef2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef6:	d82e      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ef8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004efc:	d031      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004efe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f02:	d828      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f08:	d01a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f0e:	d822      	bhi.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f18:	d007      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004f1a:	e01c      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4a4a      	ldr	r2, [pc, #296]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f28:	e01c      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	3308      	adds	r3, #8
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 ffb0 	bl	8005e98 <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f3e:	e011      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f44:	3328      	adds	r3, #40	@ 0x28
 8004f46:	2100      	movs	r1, #0
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 f857 	bl	8005ffc <RCCEx_PLL3_Config>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f5e:	bf00      	nop
 8004f60:	e000      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f6c:	4b37      	ldr	r3, [pc, #220]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7a:	4a34      	ldr	r2, [pc, #208]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004fa0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	d056      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fb4:	d033      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004fb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fba:	d82c      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fc0:	d02f      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004fc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fc6:	d826      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fcc:	d02b      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004fce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fd2:	d820      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd8:	d012      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004fda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fde:	d81a      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d022      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe8:	d115      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fee:	3308      	adds	r3, #8
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 ff50 	bl	8005e98 <RCCEx_PLL2_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ffe:	e015      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	3328      	adds	r3, #40	@ 0x28
 8005006:	2101      	movs	r1, #1
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fff7 	bl	8005ffc <RCCEx_PLL3_Config>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005014:	e00a      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800501c:	e006      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800501e:	bf00      	nop
 8005020:	e004      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005022:	bf00      	nop
 8005024:	e002      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800502a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10d      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005038:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005042:	4a02      	ldr	r2, [pc, #8]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005044:	430b      	orrs	r3, r1
 8005046:	6513      	str	r3, [r2, #80]	@ 0x50
 8005048:	e006      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800504a:	bf00      	nop
 800504c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005068:	2300      	movs	r3, #0
 800506a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800506e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005072:	460b      	mov	r3, r1
 8005074:	4313      	orrs	r3, r2
 8005076:	d055      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005080:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005084:	d033      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005086:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800508a:	d82c      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005090:	d02f      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005096:	d826      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005098:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800509c:	d02b      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800509e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050a2:	d820      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a8:	d012      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80050aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050ae:	d81a      	bhi.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d022      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80050b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b8:	d115      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	3308      	adds	r3, #8
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fee8 	bl	8005e98 <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050ce:	e015      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d4:	3328      	adds	r3, #40	@ 0x28
 80050d6:	2101      	movs	r1, #1
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 ff8f 	bl	8005ffc <RCCEx_PLL3_Config>
 80050de:	4603      	mov	r3, r0
 80050e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80050e4:	e00a      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050ec:	e006      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050ee:	bf00      	nop
 80050f0:	e004      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050f2:	bf00      	nop
 80050f4:	e002      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005104:	4ba3      	ldr	r3, [pc, #652]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005108:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005110:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005114:	4a9f      	ldr	r2, [pc, #636]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005116:	430b      	orrs	r3, r1
 8005118:	6593      	str	r3, [r2, #88]	@ 0x58
 800511a:	e003      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005130:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005134:	2300      	movs	r3, #0
 8005136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800513a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800513e:	460b      	mov	r3, r1
 8005140:	4313      	orrs	r3, r2
 8005142:	d037      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800514e:	d00e      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005154:	d816      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d018      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800515a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800515e:	d111      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4b8c      	ldr	r3, [pc, #560]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	4a8b      	ldr	r2, [pc, #556]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800516c:	e00f      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800516e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005172:	3308      	adds	r3, #8
 8005174:	2101      	movs	r1, #1
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fe8e 	bl	8005e98 <RCCEx_PLL2_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005182:	e004      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800518a:	e000      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800518c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10a      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005196:	4b7f      	ldr	r3, [pc, #508]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800519e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	4a7b      	ldr	r2, [pc, #492]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051a6:	430b      	orrs	r3, r1
 80051a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80051aa:	e003      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80051c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051c4:	2300      	movs	r3, #0
 80051c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80051ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4313      	orrs	r3, r2
 80051d2:	d039      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d81c      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005221 	.word	0x08005221
 80051e8:	080051f5 	.word	0x080051f5
 80051ec:	08005203 	.word	0x08005203
 80051f0:	08005221 	.word	0x08005221
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f4:	4b67      	ldr	r3, [pc, #412]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	4a66      	ldr	r2, [pc, #408]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005200:	e00f      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	3308      	adds	r3, #8
 8005208:	2102      	movs	r1, #2
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fe44 	bl	8005e98 <RCCEx_PLL2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005216:	e004      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800521e:	e000      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800522a:	4b5a      	ldr	r3, [pc, #360]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800522c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522e:	f023 0103 	bic.w	r1, r3, #3
 8005232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005236:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005238:	4a56      	ldr	r2, [pc, #344]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800523a:	430b      	orrs	r3, r1
 800523c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800523e:	e003      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005254:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005258:	2300      	movs	r3, #0
 800525a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800525e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005262:	460b      	mov	r3, r1
 8005264:	4313      	orrs	r3, r2
 8005266:	f000 809f 	beq.w	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800526a:	4b4b      	ldr	r3, [pc, #300]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4a      	ldr	r2, [pc, #296]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005276:	f7fd fabb 	bl	80027f0 <HAL_GetTick>
 800527a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800527e:	e00b      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005280:	f7fd fab6 	bl	80027f0 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b64      	cmp	r3, #100	@ 0x64
 800528e:	d903      	bls.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005296:	e005      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005298:	4b3f      	ldr	r3, [pc, #252]	@ (8005398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ed      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80052a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d179      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052ac:	4b39      	ldr	r3, [pc, #228]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052b8:	4053      	eors	r3, r2
 80052ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d015      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c2:	4b34      	ldr	r3, [pc, #208]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ce:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d2:	4a30      	ldr	r2, [pc, #192]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052da:	4b2e      	ldr	r3, [pc, #184]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052de:	4a2d      	ldr	r2, [pc, #180]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052fa:	d118      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fd fa78 	bl	80027f0 <HAL_GetTick>
 8005300:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005304:	e00d      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fd fa73 	bl	80027f0 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005310:	1ad2      	subs	r2, r2, r3
 8005312:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005320:	e005      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005322:	4b1c      	ldr	r3, [pc, #112]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0eb      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800532e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005332:	2b00      	cmp	r3, #0
 8005334:	d129      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800533e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005346:	d10e      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005348:	4b12      	ldr	r3, [pc, #72]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005358:	091a      	lsrs	r2, r3, #4
 800535a:	4b10      	ldr	r3, [pc, #64]	@ (800539c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800535c:	4013      	ands	r3, r2
 800535e:	4a0d      	ldr	r2, [pc, #52]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005360:	430b      	orrs	r3, r1
 8005362:	6113      	str	r3, [r2, #16]
 8005364:	e005      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	4a0a      	ldr	r2, [pc, #40]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800536c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005370:	6113      	str	r3, [r2, #16]
 8005372:	4b08      	ldr	r3, [pc, #32]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005374:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800537a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800537e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005382:	4a04      	ldr	r2, [pc, #16]	@ (8005394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005384:	430b      	orrs	r3, r1
 8005386:	6713      	str	r3, [r2, #112]	@ 0x70
 8005388:	e00e      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005392:	e009      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005394:	58024400 	.word	0x58024400
 8005398:	58024800 	.word	0x58024800
 800539c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f002 0301 	and.w	r3, r2, #1
 80053b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f000 8089 	beq.w	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053d0:	2b28      	cmp	r3, #40	@ 0x28
 80053d2:	d86b      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80053d4:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	080054b5 	.word	0x080054b5
 80053e0:	080054ad 	.word	0x080054ad
 80053e4:	080054ad 	.word	0x080054ad
 80053e8:	080054ad 	.word	0x080054ad
 80053ec:	080054ad 	.word	0x080054ad
 80053f0:	080054ad 	.word	0x080054ad
 80053f4:	080054ad 	.word	0x080054ad
 80053f8:	080054ad 	.word	0x080054ad
 80053fc:	08005481 	.word	0x08005481
 8005400:	080054ad 	.word	0x080054ad
 8005404:	080054ad 	.word	0x080054ad
 8005408:	080054ad 	.word	0x080054ad
 800540c:	080054ad 	.word	0x080054ad
 8005410:	080054ad 	.word	0x080054ad
 8005414:	080054ad 	.word	0x080054ad
 8005418:	080054ad 	.word	0x080054ad
 800541c:	08005497 	.word	0x08005497
 8005420:	080054ad 	.word	0x080054ad
 8005424:	080054ad 	.word	0x080054ad
 8005428:	080054ad 	.word	0x080054ad
 800542c:	080054ad 	.word	0x080054ad
 8005430:	080054ad 	.word	0x080054ad
 8005434:	080054ad 	.word	0x080054ad
 8005438:	080054ad 	.word	0x080054ad
 800543c:	080054b5 	.word	0x080054b5
 8005440:	080054ad 	.word	0x080054ad
 8005444:	080054ad 	.word	0x080054ad
 8005448:	080054ad 	.word	0x080054ad
 800544c:	080054ad 	.word	0x080054ad
 8005450:	080054ad 	.word	0x080054ad
 8005454:	080054ad 	.word	0x080054ad
 8005458:	080054ad 	.word	0x080054ad
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054ad 	.word	0x080054ad
 8005464:	080054ad 	.word	0x080054ad
 8005468:	080054ad 	.word	0x080054ad
 800546c:	080054ad 	.word	0x080054ad
 8005470:	080054ad 	.word	0x080054ad
 8005474:	080054ad 	.word	0x080054ad
 8005478:	080054ad 	.word	0x080054ad
 800547c:	080054b5 	.word	0x080054b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	3308      	adds	r3, #8
 8005486:	2101      	movs	r1, #1
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fd05 	bl	8005e98 <RCCEx_PLL2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005494:	e00f      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549a:	3328      	adds	r3, #40	@ 0x28
 800549c:	2101      	movs	r1, #1
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fdac 	bl	8005ffc <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80054aa:	e004      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054b2:	e000      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80054b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054be:	4bbf      	ldr	r3, [pc, #764]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054cc:	4abb      	ldr	r2, [pc, #748]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054ce:	430b      	orrs	r3, r1
 80054d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80054d2:	e003      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	f002 0302 	and.w	r3, r2, #2
 80054e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054ec:	2300      	movs	r3, #0
 80054ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054f6:	460b      	mov	r3, r1
 80054f8:	4313      	orrs	r3, r2
 80054fa:	d041      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005502:	2b05      	cmp	r3, #5
 8005504:	d824      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005506:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005559 	.word	0x08005559
 8005510:	08005525 	.word	0x08005525
 8005514:	0800553b 	.word	0x0800553b
 8005518:	08005559 	.word	0x08005559
 800551c:	08005559 	.word	0x08005559
 8005520:	08005559 	.word	0x08005559
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005528:	3308      	adds	r3, #8
 800552a:	2101      	movs	r1, #1
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fcb3 	bl	8005e98 <RCCEx_PLL2_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005538:	e00f      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800553a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553e:	3328      	adds	r3, #40	@ 0x28
 8005540:	2101      	movs	r1, #1
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fd5a 	bl	8005ffc <RCCEx_PLL3_Config>
 8005548:	4603      	mov	r3, r0
 800554a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800554e:	e004      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005556:	e000      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005562:	4b96      	ldr	r3, [pc, #600]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	f023 0107 	bic.w	r1, r3, #7
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005570:	4a92      	ldr	r2, [pc, #584]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005572:	430b      	orrs	r3, r1
 8005574:	6553      	str	r3, [r2, #84]	@ 0x54
 8005576:	e003      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f002 0304 	and.w	r3, r2, #4
 800558c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005590:	2300      	movs	r3, #0
 8005592:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005596:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800559a:	460b      	mov	r3, r1
 800559c:	4313      	orrs	r3, r2
 800559e:	d044      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	d825      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80055ac:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	08005601 	.word	0x08005601
 80055b8:	080055cd 	.word	0x080055cd
 80055bc:	080055e3 	.word	0x080055e3
 80055c0:	08005601 	.word	0x08005601
 80055c4:	08005601 	.word	0x08005601
 80055c8:	08005601 	.word	0x08005601
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d0:	3308      	adds	r3, #8
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fc5f 	bl	8005e98 <RCCEx_PLL2_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055e0:	e00f      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e6:	3328      	adds	r3, #40	@ 0x28
 80055e8:	2101      	movs	r1, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fd06 	bl	8005ffc <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055f6:	e004      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055fe:	e000      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10b      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800560a:	4b6c      	ldr	r3, [pc, #432]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800560c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800560e:	f023 0107 	bic.w	r1, r3, #7
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800561a:	4a68      	ldr	r2, [pc, #416]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800561c:	430b      	orrs	r3, r1
 800561e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005620:	e003      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f002 0320 	and.w	r3, r2, #32
 8005636:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800563a:	2300      	movs	r3, #0
 800563c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005644:	460b      	mov	r3, r1
 8005646:	4313      	orrs	r3, r2
 8005648:	d055      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005656:	d033      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800565c:	d82c      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005662:	d02f      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005668:	d826      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800566a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800566e:	d02b      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005670:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005674:	d820      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567a:	d012      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800567c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005680:	d81a      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d022      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800568a:	d115      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800568c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005690:	3308      	adds	r3, #8
 8005692:	2100      	movs	r1, #0
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fbff 	bl	8005e98 <RCCEx_PLL2_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056a0:	e015      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	3328      	adds	r3, #40	@ 0x28
 80056a8:	2102      	movs	r1, #2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fca6 	bl	8005ffc <RCCEx_PLL3_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80056b6:	e00a      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056be:	e006      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056c0:	bf00      	nop
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056c4:	bf00      	nop
 80056c6:	e002      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056d6:	4b39      	ldr	r3, [pc, #228]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e6:	4a35      	ldr	r2, [pc, #212]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800570c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d058      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800571e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005722:	d033      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005724:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005728:	d82c      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800572a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572e:	d02f      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005734:	d826      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005736:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800573a:	d02b      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800573c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005740:	d820      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005746:	d012      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800574c:	d81a      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d022      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005756:	d115      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	3308      	adds	r3, #8
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fb99 	bl	8005e98 <RCCEx_PLL2_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800576c:	e015      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005772:	3328      	adds	r3, #40	@ 0x28
 8005774:	2102      	movs	r1, #2
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fc40 	bl	8005ffc <RCCEx_PLL3_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005782:	e00a      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800578a:	e006      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800578c:	bf00      	nop
 800578e:	e004      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005790:	bf00      	nop
 8005792:	e002      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005794:	bf00      	nop
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10e      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057a2:	4b06      	ldr	r3, [pc, #24]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057b2:	4a02      	ldr	r2, [pc, #8]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80057b8:	e006      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80057c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80057d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057d8:	2300      	movs	r3, #0
 80057da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80057e2:	460b      	mov	r3, r1
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d055      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057f4:	d033      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80057f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057fa:	d82c      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005800:	d02f      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005806:	d826      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005808:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800580c:	d02b      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800580e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005812:	d820      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005818:	d012      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800581a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800581e:	d81a      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d022      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005828:	d115      	bne.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800582a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582e:	3308      	adds	r3, #8
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fb30 	bl	8005e98 <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800583e:	e015      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005844:	3328      	adds	r3, #40	@ 0x28
 8005846:	2102      	movs	r1, #2
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fbd7 	bl	8005ffc <RCCEx_PLL3_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005854:	e00a      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800585c:	e006      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800585e:	bf00      	nop
 8005860:	e004      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005862:	bf00      	nop
 8005864:	e002      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005866:	bf00      	nop
 8005868:	e000      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800586a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005874:	4ba1      	ldr	r3, [pc, #644]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005878:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005884:	4a9d      	ldr	r2, [pc, #628]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005886:	430b      	orrs	r3, r1
 8005888:	6593      	str	r3, [r2, #88]	@ 0x58
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f002 0308 	and.w	r3, r2, #8
 80058a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d01e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c0:	d10c      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	3328      	adds	r3, #40	@ 0x28
 80058c8:	2102      	movs	r1, #2
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fb96 	bl	8005ffc <RCCEx_PLL3_Config>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058dc:	4b87      	ldr	r3, [pc, #540]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ec:	4a83      	ldr	r2, [pc, #524]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ee:	430b      	orrs	r3, r1
 80058f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fa:	f002 0310 	and.w	r3, r2, #16
 80058fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005902:	2300      	movs	r3, #0
 8005904:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005908:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800590c:	460b      	mov	r3, r1
 800590e:	4313      	orrs	r3, r2
 8005910:	d01e      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800591a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800591e:	d10c      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005924:	3328      	adds	r3, #40	@ 0x28
 8005926:	2102      	movs	r1, #2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fb67 	bl	8005ffc <RCCEx_PLL3_Config>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800593a:	4b70      	ldr	r3, [pc, #448]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800594a:	4a6c      	ldr	r2, [pc, #432]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800595c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005960:	2300      	movs	r3, #0
 8005962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005966:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d03e      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005974:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800597c:	d022      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800597e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005982:	d81b      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800598c:	d00b      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800598e:	e015      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005994:	3308      	adds	r3, #8
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fa7d 	bl	8005e98 <RCCEx_PLL2_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059a4:	e00f      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059aa:	3328      	adds	r3, #40	@ 0x28
 80059ac:	2102      	movs	r1, #2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fb24 	bl	8005ffc <RCCEx_PLL3_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80059ba:	e004      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059c2:	e000      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80059c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10b      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059ce:	4b4b      	ldr	r3, [pc, #300]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059de:	4a47      	ldr	r2, [pc, #284]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059fc:	2300      	movs	r3, #0
 80059fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d03b      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a16:	d01f      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005a18:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a1c:	d818      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a22:	d003      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005a24:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a28:	d007      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005a2a:	e011      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2c:	4b33      	ldr	r3, [pc, #204]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	4a32      	ldr	r2, [pc, #200]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a38:	e00f      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	3328      	adds	r3, #40	@ 0x28
 8005a40:	2101      	movs	r1, #1
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fada 	bl	8005ffc <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a4e:	e004      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a62:	4b26      	ldr	r3, [pc, #152]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a72:	4a22      	ldr	r2, [pc, #136]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a78:	e003      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a90:	2300      	movs	r3, #0
 8005a92:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	d034      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aac:	d007      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005aae:	e011      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab0:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	4a11      	ldr	r2, [pc, #68]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005abc:	e00e      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f9e6 	bl	8005e98 <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ad2:	e003      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10d      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af2:	4a02      	ldr	r2, [pc, #8]	@ (8005afc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005af8:	e006      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005afa:	bf00      	nop
 8005afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005b14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b16:	2300      	movs	r3, #0
 8005b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	d00c      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b28:	3328      	adds	r3, #40	@ 0x28
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fa65 	bl	8005ffc <RCCEx_PLL3_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005b4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d038      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b66:	d018      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b6c:	d811      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b72:	d014      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b78:	d80b      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d011      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b82:	d106      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b84:	4bc3      	ldr	r3, [pc, #780]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	4ac2      	ldr	r2, [pc, #776]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b90:	e008      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b98:	e004      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b9e:	bf00      	nop
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bac:	4bb9      	ldr	r3, [pc, #740]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bbc:	4ab5      	ldr	r2, [pc, #724]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bc2:	e003      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005bd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bda:	2300      	movs	r3, #0
 8005bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d009      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005be8:	4baa      	ldr	r3, [pc, #680]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf6:	4aa7      	ldr	r2, [pc, #668]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005c08:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c12:	460b      	mov	r3, r1
 8005c14:	4313      	orrs	r3, r2
 8005c16:	d00a      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c18:	4b9e      	ldr	r3, [pc, #632]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c28:	4a9a      	ldr	r2, [pc, #616]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c44:	460b      	mov	r3, r1
 8005c46:	4313      	orrs	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c4a:	4b92      	ldr	r3, [pc, #584]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c58:	4a8e      	ldr	r2, [pc, #568]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c74:	460b      	mov	r3, r1
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d00e      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c7a:	4b86      	ldr	r3, [pc, #536]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	4a85      	ldr	r2, [pc, #532]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c84:	6113      	str	r3, [r2, #16]
 8005c86:	4b83      	ldr	r3, [pc, #524]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c88:	6919      	ldr	r1, [r3, #16]
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c92:	4a80      	ldr	r2, [pc, #512]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005caa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005cb4:	4b77      	ldr	r3, [pc, #476]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc2:	4a74      	ldr	r2, [pc, #464]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ce4:	4b6b      	ldr	r3, [pc, #428]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cf4:	4a67      	ldr	r2, [pc, #412]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	2100      	movs	r1, #0
 8005d04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	d011      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f8ba 	bl	8005e98 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	2100      	movs	r1, #0
 8005d44:	6239      	str	r1, [r7, #32]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d50:	460b      	mov	r3, r1
 8005d52:	4313      	orrs	r3, r2
 8005d54:	d011      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f89a 	bl	8005e98 <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	2100      	movs	r1, #0
 8005d84:	61b9      	str	r1, [r7, #24]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d90:	460b      	mov	r3, r1
 8005d92:	4313      	orrs	r3, r2
 8005d94:	d011      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f87a 	bl	8005e98 <RCCEx_PLL2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	6139      	str	r1, [r7, #16]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	d011      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dda:	3328      	adds	r3, #40	@ 0x28
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f90c 	bl	8005ffc <RCCEx_PLL3_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	2100      	movs	r1, #0
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e10:	460b      	mov	r3, r1
 8005e12:	4313      	orrs	r3, r2
 8005e14:	d011      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1a:	3328      	adds	r3, #40	@ 0x28
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f8ec 	bl	8005ffc <RCCEx_PLL3_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	2100      	movs	r1, #0
 8005e44:	6039      	str	r1, [r7, #0]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	607b      	str	r3, [r7, #4]
 8005e4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e50:	460b      	mov	r3, r1
 8005e52:	4313      	orrs	r3, r2
 8005e54:	d011      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	3328      	adds	r3, #40	@ 0x28
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 f8cc 	bl	8005ffc <RCCEx_PLL3_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005e7a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e000      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e94:	58024400 	.word	0x58024400

08005e98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ea6:	4b53      	ldr	r3, [pc, #332]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d101      	bne.n	8005eb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e099      	b.n	8005fea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a4e      	ldr	r2, [pc, #312]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ec2:	f7fc fc95 	bl	80027f0 <HAL_GetTick>
 8005ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ec8:	e008      	b.n	8005edc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005eca:	f7fc fc91 	bl	80027f0 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e086      	b.n	8005fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005edc:	4b45      	ldr	r3, [pc, #276]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1f0      	bne.n	8005eca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ee8:	4b42      	ldr	r3, [pc, #264]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	031b      	lsls	r3, r3, #12
 8005ef6:	493f      	ldr	r1, [pc, #252]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	628b      	str	r3, [r1, #40]	@ 0x28
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	025b      	lsls	r3, r3, #9
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	041b      	lsls	r3, r3, #16
 8005f1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	061b      	lsls	r3, r3, #24
 8005f28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f2c:	4931      	ldr	r1, [pc, #196]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f32:	4b30      	ldr	r3, [pc, #192]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	492d      	ldr	r1, [pc, #180]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f44:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f48:	f023 0220 	bic.w	r2, r3, #32
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	4928      	ldr	r1, [pc, #160]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f56:	4b27      	ldr	r3, [pc, #156]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	4a26      	ldr	r2, [pc, #152]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f5c:	f023 0310 	bic.w	r3, r3, #16
 8005f60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f62:	4b24      	ldr	r3, [pc, #144]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f66:	4b24      	ldr	r3, [pc, #144]	@ (8005ff8 <RCCEx_PLL2_Config+0x160>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	69d2      	ldr	r2, [r2, #28]
 8005f6e:	00d2      	lsls	r2, r2, #3
 8005f70:	4920      	ldr	r1, [pc, #128]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f76:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f7c:	f043 0310 	orr.w	r3, r3, #16
 8005f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f88:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005f94:	e00f      	b.n	8005fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d106      	bne.n	8005faa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f9c:	4b15      	ldr	r3, [pc, #84]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	4a14      	ldr	r2, [pc, #80]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005fa8:	e005      	b.n	8005fb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005faa:	4b12      	ldr	r3, [pc, #72]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fae:	4a11      	ldr	r2, [pc, #68]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005fb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a0e      	ldr	r2, [pc, #56]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005fbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fc2:	f7fc fc15 	bl	80027f0 <HAL_GetTick>
 8005fc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fc8:	e008      	b.n	8005fdc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fca:	f7fc fc11 	bl	80027f0 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e006      	b.n	8005fea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fdc:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <RCCEx_PLL2_Config+0x15c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0f0      	beq.n	8005fca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	ffff0007 	.word	0xffff0007

08005ffc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800600a:	4b53      	ldr	r3, [pc, #332]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	2b03      	cmp	r3, #3
 8006014:	d101      	bne.n	800601a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e099      	b.n	800614e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800601a:	4b4f      	ldr	r3, [pc, #316]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a4e      	ldr	r2, [pc, #312]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006026:	f7fc fbe3 	bl	80027f0 <HAL_GetTick>
 800602a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800602c:	e008      	b.n	8006040 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800602e:	f7fc fbdf 	bl	80027f0 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e086      	b.n	800614e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006040:	4b45      	ldr	r3, [pc, #276]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f0      	bne.n	800602e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800604c:	4b42      	ldr	r3, [pc, #264]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	051b      	lsls	r3, r3, #20
 800605a:	493f      	ldr	r1, [pc, #252]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 800605c:	4313      	orrs	r3, r2
 800605e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	3b01      	subs	r3, #1
 8006066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	3b01      	subs	r3, #1
 8006070:	025b      	lsls	r3, r3, #9
 8006072:	b29b      	uxth	r3, r3
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	3b01      	subs	r3, #1
 800607c:	041b      	lsls	r3, r3, #16
 800607e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	3b01      	subs	r3, #1
 800608a:	061b      	lsls	r3, r3, #24
 800608c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006090:	4931      	ldr	r1, [pc, #196]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006092:	4313      	orrs	r3, r2
 8006094:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006096:	4b30      	ldr	r3, [pc, #192]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	492d      	ldr	r1, [pc, #180]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	4928      	ldr	r1, [pc, #160]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060ba:	4b27      	ldr	r3, [pc, #156]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060be:	4a26      	ldr	r2, [pc, #152]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060c6:	4b24      	ldr	r3, [pc, #144]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060ca:	4b24      	ldr	r3, [pc, #144]	@ (800615c <RCCEx_PLL3_Config+0x160>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	69d2      	ldr	r2, [r2, #28]
 80060d2:	00d2      	lsls	r2, r2, #3
 80060d4:	4920      	ldr	r1, [pc, #128]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060da:	4b1f      	ldr	r3, [pc, #124]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060de:	4a1e      	ldr	r2, [pc, #120]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80060ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	4a19      	ldr	r2, [pc, #100]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 80060f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80060f8:	e00f      	b.n	800611a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d106      	bne.n	800610e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006100:	4b15      	ldr	r3, [pc, #84]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a14      	ldr	r2, [pc, #80]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006106:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800610a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800610c:	e005      	b.n	800611a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800610e:	4b12      	ldr	r3, [pc, #72]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006112:	4a11      	ldr	r2, [pc, #68]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006114:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006118:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800611a:	4b0f      	ldr	r3, [pc, #60]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a0e      	ldr	r2, [pc, #56]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006126:	f7fc fb63 	bl	80027f0 <HAL_GetTick>
 800612a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800612c:	e008      	b.n	8006140 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800612e:	f7fc fb5f 	bl	80027f0 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e006      	b.n	800614e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006140:	4b05      	ldr	r3, [pc, #20]	@ (8006158 <RCCEx_PLL3_Config+0x15c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800614c:	7bfb      	ldrb	r3, [r7, #15]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
 800615c:	ffff0007 	.word	0xffff0007

08006160 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e10f      	b.n	8006392 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a87      	ldr	r2, [pc, #540]	@ (800639c <HAL_SPI_Init+0x23c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <HAL_SPI_Init+0x42>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a86      	ldr	r2, [pc, #536]	@ (80063a0 <HAL_SPI_Init+0x240>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00a      	beq.n	80061a2 <HAL_SPI_Init+0x42>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a84      	ldr	r2, [pc, #528]	@ (80063a4 <HAL_SPI_Init+0x244>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d005      	beq.n	80061a2 <HAL_SPI_Init+0x42>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	2b0f      	cmp	r3, #15
 800619c:	d901      	bls.n	80061a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e0f7      	b.n	8006392 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fe2e 	bl	8006e04 <SPI_GetPacketSize>
 80061a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a7b      	ldr	r2, [pc, #492]	@ (800639c <HAL_SPI_Init+0x23c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00c      	beq.n	80061ce <HAL_SPI_Init+0x6e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a79      	ldr	r2, [pc, #484]	@ (80063a0 <HAL_SPI_Init+0x240>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d007      	beq.n	80061ce <HAL_SPI_Init+0x6e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a78      	ldr	r2, [pc, #480]	@ (80063a4 <HAL_SPI_Init+0x244>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_Init+0x6e>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d811      	bhi.n	80061f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80061d2:	4a72      	ldr	r2, [pc, #456]	@ (800639c <HAL_SPI_Init+0x23c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d009      	beq.n	80061ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a70      	ldr	r2, [pc, #448]	@ (80063a0 <HAL_SPI_Init+0x240>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_SPI_Init+0x8c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a6f      	ldr	r2, [pc, #444]	@ (80063a4 <HAL_SPI_Init+0x244>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d104      	bne.n	80061f6 <HAL_SPI_Init+0x96>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b10      	cmp	r3, #16
 80061f0:	d901      	bls.n	80061f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e0cd      	b.n	8006392 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fb ff80 	bl	8002110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006232:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800623c:	d119      	bne.n	8006272 <HAL_SPI_Init+0x112>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006246:	d103      	bne.n	8006250 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800625c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006260:	d107      	bne.n	8006272 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006270:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00f      	beq.n	800629e <HAL_SPI_Init+0x13e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	2b06      	cmp	r3, #6
 8006284:	d90b      	bls.n	800629e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e007      	b.n	80062ae <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69da      	ldr	r2, [r3, #28]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	431a      	orrs	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c0:	ea42 0103 	orr.w	r1, r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006302:	431a      	orrs	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800630e:	ea42 0103 	orr.w	r1, r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d113      	bne.n	800634e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006338:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800634c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40013000 	.word	0x40013000
 80063a0:	40003800 	.word	0x40003800
 80063a4:	40003c00 	.word	0x40003c00

080063a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	603b      	str	r3, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3320      	adds	r3, #32
 80063be:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c0:	f7fc fa16 	bl	80027f0 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d001      	beq.n	80063d6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
 80063d4:	e1d1      	b.n	800677a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_SPI_Transmit+0x3a>
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e1c9      	b.n	800677a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_SPI_Transmit+0x4c>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e1c2      	b.n	800677a <HAL_SPI_Transmit+0x3d2>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2203      	movs	r2, #3
 8006400:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800644c:	d108      	bne.n	8006460 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e009      	b.n	8006474 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006472:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	4b96      	ldr	r3, [pc, #600]	@ (80066d4 <HAL_SPI_Transmit+0x32c>)
 800647c:	4013      	ands	r3, r2
 800647e:	88f9      	ldrh	r1, [r7, #6]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	430b      	orrs	r3, r1
 8006486:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064a0:	d107      	bne.n	80064b2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	d947      	bls.n	800654a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80064ba:	e03f      	b.n	800653c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d114      	bne.n	80064f4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064da:	1d1a      	adds	r2, r3, #4
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80064f2:	e023      	b.n	800653c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064f4:	f7fc f97c 	bl	80027f0 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d803      	bhi.n	800650c <HAL_SPI_Transmit+0x164>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650a:	d102      	bne.n	8006512 <HAL_SPI_Transmit+0x16a>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d114      	bne.n	800653c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fba8 	bl	8006c68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e11e      	b.n	800677a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1b9      	bne.n	80064bc <HAL_SPI_Transmit+0x114>
 8006548:	e0f1      	b.n	800672e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b07      	cmp	r3, #7
 8006550:	f240 80e6 	bls.w	8006720 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006554:	e05d      	b.n	8006612 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d132      	bne.n	80065ca <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d918      	bls.n	80065a2 <HAL_SPI_Transmit+0x1fa>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	d014      	beq.n	80065a2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006588:	1d1a      	adds	r2, r3, #4
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b02      	subs	r3, #2
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80065a0:	e037      	b.n	8006612 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a6:	881a      	ldrh	r2, [r3, #0]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80065c8:	e023      	b.n	8006612 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ca:	f7fc f911 	bl	80027f0 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d803      	bhi.n	80065e2 <HAL_SPI_Transmit+0x23a>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d102      	bne.n	80065e8 <HAL_SPI_Transmit+0x240>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d114      	bne.n	8006612 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fb3d 	bl	8006c68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e0b3      	b.n	800677a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006618:	b29b      	uxth	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d19b      	bne.n	8006556 <HAL_SPI_Transmit+0x1ae>
 800661e:	e086      	b.n	800672e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d154      	bne.n	80066d8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b03      	cmp	r3, #3
 8006638:	d918      	bls.n	800666c <HAL_SPI_Transmit+0x2c4>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663e:	2b40      	cmp	r3, #64	@ 0x40
 8006640:	d914      	bls.n	800666c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b04      	subs	r3, #4
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800666a:	e059      	b.n	8006720 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006672:	b29b      	uxth	r3, r3
 8006674:	2b01      	cmp	r3, #1
 8006676:	d917      	bls.n	80066a8 <HAL_SPI_Transmit+0x300>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d013      	beq.n	80066a8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b02      	subs	r3, #2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066a6:	e03b      	b.n	8006720 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3320      	adds	r3, #32
 80066b2:	7812      	ldrb	r2, [r2, #0]
 80066b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066d2:	e025      	b.n	8006720 <HAL_SPI_Transmit+0x378>
 80066d4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d8:	f7fc f88a 	bl	80027f0 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d803      	bhi.n	80066f0 <HAL_SPI_Transmit+0x348>
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d102      	bne.n	80066f6 <HAL_SPI_Transmit+0x34e>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d114      	bne.n	8006720 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fab6 	bl	8006c68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006702:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e02c      	b.n	800677a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	f47f af79 	bne.w	8006620 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2200      	movs	r2, #0
 8006736:	2108      	movs	r1, #8
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fb35 	bl	8006da8 <SPI_WaitOnFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fa87 	bl	8006c68 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006778:	2300      	movs	r3, #0
  }
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop

08006784 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	603b      	str	r3, [r7, #0]
 8006790:	4613      	mov	r3, r2
 8006792:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	b29b      	uxth	r3, r3
 800679c:	3301      	adds	r3, #1
 800679e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3330      	adds	r3, #48	@ 0x30
 80067a6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a8:	f7fc f822 	bl	80027f0 <HAL_GetTick>
 80067ac:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d001      	beq.n	80067be <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
 80067bc:	e250      	b.n	8006c60 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <HAL_SPI_Receive+0x46>
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e248      	b.n	8006c60 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_SPI_Receive+0x58>
 80067d8:	2302      	movs	r3, #2
 80067da:	e241      	b.n	8006c60 <HAL_SPI_Receive+0x4dc>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2204      	movs	r2, #4
 80067e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	88fa      	ldrh	r2, [r7, #6]
 8006806:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006834:	d108      	bne.n	8006848 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e009      	b.n	800685c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800685a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4b95      	ldr	r3, [pc, #596]	@ (8006ab8 <HAL_SPI_Receive+0x334>)
 8006864:	4013      	ands	r3, r2
 8006866:	88f9      	ldrh	r1, [r7, #6]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	430b      	orrs	r3, r1
 800686e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006888:	d107      	bne.n	800689a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006898:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	d96c      	bls.n	800697c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80068a2:	e064      	b.n	800696e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d114      	bne.n	80068e4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068c4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ca:	1d1a      	adds	r2, r3, #4
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80068e2:	e044      	b.n	800696e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	8bfa      	ldrh	r2, [r7, #30]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d919      	bls.n	8006926 <HAL_SPI_Receive+0x1a2>
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d014      	beq.n	8006926 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006904:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006906:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800690c:	1d1a      	adds	r2, r3, #4
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006918:	b29b      	uxth	r3, r3
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006924:	e023      	b.n	800696e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006926:	f7fb ff63 	bl	80027f0 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d803      	bhi.n	800693e <HAL_SPI_Receive+0x1ba>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d102      	bne.n	8006944 <HAL_SPI_Receive+0x1c0>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d114      	bne.n	800696e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 f98f 	bl	8006c68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006950:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e178      	b.n	8006c60 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d194      	bne.n	80068a4 <HAL_SPI_Receive+0x120>
 800697a:	e15e      	b.n	8006c3a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	2b07      	cmp	r3, #7
 8006982:	f240 8153 	bls.w	8006c2c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006986:	e08f      	b.n	8006aa8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b01      	cmp	r3, #1
 800699c:	d114      	bne.n	80069c8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	8812      	ldrh	r2, [r2, #0]
 80069a6:	b292      	uxth	r2, r2
 80069a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ae:	1c9a      	adds	r2, r3, #2
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80069c6:	e06f      	b.n	8006aa8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	8bfa      	ldrh	r2, [r7, #30]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d924      	bls.n	8006a20 <HAL_SPI_Receive+0x29c>
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01f      	beq.n	8006a20 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	8812      	ldrh	r2, [r2, #0]
 80069e8:	b292      	uxth	r2, r2
 80069ea:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f0:	1c9a      	adds	r2, r3, #2
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	8812      	ldrh	r2, [r2, #0]
 80069fe:	b292      	uxth	r2, r2
 8006a00:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a06:	1c9a      	adds	r2, r3, #2
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b02      	subs	r3, #2
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a1e:	e043      	b.n	8006aa8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d119      	bne.n	8006a60 <HAL_SPI_Receive+0x2dc>
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d014      	beq.n	8006a60 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	8812      	ldrh	r2, [r2, #0]
 8006a3e:	b292      	uxth	r2, r2
 8006a40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006a5e:	e023      	b.n	8006aa8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a60:	f7fb fec6 	bl	80027f0 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d803      	bhi.n	8006a78 <HAL_SPI_Receive+0x2f4>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d102      	bne.n	8006a7e <HAL_SPI_Receive+0x2fa>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d114      	bne.n	8006aa8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f8f2 	bl	8006c68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e0db      	b.n	8006c60 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f47f af69 	bne.w	8006988 <HAL_SPI_Receive+0x204>
 8006ab6:	e0c0      	b.n	8006c3a <HAL_SPI_Receive+0x4b6>
 8006ab8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d117      	bne.n	8006b02 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b00:	e094      	b.n	8006c2c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	8bfa      	ldrh	r2, [r7, #30]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d946      	bls.n	8006b9e <HAL_SPI_Receive+0x41a>
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d041      	beq.n	8006b9e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b26:	7812      	ldrb	r2, [r2, #0]
 8006b28:	b2d2      	uxtb	r2, r2
 8006b2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b42:	7812      	ldrb	r2, [r2, #0]
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5e:	7812      	ldrb	r2, [r2, #0]
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b04      	subs	r3, #4
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b9c:	e046      	b.n	8006c2c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d81c      	bhi.n	8006be4 <HAL_SPI_Receive+0x460>
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d017      	beq.n	8006be4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bc0:	7812      	ldrb	r2, [r2, #0]
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006be2:	e023      	b.n	8006c2c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be4:	f7fb fe04 	bl	80027f0 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d803      	bhi.n	8006bfc <HAL_SPI_Receive+0x478>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfa:	d102      	bne.n	8006c02 <HAL_SPI_Receive+0x47e>
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d114      	bne.n	8006c2c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f830 	bl	8006c68 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e019      	b.n	8006c60 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f af41 	bne.w	8006abc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 f814 	bl	8006c68 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
  }
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0208 	orr.w	r2, r2, #8
 8006c86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f042 0210 	orr.w	r2, r2, #16
 8006c96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6919      	ldr	r1, [r3, #16]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8006da4 <SPI_CloseTransfer+0x13c>)
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006cc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d014      	beq.n	8006cfe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00f      	beq.n	8006cfe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ce4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	699a      	ldr	r2, [r3, #24]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f042 0220 	orr.w	r2, r2, #32
 8006cfc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d014      	beq.n	8006d34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00f      	beq.n	8006d34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d1a:	f043 0204 	orr.w	r2, r3, #4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00f      	beq.n	8006d5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d44:	f043 0201 	orr.w	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00f      	beq.n	8006d88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d6e:	f043 0208 	orr.w	r2, r3, #8
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	fffffc90 	.word	0xfffffc90

08006da8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006db8:	e010      	b.n	8006ddc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dba:	f7fb fd19 	bl	80027f0 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d803      	bhi.n	8006dd2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd0:	d102      	bne.n	8006dd8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e00f      	b.n	8006dfc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695a      	ldr	r2, [r3, #20]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d0df      	beq.n	8006dba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	3301      	adds	r3, #1
 8006e14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	3307      	adds	r3, #7
 8006e22:	08db      	lsrs	r3, r3, #3
 8006e24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <__cvt>:
 8006e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e3c:	ed2d 8b02 	vpush	{d8}
 8006e40:	eeb0 8b40 	vmov.f64	d8, d0
 8006e44:	b085      	sub	sp, #20
 8006e46:	4617      	mov	r7, r2
 8006e48:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e4c:	ee18 2a90 	vmov	r2, s17
 8006e50:	f025 0520 	bic.w	r5, r5, #32
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	bfb6      	itet	lt
 8006e58:	222d      	movlt	r2, #45	@ 0x2d
 8006e5a:	2200      	movge	r2, #0
 8006e5c:	eeb1 8b40 	vneglt.f64	d8, d0
 8006e60:	2d46      	cmp	r5, #70	@ 0x46
 8006e62:	460c      	mov	r4, r1
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	d004      	beq.n	8006e72 <__cvt+0x38>
 8006e68:	2d45      	cmp	r5, #69	@ 0x45
 8006e6a:	d100      	bne.n	8006e6e <__cvt+0x34>
 8006e6c:	3401      	adds	r4, #1
 8006e6e:	2102      	movs	r1, #2
 8006e70:	e000      	b.n	8006e74 <__cvt+0x3a>
 8006e72:	2103      	movs	r1, #3
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	ab02      	add	r3, sp, #8
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	4622      	mov	r2, r4
 8006e7e:	4633      	mov	r3, r6
 8006e80:	eeb0 0b48 	vmov.f64	d0, d8
 8006e84:	f001 f950 	bl	8008128 <_dtoa_r>
 8006e88:	2d47      	cmp	r5, #71	@ 0x47
 8006e8a:	d114      	bne.n	8006eb6 <__cvt+0x7c>
 8006e8c:	07fb      	lsls	r3, r7, #31
 8006e8e:	d50a      	bpl.n	8006ea6 <__cvt+0x6c>
 8006e90:	1902      	adds	r2, r0, r4
 8006e92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9a:	bf08      	it	eq
 8006e9c:	9203      	streq	r2, [sp, #12]
 8006e9e:	2130      	movs	r1, #48	@ 0x30
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d319      	bcc.n	8006eda <__cvt+0xa0>
 8006ea6:	9b03      	ldr	r3, [sp, #12]
 8006ea8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006eaa:	1a1b      	subs	r3, r3, r0
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	b005      	add	sp, #20
 8006eb0:	ecbd 8b02 	vpop	{d8}
 8006eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb6:	2d46      	cmp	r5, #70	@ 0x46
 8006eb8:	eb00 0204 	add.w	r2, r0, r4
 8006ebc:	d1e9      	bne.n	8006e92 <__cvt+0x58>
 8006ebe:	7803      	ldrb	r3, [r0, #0]
 8006ec0:	2b30      	cmp	r3, #48	@ 0x30
 8006ec2:	d107      	bne.n	8006ed4 <__cvt+0x9a>
 8006ec4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ecc:	bf1c      	itt	ne
 8006ece:	f1c4 0401 	rsbne	r4, r4, #1
 8006ed2:	6034      	strne	r4, [r6, #0]
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	e7db      	b.n	8006e92 <__cvt+0x58>
 8006eda:	1c5c      	adds	r4, r3, #1
 8006edc:	9403      	str	r4, [sp, #12]
 8006ede:	7019      	strb	r1, [r3, #0]
 8006ee0:	e7de      	b.n	8006ea0 <__cvt+0x66>

08006ee2 <__exponent>:
 8006ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	bfba      	itte	lt
 8006ee8:	4249      	neglt	r1, r1
 8006eea:	232d      	movlt	r3, #45	@ 0x2d
 8006eec:	232b      	movge	r3, #43	@ 0x2b
 8006eee:	2909      	cmp	r1, #9
 8006ef0:	7002      	strb	r2, [r0, #0]
 8006ef2:	7043      	strb	r3, [r0, #1]
 8006ef4:	dd29      	ble.n	8006f4a <__exponent+0x68>
 8006ef6:	f10d 0307 	add.w	r3, sp, #7
 8006efa:	461d      	mov	r5, r3
 8006efc:	270a      	movs	r7, #10
 8006efe:	461a      	mov	r2, r3
 8006f00:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f04:	fb07 1416 	mls	r4, r7, r6, r1
 8006f08:	3430      	adds	r4, #48	@ 0x30
 8006f0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f0e:	460c      	mov	r4, r1
 8006f10:	2c63      	cmp	r4, #99	@ 0x63
 8006f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f16:	4631      	mov	r1, r6
 8006f18:	dcf1      	bgt.n	8006efe <__exponent+0x1c>
 8006f1a:	3130      	adds	r1, #48	@ 0x30
 8006f1c:	1e94      	subs	r4, r2, #2
 8006f1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f22:	1c41      	adds	r1, r0, #1
 8006f24:	4623      	mov	r3, r4
 8006f26:	42ab      	cmp	r3, r5
 8006f28:	d30a      	bcc.n	8006f40 <__exponent+0x5e>
 8006f2a:	f10d 0309 	add.w	r3, sp, #9
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	42ac      	cmp	r4, r5
 8006f32:	bf88      	it	hi
 8006f34:	2300      	movhi	r3, #0
 8006f36:	3302      	adds	r3, #2
 8006f38:	4403      	add	r3, r0
 8006f3a:	1a18      	subs	r0, r3, r0
 8006f3c:	b003      	add	sp, #12
 8006f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f48:	e7ed      	b.n	8006f26 <__exponent+0x44>
 8006f4a:	2330      	movs	r3, #48	@ 0x30
 8006f4c:	3130      	adds	r1, #48	@ 0x30
 8006f4e:	7083      	strb	r3, [r0, #2]
 8006f50:	70c1      	strb	r1, [r0, #3]
 8006f52:	1d03      	adds	r3, r0, #4
 8006f54:	e7f1      	b.n	8006f3a <__exponent+0x58>
	...

08006f58 <_printf_float>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	b08d      	sub	sp, #52	@ 0x34
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006f64:	4616      	mov	r6, r2
 8006f66:	461f      	mov	r7, r3
 8006f68:	4605      	mov	r5, r0
 8006f6a:	f000 ffd5 	bl	8007f18 <_localeconv_r>
 8006f6e:	f8d0 b000 	ldr.w	fp, [r0]
 8006f72:	4658      	mov	r0, fp
 8006f74:	f7f9 fa04 	bl	8000380 <strlen>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f80:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	9005      	str	r0, [sp, #20]
 8006f88:	3307      	adds	r3, #7
 8006f8a:	f023 0307 	bic.w	r3, r3, #7
 8006f8e:	f103 0108 	add.w	r1, r3, #8
 8006f92:	f8c8 1000 	str.w	r1, [r8]
 8006f96:	ed93 0b00 	vldr	d0, [r3]
 8006f9a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80071f8 <_printf_float+0x2a0>
 8006f9e:	eeb0 7bc0 	vabs.f64	d7, d0
 8006fa2:	eeb4 7b46 	vcmp.f64	d7, d6
 8006fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006faa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006fae:	dd24      	ble.n	8006ffa <_printf_float+0xa2>
 8006fb0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb8:	d502      	bpl.n	8006fc0 <_printf_float+0x68>
 8006fba:	232d      	movs	r3, #45	@ 0x2d
 8006fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc0:	498f      	ldr	r1, [pc, #572]	@ (8007200 <_printf_float+0x2a8>)
 8006fc2:	4b90      	ldr	r3, [pc, #576]	@ (8007204 <_printf_float+0x2ac>)
 8006fc4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006fc8:	bf8c      	ite	hi
 8006fca:	4688      	movhi	r8, r1
 8006fcc:	4698      	movls	r8, r3
 8006fce:	f022 0204 	bic.w	r2, r2, #4
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	6022      	str	r2, [r4, #0]
 8006fd8:	f04f 0a00 	mov.w	sl, #0
 8006fdc:	9700      	str	r7, [sp, #0]
 8006fde:	4633      	mov	r3, r6
 8006fe0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f000 f9d1 	bl	800738c <_printf_common>
 8006fea:	3001      	adds	r0, #1
 8006fec:	f040 8089 	bne.w	8007102 <_printf_float+0x1aa>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	b00d      	add	sp, #52	@ 0x34
 8006ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	eeb4 0b40 	vcmp.f64	d0, d0
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d709      	bvc.n	8007018 <_printf_float+0xc0>
 8007004:	ee10 3a90 	vmov	r3, s1
 8007008:	2b00      	cmp	r3, #0
 800700a:	bfbc      	itt	lt
 800700c:	232d      	movlt	r3, #45	@ 0x2d
 800700e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007012:	497d      	ldr	r1, [pc, #500]	@ (8007208 <_printf_float+0x2b0>)
 8007014:	4b7d      	ldr	r3, [pc, #500]	@ (800720c <_printf_float+0x2b4>)
 8007016:	e7d5      	b.n	8006fc4 <_printf_float+0x6c>
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007020:	d139      	bne.n	8007096 <_printf_float+0x13e>
 8007022:	2306      	movs	r3, #6
 8007024:	6063      	str	r3, [r4, #4]
 8007026:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800702a:	2300      	movs	r3, #0
 800702c:	6022      	str	r2, [r4, #0]
 800702e:	9303      	str	r3, [sp, #12]
 8007030:	ab0a      	add	r3, sp, #40	@ 0x28
 8007032:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007036:	ab09      	add	r3, sp, #36	@ 0x24
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	6861      	ldr	r1, [r4, #4]
 800703c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007040:	4628      	mov	r0, r5
 8007042:	f7ff fefa 	bl	8006e3a <__cvt>
 8007046:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800704a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800704c:	4680      	mov	r8, r0
 800704e:	d129      	bne.n	80070a4 <_printf_float+0x14c>
 8007050:	1cc8      	adds	r0, r1, #3
 8007052:	db02      	blt.n	800705a <_printf_float+0x102>
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	4299      	cmp	r1, r3
 8007058:	dd41      	ble.n	80070de <_printf_float+0x186>
 800705a:	f1a9 0902 	sub.w	r9, r9, #2
 800705e:	fa5f f989 	uxtb.w	r9, r9
 8007062:	3901      	subs	r1, #1
 8007064:	464a      	mov	r2, r9
 8007066:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800706a:	9109      	str	r1, [sp, #36]	@ 0x24
 800706c:	f7ff ff39 	bl	8006ee2 <__exponent>
 8007070:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007072:	1813      	adds	r3, r2, r0
 8007074:	2a01      	cmp	r2, #1
 8007076:	4682      	mov	sl, r0
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	dc02      	bgt.n	8007082 <_printf_float+0x12a>
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	07d2      	lsls	r2, r2, #31
 8007080:	d501      	bpl.n	8007086 <_printf_float+0x12e>
 8007082:	3301      	adds	r3, #1
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0a6      	beq.n	8006fdc <_printf_float+0x84>
 800708e:	232d      	movs	r3, #45	@ 0x2d
 8007090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007094:	e7a2      	b.n	8006fdc <_printf_float+0x84>
 8007096:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800709a:	d1c4      	bne.n	8007026 <_printf_float+0xce>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1c2      	bne.n	8007026 <_printf_float+0xce>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e7bf      	b.n	8007024 <_printf_float+0xcc>
 80070a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80070a8:	d9db      	bls.n	8007062 <_printf_float+0x10a>
 80070aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80070ae:	d118      	bne.n	80070e2 <_printf_float+0x18a>
 80070b0:	2900      	cmp	r1, #0
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	dd0b      	ble.n	80070ce <_printf_float+0x176>
 80070b6:	6121      	str	r1, [r4, #16]
 80070b8:	b913      	cbnz	r3, 80070c0 <_printf_float+0x168>
 80070ba:	6822      	ldr	r2, [r4, #0]
 80070bc:	07d0      	lsls	r0, r2, #31
 80070be:	d502      	bpl.n	80070c6 <_printf_float+0x16e>
 80070c0:	3301      	adds	r3, #1
 80070c2:	440b      	add	r3, r1
 80070c4:	6123      	str	r3, [r4, #16]
 80070c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070c8:	f04f 0a00 	mov.w	sl, #0
 80070cc:	e7db      	b.n	8007086 <_printf_float+0x12e>
 80070ce:	b913      	cbnz	r3, 80070d6 <_printf_float+0x17e>
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	07d2      	lsls	r2, r2, #31
 80070d4:	d501      	bpl.n	80070da <_printf_float+0x182>
 80070d6:	3302      	adds	r3, #2
 80070d8:	e7f4      	b.n	80070c4 <_printf_float+0x16c>
 80070da:	2301      	movs	r3, #1
 80070dc:	e7f2      	b.n	80070c4 <_printf_float+0x16c>
 80070de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80070e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070e4:	4299      	cmp	r1, r3
 80070e6:	db05      	blt.n	80070f4 <_printf_float+0x19c>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	6121      	str	r1, [r4, #16]
 80070ec:	07d8      	lsls	r0, r3, #31
 80070ee:	d5ea      	bpl.n	80070c6 <_printf_float+0x16e>
 80070f0:	1c4b      	adds	r3, r1, #1
 80070f2:	e7e7      	b.n	80070c4 <_printf_float+0x16c>
 80070f4:	2900      	cmp	r1, #0
 80070f6:	bfd4      	ite	le
 80070f8:	f1c1 0202 	rsble	r2, r1, #2
 80070fc:	2201      	movgt	r2, #1
 80070fe:	4413      	add	r3, r2
 8007100:	e7e0      	b.n	80070c4 <_printf_float+0x16c>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	055a      	lsls	r2, r3, #21
 8007106:	d407      	bmi.n	8007118 <_printf_float+0x1c0>
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	4642      	mov	r2, r8
 800710c:	4631      	mov	r1, r6
 800710e:	4628      	mov	r0, r5
 8007110:	47b8      	blx	r7
 8007112:	3001      	adds	r0, #1
 8007114:	d12a      	bne.n	800716c <_printf_float+0x214>
 8007116:	e76b      	b.n	8006ff0 <_printf_float+0x98>
 8007118:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800711c:	f240 80e0 	bls.w	80072e0 <_printf_float+0x388>
 8007120:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007124:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712c:	d133      	bne.n	8007196 <_printf_float+0x23e>
 800712e:	4a38      	ldr	r2, [pc, #224]	@ (8007210 <_printf_float+0x2b8>)
 8007130:	2301      	movs	r3, #1
 8007132:	4631      	mov	r1, r6
 8007134:	4628      	mov	r0, r5
 8007136:	47b8      	blx	r7
 8007138:	3001      	adds	r0, #1
 800713a:	f43f af59 	beq.w	8006ff0 <_printf_float+0x98>
 800713e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007142:	4543      	cmp	r3, r8
 8007144:	db02      	blt.n	800714c <_printf_float+0x1f4>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	07d8      	lsls	r0, r3, #31
 800714a:	d50f      	bpl.n	800716c <_printf_float+0x214>
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	465a      	mov	r2, fp
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f af4a 	beq.w	8006ff0 <_printf_float+0x98>
 800715c:	f04f 0900 	mov.w	r9, #0
 8007160:	f108 38ff 	add.w	r8, r8, #4294967295
 8007164:	f104 0a1a 	add.w	sl, r4, #26
 8007168:	45c8      	cmp	r8, r9
 800716a:	dc09      	bgt.n	8007180 <_printf_float+0x228>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	079b      	lsls	r3, r3, #30
 8007170:	f100 8107 	bmi.w	8007382 <_printf_float+0x42a>
 8007174:	68e0      	ldr	r0, [r4, #12]
 8007176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007178:	4298      	cmp	r0, r3
 800717a:	bfb8      	it	lt
 800717c:	4618      	movlt	r0, r3
 800717e:	e739      	b.n	8006ff4 <_printf_float+0x9c>
 8007180:	2301      	movs	r3, #1
 8007182:	4652      	mov	r2, sl
 8007184:	4631      	mov	r1, r6
 8007186:	4628      	mov	r0, r5
 8007188:	47b8      	blx	r7
 800718a:	3001      	adds	r0, #1
 800718c:	f43f af30 	beq.w	8006ff0 <_printf_float+0x98>
 8007190:	f109 0901 	add.w	r9, r9, #1
 8007194:	e7e8      	b.n	8007168 <_printf_float+0x210>
 8007196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007198:	2b00      	cmp	r3, #0
 800719a:	dc3b      	bgt.n	8007214 <_printf_float+0x2bc>
 800719c:	4a1c      	ldr	r2, [pc, #112]	@ (8007210 <_printf_float+0x2b8>)
 800719e:	2301      	movs	r3, #1
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f af22 	beq.w	8006ff0 <_printf_float+0x98>
 80071ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80071b0:	ea59 0303 	orrs.w	r3, r9, r3
 80071b4:	d102      	bne.n	80071bc <_printf_float+0x264>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	07d9      	lsls	r1, r3, #31
 80071ba:	d5d7      	bpl.n	800716c <_printf_float+0x214>
 80071bc:	9b05      	ldr	r3, [sp, #20]
 80071be:	465a      	mov	r2, fp
 80071c0:	4631      	mov	r1, r6
 80071c2:	4628      	mov	r0, r5
 80071c4:	47b8      	blx	r7
 80071c6:	3001      	adds	r0, #1
 80071c8:	f43f af12 	beq.w	8006ff0 <_printf_float+0x98>
 80071cc:	f04f 0a00 	mov.w	sl, #0
 80071d0:	f104 0b1a 	add.w	fp, r4, #26
 80071d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d6:	425b      	negs	r3, r3
 80071d8:	4553      	cmp	r3, sl
 80071da:	dc01      	bgt.n	80071e0 <_printf_float+0x288>
 80071dc:	464b      	mov	r3, r9
 80071de:	e794      	b.n	800710a <_printf_float+0x1b2>
 80071e0:	2301      	movs	r3, #1
 80071e2:	465a      	mov	r2, fp
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af00 	beq.w	8006ff0 <_printf_float+0x98>
 80071f0:	f10a 0a01 	add.w	sl, sl, #1
 80071f4:	e7ee      	b.n	80071d4 <_printf_float+0x27c>
 80071f6:	bf00      	nop
 80071f8:	ffffffff 	.word	0xffffffff
 80071fc:	7fefffff 	.word	0x7fefffff
 8007200:	0800b8cc 	.word	0x0800b8cc
 8007204:	0800b8c8 	.word	0x0800b8c8
 8007208:	0800b8d4 	.word	0x0800b8d4
 800720c:	0800b8d0 	.word	0x0800b8d0
 8007210:	0800b8d8 	.word	0x0800b8d8
 8007214:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007216:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800721a:	4553      	cmp	r3, sl
 800721c:	bfa8      	it	ge
 800721e:	4653      	movge	r3, sl
 8007220:	2b00      	cmp	r3, #0
 8007222:	4699      	mov	r9, r3
 8007224:	dc37      	bgt.n	8007296 <_printf_float+0x33e>
 8007226:	2300      	movs	r3, #0
 8007228:	9307      	str	r3, [sp, #28]
 800722a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800722e:	f104 021a 	add.w	r2, r4, #26
 8007232:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007234:	9907      	ldr	r1, [sp, #28]
 8007236:	9306      	str	r3, [sp, #24]
 8007238:	eba3 0309 	sub.w	r3, r3, r9
 800723c:	428b      	cmp	r3, r1
 800723e:	dc31      	bgt.n	80072a4 <_printf_float+0x34c>
 8007240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007242:	459a      	cmp	sl, r3
 8007244:	dc3b      	bgt.n	80072be <_printf_float+0x366>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	07da      	lsls	r2, r3, #31
 800724a:	d438      	bmi.n	80072be <_printf_float+0x366>
 800724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724e:	ebaa 0903 	sub.w	r9, sl, r3
 8007252:	9b06      	ldr	r3, [sp, #24]
 8007254:	ebaa 0303 	sub.w	r3, sl, r3
 8007258:	4599      	cmp	r9, r3
 800725a:	bfa8      	it	ge
 800725c:	4699      	movge	r9, r3
 800725e:	f1b9 0f00 	cmp.w	r9, #0
 8007262:	dc34      	bgt.n	80072ce <_printf_float+0x376>
 8007264:	f04f 0800 	mov.w	r8, #0
 8007268:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800726c:	f104 0b1a 	add.w	fp, r4, #26
 8007270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007272:	ebaa 0303 	sub.w	r3, sl, r3
 8007276:	eba3 0309 	sub.w	r3, r3, r9
 800727a:	4543      	cmp	r3, r8
 800727c:	f77f af76 	ble.w	800716c <_printf_float+0x214>
 8007280:	2301      	movs	r3, #1
 8007282:	465a      	mov	r2, fp
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f aeb0 	beq.w	8006ff0 <_printf_float+0x98>
 8007290:	f108 0801 	add.w	r8, r8, #1
 8007294:	e7ec      	b.n	8007270 <_printf_float+0x318>
 8007296:	4642      	mov	r2, r8
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	d1c1      	bne.n	8007226 <_printf_float+0x2ce>
 80072a2:	e6a5      	b.n	8006ff0 <_printf_float+0x98>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	9206      	str	r2, [sp, #24]
 80072ac:	47b8      	blx	r7
 80072ae:	3001      	adds	r0, #1
 80072b0:	f43f ae9e 	beq.w	8006ff0 <_printf_float+0x98>
 80072b4:	9b07      	ldr	r3, [sp, #28]
 80072b6:	9a06      	ldr	r2, [sp, #24]
 80072b8:	3301      	adds	r3, #1
 80072ba:	9307      	str	r3, [sp, #28]
 80072bc:	e7b9      	b.n	8007232 <_printf_float+0x2da>
 80072be:	9b05      	ldr	r3, [sp, #20]
 80072c0:	465a      	mov	r2, fp
 80072c2:	4631      	mov	r1, r6
 80072c4:	4628      	mov	r0, r5
 80072c6:	47b8      	blx	r7
 80072c8:	3001      	adds	r0, #1
 80072ca:	d1bf      	bne.n	800724c <_printf_float+0x2f4>
 80072cc:	e690      	b.n	8006ff0 <_printf_float+0x98>
 80072ce:	9a06      	ldr	r2, [sp, #24]
 80072d0:	464b      	mov	r3, r9
 80072d2:	4442      	add	r2, r8
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	3001      	adds	r0, #1
 80072dc:	d1c2      	bne.n	8007264 <_printf_float+0x30c>
 80072de:	e687      	b.n	8006ff0 <_printf_float+0x98>
 80072e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80072e4:	f1b9 0f01 	cmp.w	r9, #1
 80072e8:	dc01      	bgt.n	80072ee <_printf_float+0x396>
 80072ea:	07db      	lsls	r3, r3, #31
 80072ec:	d536      	bpl.n	800735c <_printf_float+0x404>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4642      	mov	r2, r8
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae79 	beq.w	8006ff0 <_printf_float+0x98>
 80072fe:	9b05      	ldr	r3, [sp, #20]
 8007300:	465a      	mov	r2, fp
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f ae71 	beq.w	8006ff0 <_printf_float+0x98>
 800730e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007312:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731a:	f109 39ff 	add.w	r9, r9, #4294967295
 800731e:	d018      	beq.n	8007352 <_printf_float+0x3fa>
 8007320:	464b      	mov	r3, r9
 8007322:	f108 0201 	add.w	r2, r8, #1
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	d10c      	bne.n	800734a <_printf_float+0x3f2>
 8007330:	e65e      	b.n	8006ff0 <_printf_float+0x98>
 8007332:	2301      	movs	r3, #1
 8007334:	465a      	mov	r2, fp
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f ae57 	beq.w	8006ff0 <_printf_float+0x98>
 8007342:	f108 0801 	add.w	r8, r8, #1
 8007346:	45c8      	cmp	r8, r9
 8007348:	dbf3      	blt.n	8007332 <_printf_float+0x3da>
 800734a:	4653      	mov	r3, sl
 800734c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007350:	e6dc      	b.n	800710c <_printf_float+0x1b4>
 8007352:	f04f 0800 	mov.w	r8, #0
 8007356:	f104 0b1a 	add.w	fp, r4, #26
 800735a:	e7f4      	b.n	8007346 <_printf_float+0x3ee>
 800735c:	2301      	movs	r3, #1
 800735e:	4642      	mov	r2, r8
 8007360:	e7e1      	b.n	8007326 <_printf_float+0x3ce>
 8007362:	2301      	movs	r3, #1
 8007364:	464a      	mov	r2, r9
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f ae3f 	beq.w	8006ff0 <_printf_float+0x98>
 8007372:	f108 0801 	add.w	r8, r8, #1
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800737a:	1a5b      	subs	r3, r3, r1
 800737c:	4543      	cmp	r3, r8
 800737e:	dcf0      	bgt.n	8007362 <_printf_float+0x40a>
 8007380:	e6f8      	b.n	8007174 <_printf_float+0x21c>
 8007382:	f04f 0800 	mov.w	r8, #0
 8007386:	f104 0919 	add.w	r9, r4, #25
 800738a:	e7f4      	b.n	8007376 <_printf_float+0x41e>

0800738c <_printf_common>:
 800738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007390:	4616      	mov	r6, r2
 8007392:	4698      	mov	r8, r3
 8007394:	688a      	ldr	r2, [r1, #8]
 8007396:	690b      	ldr	r3, [r1, #16]
 8007398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800739c:	4293      	cmp	r3, r2
 800739e:	bfb8      	it	lt
 80073a0:	4613      	movlt	r3, r2
 80073a2:	6033      	str	r3, [r6, #0]
 80073a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073a8:	4607      	mov	r7, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	b10a      	cbz	r2, 80073b2 <_printf_common+0x26>
 80073ae:	3301      	adds	r3, #1
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	0699      	lsls	r1, r3, #26
 80073b6:	bf42      	ittt	mi
 80073b8:	6833      	ldrmi	r3, [r6, #0]
 80073ba:	3302      	addmi	r3, #2
 80073bc:	6033      	strmi	r3, [r6, #0]
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	f015 0506 	ands.w	r5, r5, #6
 80073c4:	d106      	bne.n	80073d4 <_printf_common+0x48>
 80073c6:	f104 0a19 	add.w	sl, r4, #25
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	6832      	ldr	r2, [r6, #0]
 80073ce:	1a9b      	subs	r3, r3, r2
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dc26      	bgt.n	8007422 <_printf_common+0x96>
 80073d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073d8:	6822      	ldr	r2, [r4, #0]
 80073da:	3b00      	subs	r3, #0
 80073dc:	bf18      	it	ne
 80073de:	2301      	movne	r3, #1
 80073e0:	0692      	lsls	r2, r2, #26
 80073e2:	d42b      	bmi.n	800743c <_printf_common+0xb0>
 80073e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d01e      	beq.n	8007430 <_printf_common+0xa4>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	6922      	ldr	r2, [r4, #16]
 80073f6:	f003 0306 	and.w	r3, r3, #6
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	bf02      	ittt	eq
 80073fe:	68e5      	ldreq	r5, [r4, #12]
 8007400:	6833      	ldreq	r3, [r6, #0]
 8007402:	1aed      	subeq	r5, r5, r3
 8007404:	68a3      	ldr	r3, [r4, #8]
 8007406:	bf0c      	ite	eq
 8007408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800740c:	2500      	movne	r5, #0
 800740e:	4293      	cmp	r3, r2
 8007410:	bfc4      	itt	gt
 8007412:	1a9b      	subgt	r3, r3, r2
 8007414:	18ed      	addgt	r5, r5, r3
 8007416:	2600      	movs	r6, #0
 8007418:	341a      	adds	r4, #26
 800741a:	42b5      	cmp	r5, r6
 800741c:	d11a      	bne.n	8007454 <_printf_common+0xc8>
 800741e:	2000      	movs	r0, #0
 8007420:	e008      	b.n	8007434 <_printf_common+0xa8>
 8007422:	2301      	movs	r3, #1
 8007424:	4652      	mov	r2, sl
 8007426:	4641      	mov	r1, r8
 8007428:	4638      	mov	r0, r7
 800742a:	47c8      	blx	r9
 800742c:	3001      	adds	r0, #1
 800742e:	d103      	bne.n	8007438 <_printf_common+0xac>
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007438:	3501      	adds	r5, #1
 800743a:	e7c6      	b.n	80073ca <_printf_common+0x3e>
 800743c:	18e1      	adds	r1, r4, r3
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	2030      	movs	r0, #48	@ 0x30
 8007442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007446:	4422      	add	r2, r4
 8007448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800744c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007450:	3302      	adds	r3, #2
 8007452:	e7c7      	b.n	80073e4 <_printf_common+0x58>
 8007454:	2301      	movs	r3, #1
 8007456:	4622      	mov	r2, r4
 8007458:	4641      	mov	r1, r8
 800745a:	4638      	mov	r0, r7
 800745c:	47c8      	blx	r9
 800745e:	3001      	adds	r0, #1
 8007460:	d0e6      	beq.n	8007430 <_printf_common+0xa4>
 8007462:	3601      	adds	r6, #1
 8007464:	e7d9      	b.n	800741a <_printf_common+0x8e>
	...

08007468 <_printf_i>:
 8007468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	7e0f      	ldrb	r7, [r1, #24]
 800746e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007470:	2f78      	cmp	r7, #120	@ 0x78
 8007472:	4691      	mov	r9, r2
 8007474:	4680      	mov	r8, r0
 8007476:	460c      	mov	r4, r1
 8007478:	469a      	mov	sl, r3
 800747a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800747e:	d807      	bhi.n	8007490 <_printf_i+0x28>
 8007480:	2f62      	cmp	r7, #98	@ 0x62
 8007482:	d80a      	bhi.n	800749a <_printf_i+0x32>
 8007484:	2f00      	cmp	r7, #0
 8007486:	f000 80d1 	beq.w	800762c <_printf_i+0x1c4>
 800748a:	2f58      	cmp	r7, #88	@ 0x58
 800748c:	f000 80b8 	beq.w	8007600 <_printf_i+0x198>
 8007490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007498:	e03a      	b.n	8007510 <_printf_i+0xa8>
 800749a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800749e:	2b15      	cmp	r3, #21
 80074a0:	d8f6      	bhi.n	8007490 <_printf_i+0x28>
 80074a2:	a101      	add	r1, pc, #4	@ (adr r1, 80074a8 <_printf_i+0x40>)
 80074a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a8:	08007501 	.word	0x08007501
 80074ac:	08007515 	.word	0x08007515
 80074b0:	08007491 	.word	0x08007491
 80074b4:	08007491 	.word	0x08007491
 80074b8:	08007491 	.word	0x08007491
 80074bc:	08007491 	.word	0x08007491
 80074c0:	08007515 	.word	0x08007515
 80074c4:	08007491 	.word	0x08007491
 80074c8:	08007491 	.word	0x08007491
 80074cc:	08007491 	.word	0x08007491
 80074d0:	08007491 	.word	0x08007491
 80074d4:	08007613 	.word	0x08007613
 80074d8:	0800753f 	.word	0x0800753f
 80074dc:	080075cd 	.word	0x080075cd
 80074e0:	08007491 	.word	0x08007491
 80074e4:	08007491 	.word	0x08007491
 80074e8:	08007635 	.word	0x08007635
 80074ec:	08007491 	.word	0x08007491
 80074f0:	0800753f 	.word	0x0800753f
 80074f4:	08007491 	.word	0x08007491
 80074f8:	08007491 	.word	0x08007491
 80074fc:	080075d5 	.word	0x080075d5
 8007500:	6833      	ldr	r3, [r6, #0]
 8007502:	1d1a      	adds	r2, r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6032      	str	r2, [r6, #0]
 8007508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800750c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007510:	2301      	movs	r3, #1
 8007512:	e09c      	b.n	800764e <_printf_i+0x1e6>
 8007514:	6833      	ldr	r3, [r6, #0]
 8007516:	6820      	ldr	r0, [r4, #0]
 8007518:	1d19      	adds	r1, r3, #4
 800751a:	6031      	str	r1, [r6, #0]
 800751c:	0606      	lsls	r6, r0, #24
 800751e:	d501      	bpl.n	8007524 <_printf_i+0xbc>
 8007520:	681d      	ldr	r5, [r3, #0]
 8007522:	e003      	b.n	800752c <_printf_i+0xc4>
 8007524:	0645      	lsls	r5, r0, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0xb8>
 8007528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800752c:	2d00      	cmp	r5, #0
 800752e:	da03      	bge.n	8007538 <_printf_i+0xd0>
 8007530:	232d      	movs	r3, #45	@ 0x2d
 8007532:	426d      	negs	r5, r5
 8007534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007538:	4858      	ldr	r0, [pc, #352]	@ (800769c <_printf_i+0x234>)
 800753a:	230a      	movs	r3, #10
 800753c:	e011      	b.n	8007562 <_printf_i+0xfa>
 800753e:	6821      	ldr	r1, [r4, #0]
 8007540:	6833      	ldr	r3, [r6, #0]
 8007542:	0608      	lsls	r0, r1, #24
 8007544:	f853 5b04 	ldr.w	r5, [r3], #4
 8007548:	d402      	bmi.n	8007550 <_printf_i+0xe8>
 800754a:	0649      	lsls	r1, r1, #25
 800754c:	bf48      	it	mi
 800754e:	b2ad      	uxthmi	r5, r5
 8007550:	2f6f      	cmp	r7, #111	@ 0x6f
 8007552:	4852      	ldr	r0, [pc, #328]	@ (800769c <_printf_i+0x234>)
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	bf14      	ite	ne
 8007558:	230a      	movne	r3, #10
 800755a:	2308      	moveq	r3, #8
 800755c:	2100      	movs	r1, #0
 800755e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007562:	6866      	ldr	r6, [r4, #4]
 8007564:	60a6      	str	r6, [r4, #8]
 8007566:	2e00      	cmp	r6, #0
 8007568:	db05      	blt.n	8007576 <_printf_i+0x10e>
 800756a:	6821      	ldr	r1, [r4, #0]
 800756c:	432e      	orrs	r6, r5
 800756e:	f021 0104 	bic.w	r1, r1, #4
 8007572:	6021      	str	r1, [r4, #0]
 8007574:	d04b      	beq.n	800760e <_printf_i+0x1a6>
 8007576:	4616      	mov	r6, r2
 8007578:	fbb5 f1f3 	udiv	r1, r5, r3
 800757c:	fb03 5711 	mls	r7, r3, r1, r5
 8007580:	5dc7      	ldrb	r7, [r0, r7]
 8007582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007586:	462f      	mov	r7, r5
 8007588:	42bb      	cmp	r3, r7
 800758a:	460d      	mov	r5, r1
 800758c:	d9f4      	bls.n	8007578 <_printf_i+0x110>
 800758e:	2b08      	cmp	r3, #8
 8007590:	d10b      	bne.n	80075aa <_printf_i+0x142>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	07df      	lsls	r7, r3, #31
 8007596:	d508      	bpl.n	80075aa <_printf_i+0x142>
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	6861      	ldr	r1, [r4, #4]
 800759c:	4299      	cmp	r1, r3
 800759e:	bfde      	ittt	le
 80075a0:	2330      	movle	r3, #48	@ 0x30
 80075a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075aa:	1b92      	subs	r2, r2, r6
 80075ac:	6122      	str	r2, [r4, #16]
 80075ae:	f8cd a000 	str.w	sl, [sp]
 80075b2:	464b      	mov	r3, r9
 80075b4:	aa03      	add	r2, sp, #12
 80075b6:	4621      	mov	r1, r4
 80075b8:	4640      	mov	r0, r8
 80075ba:	f7ff fee7 	bl	800738c <_printf_common>
 80075be:	3001      	adds	r0, #1
 80075c0:	d14a      	bne.n	8007658 <_printf_i+0x1f0>
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	b004      	add	sp, #16
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	f043 0320 	orr.w	r3, r3, #32
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	4832      	ldr	r0, [pc, #200]	@ (80076a0 <_printf_i+0x238>)
 80075d6:	2778      	movs	r7, #120	@ 0x78
 80075d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	061f      	lsls	r7, r3, #24
 80075e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075e6:	d402      	bmi.n	80075ee <_printf_i+0x186>
 80075e8:	065f      	lsls	r7, r3, #25
 80075ea:	bf48      	it	mi
 80075ec:	b2ad      	uxthmi	r5, r5
 80075ee:	6031      	str	r1, [r6, #0]
 80075f0:	07d9      	lsls	r1, r3, #31
 80075f2:	bf44      	itt	mi
 80075f4:	f043 0320 	orrmi.w	r3, r3, #32
 80075f8:	6023      	strmi	r3, [r4, #0]
 80075fa:	b11d      	cbz	r5, 8007604 <_printf_i+0x19c>
 80075fc:	2310      	movs	r3, #16
 80075fe:	e7ad      	b.n	800755c <_printf_i+0xf4>
 8007600:	4826      	ldr	r0, [pc, #152]	@ (800769c <_printf_i+0x234>)
 8007602:	e7e9      	b.n	80075d8 <_printf_i+0x170>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	f023 0320 	bic.w	r3, r3, #32
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	e7f6      	b.n	80075fc <_printf_i+0x194>
 800760e:	4616      	mov	r6, r2
 8007610:	e7bd      	b.n	800758e <_printf_i+0x126>
 8007612:	6833      	ldr	r3, [r6, #0]
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	6961      	ldr	r1, [r4, #20]
 8007618:	1d18      	adds	r0, r3, #4
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	062e      	lsls	r6, r5, #24
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	d501      	bpl.n	8007626 <_printf_i+0x1be>
 8007622:	6019      	str	r1, [r3, #0]
 8007624:	e002      	b.n	800762c <_printf_i+0x1c4>
 8007626:	0668      	lsls	r0, r5, #25
 8007628:	d5fb      	bpl.n	8007622 <_printf_i+0x1ba>
 800762a:	8019      	strh	r1, [r3, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	4616      	mov	r6, r2
 8007632:	e7bc      	b.n	80075ae <_printf_i+0x146>
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	1d1a      	adds	r2, r3, #4
 8007638:	6032      	str	r2, [r6, #0]
 800763a:	681e      	ldr	r6, [r3, #0]
 800763c:	6862      	ldr	r2, [r4, #4]
 800763e:	2100      	movs	r1, #0
 8007640:	4630      	mov	r0, r6
 8007642:	f7f8 fe4d 	bl	80002e0 <memchr>
 8007646:	b108      	cbz	r0, 800764c <_printf_i+0x1e4>
 8007648:	1b80      	subs	r0, r0, r6
 800764a:	6060      	str	r0, [r4, #4]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	2300      	movs	r3, #0
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007656:	e7aa      	b.n	80075ae <_printf_i+0x146>
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	4632      	mov	r2, r6
 800765c:	4649      	mov	r1, r9
 800765e:	4640      	mov	r0, r8
 8007660:	47d0      	blx	sl
 8007662:	3001      	adds	r0, #1
 8007664:	d0ad      	beq.n	80075c2 <_printf_i+0x15a>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	079b      	lsls	r3, r3, #30
 800766a:	d413      	bmi.n	8007694 <_printf_i+0x22c>
 800766c:	68e0      	ldr	r0, [r4, #12]
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	4298      	cmp	r0, r3
 8007672:	bfb8      	it	lt
 8007674:	4618      	movlt	r0, r3
 8007676:	e7a6      	b.n	80075c6 <_printf_i+0x15e>
 8007678:	2301      	movs	r3, #1
 800767a:	4632      	mov	r2, r6
 800767c:	4649      	mov	r1, r9
 800767e:	4640      	mov	r0, r8
 8007680:	47d0      	blx	sl
 8007682:	3001      	adds	r0, #1
 8007684:	d09d      	beq.n	80075c2 <_printf_i+0x15a>
 8007686:	3501      	adds	r5, #1
 8007688:	68e3      	ldr	r3, [r4, #12]
 800768a:	9903      	ldr	r1, [sp, #12]
 800768c:	1a5b      	subs	r3, r3, r1
 800768e:	42ab      	cmp	r3, r5
 8007690:	dcf2      	bgt.n	8007678 <_printf_i+0x210>
 8007692:	e7eb      	b.n	800766c <_printf_i+0x204>
 8007694:	2500      	movs	r5, #0
 8007696:	f104 0619 	add.w	r6, r4, #25
 800769a:	e7f5      	b.n	8007688 <_printf_i+0x220>
 800769c:	0800b8da 	.word	0x0800b8da
 80076a0:	0800b8eb 	.word	0x0800b8eb

080076a4 <_scanf_float>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	b087      	sub	sp, #28
 80076aa:	4691      	mov	r9, r2
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	688b      	ldr	r3, [r1, #8]
 80076b0:	1e5a      	subs	r2, r3, #1
 80076b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80076b6:	bf81      	itttt	hi
 80076b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80076bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80076c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80076c4:	608b      	strhi	r3, [r1, #8]
 80076c6:	680b      	ldr	r3, [r1, #0]
 80076c8:	460a      	mov	r2, r1
 80076ca:	f04f 0500 	mov.w	r5, #0
 80076ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80076d2:	f842 3b1c 	str.w	r3, [r2], #28
 80076d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80076da:	4680      	mov	r8, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	bf98      	it	ls
 80076e0:	f04f 0b00 	movls.w	fp, #0
 80076e4:	9201      	str	r2, [sp, #4]
 80076e6:	4616      	mov	r6, r2
 80076e8:	46aa      	mov	sl, r5
 80076ea:	462f      	mov	r7, r5
 80076ec:	9502      	str	r5, [sp, #8]
 80076ee:	68a2      	ldr	r2, [r4, #8]
 80076f0:	b15a      	cbz	r2, 800770a <_scanf_float+0x66>
 80076f2:	f8d9 3000 	ldr.w	r3, [r9]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80076fa:	d863      	bhi.n	80077c4 <_scanf_float+0x120>
 80076fc:	2b40      	cmp	r3, #64	@ 0x40
 80076fe:	d83b      	bhi.n	8007778 <_scanf_float+0xd4>
 8007700:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007704:	b2c8      	uxtb	r0, r1
 8007706:	280e      	cmp	r0, #14
 8007708:	d939      	bls.n	800777e <_scanf_float+0xda>
 800770a:	b11f      	cbz	r7, 8007714 <_scanf_float+0x70>
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007718:	f1ba 0f01 	cmp.w	sl, #1
 800771c:	f200 8114 	bhi.w	8007948 <_scanf_float+0x2a4>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	429e      	cmp	r6, r3
 8007724:	f200 8105 	bhi.w	8007932 <_scanf_float+0x28e>
 8007728:	2001      	movs	r0, #1
 800772a:	b007      	add	sp, #28
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007734:	2a0d      	cmp	r2, #13
 8007736:	d8e8      	bhi.n	800770a <_scanf_float+0x66>
 8007738:	a101      	add	r1, pc, #4	@ (adr r1, 8007740 <_scanf_float+0x9c>)
 800773a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007889 	.word	0x08007889
 8007744:	0800770b 	.word	0x0800770b
 8007748:	0800770b 	.word	0x0800770b
 800774c:	0800770b 	.word	0x0800770b
 8007750:	080078e5 	.word	0x080078e5
 8007754:	080078bf 	.word	0x080078bf
 8007758:	0800770b 	.word	0x0800770b
 800775c:	0800770b 	.word	0x0800770b
 8007760:	08007897 	.word	0x08007897
 8007764:	0800770b 	.word	0x0800770b
 8007768:	0800770b 	.word	0x0800770b
 800776c:	0800770b 	.word	0x0800770b
 8007770:	0800770b 	.word	0x0800770b
 8007774:	08007853 	.word	0x08007853
 8007778:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800777c:	e7da      	b.n	8007734 <_scanf_float+0x90>
 800777e:	290e      	cmp	r1, #14
 8007780:	d8c3      	bhi.n	800770a <_scanf_float+0x66>
 8007782:	a001      	add	r0, pc, #4	@ (adr r0, 8007788 <_scanf_float+0xe4>)
 8007784:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007788:	08007843 	.word	0x08007843
 800778c:	0800770b 	.word	0x0800770b
 8007790:	08007843 	.word	0x08007843
 8007794:	080078d3 	.word	0x080078d3
 8007798:	0800770b 	.word	0x0800770b
 800779c:	080077e5 	.word	0x080077e5
 80077a0:	08007829 	.word	0x08007829
 80077a4:	08007829 	.word	0x08007829
 80077a8:	08007829 	.word	0x08007829
 80077ac:	08007829 	.word	0x08007829
 80077b0:	08007829 	.word	0x08007829
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007829 	.word	0x08007829
 80077bc:	08007829 	.word	0x08007829
 80077c0:	08007829 	.word	0x08007829
 80077c4:	2b6e      	cmp	r3, #110	@ 0x6e
 80077c6:	d809      	bhi.n	80077dc <_scanf_float+0x138>
 80077c8:	2b60      	cmp	r3, #96	@ 0x60
 80077ca:	d8b1      	bhi.n	8007730 <_scanf_float+0x8c>
 80077cc:	2b54      	cmp	r3, #84	@ 0x54
 80077ce:	d07b      	beq.n	80078c8 <_scanf_float+0x224>
 80077d0:	2b59      	cmp	r3, #89	@ 0x59
 80077d2:	d19a      	bne.n	800770a <_scanf_float+0x66>
 80077d4:	2d07      	cmp	r5, #7
 80077d6:	d198      	bne.n	800770a <_scanf_float+0x66>
 80077d8:	2508      	movs	r5, #8
 80077da:	e02f      	b.n	800783c <_scanf_float+0x198>
 80077dc:	2b74      	cmp	r3, #116	@ 0x74
 80077de:	d073      	beq.n	80078c8 <_scanf_float+0x224>
 80077e0:	2b79      	cmp	r3, #121	@ 0x79
 80077e2:	e7f6      	b.n	80077d2 <_scanf_float+0x12e>
 80077e4:	6821      	ldr	r1, [r4, #0]
 80077e6:	05c8      	lsls	r0, r1, #23
 80077e8:	d51e      	bpl.n	8007828 <_scanf_float+0x184>
 80077ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80077ee:	6021      	str	r1, [r4, #0]
 80077f0:	3701      	adds	r7, #1
 80077f2:	f1bb 0f00 	cmp.w	fp, #0
 80077f6:	d003      	beq.n	8007800 <_scanf_float+0x15c>
 80077f8:	3201      	adds	r2, #1
 80077fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077fe:	60a2      	str	r2, [r4, #8]
 8007800:	68a3      	ldr	r3, [r4, #8]
 8007802:	3b01      	subs	r3, #1
 8007804:	60a3      	str	r3, [r4, #8]
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	3301      	adds	r3, #1
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007810:	3b01      	subs	r3, #1
 8007812:	2b00      	cmp	r3, #0
 8007814:	f8c9 3004 	str.w	r3, [r9, #4]
 8007818:	f340 8082 	ble.w	8007920 <_scanf_float+0x27c>
 800781c:	f8d9 3000 	ldr.w	r3, [r9]
 8007820:	3301      	adds	r3, #1
 8007822:	f8c9 3000 	str.w	r3, [r9]
 8007826:	e762      	b.n	80076ee <_scanf_float+0x4a>
 8007828:	eb1a 0105 	adds.w	r1, sl, r5
 800782c:	f47f af6d 	bne.w	800770a <_scanf_float+0x66>
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007836:	6022      	str	r2, [r4, #0]
 8007838:	460d      	mov	r5, r1
 800783a:	468a      	mov	sl, r1
 800783c:	f806 3b01 	strb.w	r3, [r6], #1
 8007840:	e7de      	b.n	8007800 <_scanf_float+0x15c>
 8007842:	6822      	ldr	r2, [r4, #0]
 8007844:	0610      	lsls	r0, r2, #24
 8007846:	f57f af60 	bpl.w	800770a <_scanf_float+0x66>
 800784a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800784e:	6022      	str	r2, [r4, #0]
 8007850:	e7f4      	b.n	800783c <_scanf_float+0x198>
 8007852:	f1ba 0f00 	cmp.w	sl, #0
 8007856:	d10c      	bne.n	8007872 <_scanf_float+0x1ce>
 8007858:	b977      	cbnz	r7, 8007878 <_scanf_float+0x1d4>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007860:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007864:	d108      	bne.n	8007878 <_scanf_float+0x1d4>
 8007866:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800786a:	6022      	str	r2, [r4, #0]
 800786c:	f04f 0a01 	mov.w	sl, #1
 8007870:	e7e4      	b.n	800783c <_scanf_float+0x198>
 8007872:	f1ba 0f02 	cmp.w	sl, #2
 8007876:	d050      	beq.n	800791a <_scanf_float+0x276>
 8007878:	2d01      	cmp	r5, #1
 800787a:	d002      	beq.n	8007882 <_scanf_float+0x1de>
 800787c:	2d04      	cmp	r5, #4
 800787e:	f47f af44 	bne.w	800770a <_scanf_float+0x66>
 8007882:	3501      	adds	r5, #1
 8007884:	b2ed      	uxtb	r5, r5
 8007886:	e7d9      	b.n	800783c <_scanf_float+0x198>
 8007888:	f1ba 0f01 	cmp.w	sl, #1
 800788c:	f47f af3d 	bne.w	800770a <_scanf_float+0x66>
 8007890:	f04f 0a02 	mov.w	sl, #2
 8007894:	e7d2      	b.n	800783c <_scanf_float+0x198>
 8007896:	b975      	cbnz	r5, 80078b6 <_scanf_float+0x212>
 8007898:	2f00      	cmp	r7, #0
 800789a:	f47f af37 	bne.w	800770c <_scanf_float+0x68>
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80078a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80078a8:	f040 80fc 	bne.w	8007aa4 <_scanf_float+0x400>
 80078ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80078b0:	6022      	str	r2, [r4, #0]
 80078b2:	2501      	movs	r5, #1
 80078b4:	e7c2      	b.n	800783c <_scanf_float+0x198>
 80078b6:	2d03      	cmp	r5, #3
 80078b8:	d0e3      	beq.n	8007882 <_scanf_float+0x1de>
 80078ba:	2d05      	cmp	r5, #5
 80078bc:	e7df      	b.n	800787e <_scanf_float+0x1da>
 80078be:	2d02      	cmp	r5, #2
 80078c0:	f47f af23 	bne.w	800770a <_scanf_float+0x66>
 80078c4:	2503      	movs	r5, #3
 80078c6:	e7b9      	b.n	800783c <_scanf_float+0x198>
 80078c8:	2d06      	cmp	r5, #6
 80078ca:	f47f af1e 	bne.w	800770a <_scanf_float+0x66>
 80078ce:	2507      	movs	r5, #7
 80078d0:	e7b4      	b.n	800783c <_scanf_float+0x198>
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	0591      	lsls	r1, r2, #22
 80078d6:	f57f af18 	bpl.w	800770a <_scanf_float+0x66>
 80078da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	9702      	str	r7, [sp, #8]
 80078e2:	e7ab      	b.n	800783c <_scanf_float+0x198>
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80078ea:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80078ee:	d005      	beq.n	80078fc <_scanf_float+0x258>
 80078f0:	0550      	lsls	r0, r2, #21
 80078f2:	f57f af0a 	bpl.w	800770a <_scanf_float+0x66>
 80078f6:	2f00      	cmp	r7, #0
 80078f8:	f000 80d4 	beq.w	8007aa4 <_scanf_float+0x400>
 80078fc:	0591      	lsls	r1, r2, #22
 80078fe:	bf58      	it	pl
 8007900:	9902      	ldrpl	r1, [sp, #8]
 8007902:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007906:	bf58      	it	pl
 8007908:	1a79      	subpl	r1, r7, r1
 800790a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800790e:	bf58      	it	pl
 8007910:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	2700      	movs	r7, #0
 8007918:	e790      	b.n	800783c <_scanf_float+0x198>
 800791a:	f04f 0a03 	mov.w	sl, #3
 800791e:	e78d      	b.n	800783c <_scanf_float+0x198>
 8007920:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007924:	4649      	mov	r1, r9
 8007926:	4640      	mov	r0, r8
 8007928:	4798      	blx	r3
 800792a:	2800      	cmp	r0, #0
 800792c:	f43f aedf 	beq.w	80076ee <_scanf_float+0x4a>
 8007930:	e6eb      	b.n	800770a <_scanf_float+0x66>
 8007932:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007936:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800793a:	464a      	mov	r2, r9
 800793c:	4640      	mov	r0, r8
 800793e:	4798      	blx	r3
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	3b01      	subs	r3, #1
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	e6eb      	b.n	8007720 <_scanf_float+0x7c>
 8007948:	1e6b      	subs	r3, r5, #1
 800794a:	2b06      	cmp	r3, #6
 800794c:	d824      	bhi.n	8007998 <_scanf_float+0x2f4>
 800794e:	2d02      	cmp	r5, #2
 8007950:	d836      	bhi.n	80079c0 <_scanf_float+0x31c>
 8007952:	9b01      	ldr	r3, [sp, #4]
 8007954:	429e      	cmp	r6, r3
 8007956:	f67f aee7 	bls.w	8007728 <_scanf_float+0x84>
 800795a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800795e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007962:	464a      	mov	r2, r9
 8007964:	4640      	mov	r0, r8
 8007966:	4798      	blx	r3
 8007968:	6923      	ldr	r3, [r4, #16]
 800796a:	3b01      	subs	r3, #1
 800796c:	6123      	str	r3, [r4, #16]
 800796e:	e7f0      	b.n	8007952 <_scanf_float+0x2ae>
 8007970:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007974:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007978:	464a      	mov	r2, r9
 800797a:	4640      	mov	r0, r8
 800797c:	4798      	blx	r3
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	3b01      	subs	r3, #1
 8007982:	6123      	str	r3, [r4, #16]
 8007984:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007988:	fa5f fa8a 	uxtb.w	sl, sl
 800798c:	f1ba 0f02 	cmp.w	sl, #2
 8007990:	d1ee      	bne.n	8007970 <_scanf_float+0x2cc>
 8007992:	3d03      	subs	r5, #3
 8007994:	b2ed      	uxtb	r5, r5
 8007996:	1b76      	subs	r6, r6, r5
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	05da      	lsls	r2, r3, #23
 800799c:	d530      	bpl.n	8007a00 <_scanf_float+0x35c>
 800799e:	055b      	lsls	r3, r3, #21
 80079a0:	d511      	bpl.n	80079c6 <_scanf_float+0x322>
 80079a2:	9b01      	ldr	r3, [sp, #4]
 80079a4:	429e      	cmp	r6, r3
 80079a6:	f67f aebf 	bls.w	8007728 <_scanf_float+0x84>
 80079aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80079b2:	464a      	mov	r2, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	4798      	blx	r3
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	6123      	str	r3, [r4, #16]
 80079be:	e7f0      	b.n	80079a2 <_scanf_float+0x2fe>
 80079c0:	46aa      	mov	sl, r5
 80079c2:	46b3      	mov	fp, r6
 80079c4:	e7de      	b.n	8007984 <_scanf_float+0x2e0>
 80079c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	2965      	cmp	r1, #101	@ 0x65
 80079ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80079d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	d00c      	beq.n	80079f4 <_scanf_float+0x350>
 80079da:	2945      	cmp	r1, #69	@ 0x45
 80079dc:	d00a      	beq.n	80079f4 <_scanf_float+0x350>
 80079de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079e2:	464a      	mov	r2, r9
 80079e4:	4640      	mov	r0, r8
 80079e6:	4798      	blx	r3
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	1eb5      	subs	r5, r6, #2
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80079f8:	464a      	mov	r2, r9
 80079fa:	4640      	mov	r0, r8
 80079fc:	4798      	blx	r3
 80079fe:	462e      	mov	r6, r5
 8007a00:	6822      	ldr	r2, [r4, #0]
 8007a02:	f012 0210 	ands.w	r2, r2, #16
 8007a06:	d001      	beq.n	8007a0c <_scanf_float+0x368>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e68e      	b.n	800772a <_scanf_float+0x86>
 8007a0c:	7032      	strb	r2, [r6, #0]
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a18:	d123      	bne.n	8007a62 <_scanf_float+0x3be>
 8007a1a:	9b02      	ldr	r3, [sp, #8]
 8007a1c:	429f      	cmp	r7, r3
 8007a1e:	d00a      	beq.n	8007a36 <_scanf_float+0x392>
 8007a20:	1bda      	subs	r2, r3, r7
 8007a22:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007a26:	429e      	cmp	r6, r3
 8007a28:	bf28      	it	cs
 8007a2a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007a2e:	491e      	ldr	r1, [pc, #120]	@ (8007aa8 <_scanf_float+0x404>)
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 f96f 	bl	8007d14 <siprintf>
 8007a36:	9901      	ldr	r1, [sp, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	f002 fc2e 	bl	800a29c <_strtod_r>
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	6821      	ldr	r1, [r4, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f011 0f02 	tst.w	r1, #2
 8007a4a:	f103 0204 	add.w	r2, r3, #4
 8007a4e:	d015      	beq.n	8007a7c <_scanf_float+0x3d8>
 8007a50:	9903      	ldr	r1, [sp, #12]
 8007a52:	600a      	str	r2, [r1, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	ed83 0b00 	vstr	d0, [r3]
 8007a5a:	68e3      	ldr	r3, [r4, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60e3      	str	r3, [r4, #12]
 8007a60:	e7d2      	b.n	8007a08 <_scanf_float+0x364>
 8007a62:	9b04      	ldr	r3, [sp, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0e6      	beq.n	8007a36 <_scanf_float+0x392>
 8007a68:	9905      	ldr	r1, [sp, #20]
 8007a6a:	230a      	movs	r3, #10
 8007a6c:	3101      	adds	r1, #1
 8007a6e:	4640      	mov	r0, r8
 8007a70:	f002 fc94 	bl	800a39c <_strtol_r>
 8007a74:	9b04      	ldr	r3, [sp, #16]
 8007a76:	9e05      	ldr	r6, [sp, #20]
 8007a78:	1ac2      	subs	r2, r0, r3
 8007a7a:	e7d2      	b.n	8007a22 <_scanf_float+0x37e>
 8007a7c:	f011 0f04 	tst.w	r1, #4
 8007a80:	9903      	ldr	r1, [sp, #12]
 8007a82:	600a      	str	r2, [r1, #0]
 8007a84:	d1e6      	bne.n	8007a54 <_scanf_float+0x3b0>
 8007a86:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8e:	681d      	ldr	r5, [r3, #0]
 8007a90:	d705      	bvc.n	8007a9e <_scanf_float+0x3fa>
 8007a92:	4806      	ldr	r0, [pc, #24]	@ (8007aac <_scanf_float+0x408>)
 8007a94:	f000 fab8 	bl	8008008 <nanf>
 8007a98:	ed85 0a00 	vstr	s0, [r5]
 8007a9c:	e7dd      	b.n	8007a5a <_scanf_float+0x3b6>
 8007a9e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007aa2:	e7f9      	b.n	8007a98 <_scanf_float+0x3f4>
 8007aa4:	2700      	movs	r7, #0
 8007aa6:	e635      	b.n	8007714 <_scanf_float+0x70>
 8007aa8:	0800b8fc 	.word	0x0800b8fc
 8007aac:	0800ba3d 	.word	0x0800ba3d

08007ab0 <std>:
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	b510      	push	{r4, lr}
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8007aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007abe:	6083      	str	r3, [r0, #8]
 8007ac0:	8181      	strh	r1, [r0, #12]
 8007ac2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ac4:	81c2      	strh	r2, [r0, #14]
 8007ac6:	6183      	str	r3, [r0, #24]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	2208      	movs	r2, #8
 8007acc:	305c      	adds	r0, #92	@ 0x5c
 8007ace:	f000 fa1b 	bl	8007f08 <memset>
 8007ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b08 <std+0x58>)
 8007ad4:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8007b0c <std+0x5c>)
 8007ad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ada:	4b0d      	ldr	r3, [pc, #52]	@ (8007b10 <std+0x60>)
 8007adc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <std+0x64>)
 8007ae0:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8007b18 <std+0x68>)
 8007ae4:	6224      	str	r4, [r4, #32]
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d006      	beq.n	8007af8 <std+0x48>
 8007aea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007aee:	4294      	cmp	r4, r2
 8007af0:	d002      	beq.n	8007af8 <std+0x48>
 8007af2:	33d0      	adds	r3, #208	@ 0xd0
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d105      	bne.n	8007b04 <std+0x54>
 8007af8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b00:	f000 ba7e 	b.w	8008000 <__retarget_lock_init_recursive>
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	bf00      	nop
 8007b08:	08007d59 	.word	0x08007d59
 8007b0c:	08007d7b 	.word	0x08007d7b
 8007b10:	08007db3 	.word	0x08007db3
 8007b14:	08007dd7 	.word	0x08007dd7
 8007b18:	240003b4 	.word	0x240003b4

08007b1c <stdio_exit_handler>:
 8007b1c:	4a02      	ldr	r2, [pc, #8]	@ (8007b28 <stdio_exit_handler+0xc>)
 8007b1e:	4903      	ldr	r1, [pc, #12]	@ (8007b2c <stdio_exit_handler+0x10>)
 8007b20:	4803      	ldr	r0, [pc, #12]	@ (8007b30 <stdio_exit_handler+0x14>)
 8007b22:	f000 b869 	b.w	8007bf8 <_fwalk_sglue>
 8007b26:	bf00      	nop
 8007b28:	24000018 	.word	0x24000018
 8007b2c:	0800a9dd 	.word	0x0800a9dd
 8007b30:	24000028 	.word	0x24000028

08007b34 <cleanup_stdio>:
 8007b34:	6841      	ldr	r1, [r0, #4]
 8007b36:	4b0c      	ldr	r3, [pc, #48]	@ (8007b68 <cleanup_stdio+0x34>)
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	b510      	push	{r4, lr}
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	d001      	beq.n	8007b44 <cleanup_stdio+0x10>
 8007b40:	f002 ff4c 	bl	800a9dc <_fflush_r>
 8007b44:	68a1      	ldr	r1, [r4, #8]
 8007b46:	4b09      	ldr	r3, [pc, #36]	@ (8007b6c <cleanup_stdio+0x38>)
 8007b48:	4299      	cmp	r1, r3
 8007b4a:	d002      	beq.n	8007b52 <cleanup_stdio+0x1e>
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f002 ff45 	bl	800a9dc <_fflush_r>
 8007b52:	68e1      	ldr	r1, [r4, #12]
 8007b54:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <cleanup_stdio+0x3c>)
 8007b56:	4299      	cmp	r1, r3
 8007b58:	d004      	beq.n	8007b64 <cleanup_stdio+0x30>
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b60:	f002 bf3c 	b.w	800a9dc <_fflush_r>
 8007b64:	bd10      	pop	{r4, pc}
 8007b66:	bf00      	nop
 8007b68:	240003b4 	.word	0x240003b4
 8007b6c:	2400041c 	.word	0x2400041c
 8007b70:	24000484 	.word	0x24000484

08007b74 <global_stdio_init.part.0>:
 8007b74:	b510      	push	{r4, lr}
 8007b76:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba4 <global_stdio_init.part.0+0x30>)
 8007b78:	4c0b      	ldr	r4, [pc, #44]	@ (8007ba8 <global_stdio_init.part.0+0x34>)
 8007b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8007bac <global_stdio_init.part.0+0x38>)
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	4620      	mov	r0, r4
 8007b80:	2200      	movs	r2, #0
 8007b82:	2104      	movs	r1, #4
 8007b84:	f7ff ff94 	bl	8007ab0 <std>
 8007b88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	2109      	movs	r1, #9
 8007b90:	f7ff ff8e 	bl	8007ab0 <std>
 8007b94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b98:	2202      	movs	r2, #2
 8007b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b9e:	2112      	movs	r1, #18
 8007ba0:	f7ff bf86 	b.w	8007ab0 <std>
 8007ba4:	240004ec 	.word	0x240004ec
 8007ba8:	240003b4 	.word	0x240003b4
 8007bac:	08007b1d 	.word	0x08007b1d

08007bb0 <__sfp_lock_acquire>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	@ (8007bb8 <__sfp_lock_acquire+0x8>)
 8007bb2:	f000 ba26 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	240004f5 	.word	0x240004f5

08007bbc <__sfp_lock_release>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	@ (8007bc4 <__sfp_lock_release+0x8>)
 8007bbe:	f000 ba21 	b.w	8008004 <__retarget_lock_release_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	240004f5 	.word	0x240004f5

08007bc8 <__sinit>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4604      	mov	r4, r0
 8007bcc:	f7ff fff0 	bl	8007bb0 <__sfp_lock_acquire>
 8007bd0:	6a23      	ldr	r3, [r4, #32]
 8007bd2:	b11b      	cbz	r3, 8007bdc <__sinit+0x14>
 8007bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bd8:	f7ff bff0 	b.w	8007bbc <__sfp_lock_release>
 8007bdc:	4b04      	ldr	r3, [pc, #16]	@ (8007bf0 <__sinit+0x28>)
 8007bde:	6223      	str	r3, [r4, #32]
 8007be0:	4b04      	ldr	r3, [pc, #16]	@ (8007bf4 <__sinit+0x2c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1f5      	bne.n	8007bd4 <__sinit+0xc>
 8007be8:	f7ff ffc4 	bl	8007b74 <global_stdio_init.part.0>
 8007bec:	e7f2      	b.n	8007bd4 <__sinit+0xc>
 8007bee:	bf00      	nop
 8007bf0:	08007b35 	.word	0x08007b35
 8007bf4:	240004ec 	.word	0x240004ec

08007bf8 <_fwalk_sglue>:
 8007bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	4688      	mov	r8, r1
 8007c00:	4614      	mov	r4, r2
 8007c02:	2600      	movs	r6, #0
 8007c04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c08:	f1b9 0901 	subs.w	r9, r9, #1
 8007c0c:	d505      	bpl.n	8007c1a <_fwalk_sglue+0x22>
 8007c0e:	6824      	ldr	r4, [r4, #0]
 8007c10:	2c00      	cmp	r4, #0
 8007c12:	d1f7      	bne.n	8007c04 <_fwalk_sglue+0xc>
 8007c14:	4630      	mov	r0, r6
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d907      	bls.n	8007c30 <_fwalk_sglue+0x38>
 8007c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c24:	3301      	adds	r3, #1
 8007c26:	d003      	beq.n	8007c30 <_fwalk_sglue+0x38>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	47c0      	blx	r8
 8007c2e:	4306      	orrs	r6, r0
 8007c30:	3568      	adds	r5, #104	@ 0x68
 8007c32:	e7e9      	b.n	8007c08 <_fwalk_sglue+0x10>

08007c34 <iprintf>:
 8007c34:	b40f      	push	{r0, r1, r2, r3}
 8007c36:	b507      	push	{r0, r1, r2, lr}
 8007c38:	4906      	ldr	r1, [pc, #24]	@ (8007c54 <iprintf+0x20>)
 8007c3a:	ab04      	add	r3, sp, #16
 8007c3c:	6808      	ldr	r0, [r1, #0]
 8007c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c42:	6881      	ldr	r1, [r0, #8]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	f002 fd2d 	bl	800a6a4 <_vfiprintf_r>
 8007c4a:	b003      	add	sp, #12
 8007c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c50:	b004      	add	sp, #16
 8007c52:	4770      	bx	lr
 8007c54:	24000024 	.word	0x24000024

08007c58 <_puts_r>:
 8007c58:	6a03      	ldr	r3, [r0, #32]
 8007c5a:	b570      	push	{r4, r5, r6, lr}
 8007c5c:	6884      	ldr	r4, [r0, #8]
 8007c5e:	4605      	mov	r5, r0
 8007c60:	460e      	mov	r6, r1
 8007c62:	b90b      	cbnz	r3, 8007c68 <_puts_r+0x10>
 8007c64:	f7ff ffb0 	bl	8007bc8 <__sinit>
 8007c68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c6a:	07db      	lsls	r3, r3, #31
 8007c6c:	d405      	bmi.n	8007c7a <_puts_r+0x22>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	0598      	lsls	r0, r3, #22
 8007c72:	d402      	bmi.n	8007c7a <_puts_r+0x22>
 8007c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c76:	f000 f9c4 	bl	8008002 <__retarget_lock_acquire_recursive>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	0719      	lsls	r1, r3, #28
 8007c7e:	d502      	bpl.n	8007c86 <_puts_r+0x2e>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d135      	bne.n	8007cf2 <_puts_r+0x9a>
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	f000 f8e7 	bl	8007e5c <__swsetup_r>
 8007c8e:	b380      	cbz	r0, 8007cf2 <_puts_r+0x9a>
 8007c90:	f04f 35ff 	mov.w	r5, #4294967295
 8007c94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c96:	07da      	lsls	r2, r3, #31
 8007c98:	d405      	bmi.n	8007ca6 <_puts_r+0x4e>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	059b      	lsls	r3, r3, #22
 8007c9e:	d402      	bmi.n	8007ca6 <_puts_r+0x4e>
 8007ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ca2:	f000 f9af 	bl	8008004 <__retarget_lock_release_recursive>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	bd70      	pop	{r4, r5, r6, pc}
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da04      	bge.n	8007cb8 <_puts_r+0x60>
 8007cae:	69a2      	ldr	r2, [r4, #24]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	dc17      	bgt.n	8007ce4 <_puts_r+0x8c>
 8007cb4:	290a      	cmp	r1, #10
 8007cb6:	d015      	beq.n	8007ce4 <_puts_r+0x8c>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	7019      	strb	r1, [r3, #0]
 8007cc0:	68a3      	ldr	r3, [r4, #8]
 8007cc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	60a3      	str	r3, [r4, #8]
 8007cca:	2900      	cmp	r1, #0
 8007ccc:	d1ed      	bne.n	8007caa <_puts_r+0x52>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	da11      	bge.n	8007cf6 <_puts_r+0x9e>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	210a      	movs	r1, #10
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f000 f881 	bl	8007dde <__swbuf_r>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	d0d7      	beq.n	8007c90 <_puts_r+0x38>
 8007ce0:	250a      	movs	r5, #10
 8007ce2:	e7d7      	b.n	8007c94 <_puts_r+0x3c>
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 f879 	bl	8007dde <__swbuf_r>
 8007cec:	3001      	adds	r0, #1
 8007cee:	d1e7      	bne.n	8007cc0 <_puts_r+0x68>
 8007cf0:	e7ce      	b.n	8007c90 <_puts_r+0x38>
 8007cf2:	3e01      	subs	r6, #1
 8007cf4:	e7e4      	b.n	8007cc0 <_puts_r+0x68>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	6022      	str	r2, [r4, #0]
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	701a      	strb	r2, [r3, #0]
 8007d00:	e7ee      	b.n	8007ce0 <_puts_r+0x88>
	...

08007d04 <puts>:
 8007d04:	4b02      	ldr	r3, [pc, #8]	@ (8007d10 <puts+0xc>)
 8007d06:	4601      	mov	r1, r0
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	f7ff bfa5 	b.w	8007c58 <_puts_r>
 8007d0e:	bf00      	nop
 8007d10:	24000024 	.word	0x24000024

08007d14 <siprintf>:
 8007d14:	b40e      	push	{r1, r2, r3}
 8007d16:	b510      	push	{r4, lr}
 8007d18:	b09d      	sub	sp, #116	@ 0x74
 8007d1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007d1c:	9002      	str	r0, [sp, #8]
 8007d1e:	9006      	str	r0, [sp, #24]
 8007d20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d24:	480a      	ldr	r0, [pc, #40]	@ (8007d50 <siprintf+0x3c>)
 8007d26:	9107      	str	r1, [sp, #28]
 8007d28:	9104      	str	r1, [sp, #16]
 8007d2a:	490a      	ldr	r1, [pc, #40]	@ (8007d54 <siprintf+0x40>)
 8007d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d30:	9105      	str	r1, [sp, #20]
 8007d32:	2400      	movs	r4, #0
 8007d34:	a902      	add	r1, sp, #8
 8007d36:	6800      	ldr	r0, [r0, #0]
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007d3c:	f002 fb8c 	bl	800a458 <_svfiprintf_r>
 8007d40:	9b02      	ldr	r3, [sp, #8]
 8007d42:	701c      	strb	r4, [r3, #0]
 8007d44:	b01d      	add	sp, #116	@ 0x74
 8007d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d4a:	b003      	add	sp, #12
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	24000024 	.word	0x24000024
 8007d54:	ffff0208 	.word	0xffff0208

08007d58 <__sread>:
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d60:	f000 f900 	bl	8007f64 <_read_r>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	bfab      	itete	ge
 8007d68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d6c:	181b      	addge	r3, r3, r0
 8007d6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d72:	bfac      	ite	ge
 8007d74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d76:	81a3      	strhlt	r3, [r4, #12]
 8007d78:	bd10      	pop	{r4, pc}

08007d7a <__swrite>:
 8007d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7e:	461f      	mov	r7, r3
 8007d80:	898b      	ldrh	r3, [r1, #12]
 8007d82:	05db      	lsls	r3, r3, #23
 8007d84:	4605      	mov	r5, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	4616      	mov	r6, r2
 8007d8a:	d505      	bpl.n	8007d98 <__swrite+0x1e>
 8007d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d90:	2302      	movs	r3, #2
 8007d92:	2200      	movs	r2, #0
 8007d94:	f000 f8d4 	bl	8007f40 <_lseek_r>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	4632      	mov	r2, r6
 8007da6:	463b      	mov	r3, r7
 8007da8:	4628      	mov	r0, r5
 8007daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dae:	f000 b8eb 	b.w	8007f88 <_write_r>

08007db2 <__sseek>:
 8007db2:	b510      	push	{r4, lr}
 8007db4:	460c      	mov	r4, r1
 8007db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dba:	f000 f8c1 	bl	8007f40 <_lseek_r>
 8007dbe:	1c43      	adds	r3, r0, #1
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	bf15      	itete	ne
 8007dc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007dce:	81a3      	strheq	r3, [r4, #12]
 8007dd0:	bf18      	it	ne
 8007dd2:	81a3      	strhne	r3, [r4, #12]
 8007dd4:	bd10      	pop	{r4, pc}

08007dd6 <__sclose>:
 8007dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dda:	f000 b8a1 	b.w	8007f20 <_close_r>

08007dde <__swbuf_r>:
 8007dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de0:	460e      	mov	r6, r1
 8007de2:	4614      	mov	r4, r2
 8007de4:	4605      	mov	r5, r0
 8007de6:	b118      	cbz	r0, 8007df0 <__swbuf_r+0x12>
 8007de8:	6a03      	ldr	r3, [r0, #32]
 8007dea:	b90b      	cbnz	r3, 8007df0 <__swbuf_r+0x12>
 8007dec:	f7ff feec 	bl	8007bc8 <__sinit>
 8007df0:	69a3      	ldr	r3, [r4, #24]
 8007df2:	60a3      	str	r3, [r4, #8]
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	071a      	lsls	r2, r3, #28
 8007df8:	d501      	bpl.n	8007dfe <__swbuf_r+0x20>
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	b943      	cbnz	r3, 8007e10 <__swbuf_r+0x32>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	4628      	mov	r0, r5
 8007e02:	f000 f82b 	bl	8007e5c <__swsetup_r>
 8007e06:	b118      	cbz	r0, 8007e10 <__swbuf_r+0x32>
 8007e08:	f04f 37ff 	mov.w	r7, #4294967295
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	6922      	ldr	r2, [r4, #16]
 8007e14:	1a98      	subs	r0, r3, r2
 8007e16:	6963      	ldr	r3, [r4, #20]
 8007e18:	b2f6      	uxtb	r6, r6
 8007e1a:	4283      	cmp	r3, r0
 8007e1c:	4637      	mov	r7, r6
 8007e1e:	dc05      	bgt.n	8007e2c <__swbuf_r+0x4e>
 8007e20:	4621      	mov	r1, r4
 8007e22:	4628      	mov	r0, r5
 8007e24:	f002 fdda 	bl	800a9dc <_fflush_r>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d1ed      	bne.n	8007e08 <__swbuf_r+0x2a>
 8007e2c:	68a3      	ldr	r3, [r4, #8]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	60a3      	str	r3, [r4, #8]
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	701e      	strb	r6, [r3, #0]
 8007e3a:	6962      	ldr	r2, [r4, #20]
 8007e3c:	1c43      	adds	r3, r0, #1
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d004      	beq.n	8007e4c <__swbuf_r+0x6e>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	07db      	lsls	r3, r3, #31
 8007e46:	d5e1      	bpl.n	8007e0c <__swbuf_r+0x2e>
 8007e48:	2e0a      	cmp	r6, #10
 8007e4a:	d1df      	bne.n	8007e0c <__swbuf_r+0x2e>
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f002 fdc4 	bl	800a9dc <_fflush_r>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d0d9      	beq.n	8007e0c <__swbuf_r+0x2e>
 8007e58:	e7d6      	b.n	8007e08 <__swbuf_r+0x2a>
	...

08007e5c <__swsetup_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4b29      	ldr	r3, [pc, #164]	@ (8007f04 <__swsetup_r+0xa8>)
 8007e60:	4605      	mov	r5, r0
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	460c      	mov	r4, r1
 8007e66:	b118      	cbz	r0, 8007e70 <__swsetup_r+0x14>
 8007e68:	6a03      	ldr	r3, [r0, #32]
 8007e6a:	b90b      	cbnz	r3, 8007e70 <__swsetup_r+0x14>
 8007e6c:	f7ff feac 	bl	8007bc8 <__sinit>
 8007e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e74:	0719      	lsls	r1, r3, #28
 8007e76:	d422      	bmi.n	8007ebe <__swsetup_r+0x62>
 8007e78:	06da      	lsls	r2, r3, #27
 8007e7a:	d407      	bmi.n	8007e8c <__swsetup_r+0x30>
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	602a      	str	r2, [r5, #0]
 8007e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8a:	e033      	b.n	8007ef4 <__swsetup_r+0x98>
 8007e8c:	0758      	lsls	r0, r3, #29
 8007e8e:	d512      	bpl.n	8007eb6 <__swsetup_r+0x5a>
 8007e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e92:	b141      	cbz	r1, 8007ea6 <__swsetup_r+0x4a>
 8007e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d002      	beq.n	8007ea2 <__swsetup_r+0x46>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f000 fea1 	bl	8008be4 <_free_r>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f043 0308 	orr.w	r3, r3, #8
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	b94b      	cbnz	r3, 8007ed6 <__swsetup_r+0x7a>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ecc:	d003      	beq.n	8007ed6 <__swsetup_r+0x7a>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f002 fdd1 	bl	800aa78 <__smakebuf_r>
 8007ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eda:	f013 0201 	ands.w	r2, r3, #1
 8007ede:	d00a      	beq.n	8007ef6 <__swsetup_r+0x9a>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	60a2      	str	r2, [r4, #8]
 8007ee4:	6962      	ldr	r2, [r4, #20]
 8007ee6:	4252      	negs	r2, r2
 8007ee8:	61a2      	str	r2, [r4, #24]
 8007eea:	6922      	ldr	r2, [r4, #16]
 8007eec:	b942      	cbnz	r2, 8007f00 <__swsetup_r+0xa4>
 8007eee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ef2:	d1c5      	bne.n	8007e80 <__swsetup_r+0x24>
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	0799      	lsls	r1, r3, #30
 8007ef8:	bf58      	it	pl
 8007efa:	6962      	ldrpl	r2, [r4, #20]
 8007efc:	60a2      	str	r2, [r4, #8]
 8007efe:	e7f4      	b.n	8007eea <__swsetup_r+0x8e>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e7f7      	b.n	8007ef4 <__swsetup_r+0x98>
 8007f04:	24000024 	.word	0x24000024

08007f08 <memset>:
 8007f08:	4402      	add	r2, r0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d100      	bne.n	8007f12 <memset+0xa>
 8007f10:	4770      	bx	lr
 8007f12:	f803 1b01 	strb.w	r1, [r3], #1
 8007f16:	e7f9      	b.n	8007f0c <memset+0x4>

08007f18 <_localeconv_r>:
 8007f18:	4800      	ldr	r0, [pc, #0]	@ (8007f1c <_localeconv_r+0x4>)
 8007f1a:	4770      	bx	lr
 8007f1c:	24000164 	.word	0x24000164

08007f20 <_close_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	@ (8007f3c <_close_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7fa fa8b 	bl	8002446 <_close>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_close_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_close_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	240004f0 	.word	0x240004f0

08007f40 <_lseek_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	4d07      	ldr	r5, [pc, #28]	@ (8007f60 <_lseek_r+0x20>)
 8007f44:	4604      	mov	r4, r0
 8007f46:	4608      	mov	r0, r1
 8007f48:	4611      	mov	r1, r2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	602a      	str	r2, [r5, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7fa faa0 	bl	8002494 <_lseek>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_lseek_r+0x1e>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_lseek_r+0x1e>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	240004f0 	.word	0x240004f0

08007f64 <_read_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d07      	ldr	r5, [pc, #28]	@ (8007f84 <_read_r+0x20>)
 8007f68:	4604      	mov	r4, r0
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	2200      	movs	r2, #0
 8007f70:	602a      	str	r2, [r5, #0]
 8007f72:	461a      	mov	r2, r3
 8007f74:	f7fa fa4a 	bl	800240c <_read>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d102      	bne.n	8007f82 <_read_r+0x1e>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	b103      	cbz	r3, 8007f82 <_read_r+0x1e>
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	240004f0 	.word	0x240004f0

08007f88 <_write_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d07      	ldr	r5, [pc, #28]	@ (8007fa8 <_write_r+0x20>)
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4608      	mov	r0, r1
 8007f90:	4611      	mov	r1, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f7f9 ffea 	bl	8001f70 <_write>
 8007f9c:	1c43      	adds	r3, r0, #1
 8007f9e:	d102      	bne.n	8007fa6 <_write_r+0x1e>
 8007fa0:	682b      	ldr	r3, [r5, #0]
 8007fa2:	b103      	cbz	r3, 8007fa6 <_write_r+0x1e>
 8007fa4:	6023      	str	r3, [r4, #0]
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	240004f0 	.word	0x240004f0

08007fac <__errno>:
 8007fac:	4b01      	ldr	r3, [pc, #4]	@ (8007fb4 <__errno+0x8>)
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	24000024 	.word	0x24000024

08007fb8 <__libc_init_array>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4d0d      	ldr	r5, [pc, #52]	@ (8007ff0 <__libc_init_array+0x38>)
 8007fbc:	4c0d      	ldr	r4, [pc, #52]	@ (8007ff4 <__libc_init_array+0x3c>)
 8007fbe:	1b64      	subs	r4, r4, r5
 8007fc0:	10a4      	asrs	r4, r4, #2
 8007fc2:	2600      	movs	r6, #0
 8007fc4:	42a6      	cmp	r6, r4
 8007fc6:	d109      	bne.n	8007fdc <__libc_init_array+0x24>
 8007fc8:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff8 <__libc_init_array+0x40>)
 8007fca:	4c0c      	ldr	r4, [pc, #48]	@ (8007ffc <__libc_init_array+0x44>)
 8007fcc:	f003 fa22 	bl	800b414 <_init>
 8007fd0:	1b64      	subs	r4, r4, r5
 8007fd2:	10a4      	asrs	r4, r4, #2
 8007fd4:	2600      	movs	r6, #0
 8007fd6:	42a6      	cmp	r6, r4
 8007fd8:	d105      	bne.n	8007fe6 <__libc_init_array+0x2e>
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe0:	4798      	blx	r3
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	e7ee      	b.n	8007fc4 <__libc_init_array+0xc>
 8007fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fea:	4798      	blx	r3
 8007fec:	3601      	adds	r6, #1
 8007fee:	e7f2      	b.n	8007fd6 <__libc_init_array+0x1e>
 8007ff0:	0800bcfc 	.word	0x0800bcfc
 8007ff4:	0800bcfc 	.word	0x0800bcfc
 8007ff8:	0800bcfc 	.word	0x0800bcfc
 8007ffc:	0800bd00 	.word	0x0800bd00

08008000 <__retarget_lock_init_recursive>:
 8008000:	4770      	bx	lr

08008002 <__retarget_lock_acquire_recursive>:
 8008002:	4770      	bx	lr

08008004 <__retarget_lock_release_recursive>:
 8008004:	4770      	bx	lr
	...

08008008 <nanf>:
 8008008:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008010 <nanf+0x8>
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	7fc00000 	.word	0x7fc00000

08008014 <quorem>:
 8008014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008018:	6903      	ldr	r3, [r0, #16]
 800801a:	690c      	ldr	r4, [r1, #16]
 800801c:	42a3      	cmp	r3, r4
 800801e:	4607      	mov	r7, r0
 8008020:	db7e      	blt.n	8008120 <quorem+0x10c>
 8008022:	3c01      	subs	r4, #1
 8008024:	f101 0814 	add.w	r8, r1, #20
 8008028:	00a3      	lsls	r3, r4, #2
 800802a:	f100 0514 	add.w	r5, r0, #20
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800803a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800803e:	3301      	adds	r3, #1
 8008040:	429a      	cmp	r2, r3
 8008042:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008046:	fbb2 f6f3 	udiv	r6, r2, r3
 800804a:	d32e      	bcc.n	80080aa <quorem+0x96>
 800804c:	f04f 0a00 	mov.w	sl, #0
 8008050:	46c4      	mov	ip, r8
 8008052:	46ae      	mov	lr, r5
 8008054:	46d3      	mov	fp, sl
 8008056:	f85c 3b04 	ldr.w	r3, [ip], #4
 800805a:	b298      	uxth	r0, r3
 800805c:	fb06 a000 	mla	r0, r6, r0, sl
 8008060:	0c02      	lsrs	r2, r0, #16
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	fb06 2303 	mla	r3, r6, r3, r2
 8008068:	f8de 2000 	ldr.w	r2, [lr]
 800806c:	b280      	uxth	r0, r0
 800806e:	b292      	uxth	r2, r2
 8008070:	1a12      	subs	r2, r2, r0
 8008072:	445a      	add	r2, fp
 8008074:	f8de 0000 	ldr.w	r0, [lr]
 8008078:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800807c:	b29b      	uxth	r3, r3
 800807e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008082:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008086:	b292      	uxth	r2, r2
 8008088:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800808c:	45e1      	cmp	r9, ip
 800808e:	f84e 2b04 	str.w	r2, [lr], #4
 8008092:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008096:	d2de      	bcs.n	8008056 <quorem+0x42>
 8008098:	9b00      	ldr	r3, [sp, #0]
 800809a:	58eb      	ldr	r3, [r5, r3]
 800809c:	b92b      	cbnz	r3, 80080aa <quorem+0x96>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	3b04      	subs	r3, #4
 80080a2:	429d      	cmp	r5, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	d32f      	bcc.n	8008108 <quorem+0xf4>
 80080a8:	613c      	str	r4, [r7, #16]
 80080aa:	4638      	mov	r0, r7
 80080ac:	f001 f956 	bl	800935c <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	db25      	blt.n	8008100 <quorem+0xec>
 80080b4:	4629      	mov	r1, r5
 80080b6:	2000      	movs	r0, #0
 80080b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80080bc:	f8d1 c000 	ldr.w	ip, [r1]
 80080c0:	fa1f fe82 	uxth.w	lr, r2
 80080c4:	fa1f f38c 	uxth.w	r3, ip
 80080c8:	eba3 030e 	sub.w	r3, r3, lr
 80080cc:	4403      	add	r3, r0
 80080ce:	0c12      	lsrs	r2, r2, #16
 80080d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080d8:	b29b      	uxth	r3, r3
 80080da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080de:	45c1      	cmp	r9, r8
 80080e0:	f841 3b04 	str.w	r3, [r1], #4
 80080e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080e8:	d2e6      	bcs.n	80080b8 <quorem+0xa4>
 80080ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080f2:	b922      	cbnz	r2, 80080fe <quorem+0xea>
 80080f4:	3b04      	subs	r3, #4
 80080f6:	429d      	cmp	r5, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	d30b      	bcc.n	8008114 <quorem+0x100>
 80080fc:	613c      	str	r4, [r7, #16]
 80080fe:	3601      	adds	r6, #1
 8008100:	4630      	mov	r0, r6
 8008102:	b003      	add	sp, #12
 8008104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	3b04      	subs	r3, #4
 800810c:	2a00      	cmp	r2, #0
 800810e:	d1cb      	bne.n	80080a8 <quorem+0x94>
 8008110:	3c01      	subs	r4, #1
 8008112:	e7c6      	b.n	80080a2 <quorem+0x8e>
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	3b04      	subs	r3, #4
 8008118:	2a00      	cmp	r2, #0
 800811a:	d1ef      	bne.n	80080fc <quorem+0xe8>
 800811c:	3c01      	subs	r4, #1
 800811e:	e7ea      	b.n	80080f6 <quorem+0xe2>
 8008120:	2000      	movs	r0, #0
 8008122:	e7ee      	b.n	8008102 <quorem+0xee>
 8008124:	0000      	movs	r0, r0
	...

08008128 <_dtoa_r>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	ed2d 8b02 	vpush	{d8}
 8008130:	69c7      	ldr	r7, [r0, #28]
 8008132:	b091      	sub	sp, #68	@ 0x44
 8008134:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008138:	ec55 4b10 	vmov	r4, r5, d0
 800813c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800813e:	9107      	str	r1, [sp, #28]
 8008140:	4681      	mov	r9, r0
 8008142:	9209      	str	r2, [sp, #36]	@ 0x24
 8008144:	930d      	str	r3, [sp, #52]	@ 0x34
 8008146:	b97f      	cbnz	r7, 8008168 <_dtoa_r+0x40>
 8008148:	2010      	movs	r0, #16
 800814a:	f000 fd95 	bl	8008c78 <malloc>
 800814e:	4602      	mov	r2, r0
 8008150:	f8c9 001c 	str.w	r0, [r9, #28]
 8008154:	b920      	cbnz	r0, 8008160 <_dtoa_r+0x38>
 8008156:	4ba0      	ldr	r3, [pc, #640]	@ (80083d8 <_dtoa_r+0x2b0>)
 8008158:	21ef      	movs	r1, #239	@ 0xef
 800815a:	48a0      	ldr	r0, [pc, #640]	@ (80083dc <_dtoa_r+0x2b4>)
 800815c:	f002 fd3c 	bl	800abd8 <__assert_func>
 8008160:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008164:	6007      	str	r7, [r0, #0]
 8008166:	60c7      	str	r7, [r0, #12]
 8008168:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800816c:	6819      	ldr	r1, [r3, #0]
 800816e:	b159      	cbz	r1, 8008188 <_dtoa_r+0x60>
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	604a      	str	r2, [r1, #4]
 8008174:	2301      	movs	r3, #1
 8008176:	4093      	lsls	r3, r2
 8008178:	608b      	str	r3, [r1, #8]
 800817a:	4648      	mov	r0, r9
 800817c:	f000 fe72 	bl	8008e64 <_Bfree>
 8008180:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008184:	2200      	movs	r2, #0
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	1e2b      	subs	r3, r5, #0
 800818a:	bfbb      	ittet	lt
 800818c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008190:	9303      	strlt	r3, [sp, #12]
 8008192:	2300      	movge	r3, #0
 8008194:	2201      	movlt	r2, #1
 8008196:	bfac      	ite	ge
 8008198:	6033      	strge	r3, [r6, #0]
 800819a:	6032      	strlt	r2, [r6, #0]
 800819c:	4b90      	ldr	r3, [pc, #576]	@ (80083e0 <_dtoa_r+0x2b8>)
 800819e:	9e03      	ldr	r6, [sp, #12]
 80081a0:	43b3      	bics	r3, r6
 80081a2:	d110      	bne.n	80081c6 <_dtoa_r+0x9e>
 80081a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80081b0:	4323      	orrs	r3, r4
 80081b2:	f000 84e6 	beq.w	8008b82 <_dtoa_r+0xa5a>
 80081b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081b8:	4f8a      	ldr	r7, [pc, #552]	@ (80083e4 <_dtoa_r+0x2bc>)
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 84e8 	beq.w	8008b90 <_dtoa_r+0xa68>
 80081c0:	1cfb      	adds	r3, r7, #3
 80081c2:	f000 bce3 	b.w	8008b8c <_dtoa_r+0xa64>
 80081c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80081ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80081ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d2:	d10a      	bne.n	80081ea <_dtoa_r+0xc2>
 80081d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081d6:	2301      	movs	r3, #1
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081dc:	b113      	cbz	r3, 80081e4 <_dtoa_r+0xbc>
 80081de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80081e0:	4b81      	ldr	r3, [pc, #516]	@ (80083e8 <_dtoa_r+0x2c0>)
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	4f81      	ldr	r7, [pc, #516]	@ (80083ec <_dtoa_r+0x2c4>)
 80081e6:	f000 bcd3 	b.w	8008b90 <_dtoa_r+0xa68>
 80081ea:	aa0e      	add	r2, sp, #56	@ 0x38
 80081ec:	a90f      	add	r1, sp, #60	@ 0x3c
 80081ee:	4648      	mov	r0, r9
 80081f0:	eeb0 0b48 	vmov.f64	d0, d8
 80081f4:	f001 f9d2 	bl	800959c <__d2b>
 80081f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80081fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081fe:	9001      	str	r0, [sp, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d045      	beq.n	8008290 <_dtoa_r+0x168>
 8008204:	eeb0 7b48 	vmov.f64	d7, d8
 8008208:	ee18 1a90 	vmov	r1, s17
 800820c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008210:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008214:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008218:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800821c:	2500      	movs	r5, #0
 800821e:	ee07 1a90 	vmov	s15, r1
 8008222:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008226:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80083c0 <_dtoa_r+0x298>
 800822a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800822e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80083c8 <_dtoa_r+0x2a0>
 8008232:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008236:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80083d0 <_dtoa_r+0x2a8>
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008242:	eeb0 7b46 	vmov.f64	d7, d6
 8008246:	eea4 7b05 	vfma.f64	d7, d4, d5
 800824a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800824e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008256:	ee16 8a90 	vmov	r8, s13
 800825a:	d508      	bpl.n	800826e <_dtoa_r+0x146>
 800825c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008260:	eeb4 6b47 	vcmp.f64	d6, d7
 8008264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008268:	bf18      	it	ne
 800826a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800826e:	f1b8 0f16 	cmp.w	r8, #22
 8008272:	d82b      	bhi.n	80082cc <_dtoa_r+0x1a4>
 8008274:	495e      	ldr	r1, [pc, #376]	@ (80083f0 <_dtoa_r+0x2c8>)
 8008276:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800827a:	ed91 7b00 	vldr	d7, [r1]
 800827e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008286:	d501      	bpl.n	800828c <_dtoa_r+0x164>
 8008288:	f108 38ff 	add.w	r8, r8, #4294967295
 800828c:	2100      	movs	r1, #0
 800828e:	e01e      	b.n	80082ce <_dtoa_r+0x1a6>
 8008290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008292:	4413      	add	r3, r2
 8008294:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008298:	2920      	cmp	r1, #32
 800829a:	bfc1      	itttt	gt
 800829c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80082a0:	408e      	lslgt	r6, r1
 80082a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80082a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80082aa:	bfd6      	itet	le
 80082ac:	f1c1 0120 	rsble	r1, r1, #32
 80082b0:	4331      	orrgt	r1, r6
 80082b2:	fa04 f101 	lslle.w	r1, r4, r1
 80082b6:	ee07 1a90 	vmov	s15, r1
 80082ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80082be:	3b01      	subs	r3, #1
 80082c0:	ee17 1a90 	vmov	r1, s15
 80082c4:	2501      	movs	r5, #1
 80082c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80082ca:	e7a8      	b.n	800821e <_dtoa_r+0xf6>
 80082cc:	2101      	movs	r1, #1
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	1e53      	subs	r3, r2, #1
 80082d2:	9306      	str	r3, [sp, #24]
 80082d4:	bf45      	ittet	mi
 80082d6:	f1c2 0301 	rsbmi	r3, r2, #1
 80082da:	9304      	strmi	r3, [sp, #16]
 80082dc:	2300      	movpl	r3, #0
 80082de:	2300      	movmi	r3, #0
 80082e0:	bf4c      	ite	mi
 80082e2:	9306      	strmi	r3, [sp, #24]
 80082e4:	9304      	strpl	r3, [sp, #16]
 80082e6:	f1b8 0f00 	cmp.w	r8, #0
 80082ea:	910c      	str	r1, [sp, #48]	@ 0x30
 80082ec:	db18      	blt.n	8008320 <_dtoa_r+0x1f8>
 80082ee:	9b06      	ldr	r3, [sp, #24]
 80082f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80082f4:	4443      	add	r3, r8
 80082f6:	9306      	str	r3, [sp, #24]
 80082f8:	2300      	movs	r3, #0
 80082fa:	9a07      	ldr	r2, [sp, #28]
 80082fc:	2a09      	cmp	r2, #9
 80082fe:	d845      	bhi.n	800838c <_dtoa_r+0x264>
 8008300:	2a05      	cmp	r2, #5
 8008302:	bfc4      	itt	gt
 8008304:	3a04      	subgt	r2, #4
 8008306:	9207      	strgt	r2, [sp, #28]
 8008308:	9a07      	ldr	r2, [sp, #28]
 800830a:	f1a2 0202 	sub.w	r2, r2, #2
 800830e:	bfcc      	ite	gt
 8008310:	2400      	movgt	r4, #0
 8008312:	2401      	movle	r4, #1
 8008314:	2a03      	cmp	r2, #3
 8008316:	d844      	bhi.n	80083a2 <_dtoa_r+0x27a>
 8008318:	e8df f002 	tbb	[pc, r2]
 800831c:	0b173634 	.word	0x0b173634
 8008320:	9b04      	ldr	r3, [sp, #16]
 8008322:	2200      	movs	r2, #0
 8008324:	eba3 0308 	sub.w	r3, r3, r8
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	920a      	str	r2, [sp, #40]	@ 0x28
 800832c:	f1c8 0300 	rsb	r3, r8, #0
 8008330:	e7e3      	b.n	80082fa <_dtoa_r+0x1d2>
 8008332:	2201      	movs	r2, #1
 8008334:	9208      	str	r2, [sp, #32]
 8008336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008338:	eb08 0b02 	add.w	fp, r8, r2
 800833c:	f10b 0a01 	add.w	sl, fp, #1
 8008340:	4652      	mov	r2, sl
 8008342:	2a01      	cmp	r2, #1
 8008344:	bfb8      	it	lt
 8008346:	2201      	movlt	r2, #1
 8008348:	e006      	b.n	8008358 <_dtoa_r+0x230>
 800834a:	2201      	movs	r2, #1
 800834c:	9208      	str	r2, [sp, #32]
 800834e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008350:	2a00      	cmp	r2, #0
 8008352:	dd29      	ble.n	80083a8 <_dtoa_r+0x280>
 8008354:	4693      	mov	fp, r2
 8008356:	4692      	mov	sl, r2
 8008358:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800835c:	2100      	movs	r1, #0
 800835e:	2004      	movs	r0, #4
 8008360:	f100 0614 	add.w	r6, r0, #20
 8008364:	4296      	cmp	r6, r2
 8008366:	d926      	bls.n	80083b6 <_dtoa_r+0x28e>
 8008368:	6079      	str	r1, [r7, #4]
 800836a:	4648      	mov	r0, r9
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	f000 fd39 	bl	8008de4 <_Balloc>
 8008372:	9b05      	ldr	r3, [sp, #20]
 8008374:	4607      	mov	r7, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	d13e      	bne.n	80083f8 <_dtoa_r+0x2d0>
 800837a:	4b1e      	ldr	r3, [pc, #120]	@ (80083f4 <_dtoa_r+0x2cc>)
 800837c:	4602      	mov	r2, r0
 800837e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008382:	e6ea      	b.n	800815a <_dtoa_r+0x32>
 8008384:	2200      	movs	r2, #0
 8008386:	e7e1      	b.n	800834c <_dtoa_r+0x224>
 8008388:	2200      	movs	r2, #0
 800838a:	e7d3      	b.n	8008334 <_dtoa_r+0x20c>
 800838c:	2401      	movs	r4, #1
 800838e:	2200      	movs	r2, #0
 8008390:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008394:	f04f 3bff 	mov.w	fp, #4294967295
 8008398:	2100      	movs	r1, #0
 800839a:	46da      	mov	sl, fp
 800839c:	2212      	movs	r2, #18
 800839e:	9109      	str	r1, [sp, #36]	@ 0x24
 80083a0:	e7da      	b.n	8008358 <_dtoa_r+0x230>
 80083a2:	2201      	movs	r2, #1
 80083a4:	9208      	str	r2, [sp, #32]
 80083a6:	e7f5      	b.n	8008394 <_dtoa_r+0x26c>
 80083a8:	f04f 0b01 	mov.w	fp, #1
 80083ac:	46da      	mov	sl, fp
 80083ae:	465a      	mov	r2, fp
 80083b0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80083b4:	e7d0      	b.n	8008358 <_dtoa_r+0x230>
 80083b6:	3101      	adds	r1, #1
 80083b8:	0040      	lsls	r0, r0, #1
 80083ba:	e7d1      	b.n	8008360 <_dtoa_r+0x238>
 80083bc:	f3af 8000 	nop.w
 80083c0:	636f4361 	.word	0x636f4361
 80083c4:	3fd287a7 	.word	0x3fd287a7
 80083c8:	8b60c8b3 	.word	0x8b60c8b3
 80083cc:	3fc68a28 	.word	0x3fc68a28
 80083d0:	509f79fb 	.word	0x509f79fb
 80083d4:	3fd34413 	.word	0x3fd34413
 80083d8:	0800b90e 	.word	0x0800b90e
 80083dc:	0800b925 	.word	0x0800b925
 80083e0:	7ff00000 	.word	0x7ff00000
 80083e4:	0800b90a 	.word	0x0800b90a
 80083e8:	0800b8d9 	.word	0x0800b8d9
 80083ec:	0800b8d8 	.word	0x0800b8d8
 80083f0:	0800bad8 	.word	0x0800bad8
 80083f4:	0800b97d 	.word	0x0800b97d
 80083f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80083fc:	f1ba 0f0e 	cmp.w	sl, #14
 8008400:	6010      	str	r0, [r2, #0]
 8008402:	d86e      	bhi.n	80084e2 <_dtoa_r+0x3ba>
 8008404:	2c00      	cmp	r4, #0
 8008406:	d06c      	beq.n	80084e2 <_dtoa_r+0x3ba>
 8008408:	f1b8 0f00 	cmp.w	r8, #0
 800840c:	f340 80b4 	ble.w	8008578 <_dtoa_r+0x450>
 8008410:	4ac8      	ldr	r2, [pc, #800]	@ (8008734 <_dtoa_r+0x60c>)
 8008412:	f008 010f 	and.w	r1, r8, #15
 8008416:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800841a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800841e:	ed92 7b00 	vldr	d7, [r2]
 8008422:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008426:	f000 809b 	beq.w	8008560 <_dtoa_r+0x438>
 800842a:	4ac3      	ldr	r2, [pc, #780]	@ (8008738 <_dtoa_r+0x610>)
 800842c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008430:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008434:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008438:	f001 010f 	and.w	r1, r1, #15
 800843c:	2203      	movs	r2, #3
 800843e:	48be      	ldr	r0, [pc, #760]	@ (8008738 <_dtoa_r+0x610>)
 8008440:	2900      	cmp	r1, #0
 8008442:	f040 808f 	bne.w	8008564 <_dtoa_r+0x43c>
 8008446:	ed9d 6b02 	vldr	d6, [sp, #8]
 800844a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800844e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008452:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008454:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008458:	2900      	cmp	r1, #0
 800845a:	f000 80b3 	beq.w	80085c4 <_dtoa_r+0x49c>
 800845e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846a:	f140 80ab 	bpl.w	80085c4 <_dtoa_r+0x49c>
 800846e:	f1ba 0f00 	cmp.w	sl, #0
 8008472:	f000 80a7 	beq.w	80085c4 <_dtoa_r+0x49c>
 8008476:	f1bb 0f00 	cmp.w	fp, #0
 800847a:	dd30      	ble.n	80084de <_dtoa_r+0x3b6>
 800847c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008480:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008484:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008488:	f108 31ff 	add.w	r1, r8, #4294967295
 800848c:	9105      	str	r1, [sp, #20]
 800848e:	3201      	adds	r2, #1
 8008490:	465c      	mov	r4, fp
 8008492:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008496:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800849a:	ee07 2a90 	vmov	s15, r2
 800849e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80084a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80084a6:	ee15 2a90 	vmov	r2, s11
 80084aa:	ec51 0b15 	vmov	r0, r1, d5
 80084ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80084b2:	2c00      	cmp	r4, #0
 80084b4:	f040 808a 	bne.w	80085cc <_dtoa_r+0x4a4>
 80084b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80084bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80084c0:	ec41 0b17 	vmov	d7, r0, r1
 80084c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084cc:	f300 826a 	bgt.w	80089a4 <_dtoa_r+0x87c>
 80084d0:	eeb1 7b47 	vneg.f64	d7, d7
 80084d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084dc:	d423      	bmi.n	8008526 <_dtoa_r+0x3fe>
 80084de:	ed8d 8b02 	vstr	d8, [sp, #8]
 80084e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	f2c0 8129 	blt.w	800873c <_dtoa_r+0x614>
 80084ea:	f1b8 0f0e 	cmp.w	r8, #14
 80084ee:	f300 8125 	bgt.w	800873c <_dtoa_r+0x614>
 80084f2:	4b90      	ldr	r3, [pc, #576]	@ (8008734 <_dtoa_r+0x60c>)
 80084f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084f8:	ed93 6b00 	vldr	d6, [r3]
 80084fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f280 80c8 	bge.w	8008694 <_dtoa_r+0x56c>
 8008504:	f1ba 0f00 	cmp.w	sl, #0
 8008508:	f300 80c4 	bgt.w	8008694 <_dtoa_r+0x56c>
 800850c:	d10b      	bne.n	8008526 <_dtoa_r+0x3fe>
 800850e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008512:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008516:	ed9d 7b02 	vldr	d7, [sp, #8]
 800851a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800851e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008522:	f2c0 823c 	blt.w	800899e <_dtoa_r+0x876>
 8008526:	2400      	movs	r4, #0
 8008528:	4625      	mov	r5, r4
 800852a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852c:	43db      	mvns	r3, r3
 800852e:	9305      	str	r3, [sp, #20]
 8008530:	463e      	mov	r6, r7
 8008532:	f04f 0800 	mov.w	r8, #0
 8008536:	4621      	mov	r1, r4
 8008538:	4648      	mov	r0, r9
 800853a:	f000 fc93 	bl	8008e64 <_Bfree>
 800853e:	2d00      	cmp	r5, #0
 8008540:	f000 80a2 	beq.w	8008688 <_dtoa_r+0x560>
 8008544:	f1b8 0f00 	cmp.w	r8, #0
 8008548:	d005      	beq.n	8008556 <_dtoa_r+0x42e>
 800854a:	45a8      	cmp	r8, r5
 800854c:	d003      	beq.n	8008556 <_dtoa_r+0x42e>
 800854e:	4641      	mov	r1, r8
 8008550:	4648      	mov	r0, r9
 8008552:	f000 fc87 	bl	8008e64 <_Bfree>
 8008556:	4629      	mov	r1, r5
 8008558:	4648      	mov	r0, r9
 800855a:	f000 fc83 	bl	8008e64 <_Bfree>
 800855e:	e093      	b.n	8008688 <_dtoa_r+0x560>
 8008560:	2202      	movs	r2, #2
 8008562:	e76c      	b.n	800843e <_dtoa_r+0x316>
 8008564:	07cc      	lsls	r4, r1, #31
 8008566:	d504      	bpl.n	8008572 <_dtoa_r+0x44a>
 8008568:	ed90 6b00 	vldr	d6, [r0]
 800856c:	3201      	adds	r2, #1
 800856e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008572:	1049      	asrs	r1, r1, #1
 8008574:	3008      	adds	r0, #8
 8008576:	e763      	b.n	8008440 <_dtoa_r+0x318>
 8008578:	d022      	beq.n	80085c0 <_dtoa_r+0x498>
 800857a:	f1c8 0100 	rsb	r1, r8, #0
 800857e:	4a6d      	ldr	r2, [pc, #436]	@ (8008734 <_dtoa_r+0x60c>)
 8008580:	f001 000f 	and.w	r0, r1, #15
 8008584:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008588:	ed92 7b00 	vldr	d7, [r2]
 800858c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008590:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008594:	4868      	ldr	r0, [pc, #416]	@ (8008738 <_dtoa_r+0x610>)
 8008596:	1109      	asrs	r1, r1, #4
 8008598:	2400      	movs	r4, #0
 800859a:	2202      	movs	r2, #2
 800859c:	b929      	cbnz	r1, 80085aa <_dtoa_r+0x482>
 800859e:	2c00      	cmp	r4, #0
 80085a0:	f43f af57 	beq.w	8008452 <_dtoa_r+0x32a>
 80085a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80085a8:	e753      	b.n	8008452 <_dtoa_r+0x32a>
 80085aa:	07ce      	lsls	r6, r1, #31
 80085ac:	d505      	bpl.n	80085ba <_dtoa_r+0x492>
 80085ae:	ed90 6b00 	vldr	d6, [r0]
 80085b2:	3201      	adds	r2, #1
 80085b4:	2401      	movs	r4, #1
 80085b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085ba:	1049      	asrs	r1, r1, #1
 80085bc:	3008      	adds	r0, #8
 80085be:	e7ed      	b.n	800859c <_dtoa_r+0x474>
 80085c0:	2202      	movs	r2, #2
 80085c2:	e746      	b.n	8008452 <_dtoa_r+0x32a>
 80085c4:	f8cd 8014 	str.w	r8, [sp, #20]
 80085c8:	4654      	mov	r4, sl
 80085ca:	e762      	b.n	8008492 <_dtoa_r+0x36a>
 80085cc:	4a59      	ldr	r2, [pc, #356]	@ (8008734 <_dtoa_r+0x60c>)
 80085ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80085d2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80085d6:	9a08      	ldr	r2, [sp, #32]
 80085d8:	ec41 0b17 	vmov	d7, r0, r1
 80085dc:	443c      	add	r4, r7
 80085de:	b34a      	cbz	r2, 8008634 <_dtoa_r+0x50c>
 80085e0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80085e4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80085e8:	463e      	mov	r6, r7
 80085ea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80085ee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80085f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80085f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80085fa:	ee14 2a90 	vmov	r2, s9
 80085fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008602:	3230      	adds	r2, #48	@ 0x30
 8008604:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008608:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800860c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008610:	f806 2b01 	strb.w	r2, [r6], #1
 8008614:	d438      	bmi.n	8008688 <_dtoa_r+0x560>
 8008616:	ee32 5b46 	vsub.f64	d5, d2, d6
 800861a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800861e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008622:	d46e      	bmi.n	8008702 <_dtoa_r+0x5da>
 8008624:	42a6      	cmp	r6, r4
 8008626:	f43f af5a 	beq.w	80084de <_dtoa_r+0x3b6>
 800862a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800862e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008632:	e7e0      	b.n	80085f6 <_dtoa_r+0x4ce>
 8008634:	4621      	mov	r1, r4
 8008636:	463e      	mov	r6, r7
 8008638:	ee27 7b04 	vmul.f64	d7, d7, d4
 800863c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008640:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008644:	ee14 2a90 	vmov	r2, s9
 8008648:	3230      	adds	r2, #48	@ 0x30
 800864a:	f806 2b01 	strb.w	r2, [r6], #1
 800864e:	42a6      	cmp	r6, r4
 8008650:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008654:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008658:	d119      	bne.n	800868e <_dtoa_r+0x566>
 800865a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800865e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008662:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800866a:	dc4a      	bgt.n	8008702 <_dtoa_r+0x5da>
 800866c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008670:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008678:	f57f af31 	bpl.w	80084de <_dtoa_r+0x3b6>
 800867c:	460e      	mov	r6, r1
 800867e:	3901      	subs	r1, #1
 8008680:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008684:	2b30      	cmp	r3, #48	@ 0x30
 8008686:	d0f9      	beq.n	800867c <_dtoa_r+0x554>
 8008688:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800868c:	e027      	b.n	80086de <_dtoa_r+0x5b6>
 800868e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008692:	e7d5      	b.n	8008640 <_dtoa_r+0x518>
 8008694:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008698:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800869c:	463e      	mov	r6, r7
 800869e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80086a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80086a6:	ee15 3a10 	vmov	r3, s10
 80086aa:	3330      	adds	r3, #48	@ 0x30
 80086ac:	f806 3b01 	strb.w	r3, [r6], #1
 80086b0:	1bf3      	subs	r3, r6, r7
 80086b2:	459a      	cmp	sl, r3
 80086b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80086b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80086bc:	d132      	bne.n	8008724 <_dtoa_r+0x5fc>
 80086be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80086c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80086c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ca:	dc18      	bgt.n	80086fe <_dtoa_r+0x5d6>
 80086cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80086d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d4:	d103      	bne.n	80086de <_dtoa_r+0x5b6>
 80086d6:	ee15 3a10 	vmov	r3, s10
 80086da:	07db      	lsls	r3, r3, #31
 80086dc:	d40f      	bmi.n	80086fe <_dtoa_r+0x5d6>
 80086de:	9901      	ldr	r1, [sp, #4]
 80086e0:	4648      	mov	r0, r9
 80086e2:	f000 fbbf 	bl	8008e64 <_Bfree>
 80086e6:	2300      	movs	r3, #0
 80086e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086ea:	7033      	strb	r3, [r6, #0]
 80086ec:	f108 0301 	add.w	r3, r8, #1
 80086f0:	6013      	str	r3, [r2, #0]
 80086f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 824b 	beq.w	8008b90 <_dtoa_r+0xa68>
 80086fa:	601e      	str	r6, [r3, #0]
 80086fc:	e248      	b.n	8008b90 <_dtoa_r+0xa68>
 80086fe:	f8cd 8014 	str.w	r8, [sp, #20]
 8008702:	4633      	mov	r3, r6
 8008704:	461e      	mov	r6, r3
 8008706:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800870a:	2a39      	cmp	r2, #57	@ 0x39
 800870c:	d106      	bne.n	800871c <_dtoa_r+0x5f4>
 800870e:	429f      	cmp	r7, r3
 8008710:	d1f8      	bne.n	8008704 <_dtoa_r+0x5dc>
 8008712:	9a05      	ldr	r2, [sp, #20]
 8008714:	3201      	adds	r2, #1
 8008716:	9205      	str	r2, [sp, #20]
 8008718:	2230      	movs	r2, #48	@ 0x30
 800871a:	703a      	strb	r2, [r7, #0]
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	3201      	adds	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
 8008722:	e7b1      	b.n	8008688 <_dtoa_r+0x560>
 8008724:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008728:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800872c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008730:	d1b5      	bne.n	800869e <_dtoa_r+0x576>
 8008732:	e7d4      	b.n	80086de <_dtoa_r+0x5b6>
 8008734:	0800bad8 	.word	0x0800bad8
 8008738:	0800bab0 	.word	0x0800bab0
 800873c:	9908      	ldr	r1, [sp, #32]
 800873e:	2900      	cmp	r1, #0
 8008740:	f000 80e9 	beq.w	8008916 <_dtoa_r+0x7ee>
 8008744:	9907      	ldr	r1, [sp, #28]
 8008746:	2901      	cmp	r1, #1
 8008748:	f300 80cb 	bgt.w	80088e2 <_dtoa_r+0x7ba>
 800874c:	2d00      	cmp	r5, #0
 800874e:	f000 80c4 	beq.w	80088da <_dtoa_r+0x7b2>
 8008752:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008756:	9e04      	ldr	r6, [sp, #16]
 8008758:	461c      	mov	r4, r3
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	9b04      	ldr	r3, [sp, #16]
 800875e:	4413      	add	r3, r2
 8008760:	9304      	str	r3, [sp, #16]
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	2101      	movs	r1, #1
 8008766:	4413      	add	r3, r2
 8008768:	4648      	mov	r0, r9
 800876a:	9306      	str	r3, [sp, #24]
 800876c:	f000 fc78 	bl	8009060 <__i2b>
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	4605      	mov	r5, r0
 8008774:	b166      	cbz	r6, 8008790 <_dtoa_r+0x668>
 8008776:	9a06      	ldr	r2, [sp, #24]
 8008778:	2a00      	cmp	r2, #0
 800877a:	dd09      	ble.n	8008790 <_dtoa_r+0x668>
 800877c:	42b2      	cmp	r2, r6
 800877e:	9904      	ldr	r1, [sp, #16]
 8008780:	bfa8      	it	ge
 8008782:	4632      	movge	r2, r6
 8008784:	1a89      	subs	r1, r1, r2
 8008786:	9104      	str	r1, [sp, #16]
 8008788:	9906      	ldr	r1, [sp, #24]
 800878a:	1ab6      	subs	r6, r6, r2
 800878c:	1a8a      	subs	r2, r1, r2
 800878e:	9206      	str	r2, [sp, #24]
 8008790:	b30b      	cbz	r3, 80087d6 <_dtoa_r+0x6ae>
 8008792:	9a08      	ldr	r2, [sp, #32]
 8008794:	2a00      	cmp	r2, #0
 8008796:	f000 80c5 	beq.w	8008924 <_dtoa_r+0x7fc>
 800879a:	2c00      	cmp	r4, #0
 800879c:	f000 80bf 	beq.w	800891e <_dtoa_r+0x7f6>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4622      	mov	r2, r4
 80087a4:	4648      	mov	r0, r9
 80087a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087a8:	f000 fd12 	bl	80091d0 <__pow5mult>
 80087ac:	9a01      	ldr	r2, [sp, #4]
 80087ae:	4601      	mov	r1, r0
 80087b0:	4605      	mov	r5, r0
 80087b2:	4648      	mov	r0, r9
 80087b4:	f000 fc6a 	bl	800908c <__multiply>
 80087b8:	9901      	ldr	r1, [sp, #4]
 80087ba:	9005      	str	r0, [sp, #20]
 80087bc:	4648      	mov	r0, r9
 80087be:	f000 fb51 	bl	8008e64 <_Bfree>
 80087c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c4:	1b1b      	subs	r3, r3, r4
 80087c6:	f000 80b0 	beq.w	800892a <_dtoa_r+0x802>
 80087ca:	9905      	ldr	r1, [sp, #20]
 80087cc:	461a      	mov	r2, r3
 80087ce:	4648      	mov	r0, r9
 80087d0:	f000 fcfe 	bl	80091d0 <__pow5mult>
 80087d4:	9001      	str	r0, [sp, #4]
 80087d6:	2101      	movs	r1, #1
 80087d8:	4648      	mov	r0, r9
 80087da:	f000 fc41 	bl	8009060 <__i2b>
 80087de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087e0:	4604      	mov	r4, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 81da 	beq.w	8008b9c <_dtoa_r+0xa74>
 80087e8:	461a      	mov	r2, r3
 80087ea:	4601      	mov	r1, r0
 80087ec:	4648      	mov	r0, r9
 80087ee:	f000 fcef 	bl	80091d0 <__pow5mult>
 80087f2:	9b07      	ldr	r3, [sp, #28]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	4604      	mov	r4, r0
 80087f8:	f300 80a0 	bgt.w	800893c <_dtoa_r+0x814>
 80087fc:	9b02      	ldr	r3, [sp, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 8096 	bne.w	8008930 <_dtoa_r+0x808>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800880a:	2a00      	cmp	r2, #0
 800880c:	f040 8092 	bne.w	8008934 <_dtoa_r+0x80c>
 8008810:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008814:	0d12      	lsrs	r2, r2, #20
 8008816:	0512      	lsls	r2, r2, #20
 8008818:	2a00      	cmp	r2, #0
 800881a:	f000 808d 	beq.w	8008938 <_dtoa_r+0x810>
 800881e:	9b04      	ldr	r3, [sp, #16]
 8008820:	3301      	adds	r3, #1
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	9b06      	ldr	r3, [sp, #24]
 8008826:	3301      	adds	r3, #1
 8008828:	9306      	str	r3, [sp, #24]
 800882a:	2301      	movs	r3, #1
 800882c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800882e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 81b9 	beq.w	8008ba8 <_dtoa_r+0xa80>
 8008836:	6922      	ldr	r2, [r4, #16]
 8008838:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800883c:	6910      	ldr	r0, [r2, #16]
 800883e:	f000 fbc3 	bl	8008fc8 <__hi0bits>
 8008842:	f1c0 0020 	rsb	r0, r0, #32
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	4418      	add	r0, r3
 800884a:	f010 001f 	ands.w	r0, r0, #31
 800884e:	f000 8081 	beq.w	8008954 <_dtoa_r+0x82c>
 8008852:	f1c0 0220 	rsb	r2, r0, #32
 8008856:	2a04      	cmp	r2, #4
 8008858:	dd73      	ble.n	8008942 <_dtoa_r+0x81a>
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	f1c0 001c 	rsb	r0, r0, #28
 8008860:	4403      	add	r3, r0
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	9b06      	ldr	r3, [sp, #24]
 8008866:	4406      	add	r6, r0
 8008868:	4403      	add	r3, r0
 800886a:	9306      	str	r3, [sp, #24]
 800886c:	9b04      	ldr	r3, [sp, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd05      	ble.n	800887e <_dtoa_r+0x756>
 8008872:	9901      	ldr	r1, [sp, #4]
 8008874:	461a      	mov	r2, r3
 8008876:	4648      	mov	r0, r9
 8008878:	f000 fd04 	bl	8009284 <__lshift>
 800887c:	9001      	str	r0, [sp, #4]
 800887e:	9b06      	ldr	r3, [sp, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x768>
 8008884:	4621      	mov	r1, r4
 8008886:	461a      	mov	r2, r3
 8008888:	4648      	mov	r0, r9
 800888a:	f000 fcfb 	bl	8009284 <__lshift>
 800888e:	4604      	mov	r4, r0
 8008890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008892:	2b00      	cmp	r3, #0
 8008894:	d060      	beq.n	8008958 <_dtoa_r+0x830>
 8008896:	9801      	ldr	r0, [sp, #4]
 8008898:	4621      	mov	r1, r4
 800889a:	f000 fd5f 	bl	800935c <__mcmp>
 800889e:	2800      	cmp	r0, #0
 80088a0:	da5a      	bge.n	8008958 <_dtoa_r+0x830>
 80088a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80088a6:	9305      	str	r3, [sp, #20]
 80088a8:	9901      	ldr	r1, [sp, #4]
 80088aa:	2300      	movs	r3, #0
 80088ac:	220a      	movs	r2, #10
 80088ae:	4648      	mov	r0, r9
 80088b0:	f000 fafa 	bl	8008ea8 <__multadd>
 80088b4:	9b08      	ldr	r3, [sp, #32]
 80088b6:	9001      	str	r0, [sp, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8177 	beq.w	8008bac <_dtoa_r+0xa84>
 80088be:	4629      	mov	r1, r5
 80088c0:	2300      	movs	r3, #0
 80088c2:	220a      	movs	r2, #10
 80088c4:	4648      	mov	r0, r9
 80088c6:	f000 faef 	bl	8008ea8 <__multadd>
 80088ca:	f1bb 0f00 	cmp.w	fp, #0
 80088ce:	4605      	mov	r5, r0
 80088d0:	dc6e      	bgt.n	80089b0 <_dtoa_r+0x888>
 80088d2:	9b07      	ldr	r3, [sp, #28]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	dc48      	bgt.n	800896a <_dtoa_r+0x842>
 80088d8:	e06a      	b.n	80089b0 <_dtoa_r+0x888>
 80088da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088e0:	e739      	b.n	8008756 <_dtoa_r+0x62e>
 80088e2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80088e6:	42a3      	cmp	r3, r4
 80088e8:	db07      	blt.n	80088fa <_dtoa_r+0x7d2>
 80088ea:	f1ba 0f00 	cmp.w	sl, #0
 80088ee:	eba3 0404 	sub.w	r4, r3, r4
 80088f2:	db0b      	blt.n	800890c <_dtoa_r+0x7e4>
 80088f4:	9e04      	ldr	r6, [sp, #16]
 80088f6:	4652      	mov	r2, sl
 80088f8:	e72f      	b.n	800875a <_dtoa_r+0x632>
 80088fa:	1ae2      	subs	r2, r4, r3
 80088fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088fe:	9e04      	ldr	r6, [sp, #16]
 8008900:	4413      	add	r3, r2
 8008902:	930a      	str	r3, [sp, #40]	@ 0x28
 8008904:	4652      	mov	r2, sl
 8008906:	4623      	mov	r3, r4
 8008908:	2400      	movs	r4, #0
 800890a:	e726      	b.n	800875a <_dtoa_r+0x632>
 800890c:	9a04      	ldr	r2, [sp, #16]
 800890e:	eba2 060a 	sub.w	r6, r2, sl
 8008912:	2200      	movs	r2, #0
 8008914:	e721      	b.n	800875a <_dtoa_r+0x632>
 8008916:	9e04      	ldr	r6, [sp, #16]
 8008918:	9d08      	ldr	r5, [sp, #32]
 800891a:	461c      	mov	r4, r3
 800891c:	e72a      	b.n	8008774 <_dtoa_r+0x64c>
 800891e:	9a01      	ldr	r2, [sp, #4]
 8008920:	9205      	str	r2, [sp, #20]
 8008922:	e752      	b.n	80087ca <_dtoa_r+0x6a2>
 8008924:	9901      	ldr	r1, [sp, #4]
 8008926:	461a      	mov	r2, r3
 8008928:	e751      	b.n	80087ce <_dtoa_r+0x6a6>
 800892a:	9b05      	ldr	r3, [sp, #20]
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	e752      	b.n	80087d6 <_dtoa_r+0x6ae>
 8008930:	2300      	movs	r3, #0
 8008932:	e77b      	b.n	800882c <_dtoa_r+0x704>
 8008934:	9b02      	ldr	r3, [sp, #8]
 8008936:	e779      	b.n	800882c <_dtoa_r+0x704>
 8008938:	920b      	str	r2, [sp, #44]	@ 0x2c
 800893a:	e778      	b.n	800882e <_dtoa_r+0x706>
 800893c:	2300      	movs	r3, #0
 800893e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008940:	e779      	b.n	8008836 <_dtoa_r+0x70e>
 8008942:	d093      	beq.n	800886c <_dtoa_r+0x744>
 8008944:	9b04      	ldr	r3, [sp, #16]
 8008946:	321c      	adds	r2, #28
 8008948:	4413      	add	r3, r2
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	9b06      	ldr	r3, [sp, #24]
 800894e:	4416      	add	r6, r2
 8008950:	4413      	add	r3, r2
 8008952:	e78a      	b.n	800886a <_dtoa_r+0x742>
 8008954:	4602      	mov	r2, r0
 8008956:	e7f5      	b.n	8008944 <_dtoa_r+0x81c>
 8008958:	f1ba 0f00 	cmp.w	sl, #0
 800895c:	f8cd 8014 	str.w	r8, [sp, #20]
 8008960:	46d3      	mov	fp, sl
 8008962:	dc21      	bgt.n	80089a8 <_dtoa_r+0x880>
 8008964:	9b07      	ldr	r3, [sp, #28]
 8008966:	2b02      	cmp	r3, #2
 8008968:	dd1e      	ble.n	80089a8 <_dtoa_r+0x880>
 800896a:	f1bb 0f00 	cmp.w	fp, #0
 800896e:	f47f addc 	bne.w	800852a <_dtoa_r+0x402>
 8008972:	4621      	mov	r1, r4
 8008974:	465b      	mov	r3, fp
 8008976:	2205      	movs	r2, #5
 8008978:	4648      	mov	r0, r9
 800897a:	f000 fa95 	bl	8008ea8 <__multadd>
 800897e:	4601      	mov	r1, r0
 8008980:	4604      	mov	r4, r0
 8008982:	9801      	ldr	r0, [sp, #4]
 8008984:	f000 fcea 	bl	800935c <__mcmp>
 8008988:	2800      	cmp	r0, #0
 800898a:	f77f adce 	ble.w	800852a <_dtoa_r+0x402>
 800898e:	463e      	mov	r6, r7
 8008990:	2331      	movs	r3, #49	@ 0x31
 8008992:	f806 3b01 	strb.w	r3, [r6], #1
 8008996:	9b05      	ldr	r3, [sp, #20]
 8008998:	3301      	adds	r3, #1
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	e5c9      	b.n	8008532 <_dtoa_r+0x40a>
 800899e:	f8cd 8014 	str.w	r8, [sp, #20]
 80089a2:	4654      	mov	r4, sl
 80089a4:	4625      	mov	r5, r4
 80089a6:	e7f2      	b.n	800898e <_dtoa_r+0x866>
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8102 	beq.w	8008bb4 <_dtoa_r+0xa8c>
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	dd05      	ble.n	80089c0 <_dtoa_r+0x898>
 80089b4:	4629      	mov	r1, r5
 80089b6:	4632      	mov	r2, r6
 80089b8:	4648      	mov	r0, r9
 80089ba:	f000 fc63 	bl	8009284 <__lshift>
 80089be:	4605      	mov	r5, r0
 80089c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d058      	beq.n	8008a78 <_dtoa_r+0x950>
 80089c6:	6869      	ldr	r1, [r5, #4]
 80089c8:	4648      	mov	r0, r9
 80089ca:	f000 fa0b 	bl	8008de4 <_Balloc>
 80089ce:	4606      	mov	r6, r0
 80089d0:	b928      	cbnz	r0, 80089de <_dtoa_r+0x8b6>
 80089d2:	4b82      	ldr	r3, [pc, #520]	@ (8008bdc <_dtoa_r+0xab4>)
 80089d4:	4602      	mov	r2, r0
 80089d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089da:	f7ff bbbe 	b.w	800815a <_dtoa_r+0x32>
 80089de:	692a      	ldr	r2, [r5, #16]
 80089e0:	3202      	adds	r2, #2
 80089e2:	0092      	lsls	r2, r2, #2
 80089e4:	f105 010c 	add.w	r1, r5, #12
 80089e8:	300c      	adds	r0, #12
 80089ea:	f002 f8df 	bl	800abac <memcpy>
 80089ee:	2201      	movs	r2, #1
 80089f0:	4631      	mov	r1, r6
 80089f2:	4648      	mov	r0, r9
 80089f4:	f000 fc46 	bl	8009284 <__lshift>
 80089f8:	1c7b      	adds	r3, r7, #1
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	eb07 030b 	add.w	r3, r7, fp
 8008a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a02:	9b02      	ldr	r3, [sp, #8]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	46a8      	mov	r8, r5
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	9801      	ldr	r0, [sp, #4]
 8008a12:	4621      	mov	r1, r4
 8008a14:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a18:	f7ff fafc 	bl	8008014 <quorem>
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	9002      	str	r0, [sp, #8]
 8008a20:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008a24:	9801      	ldr	r0, [sp, #4]
 8008a26:	f000 fc99 	bl	800935c <__mcmp>
 8008a2a:	462a      	mov	r2, r5
 8008a2c:	9006      	str	r0, [sp, #24]
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4648      	mov	r0, r9
 8008a32:	f000 fcaf 	bl	8009394 <__mdiff>
 8008a36:	68c2      	ldr	r2, [r0, #12]
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b9fa      	cbnz	r2, 8008a7c <_dtoa_r+0x954>
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	9801      	ldr	r0, [sp, #4]
 8008a40:	f000 fc8c 	bl	800935c <__mcmp>
 8008a44:	4602      	mov	r2, r0
 8008a46:	4631      	mov	r1, r6
 8008a48:	4648      	mov	r0, r9
 8008a4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8008a4c:	f000 fa0a 	bl	8008e64 <_Bfree>
 8008a50:	9b07      	ldr	r3, [sp, #28]
 8008a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a54:	9e04      	ldr	r6, [sp, #16]
 8008a56:	ea42 0103 	orr.w	r1, r2, r3
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	4319      	orrs	r1, r3
 8008a5e:	d10f      	bne.n	8008a80 <_dtoa_r+0x958>
 8008a60:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008a64:	d028      	beq.n	8008ab8 <_dtoa_r+0x990>
 8008a66:	9b06      	ldr	r3, [sp, #24]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dd02      	ble.n	8008a72 <_dtoa_r+0x94a>
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008a72:	f88b a000 	strb.w	sl, [fp]
 8008a76:	e55e      	b.n	8008536 <_dtoa_r+0x40e>
 8008a78:	4628      	mov	r0, r5
 8008a7a:	e7bd      	b.n	80089f8 <_dtoa_r+0x8d0>
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	e7e2      	b.n	8008a46 <_dtoa_r+0x91e>
 8008a80:	9b06      	ldr	r3, [sp, #24]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	db04      	blt.n	8008a90 <_dtoa_r+0x968>
 8008a86:	9907      	ldr	r1, [sp, #28]
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	9908      	ldr	r1, [sp, #32]
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	d120      	bne.n	8008ad2 <_dtoa_r+0x9aa>
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	ddee      	ble.n	8008a72 <_dtoa_r+0x94a>
 8008a94:	9901      	ldr	r1, [sp, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	4648      	mov	r0, r9
 8008a9a:	f000 fbf3 	bl	8009284 <__lshift>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	9001      	str	r0, [sp, #4]
 8008aa2:	f000 fc5b 	bl	800935c <__mcmp>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	dc03      	bgt.n	8008ab2 <_dtoa_r+0x98a>
 8008aaa:	d1e2      	bne.n	8008a72 <_dtoa_r+0x94a>
 8008aac:	f01a 0f01 	tst.w	sl, #1
 8008ab0:	d0df      	beq.n	8008a72 <_dtoa_r+0x94a>
 8008ab2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008ab6:	d1d9      	bne.n	8008a6c <_dtoa_r+0x944>
 8008ab8:	2339      	movs	r3, #57	@ 0x39
 8008aba:	f88b 3000 	strb.w	r3, [fp]
 8008abe:	4633      	mov	r3, r6
 8008ac0:	461e      	mov	r6, r3
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ac8:	2a39      	cmp	r2, #57	@ 0x39
 8008aca:	d052      	beq.n	8008b72 <_dtoa_r+0xa4a>
 8008acc:	3201      	adds	r2, #1
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	e531      	b.n	8008536 <_dtoa_r+0x40e>
 8008ad2:	2a00      	cmp	r2, #0
 8008ad4:	dd07      	ble.n	8008ae6 <_dtoa_r+0x9be>
 8008ad6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008ada:	d0ed      	beq.n	8008ab8 <_dtoa_r+0x990>
 8008adc:	f10a 0301 	add.w	r3, sl, #1
 8008ae0:	f88b 3000 	strb.w	r3, [fp]
 8008ae4:	e527      	b.n	8008536 <_dtoa_r+0x40e>
 8008ae6:	9b04      	ldr	r3, [sp, #16]
 8008ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aea:	f803 ac01 	strb.w	sl, [r3, #-1]
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d029      	beq.n	8008b46 <_dtoa_r+0xa1e>
 8008af2:	9901      	ldr	r1, [sp, #4]
 8008af4:	2300      	movs	r3, #0
 8008af6:	220a      	movs	r2, #10
 8008af8:	4648      	mov	r0, r9
 8008afa:	f000 f9d5 	bl	8008ea8 <__multadd>
 8008afe:	45a8      	cmp	r8, r5
 8008b00:	9001      	str	r0, [sp, #4]
 8008b02:	f04f 0300 	mov.w	r3, #0
 8008b06:	f04f 020a 	mov.w	r2, #10
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	4648      	mov	r0, r9
 8008b0e:	d107      	bne.n	8008b20 <_dtoa_r+0x9f8>
 8008b10:	f000 f9ca 	bl	8008ea8 <__multadd>
 8008b14:	4680      	mov	r8, r0
 8008b16:	4605      	mov	r5, r0
 8008b18:	9b04      	ldr	r3, [sp, #16]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	e776      	b.n	8008a0e <_dtoa_r+0x8e6>
 8008b20:	f000 f9c2 	bl	8008ea8 <__multadd>
 8008b24:	4629      	mov	r1, r5
 8008b26:	4680      	mov	r8, r0
 8008b28:	2300      	movs	r3, #0
 8008b2a:	220a      	movs	r2, #10
 8008b2c:	4648      	mov	r0, r9
 8008b2e:	f000 f9bb 	bl	8008ea8 <__multadd>
 8008b32:	4605      	mov	r5, r0
 8008b34:	e7f0      	b.n	8008b18 <_dtoa_r+0x9f0>
 8008b36:	f1bb 0f00 	cmp.w	fp, #0
 8008b3a:	bfcc      	ite	gt
 8008b3c:	465e      	movgt	r6, fp
 8008b3e:	2601      	movle	r6, #1
 8008b40:	443e      	add	r6, r7
 8008b42:	f04f 0800 	mov.w	r8, #0
 8008b46:	9901      	ldr	r1, [sp, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	4648      	mov	r0, r9
 8008b4c:	f000 fb9a 	bl	8009284 <__lshift>
 8008b50:	4621      	mov	r1, r4
 8008b52:	9001      	str	r0, [sp, #4]
 8008b54:	f000 fc02 	bl	800935c <__mcmp>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	dcb0      	bgt.n	8008abe <_dtoa_r+0x996>
 8008b5c:	d102      	bne.n	8008b64 <_dtoa_r+0xa3c>
 8008b5e:	f01a 0f01 	tst.w	sl, #1
 8008b62:	d1ac      	bne.n	8008abe <_dtoa_r+0x996>
 8008b64:	4633      	mov	r3, r6
 8008b66:	461e      	mov	r6, r3
 8008b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b6c:	2a30      	cmp	r2, #48	@ 0x30
 8008b6e:	d0fa      	beq.n	8008b66 <_dtoa_r+0xa3e>
 8008b70:	e4e1      	b.n	8008536 <_dtoa_r+0x40e>
 8008b72:	429f      	cmp	r7, r3
 8008b74:	d1a4      	bne.n	8008ac0 <_dtoa_r+0x998>
 8008b76:	9b05      	ldr	r3, [sp, #20]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	9305      	str	r3, [sp, #20]
 8008b7c:	2331      	movs	r3, #49	@ 0x31
 8008b7e:	703b      	strb	r3, [r7, #0]
 8008b80:	e4d9      	b.n	8008536 <_dtoa_r+0x40e>
 8008b82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b84:	4f16      	ldr	r7, [pc, #88]	@ (8008be0 <_dtoa_r+0xab8>)
 8008b86:	b11b      	cbz	r3, 8008b90 <_dtoa_r+0xa68>
 8008b88:	f107 0308 	add.w	r3, r7, #8
 8008b8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	4638      	mov	r0, r7
 8008b92:	b011      	add	sp, #68	@ 0x44
 8008b94:	ecbd 8b02 	vpop	{d8}
 8008b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9c:	9b07      	ldr	r3, [sp, #28]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	f77f ae2c 	ble.w	80087fc <_dtoa_r+0x6d4>
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ba8:	2001      	movs	r0, #1
 8008baa:	e64c      	b.n	8008846 <_dtoa_r+0x71e>
 8008bac:	f1bb 0f00 	cmp.w	fp, #0
 8008bb0:	f77f aed8 	ble.w	8008964 <_dtoa_r+0x83c>
 8008bb4:	463e      	mov	r6, r7
 8008bb6:	9801      	ldr	r0, [sp, #4]
 8008bb8:	4621      	mov	r1, r4
 8008bba:	f7ff fa2b 	bl	8008014 <quorem>
 8008bbe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008bc2:	f806 ab01 	strb.w	sl, [r6], #1
 8008bc6:	1bf2      	subs	r2, r6, r7
 8008bc8:	4593      	cmp	fp, r2
 8008bca:	ddb4      	ble.n	8008b36 <_dtoa_r+0xa0e>
 8008bcc:	9901      	ldr	r1, [sp, #4]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	4648      	mov	r0, r9
 8008bd4:	f000 f968 	bl	8008ea8 <__multadd>
 8008bd8:	9001      	str	r0, [sp, #4]
 8008bda:	e7ec      	b.n	8008bb6 <_dtoa_r+0xa8e>
 8008bdc:	0800b97d 	.word	0x0800b97d
 8008be0:	0800b901 	.word	0x0800b901

08008be4 <_free_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4605      	mov	r5, r0
 8008be8:	2900      	cmp	r1, #0
 8008bea:	d041      	beq.n	8008c70 <_free_r+0x8c>
 8008bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf0:	1f0c      	subs	r4, r1, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfb8      	it	lt
 8008bf6:	18e4      	addlt	r4, r4, r3
 8008bf8:	f000 f8e8 	bl	8008dcc <__malloc_lock>
 8008bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8008c74 <_free_r+0x90>)
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	b933      	cbnz	r3, 8008c10 <_free_r+0x2c>
 8008c02:	6063      	str	r3, [r4, #4]
 8008c04:	6014      	str	r4, [r2, #0]
 8008c06:	4628      	mov	r0, r5
 8008c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0c:	f000 b8e4 	b.w	8008dd8 <__malloc_unlock>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d908      	bls.n	8008c26 <_free_r+0x42>
 8008c14:	6820      	ldr	r0, [r4, #0]
 8008c16:	1821      	adds	r1, r4, r0
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf01      	itttt	eq
 8008c1c:	6819      	ldreq	r1, [r3, #0]
 8008c1e:	685b      	ldreq	r3, [r3, #4]
 8008c20:	1809      	addeq	r1, r1, r0
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	e7ed      	b.n	8008c02 <_free_r+0x1e>
 8008c26:	461a      	mov	r2, r3
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b10b      	cbz	r3, 8008c30 <_free_r+0x4c>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d9fa      	bls.n	8008c26 <_free_r+0x42>
 8008c30:	6811      	ldr	r1, [r2, #0]
 8008c32:	1850      	adds	r0, r2, r1
 8008c34:	42a0      	cmp	r0, r4
 8008c36:	d10b      	bne.n	8008c50 <_free_r+0x6c>
 8008c38:	6820      	ldr	r0, [r4, #0]
 8008c3a:	4401      	add	r1, r0
 8008c3c:	1850      	adds	r0, r2, r1
 8008c3e:	4283      	cmp	r3, r0
 8008c40:	6011      	str	r1, [r2, #0]
 8008c42:	d1e0      	bne.n	8008c06 <_free_r+0x22>
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	6053      	str	r3, [r2, #4]
 8008c4a:	4408      	add	r0, r1
 8008c4c:	6010      	str	r0, [r2, #0]
 8008c4e:	e7da      	b.n	8008c06 <_free_r+0x22>
 8008c50:	d902      	bls.n	8008c58 <_free_r+0x74>
 8008c52:	230c      	movs	r3, #12
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	e7d6      	b.n	8008c06 <_free_r+0x22>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	1821      	adds	r1, r4, r0
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf04      	itt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	bf04      	itt	eq
 8008c68:	1809      	addeq	r1, r1, r0
 8008c6a:	6021      	streq	r1, [r4, #0]
 8008c6c:	6054      	str	r4, [r2, #4]
 8008c6e:	e7ca      	b.n	8008c06 <_free_r+0x22>
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	240004fc 	.word	0x240004fc

08008c78 <malloc>:
 8008c78:	4b02      	ldr	r3, [pc, #8]	@ (8008c84 <malloc+0xc>)
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	f000 b825 	b.w	8008ccc <_malloc_r>
 8008c82:	bf00      	nop
 8008c84:	24000024 	.word	0x24000024

08008c88 <sbrk_aligned>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008cc8 <sbrk_aligned+0x40>)
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	6831      	ldr	r1, [r6, #0]
 8008c90:	4605      	mov	r5, r0
 8008c92:	b911      	cbnz	r1, 8008c9a <sbrk_aligned+0x12>
 8008c94:	f001 ff7a 	bl	800ab8c <_sbrk_r>
 8008c98:	6030      	str	r0, [r6, #0]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f001 ff75 	bl	800ab8c <_sbrk_r>
 8008ca2:	1c43      	adds	r3, r0, #1
 8008ca4:	d103      	bne.n	8008cae <sbrk_aligned+0x26>
 8008ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8008caa:	4620      	mov	r0, r4
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
 8008cae:	1cc4      	adds	r4, r0, #3
 8008cb0:	f024 0403 	bic.w	r4, r4, #3
 8008cb4:	42a0      	cmp	r0, r4
 8008cb6:	d0f8      	beq.n	8008caa <sbrk_aligned+0x22>
 8008cb8:	1a21      	subs	r1, r4, r0
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f001 ff66 	bl	800ab8c <_sbrk_r>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d1f2      	bne.n	8008caa <sbrk_aligned+0x22>
 8008cc4:	e7ef      	b.n	8008ca6 <sbrk_aligned+0x1e>
 8008cc6:	bf00      	nop
 8008cc8:	240004f8 	.word	0x240004f8

08008ccc <_malloc_r>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	1ccd      	adds	r5, r1, #3
 8008cd2:	f025 0503 	bic.w	r5, r5, #3
 8008cd6:	3508      	adds	r5, #8
 8008cd8:	2d0c      	cmp	r5, #12
 8008cda:	bf38      	it	cc
 8008cdc:	250c      	movcc	r5, #12
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	db01      	blt.n	8008ce8 <_malloc_r+0x1c>
 8008ce4:	42a9      	cmp	r1, r5
 8008ce6:	d904      	bls.n	8008cf2 <_malloc_r+0x26>
 8008ce8:	230c      	movs	r3, #12
 8008cea:	6033      	str	r3, [r6, #0]
 8008cec:	2000      	movs	r0, #0
 8008cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dc8 <_malloc_r+0xfc>
 8008cf6:	f000 f869 	bl	8008dcc <__malloc_lock>
 8008cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008cfe:	461c      	mov	r4, r3
 8008d00:	bb44      	cbnz	r4, 8008d54 <_malloc_r+0x88>
 8008d02:	4629      	mov	r1, r5
 8008d04:	4630      	mov	r0, r6
 8008d06:	f7ff ffbf 	bl	8008c88 <sbrk_aligned>
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	d158      	bne.n	8008dc2 <_malloc_r+0xf6>
 8008d10:	f8d8 4000 	ldr.w	r4, [r8]
 8008d14:	4627      	mov	r7, r4
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	d143      	bne.n	8008da2 <_malloc_r+0xd6>
 8008d1a:	2c00      	cmp	r4, #0
 8008d1c:	d04b      	beq.n	8008db6 <_malloc_r+0xea>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	4639      	mov	r1, r7
 8008d22:	4630      	mov	r0, r6
 8008d24:	eb04 0903 	add.w	r9, r4, r3
 8008d28:	f001 ff30 	bl	800ab8c <_sbrk_r>
 8008d2c:	4581      	cmp	r9, r0
 8008d2e:	d142      	bne.n	8008db6 <_malloc_r+0xea>
 8008d30:	6821      	ldr	r1, [r4, #0]
 8008d32:	1a6d      	subs	r5, r5, r1
 8008d34:	4629      	mov	r1, r5
 8008d36:	4630      	mov	r0, r6
 8008d38:	f7ff ffa6 	bl	8008c88 <sbrk_aligned>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d03a      	beq.n	8008db6 <_malloc_r+0xea>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	442b      	add	r3, r5
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	f8d8 3000 	ldr.w	r3, [r8]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	bb62      	cbnz	r2, 8008da8 <_malloc_r+0xdc>
 8008d4e:	f8c8 7000 	str.w	r7, [r8]
 8008d52:	e00f      	b.n	8008d74 <_malloc_r+0xa8>
 8008d54:	6822      	ldr	r2, [r4, #0]
 8008d56:	1b52      	subs	r2, r2, r5
 8008d58:	d420      	bmi.n	8008d9c <_malloc_r+0xd0>
 8008d5a:	2a0b      	cmp	r2, #11
 8008d5c:	d917      	bls.n	8008d8e <_malloc_r+0xc2>
 8008d5e:	1961      	adds	r1, r4, r5
 8008d60:	42a3      	cmp	r3, r4
 8008d62:	6025      	str	r5, [r4, #0]
 8008d64:	bf18      	it	ne
 8008d66:	6059      	strne	r1, [r3, #4]
 8008d68:	6863      	ldr	r3, [r4, #4]
 8008d6a:	bf08      	it	eq
 8008d6c:	f8c8 1000 	streq.w	r1, [r8]
 8008d70:	5162      	str	r2, [r4, r5]
 8008d72:	604b      	str	r3, [r1, #4]
 8008d74:	4630      	mov	r0, r6
 8008d76:	f000 f82f 	bl	8008dd8 <__malloc_unlock>
 8008d7a:	f104 000b 	add.w	r0, r4, #11
 8008d7e:	1d23      	adds	r3, r4, #4
 8008d80:	f020 0007 	bic.w	r0, r0, #7
 8008d84:	1ac2      	subs	r2, r0, r3
 8008d86:	bf1c      	itt	ne
 8008d88:	1a1b      	subne	r3, r3, r0
 8008d8a:	50a3      	strne	r3, [r4, r2]
 8008d8c:	e7af      	b.n	8008cee <_malloc_r+0x22>
 8008d8e:	6862      	ldr	r2, [r4, #4]
 8008d90:	42a3      	cmp	r3, r4
 8008d92:	bf0c      	ite	eq
 8008d94:	f8c8 2000 	streq.w	r2, [r8]
 8008d98:	605a      	strne	r2, [r3, #4]
 8008d9a:	e7eb      	b.n	8008d74 <_malloc_r+0xa8>
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	6864      	ldr	r4, [r4, #4]
 8008da0:	e7ae      	b.n	8008d00 <_malloc_r+0x34>
 8008da2:	463c      	mov	r4, r7
 8008da4:	687f      	ldr	r7, [r7, #4]
 8008da6:	e7b6      	b.n	8008d16 <_malloc_r+0x4a>
 8008da8:	461a      	mov	r2, r3
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d1fb      	bne.n	8008da8 <_malloc_r+0xdc>
 8008db0:	2300      	movs	r3, #0
 8008db2:	6053      	str	r3, [r2, #4]
 8008db4:	e7de      	b.n	8008d74 <_malloc_r+0xa8>
 8008db6:	230c      	movs	r3, #12
 8008db8:	6033      	str	r3, [r6, #0]
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f000 f80c 	bl	8008dd8 <__malloc_unlock>
 8008dc0:	e794      	b.n	8008cec <_malloc_r+0x20>
 8008dc2:	6005      	str	r5, [r0, #0]
 8008dc4:	e7d6      	b.n	8008d74 <_malloc_r+0xa8>
 8008dc6:	bf00      	nop
 8008dc8:	240004fc 	.word	0x240004fc

08008dcc <__malloc_lock>:
 8008dcc:	4801      	ldr	r0, [pc, #4]	@ (8008dd4 <__malloc_lock+0x8>)
 8008dce:	f7ff b918 	b.w	8008002 <__retarget_lock_acquire_recursive>
 8008dd2:	bf00      	nop
 8008dd4:	240004f4 	.word	0x240004f4

08008dd8 <__malloc_unlock>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	@ (8008de0 <__malloc_unlock+0x8>)
 8008dda:	f7ff b913 	b.w	8008004 <__retarget_lock_release_recursive>
 8008dde:	bf00      	nop
 8008de0:	240004f4 	.word	0x240004f4

08008de4 <_Balloc>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	69c6      	ldr	r6, [r0, #28]
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	b976      	cbnz	r6, 8008e0c <_Balloc+0x28>
 8008dee:	2010      	movs	r0, #16
 8008df0:	f7ff ff42 	bl	8008c78 <malloc>
 8008df4:	4602      	mov	r2, r0
 8008df6:	61e0      	str	r0, [r4, #28]
 8008df8:	b920      	cbnz	r0, 8008e04 <_Balloc+0x20>
 8008dfa:	4b18      	ldr	r3, [pc, #96]	@ (8008e5c <_Balloc+0x78>)
 8008dfc:	4818      	ldr	r0, [pc, #96]	@ (8008e60 <_Balloc+0x7c>)
 8008dfe:	216b      	movs	r1, #107	@ 0x6b
 8008e00:	f001 feea 	bl	800abd8 <__assert_func>
 8008e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e08:	6006      	str	r6, [r0, #0]
 8008e0a:	60c6      	str	r6, [r0, #12]
 8008e0c:	69e6      	ldr	r6, [r4, #28]
 8008e0e:	68f3      	ldr	r3, [r6, #12]
 8008e10:	b183      	cbz	r3, 8008e34 <_Balloc+0x50>
 8008e12:	69e3      	ldr	r3, [r4, #28]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e1a:	b9b8      	cbnz	r0, 8008e4c <_Balloc+0x68>
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e22:	1d72      	adds	r2, r6, #5
 8008e24:	0092      	lsls	r2, r2, #2
 8008e26:	4620      	mov	r0, r4
 8008e28:	f001 fef4 	bl	800ac14 <_calloc_r>
 8008e2c:	b160      	cbz	r0, 8008e48 <_Balloc+0x64>
 8008e2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e32:	e00e      	b.n	8008e52 <_Balloc+0x6e>
 8008e34:	2221      	movs	r2, #33	@ 0x21
 8008e36:	2104      	movs	r1, #4
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f001 feeb 	bl	800ac14 <_calloc_r>
 8008e3e:	69e3      	ldr	r3, [r4, #28]
 8008e40:	60f0      	str	r0, [r6, #12]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e4      	bne.n	8008e12 <_Balloc+0x2e>
 8008e48:	2000      	movs	r0, #0
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	6802      	ldr	r2, [r0, #0]
 8008e4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e52:	2300      	movs	r3, #0
 8008e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e58:	e7f7      	b.n	8008e4a <_Balloc+0x66>
 8008e5a:	bf00      	nop
 8008e5c:	0800b90e 	.word	0x0800b90e
 8008e60:	0800b98e 	.word	0x0800b98e

08008e64 <_Bfree>:
 8008e64:	b570      	push	{r4, r5, r6, lr}
 8008e66:	69c6      	ldr	r6, [r0, #28]
 8008e68:	4605      	mov	r5, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	b976      	cbnz	r6, 8008e8c <_Bfree+0x28>
 8008e6e:	2010      	movs	r0, #16
 8008e70:	f7ff ff02 	bl	8008c78 <malloc>
 8008e74:	4602      	mov	r2, r0
 8008e76:	61e8      	str	r0, [r5, #28]
 8008e78:	b920      	cbnz	r0, 8008e84 <_Bfree+0x20>
 8008e7a:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <_Bfree+0x3c>)
 8008e7c:	4809      	ldr	r0, [pc, #36]	@ (8008ea4 <_Bfree+0x40>)
 8008e7e:	218f      	movs	r1, #143	@ 0x8f
 8008e80:	f001 feaa 	bl	800abd8 <__assert_func>
 8008e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e88:	6006      	str	r6, [r0, #0]
 8008e8a:	60c6      	str	r6, [r0, #12]
 8008e8c:	b13c      	cbz	r4, 8008e9e <_Bfree+0x3a>
 8008e8e:	69eb      	ldr	r3, [r5, #28]
 8008e90:	6862      	ldr	r2, [r4, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e98:	6021      	str	r1, [r4, #0]
 8008e9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	0800b90e 	.word	0x0800b90e
 8008ea4:	0800b98e 	.word	0x0800b98e

08008ea8 <__multadd>:
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	690d      	ldr	r5, [r1, #16]
 8008eae:	4607      	mov	r7, r0
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	461e      	mov	r6, r3
 8008eb4:	f101 0c14 	add.w	ip, r1, #20
 8008eb8:	2000      	movs	r0, #0
 8008eba:	f8dc 3000 	ldr.w	r3, [ip]
 8008ebe:	b299      	uxth	r1, r3
 8008ec0:	fb02 6101 	mla	r1, r2, r1, r6
 8008ec4:	0c1e      	lsrs	r6, r3, #16
 8008ec6:	0c0b      	lsrs	r3, r1, #16
 8008ec8:	fb02 3306 	mla	r3, r2, r6, r3
 8008ecc:	b289      	uxth	r1, r1
 8008ece:	3001      	adds	r0, #1
 8008ed0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ed4:	4285      	cmp	r5, r0
 8008ed6:	f84c 1b04 	str.w	r1, [ip], #4
 8008eda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ede:	dcec      	bgt.n	8008eba <__multadd+0x12>
 8008ee0:	b30e      	cbz	r6, 8008f26 <__multadd+0x7e>
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	42ab      	cmp	r3, r5
 8008ee6:	dc19      	bgt.n	8008f1c <__multadd+0x74>
 8008ee8:	6861      	ldr	r1, [r4, #4]
 8008eea:	4638      	mov	r0, r7
 8008eec:	3101      	adds	r1, #1
 8008eee:	f7ff ff79 	bl	8008de4 <_Balloc>
 8008ef2:	4680      	mov	r8, r0
 8008ef4:	b928      	cbnz	r0, 8008f02 <__multadd+0x5a>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <__multadd+0x84>)
 8008efa:	480d      	ldr	r0, [pc, #52]	@ (8008f30 <__multadd+0x88>)
 8008efc:	21ba      	movs	r1, #186	@ 0xba
 8008efe:	f001 fe6b 	bl	800abd8 <__assert_func>
 8008f02:	6922      	ldr	r2, [r4, #16]
 8008f04:	3202      	adds	r2, #2
 8008f06:	f104 010c 	add.w	r1, r4, #12
 8008f0a:	0092      	lsls	r2, r2, #2
 8008f0c:	300c      	adds	r0, #12
 8008f0e:	f001 fe4d 	bl	800abac <memcpy>
 8008f12:	4621      	mov	r1, r4
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff ffa5 	bl	8008e64 <_Bfree>
 8008f1a:	4644      	mov	r4, r8
 8008f1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f20:	3501      	adds	r5, #1
 8008f22:	615e      	str	r6, [r3, #20]
 8008f24:	6125      	str	r5, [r4, #16]
 8008f26:	4620      	mov	r0, r4
 8008f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f2c:	0800b97d 	.word	0x0800b97d
 8008f30:	0800b98e 	.word	0x0800b98e

08008f34 <__s2b>:
 8008f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f38:	460c      	mov	r4, r1
 8008f3a:	4615      	mov	r5, r2
 8008f3c:	461f      	mov	r7, r3
 8008f3e:	2209      	movs	r2, #9
 8008f40:	3308      	adds	r3, #8
 8008f42:	4606      	mov	r6, r0
 8008f44:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f48:	2100      	movs	r1, #0
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	db09      	blt.n	8008f64 <__s2b+0x30>
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7ff ff47 	bl	8008de4 <_Balloc>
 8008f56:	b940      	cbnz	r0, 8008f6a <__s2b+0x36>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	4b19      	ldr	r3, [pc, #100]	@ (8008fc0 <__s2b+0x8c>)
 8008f5c:	4819      	ldr	r0, [pc, #100]	@ (8008fc4 <__s2b+0x90>)
 8008f5e:	21d3      	movs	r1, #211	@ 0xd3
 8008f60:	f001 fe3a 	bl	800abd8 <__assert_func>
 8008f64:	0052      	lsls	r2, r2, #1
 8008f66:	3101      	adds	r1, #1
 8008f68:	e7f0      	b.n	8008f4c <__s2b+0x18>
 8008f6a:	9b08      	ldr	r3, [sp, #32]
 8008f6c:	6143      	str	r3, [r0, #20]
 8008f6e:	2d09      	cmp	r5, #9
 8008f70:	f04f 0301 	mov.w	r3, #1
 8008f74:	6103      	str	r3, [r0, #16]
 8008f76:	dd16      	ble.n	8008fa6 <__s2b+0x72>
 8008f78:	f104 0909 	add.w	r9, r4, #9
 8008f7c:	46c8      	mov	r8, r9
 8008f7e:	442c      	add	r4, r5
 8008f80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f84:	4601      	mov	r1, r0
 8008f86:	3b30      	subs	r3, #48	@ 0x30
 8008f88:	220a      	movs	r2, #10
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7ff ff8c 	bl	8008ea8 <__multadd>
 8008f90:	45a0      	cmp	r8, r4
 8008f92:	d1f5      	bne.n	8008f80 <__s2b+0x4c>
 8008f94:	f1a5 0408 	sub.w	r4, r5, #8
 8008f98:	444c      	add	r4, r9
 8008f9a:	1b2d      	subs	r5, r5, r4
 8008f9c:	1963      	adds	r3, r4, r5
 8008f9e:	42bb      	cmp	r3, r7
 8008fa0:	db04      	blt.n	8008fac <__s2b+0x78>
 8008fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	340a      	adds	r4, #10
 8008fa8:	2509      	movs	r5, #9
 8008faa:	e7f6      	b.n	8008f9a <__s2b+0x66>
 8008fac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	3b30      	subs	r3, #48	@ 0x30
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7ff ff76 	bl	8008ea8 <__multadd>
 8008fbc:	e7ee      	b.n	8008f9c <__s2b+0x68>
 8008fbe:	bf00      	nop
 8008fc0:	0800b97d 	.word	0x0800b97d
 8008fc4:	0800b98e 	.word	0x0800b98e

08008fc8 <__hi0bits>:
 8008fc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008fcc:	4603      	mov	r3, r0
 8008fce:	bf36      	itet	cc
 8008fd0:	0403      	lslcc	r3, r0, #16
 8008fd2:	2000      	movcs	r0, #0
 8008fd4:	2010      	movcc	r0, #16
 8008fd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fda:	bf3c      	itt	cc
 8008fdc:	021b      	lslcc	r3, r3, #8
 8008fde:	3008      	addcc	r0, #8
 8008fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fe4:	bf3c      	itt	cc
 8008fe6:	011b      	lslcc	r3, r3, #4
 8008fe8:	3004      	addcc	r0, #4
 8008fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fee:	bf3c      	itt	cc
 8008ff0:	009b      	lslcc	r3, r3, #2
 8008ff2:	3002      	addcc	r0, #2
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	db05      	blt.n	8009004 <__hi0bits+0x3c>
 8008ff8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008ffc:	f100 0001 	add.w	r0, r0, #1
 8009000:	bf08      	it	eq
 8009002:	2020      	moveq	r0, #32
 8009004:	4770      	bx	lr

08009006 <__lo0bits>:
 8009006:	6803      	ldr	r3, [r0, #0]
 8009008:	4602      	mov	r2, r0
 800900a:	f013 0007 	ands.w	r0, r3, #7
 800900e:	d00b      	beq.n	8009028 <__lo0bits+0x22>
 8009010:	07d9      	lsls	r1, r3, #31
 8009012:	d421      	bmi.n	8009058 <__lo0bits+0x52>
 8009014:	0798      	lsls	r0, r3, #30
 8009016:	bf49      	itett	mi
 8009018:	085b      	lsrmi	r3, r3, #1
 800901a:	089b      	lsrpl	r3, r3, #2
 800901c:	2001      	movmi	r0, #1
 800901e:	6013      	strmi	r3, [r2, #0]
 8009020:	bf5c      	itt	pl
 8009022:	6013      	strpl	r3, [r2, #0]
 8009024:	2002      	movpl	r0, #2
 8009026:	4770      	bx	lr
 8009028:	b299      	uxth	r1, r3
 800902a:	b909      	cbnz	r1, 8009030 <__lo0bits+0x2a>
 800902c:	0c1b      	lsrs	r3, r3, #16
 800902e:	2010      	movs	r0, #16
 8009030:	b2d9      	uxtb	r1, r3
 8009032:	b909      	cbnz	r1, 8009038 <__lo0bits+0x32>
 8009034:	3008      	adds	r0, #8
 8009036:	0a1b      	lsrs	r3, r3, #8
 8009038:	0719      	lsls	r1, r3, #28
 800903a:	bf04      	itt	eq
 800903c:	091b      	lsreq	r3, r3, #4
 800903e:	3004      	addeq	r0, #4
 8009040:	0799      	lsls	r1, r3, #30
 8009042:	bf04      	itt	eq
 8009044:	089b      	lsreq	r3, r3, #2
 8009046:	3002      	addeq	r0, #2
 8009048:	07d9      	lsls	r1, r3, #31
 800904a:	d403      	bmi.n	8009054 <__lo0bits+0x4e>
 800904c:	085b      	lsrs	r3, r3, #1
 800904e:	f100 0001 	add.w	r0, r0, #1
 8009052:	d003      	beq.n	800905c <__lo0bits+0x56>
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	4770      	bx	lr
 8009058:	2000      	movs	r0, #0
 800905a:	4770      	bx	lr
 800905c:	2020      	movs	r0, #32
 800905e:	4770      	bx	lr

08009060 <__i2b>:
 8009060:	b510      	push	{r4, lr}
 8009062:	460c      	mov	r4, r1
 8009064:	2101      	movs	r1, #1
 8009066:	f7ff febd 	bl	8008de4 <_Balloc>
 800906a:	4602      	mov	r2, r0
 800906c:	b928      	cbnz	r0, 800907a <__i2b+0x1a>
 800906e:	4b05      	ldr	r3, [pc, #20]	@ (8009084 <__i2b+0x24>)
 8009070:	4805      	ldr	r0, [pc, #20]	@ (8009088 <__i2b+0x28>)
 8009072:	f240 1145 	movw	r1, #325	@ 0x145
 8009076:	f001 fdaf 	bl	800abd8 <__assert_func>
 800907a:	2301      	movs	r3, #1
 800907c:	6144      	str	r4, [r0, #20]
 800907e:	6103      	str	r3, [r0, #16]
 8009080:	bd10      	pop	{r4, pc}
 8009082:	bf00      	nop
 8009084:	0800b97d 	.word	0x0800b97d
 8009088:	0800b98e 	.word	0x0800b98e

0800908c <__multiply>:
 800908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009090:	4617      	mov	r7, r2
 8009092:	690a      	ldr	r2, [r1, #16]
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	429a      	cmp	r2, r3
 8009098:	bfa8      	it	ge
 800909a:	463b      	movge	r3, r7
 800909c:	4689      	mov	r9, r1
 800909e:	bfa4      	itt	ge
 80090a0:	460f      	movge	r7, r1
 80090a2:	4699      	movge	r9, r3
 80090a4:	693d      	ldr	r5, [r7, #16]
 80090a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	eb05 060a 	add.w	r6, r5, sl
 80090b2:	42b3      	cmp	r3, r6
 80090b4:	b085      	sub	sp, #20
 80090b6:	bfb8      	it	lt
 80090b8:	3101      	addlt	r1, #1
 80090ba:	f7ff fe93 	bl	8008de4 <_Balloc>
 80090be:	b930      	cbnz	r0, 80090ce <__multiply+0x42>
 80090c0:	4602      	mov	r2, r0
 80090c2:	4b41      	ldr	r3, [pc, #260]	@ (80091c8 <__multiply+0x13c>)
 80090c4:	4841      	ldr	r0, [pc, #260]	@ (80091cc <__multiply+0x140>)
 80090c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090ca:	f001 fd85 	bl	800abd8 <__assert_func>
 80090ce:	f100 0414 	add.w	r4, r0, #20
 80090d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80090d6:	4623      	mov	r3, r4
 80090d8:	2200      	movs	r2, #0
 80090da:	4573      	cmp	r3, lr
 80090dc:	d320      	bcc.n	8009120 <__multiply+0x94>
 80090de:	f107 0814 	add.w	r8, r7, #20
 80090e2:	f109 0114 	add.w	r1, r9, #20
 80090e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80090ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80090ee:	9302      	str	r3, [sp, #8]
 80090f0:	1beb      	subs	r3, r5, r7
 80090f2:	3b15      	subs	r3, #21
 80090f4:	f023 0303 	bic.w	r3, r3, #3
 80090f8:	3304      	adds	r3, #4
 80090fa:	3715      	adds	r7, #21
 80090fc:	42bd      	cmp	r5, r7
 80090fe:	bf38      	it	cc
 8009100:	2304      	movcc	r3, #4
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	9103      	str	r1, [sp, #12]
 8009108:	428b      	cmp	r3, r1
 800910a:	d80c      	bhi.n	8009126 <__multiply+0x9a>
 800910c:	2e00      	cmp	r6, #0
 800910e:	dd03      	ble.n	8009118 <__multiply+0x8c>
 8009110:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009114:	2b00      	cmp	r3, #0
 8009116:	d055      	beq.n	80091c4 <__multiply+0x138>
 8009118:	6106      	str	r6, [r0, #16]
 800911a:	b005      	add	sp, #20
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	f843 2b04 	str.w	r2, [r3], #4
 8009124:	e7d9      	b.n	80090da <__multiply+0x4e>
 8009126:	f8b1 a000 	ldrh.w	sl, [r1]
 800912a:	f1ba 0f00 	cmp.w	sl, #0
 800912e:	d01f      	beq.n	8009170 <__multiply+0xe4>
 8009130:	46c4      	mov	ip, r8
 8009132:	46a1      	mov	r9, r4
 8009134:	2700      	movs	r7, #0
 8009136:	f85c 2b04 	ldr.w	r2, [ip], #4
 800913a:	f8d9 3000 	ldr.w	r3, [r9]
 800913e:	fa1f fb82 	uxth.w	fp, r2
 8009142:	b29b      	uxth	r3, r3
 8009144:	fb0a 330b 	mla	r3, sl, fp, r3
 8009148:	443b      	add	r3, r7
 800914a:	f8d9 7000 	ldr.w	r7, [r9]
 800914e:	0c12      	lsrs	r2, r2, #16
 8009150:	0c3f      	lsrs	r7, r7, #16
 8009152:	fb0a 7202 	mla	r2, sl, r2, r7
 8009156:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800915a:	b29b      	uxth	r3, r3
 800915c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009160:	4565      	cmp	r5, ip
 8009162:	f849 3b04 	str.w	r3, [r9], #4
 8009166:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800916a:	d8e4      	bhi.n	8009136 <__multiply+0xaa>
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	50e7      	str	r7, [r4, r3]
 8009170:	9b03      	ldr	r3, [sp, #12]
 8009172:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009176:	3104      	adds	r1, #4
 8009178:	f1b9 0f00 	cmp.w	r9, #0
 800917c:	d020      	beq.n	80091c0 <__multiply+0x134>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	4647      	mov	r7, r8
 8009182:	46a4      	mov	ip, r4
 8009184:	f04f 0a00 	mov.w	sl, #0
 8009188:	f8b7 b000 	ldrh.w	fp, [r7]
 800918c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009190:	fb09 220b 	mla	r2, r9, fp, r2
 8009194:	4452      	add	r2, sl
 8009196:	b29b      	uxth	r3, r3
 8009198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800919c:	f84c 3b04 	str.w	r3, [ip], #4
 80091a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80091a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80091ac:	fb09 330a 	mla	r3, r9, sl, r3
 80091b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80091b4:	42bd      	cmp	r5, r7
 80091b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091ba:	d8e5      	bhi.n	8009188 <__multiply+0xfc>
 80091bc:	9a01      	ldr	r2, [sp, #4]
 80091be:	50a3      	str	r3, [r4, r2]
 80091c0:	3404      	adds	r4, #4
 80091c2:	e79f      	b.n	8009104 <__multiply+0x78>
 80091c4:	3e01      	subs	r6, #1
 80091c6:	e7a1      	b.n	800910c <__multiply+0x80>
 80091c8:	0800b97d 	.word	0x0800b97d
 80091cc:	0800b98e 	.word	0x0800b98e

080091d0 <__pow5mult>:
 80091d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d4:	4615      	mov	r5, r2
 80091d6:	f012 0203 	ands.w	r2, r2, #3
 80091da:	4607      	mov	r7, r0
 80091dc:	460e      	mov	r6, r1
 80091de:	d007      	beq.n	80091f0 <__pow5mult+0x20>
 80091e0:	4c25      	ldr	r4, [pc, #148]	@ (8009278 <__pow5mult+0xa8>)
 80091e2:	3a01      	subs	r2, #1
 80091e4:	2300      	movs	r3, #0
 80091e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091ea:	f7ff fe5d 	bl	8008ea8 <__multadd>
 80091ee:	4606      	mov	r6, r0
 80091f0:	10ad      	asrs	r5, r5, #2
 80091f2:	d03d      	beq.n	8009270 <__pow5mult+0xa0>
 80091f4:	69fc      	ldr	r4, [r7, #28]
 80091f6:	b97c      	cbnz	r4, 8009218 <__pow5mult+0x48>
 80091f8:	2010      	movs	r0, #16
 80091fa:	f7ff fd3d 	bl	8008c78 <malloc>
 80091fe:	4602      	mov	r2, r0
 8009200:	61f8      	str	r0, [r7, #28]
 8009202:	b928      	cbnz	r0, 8009210 <__pow5mult+0x40>
 8009204:	4b1d      	ldr	r3, [pc, #116]	@ (800927c <__pow5mult+0xac>)
 8009206:	481e      	ldr	r0, [pc, #120]	@ (8009280 <__pow5mult+0xb0>)
 8009208:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800920c:	f001 fce4 	bl	800abd8 <__assert_func>
 8009210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009214:	6004      	str	r4, [r0, #0]
 8009216:	60c4      	str	r4, [r0, #12]
 8009218:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800921c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009220:	b94c      	cbnz	r4, 8009236 <__pow5mult+0x66>
 8009222:	f240 2171 	movw	r1, #625	@ 0x271
 8009226:	4638      	mov	r0, r7
 8009228:	f7ff ff1a 	bl	8009060 <__i2b>
 800922c:	2300      	movs	r3, #0
 800922e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009232:	4604      	mov	r4, r0
 8009234:	6003      	str	r3, [r0, #0]
 8009236:	f04f 0900 	mov.w	r9, #0
 800923a:	07eb      	lsls	r3, r5, #31
 800923c:	d50a      	bpl.n	8009254 <__pow5mult+0x84>
 800923e:	4631      	mov	r1, r6
 8009240:	4622      	mov	r2, r4
 8009242:	4638      	mov	r0, r7
 8009244:	f7ff ff22 	bl	800908c <__multiply>
 8009248:	4631      	mov	r1, r6
 800924a:	4680      	mov	r8, r0
 800924c:	4638      	mov	r0, r7
 800924e:	f7ff fe09 	bl	8008e64 <_Bfree>
 8009252:	4646      	mov	r6, r8
 8009254:	106d      	asrs	r5, r5, #1
 8009256:	d00b      	beq.n	8009270 <__pow5mult+0xa0>
 8009258:	6820      	ldr	r0, [r4, #0]
 800925a:	b938      	cbnz	r0, 800926c <__pow5mult+0x9c>
 800925c:	4622      	mov	r2, r4
 800925e:	4621      	mov	r1, r4
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff ff13 	bl	800908c <__multiply>
 8009266:	6020      	str	r0, [r4, #0]
 8009268:	f8c0 9000 	str.w	r9, [r0]
 800926c:	4604      	mov	r4, r0
 800926e:	e7e4      	b.n	800923a <__pow5mult+0x6a>
 8009270:	4630      	mov	r0, r6
 8009272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009276:	bf00      	nop
 8009278:	0800baa0 	.word	0x0800baa0
 800927c:	0800b90e 	.word	0x0800b90e
 8009280:	0800b98e 	.word	0x0800b98e

08009284 <__lshift>:
 8009284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009288:	460c      	mov	r4, r1
 800928a:	6849      	ldr	r1, [r1, #4]
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009292:	68a3      	ldr	r3, [r4, #8]
 8009294:	4607      	mov	r7, r0
 8009296:	4691      	mov	r9, r2
 8009298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800929c:	f108 0601 	add.w	r6, r8, #1
 80092a0:	42b3      	cmp	r3, r6
 80092a2:	db0b      	blt.n	80092bc <__lshift+0x38>
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff fd9d 	bl	8008de4 <_Balloc>
 80092aa:	4605      	mov	r5, r0
 80092ac:	b948      	cbnz	r0, 80092c2 <__lshift+0x3e>
 80092ae:	4602      	mov	r2, r0
 80092b0:	4b28      	ldr	r3, [pc, #160]	@ (8009354 <__lshift+0xd0>)
 80092b2:	4829      	ldr	r0, [pc, #164]	@ (8009358 <__lshift+0xd4>)
 80092b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092b8:	f001 fc8e 	bl	800abd8 <__assert_func>
 80092bc:	3101      	adds	r1, #1
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	e7ee      	b.n	80092a0 <__lshift+0x1c>
 80092c2:	2300      	movs	r3, #0
 80092c4:	f100 0114 	add.w	r1, r0, #20
 80092c8:	f100 0210 	add.w	r2, r0, #16
 80092cc:	4618      	mov	r0, r3
 80092ce:	4553      	cmp	r3, sl
 80092d0:	db33      	blt.n	800933a <__lshift+0xb6>
 80092d2:	6920      	ldr	r0, [r4, #16]
 80092d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092d8:	f104 0314 	add.w	r3, r4, #20
 80092dc:	f019 091f 	ands.w	r9, r9, #31
 80092e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092e8:	d02b      	beq.n	8009342 <__lshift+0xbe>
 80092ea:	f1c9 0e20 	rsb	lr, r9, #32
 80092ee:	468a      	mov	sl, r1
 80092f0:	2200      	movs	r2, #0
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	fa00 f009 	lsl.w	r0, r0, r9
 80092f8:	4310      	orrs	r0, r2
 80092fa:	f84a 0b04 	str.w	r0, [sl], #4
 80092fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009302:	459c      	cmp	ip, r3
 8009304:	fa22 f20e 	lsr.w	r2, r2, lr
 8009308:	d8f3      	bhi.n	80092f2 <__lshift+0x6e>
 800930a:	ebac 0304 	sub.w	r3, ip, r4
 800930e:	3b15      	subs	r3, #21
 8009310:	f023 0303 	bic.w	r3, r3, #3
 8009314:	3304      	adds	r3, #4
 8009316:	f104 0015 	add.w	r0, r4, #21
 800931a:	4560      	cmp	r0, ip
 800931c:	bf88      	it	hi
 800931e:	2304      	movhi	r3, #4
 8009320:	50ca      	str	r2, [r1, r3]
 8009322:	b10a      	cbz	r2, 8009328 <__lshift+0xa4>
 8009324:	f108 0602 	add.w	r6, r8, #2
 8009328:	3e01      	subs	r6, #1
 800932a:	4638      	mov	r0, r7
 800932c:	612e      	str	r6, [r5, #16]
 800932e:	4621      	mov	r1, r4
 8009330:	f7ff fd98 	bl	8008e64 <_Bfree>
 8009334:	4628      	mov	r0, r5
 8009336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933a:	f842 0f04 	str.w	r0, [r2, #4]!
 800933e:	3301      	adds	r3, #1
 8009340:	e7c5      	b.n	80092ce <__lshift+0x4a>
 8009342:	3904      	subs	r1, #4
 8009344:	f853 2b04 	ldr.w	r2, [r3], #4
 8009348:	f841 2f04 	str.w	r2, [r1, #4]!
 800934c:	459c      	cmp	ip, r3
 800934e:	d8f9      	bhi.n	8009344 <__lshift+0xc0>
 8009350:	e7ea      	b.n	8009328 <__lshift+0xa4>
 8009352:	bf00      	nop
 8009354:	0800b97d 	.word	0x0800b97d
 8009358:	0800b98e 	.word	0x0800b98e

0800935c <__mcmp>:
 800935c:	690a      	ldr	r2, [r1, #16]
 800935e:	4603      	mov	r3, r0
 8009360:	6900      	ldr	r0, [r0, #16]
 8009362:	1a80      	subs	r0, r0, r2
 8009364:	b530      	push	{r4, r5, lr}
 8009366:	d10e      	bne.n	8009386 <__mcmp+0x2a>
 8009368:	3314      	adds	r3, #20
 800936a:	3114      	adds	r1, #20
 800936c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009370:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009374:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009378:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800937c:	4295      	cmp	r5, r2
 800937e:	d003      	beq.n	8009388 <__mcmp+0x2c>
 8009380:	d205      	bcs.n	800938e <__mcmp+0x32>
 8009382:	f04f 30ff 	mov.w	r0, #4294967295
 8009386:	bd30      	pop	{r4, r5, pc}
 8009388:	42a3      	cmp	r3, r4
 800938a:	d3f3      	bcc.n	8009374 <__mcmp+0x18>
 800938c:	e7fb      	b.n	8009386 <__mcmp+0x2a>
 800938e:	2001      	movs	r0, #1
 8009390:	e7f9      	b.n	8009386 <__mcmp+0x2a>
	...

08009394 <__mdiff>:
 8009394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009398:	4689      	mov	r9, r1
 800939a:	4606      	mov	r6, r0
 800939c:	4611      	mov	r1, r2
 800939e:	4648      	mov	r0, r9
 80093a0:	4614      	mov	r4, r2
 80093a2:	f7ff ffdb 	bl	800935c <__mcmp>
 80093a6:	1e05      	subs	r5, r0, #0
 80093a8:	d112      	bne.n	80093d0 <__mdiff+0x3c>
 80093aa:	4629      	mov	r1, r5
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7ff fd19 	bl	8008de4 <_Balloc>
 80093b2:	4602      	mov	r2, r0
 80093b4:	b928      	cbnz	r0, 80093c2 <__mdiff+0x2e>
 80093b6:	4b3f      	ldr	r3, [pc, #252]	@ (80094b4 <__mdiff+0x120>)
 80093b8:	f240 2137 	movw	r1, #567	@ 0x237
 80093bc:	483e      	ldr	r0, [pc, #248]	@ (80094b8 <__mdiff+0x124>)
 80093be:	f001 fc0b 	bl	800abd8 <__assert_func>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093c8:	4610      	mov	r0, r2
 80093ca:	b003      	add	sp, #12
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d0:	bfbc      	itt	lt
 80093d2:	464b      	movlt	r3, r9
 80093d4:	46a1      	movlt	r9, r4
 80093d6:	4630      	mov	r0, r6
 80093d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093dc:	bfba      	itte	lt
 80093de:	461c      	movlt	r4, r3
 80093e0:	2501      	movlt	r5, #1
 80093e2:	2500      	movge	r5, #0
 80093e4:	f7ff fcfe 	bl	8008de4 <_Balloc>
 80093e8:	4602      	mov	r2, r0
 80093ea:	b918      	cbnz	r0, 80093f4 <__mdiff+0x60>
 80093ec:	4b31      	ldr	r3, [pc, #196]	@ (80094b4 <__mdiff+0x120>)
 80093ee:	f240 2145 	movw	r1, #581	@ 0x245
 80093f2:	e7e3      	b.n	80093bc <__mdiff+0x28>
 80093f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093f8:	6926      	ldr	r6, [r4, #16]
 80093fa:	60c5      	str	r5, [r0, #12]
 80093fc:	f109 0310 	add.w	r3, r9, #16
 8009400:	f109 0514 	add.w	r5, r9, #20
 8009404:	f104 0e14 	add.w	lr, r4, #20
 8009408:	f100 0b14 	add.w	fp, r0, #20
 800940c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009410:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	46d9      	mov	r9, fp
 8009418:	f04f 0c00 	mov.w	ip, #0
 800941c:	9b01      	ldr	r3, [sp, #4]
 800941e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009422:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009426:	9301      	str	r3, [sp, #4]
 8009428:	fa1f f38a 	uxth.w	r3, sl
 800942c:	4619      	mov	r1, r3
 800942e:	b283      	uxth	r3, r0
 8009430:	1acb      	subs	r3, r1, r3
 8009432:	0c00      	lsrs	r0, r0, #16
 8009434:	4463      	add	r3, ip
 8009436:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800943a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800943e:	b29b      	uxth	r3, r3
 8009440:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009444:	4576      	cmp	r6, lr
 8009446:	f849 3b04 	str.w	r3, [r9], #4
 800944a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800944e:	d8e5      	bhi.n	800941c <__mdiff+0x88>
 8009450:	1b33      	subs	r3, r6, r4
 8009452:	3b15      	subs	r3, #21
 8009454:	f023 0303 	bic.w	r3, r3, #3
 8009458:	3415      	adds	r4, #21
 800945a:	3304      	adds	r3, #4
 800945c:	42a6      	cmp	r6, r4
 800945e:	bf38      	it	cc
 8009460:	2304      	movcc	r3, #4
 8009462:	441d      	add	r5, r3
 8009464:	445b      	add	r3, fp
 8009466:	461e      	mov	r6, r3
 8009468:	462c      	mov	r4, r5
 800946a:	4544      	cmp	r4, r8
 800946c:	d30e      	bcc.n	800948c <__mdiff+0xf8>
 800946e:	f108 0103 	add.w	r1, r8, #3
 8009472:	1b49      	subs	r1, r1, r5
 8009474:	f021 0103 	bic.w	r1, r1, #3
 8009478:	3d03      	subs	r5, #3
 800947a:	45a8      	cmp	r8, r5
 800947c:	bf38      	it	cc
 800947e:	2100      	movcc	r1, #0
 8009480:	440b      	add	r3, r1
 8009482:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009486:	b191      	cbz	r1, 80094ae <__mdiff+0x11a>
 8009488:	6117      	str	r7, [r2, #16]
 800948a:	e79d      	b.n	80093c8 <__mdiff+0x34>
 800948c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009490:	46e6      	mov	lr, ip
 8009492:	0c08      	lsrs	r0, r1, #16
 8009494:	fa1c fc81 	uxtah	ip, ip, r1
 8009498:	4471      	add	r1, lr
 800949a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800949e:	b289      	uxth	r1, r1
 80094a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094a4:	f846 1b04 	str.w	r1, [r6], #4
 80094a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094ac:	e7dd      	b.n	800946a <__mdiff+0xd6>
 80094ae:	3f01      	subs	r7, #1
 80094b0:	e7e7      	b.n	8009482 <__mdiff+0xee>
 80094b2:	bf00      	nop
 80094b4:	0800b97d 	.word	0x0800b97d
 80094b8:	0800b98e 	.word	0x0800b98e

080094bc <__ulp>:
 80094bc:	b082      	sub	sp, #8
 80094be:	ed8d 0b00 	vstr	d0, [sp]
 80094c2:	9a01      	ldr	r2, [sp, #4]
 80094c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009504 <__ulp+0x48>)
 80094c6:	4013      	ands	r3, r2
 80094c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dc08      	bgt.n	80094e2 <__ulp+0x26>
 80094d0:	425b      	negs	r3, r3
 80094d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80094d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094da:	da04      	bge.n	80094e6 <__ulp+0x2a>
 80094dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80094e0:	4113      	asrs	r3, r2
 80094e2:	2200      	movs	r2, #0
 80094e4:	e008      	b.n	80094f8 <__ulp+0x3c>
 80094e6:	f1a2 0314 	sub.w	r3, r2, #20
 80094ea:	2b1e      	cmp	r3, #30
 80094ec:	bfda      	itte	le
 80094ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80094f2:	40da      	lsrle	r2, r3
 80094f4:	2201      	movgt	r2, #1
 80094f6:	2300      	movs	r3, #0
 80094f8:	4619      	mov	r1, r3
 80094fa:	4610      	mov	r0, r2
 80094fc:	ec41 0b10 	vmov	d0, r0, r1
 8009500:	b002      	add	sp, #8
 8009502:	4770      	bx	lr
 8009504:	7ff00000 	.word	0x7ff00000

08009508 <__b2d>:
 8009508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950c:	6906      	ldr	r6, [r0, #16]
 800950e:	f100 0814 	add.w	r8, r0, #20
 8009512:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009516:	1f37      	subs	r7, r6, #4
 8009518:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800951c:	4610      	mov	r0, r2
 800951e:	f7ff fd53 	bl	8008fc8 <__hi0bits>
 8009522:	f1c0 0320 	rsb	r3, r0, #32
 8009526:	280a      	cmp	r0, #10
 8009528:	600b      	str	r3, [r1, #0]
 800952a:	491b      	ldr	r1, [pc, #108]	@ (8009598 <__b2d+0x90>)
 800952c:	dc15      	bgt.n	800955a <__b2d+0x52>
 800952e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009532:	fa22 f30c 	lsr.w	r3, r2, ip
 8009536:	45b8      	cmp	r8, r7
 8009538:	ea43 0501 	orr.w	r5, r3, r1
 800953c:	bf34      	ite	cc
 800953e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009542:	2300      	movcs	r3, #0
 8009544:	3015      	adds	r0, #21
 8009546:	fa02 f000 	lsl.w	r0, r2, r0
 800954a:	fa23 f30c 	lsr.w	r3, r3, ip
 800954e:	4303      	orrs	r3, r0
 8009550:	461c      	mov	r4, r3
 8009552:	ec45 4b10 	vmov	d0, r4, r5
 8009556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955a:	45b8      	cmp	r8, r7
 800955c:	bf3a      	itte	cc
 800955e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009562:	f1a6 0708 	subcc.w	r7, r6, #8
 8009566:	2300      	movcs	r3, #0
 8009568:	380b      	subs	r0, #11
 800956a:	d012      	beq.n	8009592 <__b2d+0x8a>
 800956c:	f1c0 0120 	rsb	r1, r0, #32
 8009570:	fa23 f401 	lsr.w	r4, r3, r1
 8009574:	4082      	lsls	r2, r0
 8009576:	4322      	orrs	r2, r4
 8009578:	4547      	cmp	r7, r8
 800957a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800957e:	bf8c      	ite	hi
 8009580:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009584:	2200      	movls	r2, #0
 8009586:	4083      	lsls	r3, r0
 8009588:	40ca      	lsrs	r2, r1
 800958a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800958e:	4313      	orrs	r3, r2
 8009590:	e7de      	b.n	8009550 <__b2d+0x48>
 8009592:	ea42 0501 	orr.w	r5, r2, r1
 8009596:	e7db      	b.n	8009550 <__b2d+0x48>
 8009598:	3ff00000 	.word	0x3ff00000

0800959c <__d2b>:
 800959c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095a0:	460f      	mov	r7, r1
 80095a2:	2101      	movs	r1, #1
 80095a4:	ec59 8b10 	vmov	r8, r9, d0
 80095a8:	4616      	mov	r6, r2
 80095aa:	f7ff fc1b 	bl	8008de4 <_Balloc>
 80095ae:	4604      	mov	r4, r0
 80095b0:	b930      	cbnz	r0, 80095c0 <__d2b+0x24>
 80095b2:	4602      	mov	r2, r0
 80095b4:	4b23      	ldr	r3, [pc, #140]	@ (8009644 <__d2b+0xa8>)
 80095b6:	4824      	ldr	r0, [pc, #144]	@ (8009648 <__d2b+0xac>)
 80095b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80095bc:	f001 fb0c 	bl	800abd8 <__assert_func>
 80095c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095c8:	b10d      	cbz	r5, 80095ce <__d2b+0x32>
 80095ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	f1b8 0300 	subs.w	r3, r8, #0
 80095d4:	d023      	beq.n	800961e <__d2b+0x82>
 80095d6:	4668      	mov	r0, sp
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	f7ff fd14 	bl	8009006 <__lo0bits>
 80095de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095e2:	b1d0      	cbz	r0, 800961a <__d2b+0x7e>
 80095e4:	f1c0 0320 	rsb	r3, r0, #32
 80095e8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ec:	430b      	orrs	r3, r1
 80095ee:	40c2      	lsrs	r2, r0
 80095f0:	6163      	str	r3, [r4, #20]
 80095f2:	9201      	str	r2, [sp, #4]
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	61a3      	str	r3, [r4, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bf0c      	ite	eq
 80095fc:	2201      	moveq	r2, #1
 80095fe:	2202      	movne	r2, #2
 8009600:	6122      	str	r2, [r4, #16]
 8009602:	b1a5      	cbz	r5, 800962e <__d2b+0x92>
 8009604:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009608:	4405      	add	r5, r0
 800960a:	603d      	str	r5, [r7, #0]
 800960c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009610:	6030      	str	r0, [r6, #0]
 8009612:	4620      	mov	r0, r4
 8009614:	b003      	add	sp, #12
 8009616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800961a:	6161      	str	r1, [r4, #20]
 800961c:	e7ea      	b.n	80095f4 <__d2b+0x58>
 800961e:	a801      	add	r0, sp, #4
 8009620:	f7ff fcf1 	bl	8009006 <__lo0bits>
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	6163      	str	r3, [r4, #20]
 8009628:	3020      	adds	r0, #32
 800962a:	2201      	movs	r2, #1
 800962c:	e7e8      	b.n	8009600 <__d2b+0x64>
 800962e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009632:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009636:	6038      	str	r0, [r7, #0]
 8009638:	6918      	ldr	r0, [r3, #16]
 800963a:	f7ff fcc5 	bl	8008fc8 <__hi0bits>
 800963e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009642:	e7e5      	b.n	8009610 <__d2b+0x74>
 8009644:	0800b97d 	.word	0x0800b97d
 8009648:	0800b98e 	.word	0x0800b98e

0800964c <__ratio>:
 800964c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	4688      	mov	r8, r1
 8009652:	4669      	mov	r1, sp
 8009654:	4681      	mov	r9, r0
 8009656:	f7ff ff57 	bl	8009508 <__b2d>
 800965a:	a901      	add	r1, sp, #4
 800965c:	4640      	mov	r0, r8
 800965e:	ec55 4b10 	vmov	r4, r5, d0
 8009662:	f7ff ff51 	bl	8009508 <__b2d>
 8009666:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800966a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009674:	1a5b      	subs	r3, r3, r1
 8009676:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800967a:	ec57 6b10 	vmov	r6, r7, d0
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfd6      	itet	le
 8009682:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009686:	462a      	movgt	r2, r5
 8009688:	463a      	movle	r2, r7
 800968a:	46ab      	mov	fp, r5
 800968c:	46a2      	mov	sl, r4
 800968e:	bfce      	itee	gt
 8009690:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009694:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8009698:	ee00 3a90 	vmovle	s1, r3
 800969c:	ec4b ab17 	vmov	d7, sl, fp
 80096a0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80096a4:	b003      	add	sp, #12
 80096a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096aa <__copybits>:
 80096aa:	3901      	subs	r1, #1
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	1149      	asrs	r1, r1, #5
 80096b0:	6914      	ldr	r4, [r2, #16]
 80096b2:	3101      	adds	r1, #1
 80096b4:	f102 0314 	add.w	r3, r2, #20
 80096b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096c0:	1f05      	subs	r5, r0, #4
 80096c2:	42a3      	cmp	r3, r4
 80096c4:	d30c      	bcc.n	80096e0 <__copybits+0x36>
 80096c6:	1aa3      	subs	r3, r4, r2
 80096c8:	3b11      	subs	r3, #17
 80096ca:	f023 0303 	bic.w	r3, r3, #3
 80096ce:	3211      	adds	r2, #17
 80096d0:	42a2      	cmp	r2, r4
 80096d2:	bf88      	it	hi
 80096d4:	2300      	movhi	r3, #0
 80096d6:	4418      	add	r0, r3
 80096d8:	2300      	movs	r3, #0
 80096da:	4288      	cmp	r0, r1
 80096dc:	d305      	bcc.n	80096ea <__copybits+0x40>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80096e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80096e8:	e7eb      	b.n	80096c2 <__copybits+0x18>
 80096ea:	f840 3b04 	str.w	r3, [r0], #4
 80096ee:	e7f4      	b.n	80096da <__copybits+0x30>

080096f0 <__any_on>:
 80096f0:	f100 0214 	add.w	r2, r0, #20
 80096f4:	6900      	ldr	r0, [r0, #16]
 80096f6:	114b      	asrs	r3, r1, #5
 80096f8:	4298      	cmp	r0, r3
 80096fa:	b510      	push	{r4, lr}
 80096fc:	db11      	blt.n	8009722 <__any_on+0x32>
 80096fe:	dd0a      	ble.n	8009716 <__any_on+0x26>
 8009700:	f011 011f 	ands.w	r1, r1, #31
 8009704:	d007      	beq.n	8009716 <__any_on+0x26>
 8009706:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800970a:	fa24 f001 	lsr.w	r0, r4, r1
 800970e:	fa00 f101 	lsl.w	r1, r0, r1
 8009712:	428c      	cmp	r4, r1
 8009714:	d10b      	bne.n	800972e <__any_on+0x3e>
 8009716:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800971a:	4293      	cmp	r3, r2
 800971c:	d803      	bhi.n	8009726 <__any_on+0x36>
 800971e:	2000      	movs	r0, #0
 8009720:	bd10      	pop	{r4, pc}
 8009722:	4603      	mov	r3, r0
 8009724:	e7f7      	b.n	8009716 <__any_on+0x26>
 8009726:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800972a:	2900      	cmp	r1, #0
 800972c:	d0f5      	beq.n	800971a <__any_on+0x2a>
 800972e:	2001      	movs	r0, #1
 8009730:	e7f6      	b.n	8009720 <__any_on+0x30>

08009732 <sulp>:
 8009732:	b570      	push	{r4, r5, r6, lr}
 8009734:	4604      	mov	r4, r0
 8009736:	460d      	mov	r5, r1
 8009738:	4616      	mov	r6, r2
 800973a:	ec45 4b10 	vmov	d0, r4, r5
 800973e:	f7ff febd 	bl	80094bc <__ulp>
 8009742:	b17e      	cbz	r6, 8009764 <sulp+0x32>
 8009744:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009748:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800974c:	2b00      	cmp	r3, #0
 800974e:	dd09      	ble.n	8009764 <sulp+0x32>
 8009750:	051b      	lsls	r3, r3, #20
 8009752:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8009756:	2000      	movs	r0, #0
 8009758:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800975c:	ec41 0b17 	vmov	d7, r0, r1
 8009760:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009764:	bd70      	pop	{r4, r5, r6, pc}
	...

08009768 <_strtod_l>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	ed2d 8b0a 	vpush	{d8-d12}
 8009770:	b097      	sub	sp, #92	@ 0x5c
 8009772:	4688      	mov	r8, r1
 8009774:	920e      	str	r2, [sp, #56]	@ 0x38
 8009776:	2200      	movs	r2, #0
 8009778:	9212      	str	r2, [sp, #72]	@ 0x48
 800977a:	9005      	str	r0, [sp, #20]
 800977c:	f04f 0a00 	mov.w	sl, #0
 8009780:	f04f 0b00 	mov.w	fp, #0
 8009784:	460a      	mov	r2, r1
 8009786:	9211      	str	r2, [sp, #68]	@ 0x44
 8009788:	7811      	ldrb	r1, [r2, #0]
 800978a:	292b      	cmp	r1, #43	@ 0x2b
 800978c:	d04c      	beq.n	8009828 <_strtod_l+0xc0>
 800978e:	d839      	bhi.n	8009804 <_strtod_l+0x9c>
 8009790:	290d      	cmp	r1, #13
 8009792:	d833      	bhi.n	80097fc <_strtod_l+0x94>
 8009794:	2908      	cmp	r1, #8
 8009796:	d833      	bhi.n	8009800 <_strtod_l+0x98>
 8009798:	2900      	cmp	r1, #0
 800979a:	d03c      	beq.n	8009816 <_strtod_l+0xae>
 800979c:	2200      	movs	r2, #0
 800979e:	9208      	str	r2, [sp, #32]
 80097a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80097a2:	782a      	ldrb	r2, [r5, #0]
 80097a4:	2a30      	cmp	r2, #48	@ 0x30
 80097a6:	f040 80b7 	bne.w	8009918 <_strtod_l+0x1b0>
 80097aa:	786a      	ldrb	r2, [r5, #1]
 80097ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80097b0:	2a58      	cmp	r2, #88	@ 0x58
 80097b2:	d170      	bne.n	8009896 <_strtod_l+0x12e>
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	9b08      	ldr	r3, [sp, #32]
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	ab12      	add	r3, sp, #72	@ 0x48
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	4a90      	ldr	r2, [pc, #576]	@ (8009a00 <_strtod_l+0x298>)
 80097c0:	9805      	ldr	r0, [sp, #20]
 80097c2:	ab13      	add	r3, sp, #76	@ 0x4c
 80097c4:	a911      	add	r1, sp, #68	@ 0x44
 80097c6:	f001 faa1 	bl	800ad0c <__gethex>
 80097ca:	f010 060f 	ands.w	r6, r0, #15
 80097ce:	4604      	mov	r4, r0
 80097d0:	d005      	beq.n	80097de <_strtod_l+0x76>
 80097d2:	2e06      	cmp	r6, #6
 80097d4:	d12a      	bne.n	800982c <_strtod_l+0xc4>
 80097d6:	3501      	adds	r5, #1
 80097d8:	2300      	movs	r3, #0
 80097da:	9511      	str	r5, [sp, #68]	@ 0x44
 80097dc:	9308      	str	r3, [sp, #32]
 80097de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f040 8537 	bne.w	800a254 <_strtod_l+0xaec>
 80097e6:	9b08      	ldr	r3, [sp, #32]
 80097e8:	ec4b ab10 	vmov	d0, sl, fp
 80097ec:	b1cb      	cbz	r3, 8009822 <_strtod_l+0xba>
 80097ee:	eeb1 0b40 	vneg.f64	d0, d0
 80097f2:	b017      	add	sp, #92	@ 0x5c
 80097f4:	ecbd 8b0a 	vpop	{d8-d12}
 80097f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fc:	2920      	cmp	r1, #32
 80097fe:	d1cd      	bne.n	800979c <_strtod_l+0x34>
 8009800:	3201      	adds	r2, #1
 8009802:	e7c0      	b.n	8009786 <_strtod_l+0x1e>
 8009804:	292d      	cmp	r1, #45	@ 0x2d
 8009806:	d1c9      	bne.n	800979c <_strtod_l+0x34>
 8009808:	2101      	movs	r1, #1
 800980a:	9108      	str	r1, [sp, #32]
 800980c:	1c51      	adds	r1, r2, #1
 800980e:	9111      	str	r1, [sp, #68]	@ 0x44
 8009810:	7852      	ldrb	r2, [r2, #1]
 8009812:	2a00      	cmp	r2, #0
 8009814:	d1c4      	bne.n	80097a0 <_strtod_l+0x38>
 8009816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009818:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800981c:	2b00      	cmp	r3, #0
 800981e:	f040 8517 	bne.w	800a250 <_strtod_l+0xae8>
 8009822:	ec4b ab10 	vmov	d0, sl, fp
 8009826:	e7e4      	b.n	80097f2 <_strtod_l+0x8a>
 8009828:	2100      	movs	r1, #0
 800982a:	e7ee      	b.n	800980a <_strtod_l+0xa2>
 800982c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800982e:	b13a      	cbz	r2, 8009840 <_strtod_l+0xd8>
 8009830:	2135      	movs	r1, #53	@ 0x35
 8009832:	a814      	add	r0, sp, #80	@ 0x50
 8009834:	f7ff ff39 	bl	80096aa <__copybits>
 8009838:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800983a:	9805      	ldr	r0, [sp, #20]
 800983c:	f7ff fb12 	bl	8008e64 <_Bfree>
 8009840:	1e73      	subs	r3, r6, #1
 8009842:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009844:	2b04      	cmp	r3, #4
 8009846:	d806      	bhi.n	8009856 <_strtod_l+0xee>
 8009848:	e8df f003 	tbb	[pc, r3]
 800984c:	201d0314 	.word	0x201d0314
 8009850:	14          	.byte	0x14
 8009851:	00          	.byte	0x00
 8009852:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8009856:	05e3      	lsls	r3, r4, #23
 8009858:	bf48      	it	mi
 800985a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800985e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009862:	0d1b      	lsrs	r3, r3, #20
 8009864:	051b      	lsls	r3, r3, #20
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1b9      	bne.n	80097de <_strtod_l+0x76>
 800986a:	f7fe fb9f 	bl	8007fac <__errno>
 800986e:	2322      	movs	r3, #34	@ 0x22
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7b4      	b.n	80097de <_strtod_l+0x76>
 8009874:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009878:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800987c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009880:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009884:	e7e7      	b.n	8009856 <_strtod_l+0xee>
 8009886:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009a08 <_strtod_l+0x2a0>
 800988a:	e7e4      	b.n	8009856 <_strtod_l+0xee>
 800988c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009890:	f04f 3aff 	mov.w	sl, #4294967295
 8009894:	e7df      	b.n	8009856 <_strtod_l+0xee>
 8009896:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	9211      	str	r2, [sp, #68]	@ 0x44
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b30      	cmp	r3, #48	@ 0x30
 80098a0:	d0f9      	beq.n	8009896 <_strtod_l+0x12e>
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d09b      	beq.n	80097de <_strtod_l+0x76>
 80098a6:	2301      	movs	r3, #1
 80098a8:	9307      	str	r3, [sp, #28]
 80098aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80098ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80098ae:	2300      	movs	r3, #0
 80098b0:	9306      	str	r3, [sp, #24]
 80098b2:	4699      	mov	r9, r3
 80098b4:	461d      	mov	r5, r3
 80098b6:	220a      	movs	r2, #10
 80098b8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80098ba:	7804      	ldrb	r4, [r0, #0]
 80098bc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80098c0:	b2d9      	uxtb	r1, r3
 80098c2:	2909      	cmp	r1, #9
 80098c4:	d92a      	bls.n	800991c <_strtod_l+0x1b4>
 80098c6:	494f      	ldr	r1, [pc, #316]	@ (8009a04 <_strtod_l+0x29c>)
 80098c8:	2201      	movs	r2, #1
 80098ca:	f001 f92b 	bl	800ab24 <strncmp>
 80098ce:	b398      	cbz	r0, 8009938 <_strtod_l+0x1d0>
 80098d0:	2000      	movs	r0, #0
 80098d2:	4622      	mov	r2, r4
 80098d4:	462b      	mov	r3, r5
 80098d6:	4607      	mov	r7, r0
 80098d8:	4601      	mov	r1, r0
 80098da:	2a65      	cmp	r2, #101	@ 0x65
 80098dc:	d001      	beq.n	80098e2 <_strtod_l+0x17a>
 80098de:	2a45      	cmp	r2, #69	@ 0x45
 80098e0:	d118      	bne.n	8009914 <_strtod_l+0x1ac>
 80098e2:	b91b      	cbnz	r3, 80098ec <_strtod_l+0x184>
 80098e4:	9b07      	ldr	r3, [sp, #28]
 80098e6:	4303      	orrs	r3, r0
 80098e8:	d095      	beq.n	8009816 <_strtod_l+0xae>
 80098ea:	2300      	movs	r3, #0
 80098ec:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80098f0:	f108 0201 	add.w	r2, r8, #1
 80098f4:	9211      	str	r2, [sp, #68]	@ 0x44
 80098f6:	f898 2001 	ldrb.w	r2, [r8, #1]
 80098fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80098fc:	d074      	beq.n	80099e8 <_strtod_l+0x280>
 80098fe:	2a2d      	cmp	r2, #45	@ 0x2d
 8009900:	d07a      	beq.n	80099f8 <_strtod_l+0x290>
 8009902:	f04f 0e00 	mov.w	lr, #0
 8009906:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800990a:	2c09      	cmp	r4, #9
 800990c:	f240 8082 	bls.w	8009a14 <_strtod_l+0x2ac>
 8009910:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009914:	2400      	movs	r4, #0
 8009916:	e09d      	b.n	8009a54 <_strtod_l+0x2ec>
 8009918:	2300      	movs	r3, #0
 800991a:	e7c5      	b.n	80098a8 <_strtod_l+0x140>
 800991c:	2d08      	cmp	r5, #8
 800991e:	bfc8      	it	gt
 8009920:	9906      	ldrgt	r1, [sp, #24]
 8009922:	f100 0001 	add.w	r0, r0, #1
 8009926:	bfca      	itet	gt
 8009928:	fb02 3301 	mlagt	r3, r2, r1, r3
 800992c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009930:	9306      	strgt	r3, [sp, #24]
 8009932:	3501      	adds	r5, #1
 8009934:	9011      	str	r0, [sp, #68]	@ 0x44
 8009936:	e7bf      	b.n	80098b8 <_strtod_l+0x150>
 8009938:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	9211      	str	r2, [sp, #68]	@ 0x44
 800993e:	785a      	ldrb	r2, [r3, #1]
 8009940:	b3bd      	cbz	r5, 80099b2 <_strtod_l+0x24a>
 8009942:	4607      	mov	r7, r0
 8009944:	462b      	mov	r3, r5
 8009946:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800994a:	2909      	cmp	r1, #9
 800994c:	d912      	bls.n	8009974 <_strtod_l+0x20c>
 800994e:	2101      	movs	r1, #1
 8009950:	e7c3      	b.n	80098da <_strtod_l+0x172>
 8009952:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	9211      	str	r2, [sp, #68]	@ 0x44
 8009958:	785a      	ldrb	r2, [r3, #1]
 800995a:	3001      	adds	r0, #1
 800995c:	2a30      	cmp	r2, #48	@ 0x30
 800995e:	d0f8      	beq.n	8009952 <_strtod_l+0x1ea>
 8009960:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009964:	2b08      	cmp	r3, #8
 8009966:	f200 847a 	bhi.w	800a25e <_strtod_l+0xaf6>
 800996a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800996c:	930a      	str	r3, [sp, #40]	@ 0x28
 800996e:	4607      	mov	r7, r0
 8009970:	2000      	movs	r0, #0
 8009972:	4603      	mov	r3, r0
 8009974:	3a30      	subs	r2, #48	@ 0x30
 8009976:	f100 0101 	add.w	r1, r0, #1
 800997a:	d014      	beq.n	80099a6 <_strtod_l+0x23e>
 800997c:	440f      	add	r7, r1
 800997e:	469c      	mov	ip, r3
 8009980:	f04f 0e0a 	mov.w	lr, #10
 8009984:	f10c 0401 	add.w	r4, ip, #1
 8009988:	1ae6      	subs	r6, r4, r3
 800998a:	42b1      	cmp	r1, r6
 800998c:	dc13      	bgt.n	80099b6 <_strtod_l+0x24e>
 800998e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009992:	1819      	adds	r1, r3, r0
 8009994:	2908      	cmp	r1, #8
 8009996:	f103 0301 	add.w	r3, r3, #1
 800999a:	4403      	add	r3, r0
 800999c:	dc19      	bgt.n	80099d2 <_strtod_l+0x26a>
 800999e:	210a      	movs	r1, #10
 80099a0:	fb01 2909 	mla	r9, r1, r9, r2
 80099a4:	2100      	movs	r1, #0
 80099a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80099a8:	1c50      	adds	r0, r2, #1
 80099aa:	9011      	str	r0, [sp, #68]	@ 0x44
 80099ac:	7852      	ldrb	r2, [r2, #1]
 80099ae:	4608      	mov	r0, r1
 80099b0:	e7c9      	b.n	8009946 <_strtod_l+0x1de>
 80099b2:	4628      	mov	r0, r5
 80099b4:	e7d2      	b.n	800995c <_strtod_l+0x1f4>
 80099b6:	f1bc 0f08 	cmp.w	ip, #8
 80099ba:	dc03      	bgt.n	80099c4 <_strtod_l+0x25c>
 80099bc:	fb0e f909 	mul.w	r9, lr, r9
 80099c0:	46a4      	mov	ip, r4
 80099c2:	e7df      	b.n	8009984 <_strtod_l+0x21c>
 80099c4:	2c10      	cmp	r4, #16
 80099c6:	bfde      	ittt	le
 80099c8:	9e06      	ldrle	r6, [sp, #24]
 80099ca:	fb0e f606 	mulle.w	r6, lr, r6
 80099ce:	9606      	strle	r6, [sp, #24]
 80099d0:	e7f6      	b.n	80099c0 <_strtod_l+0x258>
 80099d2:	290f      	cmp	r1, #15
 80099d4:	bfdf      	itttt	le
 80099d6:	9806      	ldrle	r0, [sp, #24]
 80099d8:	210a      	movle	r1, #10
 80099da:	fb01 2200 	mlale	r2, r1, r0, r2
 80099de:	9206      	strle	r2, [sp, #24]
 80099e0:	e7e0      	b.n	80099a4 <_strtod_l+0x23c>
 80099e2:	2700      	movs	r7, #0
 80099e4:	2101      	movs	r1, #1
 80099e6:	e77d      	b.n	80098e4 <_strtod_l+0x17c>
 80099e8:	f04f 0e00 	mov.w	lr, #0
 80099ec:	f108 0202 	add.w	r2, r8, #2
 80099f0:	9211      	str	r2, [sp, #68]	@ 0x44
 80099f2:	f898 2002 	ldrb.w	r2, [r8, #2]
 80099f6:	e786      	b.n	8009906 <_strtod_l+0x19e>
 80099f8:	f04f 0e01 	mov.w	lr, #1
 80099fc:	e7f6      	b.n	80099ec <_strtod_l+0x284>
 80099fe:	bf00      	nop
 8009a00:	0800bbb4 	.word	0x0800bbb4
 8009a04:	0800b9e7 	.word	0x0800b9e7
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a0e:	1c54      	adds	r4, r2, #1
 8009a10:	9411      	str	r4, [sp, #68]	@ 0x44
 8009a12:	7852      	ldrb	r2, [r2, #1]
 8009a14:	2a30      	cmp	r2, #48	@ 0x30
 8009a16:	d0f9      	beq.n	8009a0c <_strtod_l+0x2a4>
 8009a18:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8009a1c:	2c08      	cmp	r4, #8
 8009a1e:	f63f af79 	bhi.w	8009914 <_strtod_l+0x1ac>
 8009a22:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8009a26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009a2c:	1c54      	adds	r4, r2, #1
 8009a2e:	9411      	str	r4, [sp, #68]	@ 0x44
 8009a30:	7852      	ldrb	r2, [r2, #1]
 8009a32:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8009a36:	2e09      	cmp	r6, #9
 8009a38:	d937      	bls.n	8009aaa <_strtod_l+0x342>
 8009a3a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009a3c:	1ba4      	subs	r4, r4, r6
 8009a3e:	2c08      	cmp	r4, #8
 8009a40:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8009a44:	dc02      	bgt.n	8009a4c <_strtod_l+0x2e4>
 8009a46:	4564      	cmp	r4, ip
 8009a48:	bfa8      	it	ge
 8009a4a:	4664      	movge	r4, ip
 8009a4c:	f1be 0f00 	cmp.w	lr, #0
 8009a50:	d000      	beq.n	8009a54 <_strtod_l+0x2ec>
 8009a52:	4264      	negs	r4, r4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d14d      	bne.n	8009af4 <_strtod_l+0x38c>
 8009a58:	9b07      	ldr	r3, [sp, #28]
 8009a5a:	4318      	orrs	r0, r3
 8009a5c:	f47f aebf 	bne.w	80097de <_strtod_l+0x76>
 8009a60:	2900      	cmp	r1, #0
 8009a62:	f47f aed8 	bne.w	8009816 <_strtod_l+0xae>
 8009a66:	2a69      	cmp	r2, #105	@ 0x69
 8009a68:	d027      	beq.n	8009aba <_strtod_l+0x352>
 8009a6a:	dc24      	bgt.n	8009ab6 <_strtod_l+0x34e>
 8009a6c:	2a49      	cmp	r2, #73	@ 0x49
 8009a6e:	d024      	beq.n	8009aba <_strtod_l+0x352>
 8009a70:	2a4e      	cmp	r2, #78	@ 0x4e
 8009a72:	f47f aed0 	bne.w	8009816 <_strtod_l+0xae>
 8009a76:	4997      	ldr	r1, [pc, #604]	@ (8009cd4 <_strtod_l+0x56c>)
 8009a78:	a811      	add	r0, sp, #68	@ 0x44
 8009a7a:	f001 fb69 	bl	800b150 <__match>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f aec9 	beq.w	8009816 <_strtod_l+0xae>
 8009a84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b28      	cmp	r3, #40	@ 0x28
 8009a8a:	d12d      	bne.n	8009ae8 <_strtod_l+0x380>
 8009a8c:	4992      	ldr	r1, [pc, #584]	@ (8009cd8 <_strtod_l+0x570>)
 8009a8e:	aa14      	add	r2, sp, #80	@ 0x50
 8009a90:	a811      	add	r0, sp, #68	@ 0x44
 8009a92:	f001 fb71 	bl	800b178 <__hexnan>
 8009a96:	2805      	cmp	r0, #5
 8009a98:	d126      	bne.n	8009ae8 <_strtod_l+0x380>
 8009a9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a9c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8009aa0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009aa4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009aa8:	e699      	b.n	80097de <_strtod_l+0x76>
 8009aaa:	240a      	movs	r4, #10
 8009aac:	fb04 2c0c 	mla	ip, r4, ip, r2
 8009ab0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009ab4:	e7b9      	b.n	8009a2a <_strtod_l+0x2c2>
 8009ab6:	2a6e      	cmp	r2, #110	@ 0x6e
 8009ab8:	e7db      	b.n	8009a72 <_strtod_l+0x30a>
 8009aba:	4988      	ldr	r1, [pc, #544]	@ (8009cdc <_strtod_l+0x574>)
 8009abc:	a811      	add	r0, sp, #68	@ 0x44
 8009abe:	f001 fb47 	bl	800b150 <__match>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f43f aea7 	beq.w	8009816 <_strtod_l+0xae>
 8009ac8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009aca:	4985      	ldr	r1, [pc, #532]	@ (8009ce0 <_strtod_l+0x578>)
 8009acc:	3b01      	subs	r3, #1
 8009ace:	a811      	add	r0, sp, #68	@ 0x44
 8009ad0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ad2:	f001 fb3d 	bl	800b150 <__match>
 8009ad6:	b910      	cbnz	r0, 8009ade <_strtod_l+0x376>
 8009ad8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ada:	3301      	adds	r3, #1
 8009adc:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ade:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009cf4 <_strtod_l+0x58c>
 8009ae2:	f04f 0a00 	mov.w	sl, #0
 8009ae6:	e67a      	b.n	80097de <_strtod_l+0x76>
 8009ae8:	487e      	ldr	r0, [pc, #504]	@ (8009ce4 <_strtod_l+0x57c>)
 8009aea:	f001 f86d 	bl	800abc8 <nan>
 8009aee:	ec5b ab10 	vmov	sl, fp, d0
 8009af2:	e674      	b.n	80097de <_strtod_l+0x76>
 8009af4:	ee07 9a90 	vmov	s15, r9
 8009af8:	1be2      	subs	r2, r4, r7
 8009afa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	bf08      	it	eq
 8009b02:	461d      	moveq	r5, r3
 8009b04:	2b10      	cmp	r3, #16
 8009b06:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b08:	461a      	mov	r2, r3
 8009b0a:	bfa8      	it	ge
 8009b0c:	2210      	movge	r2, #16
 8009b0e:	2b09      	cmp	r3, #9
 8009b10:	ec5b ab17 	vmov	sl, fp, d7
 8009b14:	dc15      	bgt.n	8009b42 <_strtod_l+0x3da>
 8009b16:	1be1      	subs	r1, r4, r7
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	f43f ae60 	beq.w	80097de <_strtod_l+0x76>
 8009b1e:	eba4 0107 	sub.w	r1, r4, r7
 8009b22:	dd72      	ble.n	8009c0a <_strtod_l+0x4a2>
 8009b24:	2916      	cmp	r1, #22
 8009b26:	dc59      	bgt.n	8009bdc <_strtod_l+0x474>
 8009b28:	4b6f      	ldr	r3, [pc, #444]	@ (8009ce8 <_strtod_l+0x580>)
 8009b2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b30:	ed93 7b00 	vldr	d7, [r3]
 8009b34:	ec4b ab16 	vmov	d6, sl, fp
 8009b38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b3c:	ec5b ab17 	vmov	sl, fp, d7
 8009b40:	e64d      	b.n	80097de <_strtod_l+0x76>
 8009b42:	4969      	ldr	r1, [pc, #420]	@ (8009ce8 <_strtod_l+0x580>)
 8009b44:	eddd 6a06 	vldr	s13, [sp, #24]
 8009b48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009b4c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8009b50:	2b0f      	cmp	r3, #15
 8009b52:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009b56:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009b5a:	ec5b ab16 	vmov	sl, fp, d6
 8009b5e:	ddda      	ble.n	8009b16 <_strtod_l+0x3ae>
 8009b60:	1a9a      	subs	r2, r3, r2
 8009b62:	1be1      	subs	r1, r4, r7
 8009b64:	440a      	add	r2, r1
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	f340 8094 	ble.w	8009c94 <_strtod_l+0x52c>
 8009b6c:	f012 000f 	ands.w	r0, r2, #15
 8009b70:	d00a      	beq.n	8009b88 <_strtod_l+0x420>
 8009b72:	495d      	ldr	r1, [pc, #372]	@ (8009ce8 <_strtod_l+0x580>)
 8009b74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009b78:	ed91 7b00 	vldr	d7, [r1]
 8009b7c:	ec4b ab16 	vmov	d6, sl, fp
 8009b80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b84:	ec5b ab17 	vmov	sl, fp, d7
 8009b88:	f032 020f 	bics.w	r2, r2, #15
 8009b8c:	d073      	beq.n	8009c76 <_strtod_l+0x50e>
 8009b8e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8009b92:	dd47      	ble.n	8009c24 <_strtod_l+0x4bc>
 8009b94:	2400      	movs	r4, #0
 8009b96:	4625      	mov	r5, r4
 8009b98:	9407      	str	r4, [sp, #28]
 8009b9a:	4626      	mov	r6, r4
 8009b9c:	9a05      	ldr	r2, [sp, #20]
 8009b9e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009cf4 <_strtod_l+0x58c>
 8009ba2:	2322      	movs	r3, #34	@ 0x22
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	f04f 0a00 	mov.w	sl, #0
 8009baa:	9b07      	ldr	r3, [sp, #28]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f43f ae16 	beq.w	80097de <_strtod_l+0x76>
 8009bb2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009bb4:	9805      	ldr	r0, [sp, #20]
 8009bb6:	f7ff f955 	bl	8008e64 <_Bfree>
 8009bba:	9805      	ldr	r0, [sp, #20]
 8009bbc:	4631      	mov	r1, r6
 8009bbe:	f7ff f951 	bl	8008e64 <_Bfree>
 8009bc2:	9805      	ldr	r0, [sp, #20]
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7ff f94d 	bl	8008e64 <_Bfree>
 8009bca:	9907      	ldr	r1, [sp, #28]
 8009bcc:	9805      	ldr	r0, [sp, #20]
 8009bce:	f7ff f949 	bl	8008e64 <_Bfree>
 8009bd2:	9805      	ldr	r0, [sp, #20]
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	f7ff f945 	bl	8008e64 <_Bfree>
 8009bda:	e600      	b.n	80097de <_strtod_l+0x76>
 8009bdc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8009be0:	1be0      	subs	r0, r4, r7
 8009be2:	4281      	cmp	r1, r0
 8009be4:	dbbc      	blt.n	8009b60 <_strtod_l+0x3f8>
 8009be6:	4a40      	ldr	r2, [pc, #256]	@ (8009ce8 <_strtod_l+0x580>)
 8009be8:	f1c3 030f 	rsb	r3, r3, #15
 8009bec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009bf0:	ed91 7b00 	vldr	d7, [r1]
 8009bf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bf6:	ec4b ab16 	vmov	d6, sl, fp
 8009bfa:	1acb      	subs	r3, r1, r3
 8009bfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009c00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c04:	ed92 6b00 	vldr	d6, [r2]
 8009c08:	e796      	b.n	8009b38 <_strtod_l+0x3d0>
 8009c0a:	3116      	adds	r1, #22
 8009c0c:	dba8      	blt.n	8009b60 <_strtod_l+0x3f8>
 8009c0e:	4b36      	ldr	r3, [pc, #216]	@ (8009ce8 <_strtod_l+0x580>)
 8009c10:	1b3c      	subs	r4, r7, r4
 8009c12:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009c16:	ed94 7b00 	vldr	d7, [r4]
 8009c1a:	ec4b ab16 	vmov	d6, sl, fp
 8009c1e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c22:	e78b      	b.n	8009b3c <_strtod_l+0x3d4>
 8009c24:	2000      	movs	r0, #0
 8009c26:	ec4b ab17 	vmov	d7, sl, fp
 8009c2a:	4e30      	ldr	r6, [pc, #192]	@ (8009cec <_strtod_l+0x584>)
 8009c2c:	1112      	asrs	r2, r2, #4
 8009c2e:	4601      	mov	r1, r0
 8009c30:	2a01      	cmp	r2, #1
 8009c32:	dc23      	bgt.n	8009c7c <_strtod_l+0x514>
 8009c34:	b108      	cbz	r0, 8009c3a <_strtod_l+0x4d2>
 8009c36:	ec5b ab17 	vmov	sl, fp, d7
 8009c3a:	4a2c      	ldr	r2, [pc, #176]	@ (8009cec <_strtod_l+0x584>)
 8009c3c:	482c      	ldr	r0, [pc, #176]	@ (8009cf0 <_strtod_l+0x588>)
 8009c3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009c42:	ed92 7b00 	vldr	d7, [r2]
 8009c46:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009c4a:	ec4b ab16 	vmov	d6, sl, fp
 8009c4e:	4a29      	ldr	r2, [pc, #164]	@ (8009cf4 <_strtod_l+0x58c>)
 8009c50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c54:	ee17 1a90 	vmov	r1, s15
 8009c58:	400a      	ands	r2, r1
 8009c5a:	4282      	cmp	r2, r0
 8009c5c:	ec5b ab17 	vmov	sl, fp, d7
 8009c60:	d898      	bhi.n	8009b94 <_strtod_l+0x42c>
 8009c62:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8009c66:	4282      	cmp	r2, r0
 8009c68:	bf86      	itte	hi
 8009c6a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009cf8 <_strtod_l+0x590>
 8009c6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c72:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8009c76:	2200      	movs	r2, #0
 8009c78:	9206      	str	r2, [sp, #24]
 8009c7a:	e076      	b.n	8009d6a <_strtod_l+0x602>
 8009c7c:	f012 0f01 	tst.w	r2, #1
 8009c80:	d004      	beq.n	8009c8c <_strtod_l+0x524>
 8009c82:	ed96 6b00 	vldr	d6, [r6]
 8009c86:	2001      	movs	r0, #1
 8009c88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c8c:	3101      	adds	r1, #1
 8009c8e:	1052      	asrs	r2, r2, #1
 8009c90:	3608      	adds	r6, #8
 8009c92:	e7cd      	b.n	8009c30 <_strtod_l+0x4c8>
 8009c94:	d0ef      	beq.n	8009c76 <_strtod_l+0x50e>
 8009c96:	4252      	negs	r2, r2
 8009c98:	f012 000f 	ands.w	r0, r2, #15
 8009c9c:	d00a      	beq.n	8009cb4 <_strtod_l+0x54c>
 8009c9e:	4912      	ldr	r1, [pc, #72]	@ (8009ce8 <_strtod_l+0x580>)
 8009ca0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009ca4:	ed91 7b00 	vldr	d7, [r1]
 8009ca8:	ec4b ab16 	vmov	d6, sl, fp
 8009cac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009cb0:	ec5b ab17 	vmov	sl, fp, d7
 8009cb4:	1112      	asrs	r2, r2, #4
 8009cb6:	d0de      	beq.n	8009c76 <_strtod_l+0x50e>
 8009cb8:	2a1f      	cmp	r2, #31
 8009cba:	dd1f      	ble.n	8009cfc <_strtod_l+0x594>
 8009cbc:	2400      	movs	r4, #0
 8009cbe:	4625      	mov	r5, r4
 8009cc0:	9407      	str	r4, [sp, #28]
 8009cc2:	4626      	mov	r6, r4
 8009cc4:	9a05      	ldr	r2, [sp, #20]
 8009cc6:	2322      	movs	r3, #34	@ 0x22
 8009cc8:	f04f 0a00 	mov.w	sl, #0
 8009ccc:	f04f 0b00 	mov.w	fp, #0
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	e76a      	b.n	8009baa <_strtod_l+0x442>
 8009cd4:	0800b8d5 	.word	0x0800b8d5
 8009cd8:	0800bba0 	.word	0x0800bba0
 8009cdc:	0800b8cd 	.word	0x0800b8cd
 8009ce0:	0800b904 	.word	0x0800b904
 8009ce4:	0800ba3d 	.word	0x0800ba3d
 8009ce8:	0800bad8 	.word	0x0800bad8
 8009cec:	0800bab0 	.word	0x0800bab0
 8009cf0:	7ca00000 	.word	0x7ca00000
 8009cf4:	7ff00000 	.word	0x7ff00000
 8009cf8:	7fefffff 	.word	0x7fefffff
 8009cfc:	f012 0110 	ands.w	r1, r2, #16
 8009d00:	bf18      	it	ne
 8009d02:	216a      	movne	r1, #106	@ 0x6a
 8009d04:	9106      	str	r1, [sp, #24]
 8009d06:	ec4b ab17 	vmov	d7, sl, fp
 8009d0a:	49af      	ldr	r1, [pc, #700]	@ (8009fc8 <_strtod_l+0x860>)
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	07d6      	lsls	r6, r2, #31
 8009d10:	d504      	bpl.n	8009d1c <_strtod_l+0x5b4>
 8009d12:	ed91 6b00 	vldr	d6, [r1]
 8009d16:	2001      	movs	r0, #1
 8009d18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d1c:	1052      	asrs	r2, r2, #1
 8009d1e:	f101 0108 	add.w	r1, r1, #8
 8009d22:	d1f4      	bne.n	8009d0e <_strtod_l+0x5a6>
 8009d24:	b108      	cbz	r0, 8009d2a <_strtod_l+0x5c2>
 8009d26:	ec5b ab17 	vmov	sl, fp, d7
 8009d2a:	9a06      	ldr	r2, [sp, #24]
 8009d2c:	b1b2      	cbz	r2, 8009d5c <_strtod_l+0x5f4>
 8009d2e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8009d32:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	4658      	mov	r0, fp
 8009d3a:	dd0f      	ble.n	8009d5c <_strtod_l+0x5f4>
 8009d3c:	2a1f      	cmp	r2, #31
 8009d3e:	dd55      	ble.n	8009dec <_strtod_l+0x684>
 8009d40:	2a34      	cmp	r2, #52	@ 0x34
 8009d42:	bfde      	ittt	le
 8009d44:	f04f 32ff 	movle.w	r2, #4294967295
 8009d48:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8009d4c:	408a      	lslle	r2, r1
 8009d4e:	f04f 0a00 	mov.w	sl, #0
 8009d52:	bfcc      	ite	gt
 8009d54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009d58:	ea02 0b00 	andle.w	fp, r2, r0
 8009d5c:	ec4b ab17 	vmov	d7, sl, fp
 8009d60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d68:	d0a8      	beq.n	8009cbc <_strtod_l+0x554>
 8009d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d6c:	9805      	ldr	r0, [sp, #20]
 8009d6e:	f8cd 9000 	str.w	r9, [sp]
 8009d72:	462a      	mov	r2, r5
 8009d74:	f7ff f8de 	bl	8008f34 <__s2b>
 8009d78:	9007      	str	r0, [sp, #28]
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f43f af0a 	beq.w	8009b94 <_strtod_l+0x42c>
 8009d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d82:	1b3f      	subs	r7, r7, r4
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	bfb4      	ite	lt
 8009d88:	463b      	movlt	r3, r7
 8009d8a:	2300      	movge	r3, #0
 8009d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d90:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8009fb8 <_strtod_l+0x850>
 8009d94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d98:	2400      	movs	r4, #0
 8009d9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8009d9c:	4625      	mov	r5, r4
 8009d9e:	9b07      	ldr	r3, [sp, #28]
 8009da0:	9805      	ldr	r0, [sp, #20]
 8009da2:	6859      	ldr	r1, [r3, #4]
 8009da4:	f7ff f81e 	bl	8008de4 <_Balloc>
 8009da8:	4606      	mov	r6, r0
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f43f aef6 	beq.w	8009b9c <_strtod_l+0x434>
 8009db0:	9b07      	ldr	r3, [sp, #28]
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	ec4b ab19 	vmov	d9, sl, fp
 8009db8:	3202      	adds	r2, #2
 8009dba:	f103 010c 	add.w	r1, r3, #12
 8009dbe:	0092      	lsls	r2, r2, #2
 8009dc0:	300c      	adds	r0, #12
 8009dc2:	f000 fef3 	bl	800abac <memcpy>
 8009dc6:	eeb0 0b49 	vmov.f64	d0, d9
 8009dca:	9805      	ldr	r0, [sp, #20]
 8009dcc:	aa14      	add	r2, sp, #80	@ 0x50
 8009dce:	a913      	add	r1, sp, #76	@ 0x4c
 8009dd0:	f7ff fbe4 	bl	800959c <__d2b>
 8009dd4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	f43f aee0 	beq.w	8009b9c <_strtod_l+0x434>
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	2101      	movs	r1, #1
 8009de0:	f7ff f93e 	bl	8009060 <__i2b>
 8009de4:	4605      	mov	r5, r0
 8009de6:	b940      	cbnz	r0, 8009dfa <_strtod_l+0x692>
 8009de8:	2500      	movs	r5, #0
 8009dea:	e6d7      	b.n	8009b9c <_strtod_l+0x434>
 8009dec:	f04f 31ff 	mov.w	r1, #4294967295
 8009df0:	fa01 f202 	lsl.w	r2, r1, r2
 8009df4:	ea02 0a0a 	and.w	sl, r2, sl
 8009df8:	e7b0      	b.n	8009d5c <_strtod_l+0x5f4>
 8009dfa:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009dfc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009dfe:	2f00      	cmp	r7, #0
 8009e00:	bfab      	itete	ge
 8009e02:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8009e04:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8009e06:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8009e0a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8009e0e:	bfac      	ite	ge
 8009e10:	eb07 0903 	addge.w	r9, r7, r3
 8009e14:	eba3 0807 	sublt.w	r8, r3, r7
 8009e18:	9b06      	ldr	r3, [sp, #24]
 8009e1a:	1aff      	subs	r7, r7, r3
 8009e1c:	4417      	add	r7, r2
 8009e1e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8009e22:	4a6a      	ldr	r2, [pc, #424]	@ (8009fcc <_strtod_l+0x864>)
 8009e24:	3f01      	subs	r7, #1
 8009e26:	4297      	cmp	r7, r2
 8009e28:	da51      	bge.n	8009ece <_strtod_l+0x766>
 8009e2a:	1bd1      	subs	r1, r2, r7
 8009e2c:	291f      	cmp	r1, #31
 8009e2e:	eba3 0301 	sub.w	r3, r3, r1
 8009e32:	f04f 0201 	mov.w	r2, #1
 8009e36:	dc3e      	bgt.n	8009eb6 <_strtod_l+0x74e>
 8009e38:	408a      	lsls	r2, r1
 8009e3a:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e40:	eb09 0703 	add.w	r7, r9, r3
 8009e44:	4498      	add	r8, r3
 8009e46:	9b06      	ldr	r3, [sp, #24]
 8009e48:	45b9      	cmp	r9, r7
 8009e4a:	4498      	add	r8, r3
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	bfa8      	it	ge
 8009e50:	463b      	movge	r3, r7
 8009e52:	4543      	cmp	r3, r8
 8009e54:	bfa8      	it	ge
 8009e56:	4643      	movge	r3, r8
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bfc2      	ittt	gt
 8009e5c:	1aff      	subgt	r7, r7, r3
 8009e5e:	eba8 0803 	subgt.w	r8, r8, r3
 8009e62:	eba9 0903 	subgt.w	r9, r9, r3
 8009e66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	dd16      	ble.n	8009e9a <_strtod_l+0x732>
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	9805      	ldr	r0, [sp, #20]
 8009e70:	461a      	mov	r2, r3
 8009e72:	f7ff f9ad 	bl	80091d0 <__pow5mult>
 8009e76:	4605      	mov	r5, r0
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d0b5      	beq.n	8009de8 <_strtod_l+0x680>
 8009e7c:	4601      	mov	r1, r0
 8009e7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009e80:	9805      	ldr	r0, [sp, #20]
 8009e82:	f7ff f903 	bl	800908c <__multiply>
 8009e86:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	f43f ae87 	beq.w	8009b9c <_strtod_l+0x434>
 8009e8e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009e90:	9805      	ldr	r0, [sp, #20]
 8009e92:	f7fe ffe7 	bl	8008e64 <_Bfree>
 8009e96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e98:	9312      	str	r3, [sp, #72]	@ 0x48
 8009e9a:	2f00      	cmp	r7, #0
 8009e9c:	dc1b      	bgt.n	8009ed6 <_strtod_l+0x76e>
 8009e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	dd21      	ble.n	8009ee8 <_strtod_l+0x780>
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ea8:	9805      	ldr	r0, [sp, #20]
 8009eaa:	f7ff f991 	bl	80091d0 <__pow5mult>
 8009eae:	4606      	mov	r6, r0
 8009eb0:	b9d0      	cbnz	r0, 8009ee8 <_strtod_l+0x780>
 8009eb2:	2600      	movs	r6, #0
 8009eb4:	e672      	b.n	8009b9c <_strtod_l+0x434>
 8009eb6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8009eba:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009ebe:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009ec2:	37e2      	adds	r7, #226	@ 0xe2
 8009ec4:	fa02 f107 	lsl.w	r1, r2, r7
 8009ec8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009eca:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ecc:	e7b8      	b.n	8009e40 <_strtod_l+0x6d8>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	e7f9      	b.n	8009eca <_strtod_l+0x762>
 8009ed6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009ed8:	9805      	ldr	r0, [sp, #20]
 8009eda:	463a      	mov	r2, r7
 8009edc:	f7ff f9d2 	bl	8009284 <__lshift>
 8009ee0:	9012      	str	r0, [sp, #72]	@ 0x48
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d1db      	bne.n	8009e9e <_strtod_l+0x736>
 8009ee6:	e659      	b.n	8009b9c <_strtod_l+0x434>
 8009ee8:	f1b8 0f00 	cmp.w	r8, #0
 8009eec:	dd07      	ble.n	8009efe <_strtod_l+0x796>
 8009eee:	4631      	mov	r1, r6
 8009ef0:	9805      	ldr	r0, [sp, #20]
 8009ef2:	4642      	mov	r2, r8
 8009ef4:	f7ff f9c6 	bl	8009284 <__lshift>
 8009ef8:	4606      	mov	r6, r0
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d0d9      	beq.n	8009eb2 <_strtod_l+0x74a>
 8009efe:	f1b9 0f00 	cmp.w	r9, #0
 8009f02:	dd08      	ble.n	8009f16 <_strtod_l+0x7ae>
 8009f04:	4629      	mov	r1, r5
 8009f06:	9805      	ldr	r0, [sp, #20]
 8009f08:	464a      	mov	r2, r9
 8009f0a:	f7ff f9bb 	bl	8009284 <__lshift>
 8009f0e:	4605      	mov	r5, r0
 8009f10:	2800      	cmp	r0, #0
 8009f12:	f43f ae43 	beq.w	8009b9c <_strtod_l+0x434>
 8009f16:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009f18:	9805      	ldr	r0, [sp, #20]
 8009f1a:	4632      	mov	r2, r6
 8009f1c:	f7ff fa3a 	bl	8009394 <__mdiff>
 8009f20:	4604      	mov	r4, r0
 8009f22:	2800      	cmp	r0, #0
 8009f24:	f43f ae3a 	beq.w	8009b9c <_strtod_l+0x434>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8009f2e:	60c3      	str	r3, [r0, #12]
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7ff fa13 	bl	800935c <__mcmp>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	da4c      	bge.n	8009fd4 <_strtod_l+0x86c>
 8009f3a:	ea58 080a 	orrs.w	r8, r8, sl
 8009f3e:	d172      	bne.n	800a026 <_strtod_l+0x8be>
 8009f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d16e      	bne.n	800a026 <_strtod_l+0x8be>
 8009f48:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f4c:	0d1b      	lsrs	r3, r3, #20
 8009f4e:	051b      	lsls	r3, r3, #20
 8009f50:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f54:	d967      	bls.n	800a026 <_strtod_l+0x8be>
 8009f56:	6963      	ldr	r3, [r4, #20]
 8009f58:	b913      	cbnz	r3, 8009f60 <_strtod_l+0x7f8>
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	dd62      	ble.n	800a026 <_strtod_l+0x8be>
 8009f60:	4621      	mov	r1, r4
 8009f62:	2201      	movs	r2, #1
 8009f64:	9805      	ldr	r0, [sp, #20]
 8009f66:	f7ff f98d 	bl	8009284 <__lshift>
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	f7ff f9f5 	bl	800935c <__mcmp>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	dd57      	ble.n	800a026 <_strtod_l+0x8be>
 8009f76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f7a:	9a06      	ldr	r2, [sp, #24]
 8009f7c:	0d1b      	lsrs	r3, r3, #20
 8009f7e:	051b      	lsls	r3, r3, #20
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	d06e      	beq.n	800a062 <_strtod_l+0x8fa>
 8009f84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009f88:	d86b      	bhi.n	800a062 <_strtod_l+0x8fa>
 8009f8a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009f8e:	f67f ae99 	bls.w	8009cc4 <_strtod_l+0x55c>
 8009f92:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8009fc0 <_strtod_l+0x858>
 8009f96:	ec4b ab16 	vmov	d6, sl, fp
 8009f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd0 <_strtod_l+0x868>)
 8009f9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009fa0:	ee17 2a90 	vmov	r2, s15
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	ec5b ab17 	vmov	sl, fp, d7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f47f ae01 	bne.w	8009bb2 <_strtod_l+0x44a>
 8009fb0:	9a05      	ldr	r2, [sp, #20]
 8009fb2:	2322      	movs	r3, #34	@ 0x22
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	e5fc      	b.n	8009bb2 <_strtod_l+0x44a>
 8009fb8:	ffc00000 	.word	0xffc00000
 8009fbc:	41dfffff 	.word	0x41dfffff
 8009fc0:	00000000 	.word	0x00000000
 8009fc4:	39500000 	.word	0x39500000
 8009fc8:	0800bbc8 	.word	0x0800bbc8
 8009fcc:	fffffc02 	.word	0xfffffc02
 8009fd0:	7ff00000 	.word	0x7ff00000
 8009fd4:	46d9      	mov	r9, fp
 8009fd6:	d15d      	bne.n	800a094 <_strtod_l+0x92c>
 8009fd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fdc:	f1b8 0f00 	cmp.w	r8, #0
 8009fe0:	d02a      	beq.n	800a038 <_strtod_l+0x8d0>
 8009fe2:	4aa9      	ldr	r2, [pc, #676]	@ (800a288 <_strtod_l+0xb20>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d12a      	bne.n	800a03e <_strtod_l+0x8d6>
 8009fe8:	9b06      	ldr	r3, [sp, #24]
 8009fea:	4652      	mov	r2, sl
 8009fec:	b1fb      	cbz	r3, 800a02e <_strtod_l+0x8c6>
 8009fee:	4ba7      	ldr	r3, [pc, #668]	@ (800a28c <_strtod_l+0xb24>)
 8009ff0:	ea0b 0303 	and.w	r3, fp, r3
 8009ff4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8009ffc:	d81a      	bhi.n	800a034 <_strtod_l+0x8cc>
 8009ffe:	0d1b      	lsrs	r3, r3, #20
 800a000:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a004:	fa01 f303 	lsl.w	r3, r1, r3
 800a008:	429a      	cmp	r2, r3
 800a00a:	d118      	bne.n	800a03e <_strtod_l+0x8d6>
 800a00c:	4ba0      	ldr	r3, [pc, #640]	@ (800a290 <_strtod_l+0xb28>)
 800a00e:	4599      	cmp	r9, r3
 800a010:	d102      	bne.n	800a018 <_strtod_l+0x8b0>
 800a012:	3201      	adds	r2, #1
 800a014:	f43f adc2 	beq.w	8009b9c <_strtod_l+0x434>
 800a018:	4b9c      	ldr	r3, [pc, #624]	@ (800a28c <_strtod_l+0xb24>)
 800a01a:	ea09 0303 	and.w	r3, r9, r3
 800a01e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800a022:	f04f 0a00 	mov.w	sl, #0
 800a026:	9b06      	ldr	r3, [sp, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1b2      	bne.n	8009f92 <_strtod_l+0x82a>
 800a02c:	e5c1      	b.n	8009bb2 <_strtod_l+0x44a>
 800a02e:	f04f 33ff 	mov.w	r3, #4294967295
 800a032:	e7e9      	b.n	800a008 <_strtod_l+0x8a0>
 800a034:	460b      	mov	r3, r1
 800a036:	e7e7      	b.n	800a008 <_strtod_l+0x8a0>
 800a038:	ea53 030a 	orrs.w	r3, r3, sl
 800a03c:	d09b      	beq.n	8009f76 <_strtod_l+0x80e>
 800a03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a040:	b1c3      	cbz	r3, 800a074 <_strtod_l+0x90c>
 800a042:	ea13 0f09 	tst.w	r3, r9
 800a046:	d0ee      	beq.n	800a026 <_strtod_l+0x8be>
 800a048:	9a06      	ldr	r2, [sp, #24]
 800a04a:	4650      	mov	r0, sl
 800a04c:	4659      	mov	r1, fp
 800a04e:	f1b8 0f00 	cmp.w	r8, #0
 800a052:	d013      	beq.n	800a07c <_strtod_l+0x914>
 800a054:	f7ff fb6d 	bl	8009732 <sulp>
 800a058:	ee39 7b00 	vadd.f64	d7, d9, d0
 800a05c:	ec5b ab17 	vmov	sl, fp, d7
 800a060:	e7e1      	b.n	800a026 <_strtod_l+0x8be>
 800a062:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a066:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a06a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a06e:	f04f 3aff 	mov.w	sl, #4294967295
 800a072:	e7d8      	b.n	800a026 <_strtod_l+0x8be>
 800a074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a076:	ea13 0f0a 	tst.w	r3, sl
 800a07a:	e7e4      	b.n	800a046 <_strtod_l+0x8de>
 800a07c:	f7ff fb59 	bl	8009732 <sulp>
 800a080:	ee39 0b40 	vsub.f64	d0, d9, d0
 800a084:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08c:	ec5b ab10 	vmov	sl, fp, d0
 800a090:	d1c9      	bne.n	800a026 <_strtod_l+0x8be>
 800a092:	e617      	b.n	8009cc4 <_strtod_l+0x55c>
 800a094:	4629      	mov	r1, r5
 800a096:	4620      	mov	r0, r4
 800a098:	f7ff fad8 	bl	800964c <__ratio>
 800a09c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800a0a0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a8:	d85d      	bhi.n	800a166 <_strtod_l+0x9fe>
 800a0aa:	f1b8 0f00 	cmp.w	r8, #0
 800a0ae:	d164      	bne.n	800a17a <_strtod_l+0xa12>
 800a0b0:	f1ba 0f00 	cmp.w	sl, #0
 800a0b4:	d14b      	bne.n	800a14e <_strtod_l+0x9e6>
 800a0b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0ba:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d160      	bne.n	800a184 <_strtod_l+0xa1c>
 800a0c2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800a0c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a0ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ce:	d401      	bmi.n	800a0d4 <_strtod_l+0x96c>
 800a0d0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a0d4:	eeb1 ab48 	vneg.f64	d10, d8
 800a0d8:	486c      	ldr	r0, [pc, #432]	@ (800a28c <_strtod_l+0xb24>)
 800a0da:	496e      	ldr	r1, [pc, #440]	@ (800a294 <_strtod_l+0xb2c>)
 800a0dc:	ea09 0700 	and.w	r7, r9, r0
 800a0e0:	428f      	cmp	r7, r1
 800a0e2:	ec53 2b1a 	vmov	r2, r3, d10
 800a0e6:	d17d      	bne.n	800a1e4 <_strtod_l+0xa7c>
 800a0e8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800a0ec:	ec4b ab1c 	vmov	d12, sl, fp
 800a0f0:	eeb0 0b4c 	vmov.f64	d0, d12
 800a0f4:	f7ff f9e2 	bl	80094bc <__ulp>
 800a0f8:	4864      	ldr	r0, [pc, #400]	@ (800a28c <_strtod_l+0xb24>)
 800a0fa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800a0fe:	ee1c 3a90 	vmov	r3, s25
 800a102:	4a65      	ldr	r2, [pc, #404]	@ (800a298 <_strtod_l+0xb30>)
 800a104:	ea03 0100 	and.w	r1, r3, r0
 800a108:	4291      	cmp	r1, r2
 800a10a:	ec5b ab1c 	vmov	sl, fp, d12
 800a10e:	d93c      	bls.n	800a18a <_strtod_l+0xa22>
 800a110:	ee19 2a90 	vmov	r2, s19
 800a114:	4b5e      	ldr	r3, [pc, #376]	@ (800a290 <_strtod_l+0xb28>)
 800a116:	429a      	cmp	r2, r3
 800a118:	d104      	bne.n	800a124 <_strtod_l+0x9bc>
 800a11a:	ee19 3a10 	vmov	r3, s18
 800a11e:	3301      	adds	r3, #1
 800a120:	f43f ad3c 	beq.w	8009b9c <_strtod_l+0x434>
 800a124:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800a290 <_strtod_l+0xb28>
 800a128:	f04f 3aff 	mov.w	sl, #4294967295
 800a12c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a12e:	9805      	ldr	r0, [sp, #20]
 800a130:	f7fe fe98 	bl	8008e64 <_Bfree>
 800a134:	9805      	ldr	r0, [sp, #20]
 800a136:	4631      	mov	r1, r6
 800a138:	f7fe fe94 	bl	8008e64 <_Bfree>
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	4629      	mov	r1, r5
 800a140:	f7fe fe90 	bl	8008e64 <_Bfree>
 800a144:	9805      	ldr	r0, [sp, #20]
 800a146:	4621      	mov	r1, r4
 800a148:	f7fe fe8c 	bl	8008e64 <_Bfree>
 800a14c:	e627      	b.n	8009d9e <_strtod_l+0x636>
 800a14e:	f1ba 0f01 	cmp.w	sl, #1
 800a152:	d103      	bne.n	800a15c <_strtod_l+0x9f4>
 800a154:	f1bb 0f00 	cmp.w	fp, #0
 800a158:	f43f adb4 	beq.w	8009cc4 <_strtod_l+0x55c>
 800a15c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a160:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a164:	e7b8      	b.n	800a0d8 <_strtod_l+0x970>
 800a166:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a16a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a16e:	f1b8 0f00 	cmp.w	r8, #0
 800a172:	d0af      	beq.n	800a0d4 <_strtod_l+0x96c>
 800a174:	eeb0 ab48 	vmov.f64	d10, d8
 800a178:	e7ae      	b.n	800a0d8 <_strtod_l+0x970>
 800a17a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800a17e:	eeb0 8b4a 	vmov.f64	d8, d10
 800a182:	e7a9      	b.n	800a0d8 <_strtod_l+0x970>
 800a184:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a188:	e7a6      	b.n	800a0d8 <_strtod_l+0x970>
 800a18a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a18e:	9b06      	ldr	r3, [sp, #24]
 800a190:	46d9      	mov	r9, fp
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1ca      	bne.n	800a12c <_strtod_l+0x9c4>
 800a196:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a19a:	0d1b      	lsrs	r3, r3, #20
 800a19c:	051b      	lsls	r3, r3, #20
 800a19e:	429f      	cmp	r7, r3
 800a1a0:	d1c4      	bne.n	800a12c <_strtod_l+0x9c4>
 800a1a2:	ec51 0b18 	vmov	r0, r1, d8
 800a1a6:	f7f6 faaf 	bl	8000708 <__aeabi_d2lz>
 800a1aa:	f7f6 fa7f 	bl	80006ac <__aeabi_l2d>
 800a1ae:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800a1b2:	ec41 0b17 	vmov	d7, r0, r1
 800a1b6:	ea49 090a 	orr.w	r9, r9, sl
 800a1ba:	ea59 0908 	orrs.w	r9, r9, r8
 800a1be:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a1c2:	d03c      	beq.n	800a23e <_strtod_l+0xad6>
 800a1c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a270 <_strtod_l+0xb08>
 800a1c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1d0:	f53f acef 	bmi.w	8009bb2 <_strtod_l+0x44a>
 800a1d4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800a278 <_strtod_l+0xb10>
 800a1d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e0:	dda4      	ble.n	800a12c <_strtod_l+0x9c4>
 800a1e2:	e4e6      	b.n	8009bb2 <_strtod_l+0x44a>
 800a1e4:	9906      	ldr	r1, [sp, #24]
 800a1e6:	b1e1      	cbz	r1, 800a222 <_strtod_l+0xaba>
 800a1e8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800a1ec:	d819      	bhi.n	800a222 <_strtod_l+0xaba>
 800a1ee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1f6:	d811      	bhi.n	800a21c <_strtod_l+0xab4>
 800a1f8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a1fc:	ee18 3a10 	vmov	r3, s16
 800a200:	2b01      	cmp	r3, #1
 800a202:	bf38      	it	cc
 800a204:	2301      	movcc	r3, #1
 800a206:	ee08 3a10 	vmov	s16, r3
 800a20a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a20e:	f1b8 0f00 	cmp.w	r8, #0
 800a212:	d111      	bne.n	800a238 <_strtod_l+0xad0>
 800a214:	eeb1 7b48 	vneg.f64	d7, d8
 800a218:	ec53 2b17 	vmov	r2, r3, d7
 800a21c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800a220:	1bcb      	subs	r3, r1, r7
 800a222:	eeb0 0b49 	vmov.f64	d0, d9
 800a226:	ec43 2b1a 	vmov	d10, r2, r3
 800a22a:	f7ff f947 	bl	80094bc <__ulp>
 800a22e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800a232:	ec5b ab19 	vmov	sl, fp, d9
 800a236:	e7aa      	b.n	800a18e <_strtod_l+0xa26>
 800a238:	eeb0 7b48 	vmov.f64	d7, d8
 800a23c:	e7ec      	b.n	800a218 <_strtod_l+0xab0>
 800a23e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a280 <_strtod_l+0xb18>
 800a242:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24a:	f57f af6f 	bpl.w	800a12c <_strtod_l+0x9c4>
 800a24e:	e4b0      	b.n	8009bb2 <_strtod_l+0x44a>
 800a250:	2300      	movs	r3, #0
 800a252:	9308      	str	r3, [sp, #32]
 800a254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a256:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	f7ff bac4 	b.w	80097e6 <_strtod_l+0x7e>
 800a25e:	2a65      	cmp	r2, #101	@ 0x65
 800a260:	f43f abbf 	beq.w	80099e2 <_strtod_l+0x27a>
 800a264:	2a45      	cmp	r2, #69	@ 0x45
 800a266:	f43f abbc 	beq.w	80099e2 <_strtod_l+0x27a>
 800a26a:	2101      	movs	r1, #1
 800a26c:	f7ff bbf4 	b.w	8009a58 <_strtod_l+0x2f0>
 800a270:	94a03595 	.word	0x94a03595
 800a274:	3fdfffff 	.word	0x3fdfffff
 800a278:	35afe535 	.word	0x35afe535
 800a27c:	3fe00000 	.word	0x3fe00000
 800a280:	94a03595 	.word	0x94a03595
 800a284:	3fcfffff 	.word	0x3fcfffff
 800a288:	000fffff 	.word	0x000fffff
 800a28c:	7ff00000 	.word	0x7ff00000
 800a290:	7fefffff 	.word	0x7fefffff
 800a294:	7fe00000 	.word	0x7fe00000
 800a298:	7c9fffff 	.word	0x7c9fffff

0800a29c <_strtod_r>:
 800a29c:	4b01      	ldr	r3, [pc, #4]	@ (800a2a4 <_strtod_r+0x8>)
 800a29e:	f7ff ba63 	b.w	8009768 <_strtod_l>
 800a2a2:	bf00      	nop
 800a2a4:	24000074 	.word	0x24000074

0800a2a8 <_strtol_l.isra.0>:
 800a2a8:	2b24      	cmp	r3, #36	@ 0x24
 800a2aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ae:	4686      	mov	lr, r0
 800a2b0:	4690      	mov	r8, r2
 800a2b2:	d801      	bhi.n	800a2b8 <_strtol_l.isra.0+0x10>
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d106      	bne.n	800a2c6 <_strtol_l.isra.0+0x1e>
 800a2b8:	f7fd fe78 	bl	8007fac <__errno>
 800a2bc:	2316      	movs	r3, #22
 800a2be:	6003      	str	r3, [r0, #0]
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c6:	4834      	ldr	r0, [pc, #208]	@ (800a398 <_strtol_l.isra.0+0xf0>)
 800a2c8:	460d      	mov	r5, r1
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2d0:	5d06      	ldrb	r6, [r0, r4]
 800a2d2:	f016 0608 	ands.w	r6, r6, #8
 800a2d6:	d1f8      	bne.n	800a2ca <_strtol_l.isra.0+0x22>
 800a2d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a2da:	d110      	bne.n	800a2fe <_strtol_l.isra.0+0x56>
 800a2dc:	782c      	ldrb	r4, [r5, #0]
 800a2de:	2601      	movs	r6, #1
 800a2e0:	1c95      	adds	r5, r2, #2
 800a2e2:	f033 0210 	bics.w	r2, r3, #16
 800a2e6:	d115      	bne.n	800a314 <_strtol_l.isra.0+0x6c>
 800a2e8:	2c30      	cmp	r4, #48	@ 0x30
 800a2ea:	d10d      	bne.n	800a308 <_strtol_l.isra.0+0x60>
 800a2ec:	782a      	ldrb	r2, [r5, #0]
 800a2ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a2f2:	2a58      	cmp	r2, #88	@ 0x58
 800a2f4:	d108      	bne.n	800a308 <_strtol_l.isra.0+0x60>
 800a2f6:	786c      	ldrb	r4, [r5, #1]
 800a2f8:	3502      	adds	r5, #2
 800a2fa:	2310      	movs	r3, #16
 800a2fc:	e00a      	b.n	800a314 <_strtol_l.isra.0+0x6c>
 800a2fe:	2c2b      	cmp	r4, #43	@ 0x2b
 800a300:	bf04      	itt	eq
 800a302:	782c      	ldrbeq	r4, [r5, #0]
 800a304:	1c95      	addeq	r5, r2, #2
 800a306:	e7ec      	b.n	800a2e2 <_strtol_l.isra.0+0x3a>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1f6      	bne.n	800a2fa <_strtol_l.isra.0+0x52>
 800a30c:	2c30      	cmp	r4, #48	@ 0x30
 800a30e:	bf14      	ite	ne
 800a310:	230a      	movne	r3, #10
 800a312:	2308      	moveq	r3, #8
 800a314:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a318:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a31c:	2200      	movs	r2, #0
 800a31e:	fbbc f9f3 	udiv	r9, ip, r3
 800a322:	4610      	mov	r0, r2
 800a324:	fb03 ca19 	mls	sl, r3, r9, ip
 800a328:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a32c:	2f09      	cmp	r7, #9
 800a32e:	d80f      	bhi.n	800a350 <_strtol_l.isra.0+0xa8>
 800a330:	463c      	mov	r4, r7
 800a332:	42a3      	cmp	r3, r4
 800a334:	dd1b      	ble.n	800a36e <_strtol_l.isra.0+0xc6>
 800a336:	1c57      	adds	r7, r2, #1
 800a338:	d007      	beq.n	800a34a <_strtol_l.isra.0+0xa2>
 800a33a:	4581      	cmp	r9, r0
 800a33c:	d314      	bcc.n	800a368 <_strtol_l.isra.0+0xc0>
 800a33e:	d101      	bne.n	800a344 <_strtol_l.isra.0+0x9c>
 800a340:	45a2      	cmp	sl, r4
 800a342:	db11      	blt.n	800a368 <_strtol_l.isra.0+0xc0>
 800a344:	fb00 4003 	mla	r0, r0, r3, r4
 800a348:	2201      	movs	r2, #1
 800a34a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a34e:	e7eb      	b.n	800a328 <_strtol_l.isra.0+0x80>
 800a350:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a354:	2f19      	cmp	r7, #25
 800a356:	d801      	bhi.n	800a35c <_strtol_l.isra.0+0xb4>
 800a358:	3c37      	subs	r4, #55	@ 0x37
 800a35a:	e7ea      	b.n	800a332 <_strtol_l.isra.0+0x8a>
 800a35c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a360:	2f19      	cmp	r7, #25
 800a362:	d804      	bhi.n	800a36e <_strtol_l.isra.0+0xc6>
 800a364:	3c57      	subs	r4, #87	@ 0x57
 800a366:	e7e4      	b.n	800a332 <_strtol_l.isra.0+0x8a>
 800a368:	f04f 32ff 	mov.w	r2, #4294967295
 800a36c:	e7ed      	b.n	800a34a <_strtol_l.isra.0+0xa2>
 800a36e:	1c53      	adds	r3, r2, #1
 800a370:	d108      	bne.n	800a384 <_strtol_l.isra.0+0xdc>
 800a372:	2322      	movs	r3, #34	@ 0x22
 800a374:	f8ce 3000 	str.w	r3, [lr]
 800a378:	4660      	mov	r0, ip
 800a37a:	f1b8 0f00 	cmp.w	r8, #0
 800a37e:	d0a0      	beq.n	800a2c2 <_strtol_l.isra.0+0x1a>
 800a380:	1e69      	subs	r1, r5, #1
 800a382:	e006      	b.n	800a392 <_strtol_l.isra.0+0xea>
 800a384:	b106      	cbz	r6, 800a388 <_strtol_l.isra.0+0xe0>
 800a386:	4240      	negs	r0, r0
 800a388:	f1b8 0f00 	cmp.w	r8, #0
 800a38c:	d099      	beq.n	800a2c2 <_strtol_l.isra.0+0x1a>
 800a38e:	2a00      	cmp	r2, #0
 800a390:	d1f6      	bne.n	800a380 <_strtol_l.isra.0+0xd8>
 800a392:	f8c8 1000 	str.w	r1, [r8]
 800a396:	e794      	b.n	800a2c2 <_strtol_l.isra.0+0x1a>
 800a398:	0800bbf1 	.word	0x0800bbf1

0800a39c <_strtol_r>:
 800a39c:	f7ff bf84 	b.w	800a2a8 <_strtol_l.isra.0>

0800a3a0 <__ssputs_r>:
 800a3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	688e      	ldr	r6, [r1, #8]
 800a3a6:	461f      	mov	r7, r3
 800a3a8:	42be      	cmp	r6, r7
 800a3aa:	680b      	ldr	r3, [r1, #0]
 800a3ac:	4682      	mov	sl, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	4690      	mov	r8, r2
 800a3b2:	d82d      	bhi.n	800a410 <__ssputs_r+0x70>
 800a3b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a3bc:	d026      	beq.n	800a40c <__ssputs_r+0x6c>
 800a3be:	6965      	ldr	r5, [r4, #20]
 800a3c0:	6909      	ldr	r1, [r1, #16]
 800a3c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3c6:	eba3 0901 	sub.w	r9, r3, r1
 800a3ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3ce:	1c7b      	adds	r3, r7, #1
 800a3d0:	444b      	add	r3, r9
 800a3d2:	106d      	asrs	r5, r5, #1
 800a3d4:	429d      	cmp	r5, r3
 800a3d6:	bf38      	it	cc
 800a3d8:	461d      	movcc	r5, r3
 800a3da:	0553      	lsls	r3, r2, #21
 800a3dc:	d527      	bpl.n	800a42e <__ssputs_r+0x8e>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f7fe fc74 	bl	8008ccc <_malloc_r>
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	b360      	cbz	r0, 800a442 <__ssputs_r+0xa2>
 800a3e8:	6921      	ldr	r1, [r4, #16]
 800a3ea:	464a      	mov	r2, r9
 800a3ec:	f000 fbde 	bl	800abac <memcpy>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	6126      	str	r6, [r4, #16]
 800a3fe:	6165      	str	r5, [r4, #20]
 800a400:	444e      	add	r6, r9
 800a402:	eba5 0509 	sub.w	r5, r5, r9
 800a406:	6026      	str	r6, [r4, #0]
 800a408:	60a5      	str	r5, [r4, #8]
 800a40a:	463e      	mov	r6, r7
 800a40c:	42be      	cmp	r6, r7
 800a40e:	d900      	bls.n	800a412 <__ssputs_r+0x72>
 800a410:	463e      	mov	r6, r7
 800a412:	6820      	ldr	r0, [r4, #0]
 800a414:	4632      	mov	r2, r6
 800a416:	4641      	mov	r1, r8
 800a418:	f000 fb6a 	bl	800aaf0 <memmove>
 800a41c:	68a3      	ldr	r3, [r4, #8]
 800a41e:	1b9b      	subs	r3, r3, r6
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	4433      	add	r3, r6
 800a426:	6023      	str	r3, [r4, #0]
 800a428:	2000      	movs	r0, #0
 800a42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a42e:	462a      	mov	r2, r5
 800a430:	f000 ff4f 	bl	800b2d2 <_realloc_r>
 800a434:	4606      	mov	r6, r0
 800a436:	2800      	cmp	r0, #0
 800a438:	d1e0      	bne.n	800a3fc <__ssputs_r+0x5c>
 800a43a:	6921      	ldr	r1, [r4, #16]
 800a43c:	4650      	mov	r0, sl
 800a43e:	f7fe fbd1 	bl	8008be4 <_free_r>
 800a442:	230c      	movs	r3, #12
 800a444:	f8ca 3000 	str.w	r3, [sl]
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a44e:	81a3      	strh	r3, [r4, #12]
 800a450:	f04f 30ff 	mov.w	r0, #4294967295
 800a454:	e7e9      	b.n	800a42a <__ssputs_r+0x8a>
	...

0800a458 <_svfiprintf_r>:
 800a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	4698      	mov	r8, r3
 800a45e:	898b      	ldrh	r3, [r1, #12]
 800a460:	061b      	lsls	r3, r3, #24
 800a462:	b09d      	sub	sp, #116	@ 0x74
 800a464:	4607      	mov	r7, r0
 800a466:	460d      	mov	r5, r1
 800a468:	4614      	mov	r4, r2
 800a46a:	d510      	bpl.n	800a48e <_svfiprintf_r+0x36>
 800a46c:	690b      	ldr	r3, [r1, #16]
 800a46e:	b973      	cbnz	r3, 800a48e <_svfiprintf_r+0x36>
 800a470:	2140      	movs	r1, #64	@ 0x40
 800a472:	f7fe fc2b 	bl	8008ccc <_malloc_r>
 800a476:	6028      	str	r0, [r5, #0]
 800a478:	6128      	str	r0, [r5, #16]
 800a47a:	b930      	cbnz	r0, 800a48a <_svfiprintf_r+0x32>
 800a47c:	230c      	movs	r3, #12
 800a47e:	603b      	str	r3, [r7, #0]
 800a480:	f04f 30ff 	mov.w	r0, #4294967295
 800a484:	b01d      	add	sp, #116	@ 0x74
 800a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48a:	2340      	movs	r3, #64	@ 0x40
 800a48c:	616b      	str	r3, [r5, #20]
 800a48e:	2300      	movs	r3, #0
 800a490:	9309      	str	r3, [sp, #36]	@ 0x24
 800a492:	2320      	movs	r3, #32
 800a494:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a498:	f8cd 800c 	str.w	r8, [sp, #12]
 800a49c:	2330      	movs	r3, #48	@ 0x30
 800a49e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a63c <_svfiprintf_r+0x1e4>
 800a4a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4a6:	f04f 0901 	mov.w	r9, #1
 800a4aa:	4623      	mov	r3, r4
 800a4ac:	469a      	mov	sl, r3
 800a4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b2:	b10a      	cbz	r2, 800a4b8 <_svfiprintf_r+0x60>
 800a4b4:	2a25      	cmp	r2, #37	@ 0x25
 800a4b6:	d1f9      	bne.n	800a4ac <_svfiprintf_r+0x54>
 800a4b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a4bc:	d00b      	beq.n	800a4d6 <_svfiprintf_r+0x7e>
 800a4be:	465b      	mov	r3, fp
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f7ff ff6b 	bl	800a3a0 <__ssputs_r>
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f000 80a7 	beq.w	800a61e <_svfiprintf_r+0x1c6>
 800a4d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4d2:	445a      	add	r2, fp
 800a4d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 809f 	beq.w	800a61e <_svfiprintf_r+0x1c6>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ea:	f10a 0a01 	add.w	sl, sl, #1
 800a4ee:	9304      	str	r3, [sp, #16]
 800a4f0:	9307      	str	r3, [sp, #28]
 800a4f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4f8:	4654      	mov	r4, sl
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	484e      	ldr	r0, [pc, #312]	@ (800a63c <_svfiprintf_r+0x1e4>)
 800a502:	f7f5 feed 	bl	80002e0 <memchr>
 800a506:	9a04      	ldr	r2, [sp, #16]
 800a508:	b9d8      	cbnz	r0, 800a542 <_svfiprintf_r+0xea>
 800a50a:	06d0      	lsls	r0, r2, #27
 800a50c:	bf44      	itt	mi
 800a50e:	2320      	movmi	r3, #32
 800a510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a514:	0711      	lsls	r1, r2, #28
 800a516:	bf44      	itt	mi
 800a518:	232b      	movmi	r3, #43	@ 0x2b
 800a51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a51e:	f89a 3000 	ldrb.w	r3, [sl]
 800a522:	2b2a      	cmp	r3, #42	@ 0x2a
 800a524:	d015      	beq.n	800a552 <_svfiprintf_r+0xfa>
 800a526:	9a07      	ldr	r2, [sp, #28]
 800a528:	4654      	mov	r4, sl
 800a52a:	2000      	movs	r0, #0
 800a52c:	f04f 0c0a 	mov.w	ip, #10
 800a530:	4621      	mov	r1, r4
 800a532:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a536:	3b30      	subs	r3, #48	@ 0x30
 800a538:	2b09      	cmp	r3, #9
 800a53a:	d94b      	bls.n	800a5d4 <_svfiprintf_r+0x17c>
 800a53c:	b1b0      	cbz	r0, 800a56c <_svfiprintf_r+0x114>
 800a53e:	9207      	str	r2, [sp, #28]
 800a540:	e014      	b.n	800a56c <_svfiprintf_r+0x114>
 800a542:	eba0 0308 	sub.w	r3, r0, r8
 800a546:	fa09 f303 	lsl.w	r3, r9, r3
 800a54a:	4313      	orrs	r3, r2
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	46a2      	mov	sl, r4
 800a550:	e7d2      	b.n	800a4f8 <_svfiprintf_r+0xa0>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	1d19      	adds	r1, r3, #4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	9103      	str	r1, [sp, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfbb      	ittet	lt
 800a55e:	425b      	neglt	r3, r3
 800a560:	f042 0202 	orrlt.w	r2, r2, #2
 800a564:	9307      	strge	r3, [sp, #28]
 800a566:	9307      	strlt	r3, [sp, #28]
 800a568:	bfb8      	it	lt
 800a56a:	9204      	strlt	r2, [sp, #16]
 800a56c:	7823      	ldrb	r3, [r4, #0]
 800a56e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a570:	d10a      	bne.n	800a588 <_svfiprintf_r+0x130>
 800a572:	7863      	ldrb	r3, [r4, #1]
 800a574:	2b2a      	cmp	r3, #42	@ 0x2a
 800a576:	d132      	bne.n	800a5de <_svfiprintf_r+0x186>
 800a578:	9b03      	ldr	r3, [sp, #12]
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	9203      	str	r2, [sp, #12]
 800a580:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a584:	3402      	adds	r4, #2
 800a586:	9305      	str	r3, [sp, #20]
 800a588:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a64c <_svfiprintf_r+0x1f4>
 800a58c:	7821      	ldrb	r1, [r4, #0]
 800a58e:	2203      	movs	r2, #3
 800a590:	4650      	mov	r0, sl
 800a592:	f7f5 fea5 	bl	80002e0 <memchr>
 800a596:	b138      	cbz	r0, 800a5a8 <_svfiprintf_r+0x150>
 800a598:	9b04      	ldr	r3, [sp, #16]
 800a59a:	eba0 000a 	sub.w	r0, r0, sl
 800a59e:	2240      	movs	r2, #64	@ 0x40
 800a5a0:	4082      	lsls	r2, r0
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	3401      	adds	r4, #1
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ac:	4824      	ldr	r0, [pc, #144]	@ (800a640 <_svfiprintf_r+0x1e8>)
 800a5ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5b2:	2206      	movs	r2, #6
 800a5b4:	f7f5 fe94 	bl	80002e0 <memchr>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d036      	beq.n	800a62a <_svfiprintf_r+0x1d2>
 800a5bc:	4b21      	ldr	r3, [pc, #132]	@ (800a644 <_svfiprintf_r+0x1ec>)
 800a5be:	bb1b      	cbnz	r3, 800a608 <_svfiprintf_r+0x1b0>
 800a5c0:	9b03      	ldr	r3, [sp, #12]
 800a5c2:	3307      	adds	r3, #7
 800a5c4:	f023 0307 	bic.w	r3, r3, #7
 800a5c8:	3308      	adds	r3, #8
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ce:	4433      	add	r3, r6
 800a5d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5d2:	e76a      	b.n	800a4aa <_svfiprintf_r+0x52>
 800a5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5d8:	460c      	mov	r4, r1
 800a5da:	2001      	movs	r0, #1
 800a5dc:	e7a8      	b.n	800a530 <_svfiprintf_r+0xd8>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	3401      	adds	r4, #1
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	f04f 0c0a 	mov.w	ip, #10
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f0:	3a30      	subs	r2, #48	@ 0x30
 800a5f2:	2a09      	cmp	r2, #9
 800a5f4:	d903      	bls.n	800a5fe <_svfiprintf_r+0x1a6>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0c6      	beq.n	800a588 <_svfiprintf_r+0x130>
 800a5fa:	9105      	str	r1, [sp, #20]
 800a5fc:	e7c4      	b.n	800a588 <_svfiprintf_r+0x130>
 800a5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a602:	4604      	mov	r4, r0
 800a604:	2301      	movs	r3, #1
 800a606:	e7f0      	b.n	800a5ea <_svfiprintf_r+0x192>
 800a608:	ab03      	add	r3, sp, #12
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	462a      	mov	r2, r5
 800a60e:	4b0e      	ldr	r3, [pc, #56]	@ (800a648 <_svfiprintf_r+0x1f0>)
 800a610:	a904      	add	r1, sp, #16
 800a612:	4638      	mov	r0, r7
 800a614:	f7fc fca0 	bl	8006f58 <_printf_float>
 800a618:	1c42      	adds	r2, r0, #1
 800a61a:	4606      	mov	r6, r0
 800a61c:	d1d6      	bne.n	800a5cc <_svfiprintf_r+0x174>
 800a61e:	89ab      	ldrh	r3, [r5, #12]
 800a620:	065b      	lsls	r3, r3, #25
 800a622:	f53f af2d 	bmi.w	800a480 <_svfiprintf_r+0x28>
 800a626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a628:	e72c      	b.n	800a484 <_svfiprintf_r+0x2c>
 800a62a:	ab03      	add	r3, sp, #12
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	462a      	mov	r2, r5
 800a630:	4b05      	ldr	r3, [pc, #20]	@ (800a648 <_svfiprintf_r+0x1f0>)
 800a632:	a904      	add	r1, sp, #16
 800a634:	4638      	mov	r0, r7
 800a636:	f7fc ff17 	bl	8007468 <_printf_i>
 800a63a:	e7ed      	b.n	800a618 <_svfiprintf_r+0x1c0>
 800a63c:	0800b9e9 	.word	0x0800b9e9
 800a640:	0800b9f3 	.word	0x0800b9f3
 800a644:	08006f59 	.word	0x08006f59
 800a648:	0800a3a1 	.word	0x0800a3a1
 800a64c:	0800b9ef 	.word	0x0800b9ef

0800a650 <__sfputc_r>:
 800a650:	6893      	ldr	r3, [r2, #8]
 800a652:	3b01      	subs	r3, #1
 800a654:	2b00      	cmp	r3, #0
 800a656:	b410      	push	{r4}
 800a658:	6093      	str	r3, [r2, #8]
 800a65a:	da08      	bge.n	800a66e <__sfputc_r+0x1e>
 800a65c:	6994      	ldr	r4, [r2, #24]
 800a65e:	42a3      	cmp	r3, r4
 800a660:	db01      	blt.n	800a666 <__sfputc_r+0x16>
 800a662:	290a      	cmp	r1, #10
 800a664:	d103      	bne.n	800a66e <__sfputc_r+0x1e>
 800a666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66a:	f7fd bbb8 	b.w	8007dde <__swbuf_r>
 800a66e:	6813      	ldr	r3, [r2, #0]
 800a670:	1c58      	adds	r0, r3, #1
 800a672:	6010      	str	r0, [r2, #0]
 800a674:	7019      	strb	r1, [r3, #0]
 800a676:	4608      	mov	r0, r1
 800a678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <__sfputs_r>:
 800a67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a680:	4606      	mov	r6, r0
 800a682:	460f      	mov	r7, r1
 800a684:	4614      	mov	r4, r2
 800a686:	18d5      	adds	r5, r2, r3
 800a688:	42ac      	cmp	r4, r5
 800a68a:	d101      	bne.n	800a690 <__sfputs_r+0x12>
 800a68c:	2000      	movs	r0, #0
 800a68e:	e007      	b.n	800a6a0 <__sfputs_r+0x22>
 800a690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a694:	463a      	mov	r2, r7
 800a696:	4630      	mov	r0, r6
 800a698:	f7ff ffda 	bl	800a650 <__sfputc_r>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d1f3      	bne.n	800a688 <__sfputs_r+0xa>
 800a6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6a4 <_vfiprintf_r>:
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	b09d      	sub	sp, #116	@ 0x74
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	4698      	mov	r8, r3
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	b118      	cbz	r0, 800a6bc <_vfiprintf_r+0x18>
 800a6b4:	6a03      	ldr	r3, [r0, #32]
 800a6b6:	b90b      	cbnz	r3, 800a6bc <_vfiprintf_r+0x18>
 800a6b8:	f7fd fa86 	bl	8007bc8 <__sinit>
 800a6bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6be:	07d9      	lsls	r1, r3, #31
 800a6c0:	d405      	bmi.n	800a6ce <_vfiprintf_r+0x2a>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	059a      	lsls	r2, r3, #22
 800a6c6:	d402      	bmi.n	800a6ce <_vfiprintf_r+0x2a>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ca:	f7fd fc9a 	bl	8008002 <__retarget_lock_acquire_recursive>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	071b      	lsls	r3, r3, #28
 800a6d2:	d501      	bpl.n	800a6d8 <_vfiprintf_r+0x34>
 800a6d4:	692b      	ldr	r3, [r5, #16]
 800a6d6:	b99b      	cbnz	r3, 800a700 <_vfiprintf_r+0x5c>
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f7fd fbbe 	bl	8007e5c <__swsetup_r>
 800a6e0:	b170      	cbz	r0, 800a700 <_vfiprintf_r+0x5c>
 800a6e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6e4:	07dc      	lsls	r4, r3, #31
 800a6e6:	d504      	bpl.n	800a6f2 <_vfiprintf_r+0x4e>
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	b01d      	add	sp, #116	@ 0x74
 800a6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	0598      	lsls	r0, r3, #22
 800a6f6:	d4f7      	bmi.n	800a6e8 <_vfiprintf_r+0x44>
 800a6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6fa:	f7fd fc83 	bl	8008004 <__retarget_lock_release_recursive>
 800a6fe:	e7f3      	b.n	800a6e8 <_vfiprintf_r+0x44>
 800a700:	2300      	movs	r3, #0
 800a702:	9309      	str	r3, [sp, #36]	@ 0x24
 800a704:	2320      	movs	r3, #32
 800a706:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a70e:	2330      	movs	r3, #48	@ 0x30
 800a710:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8c0 <_vfiprintf_r+0x21c>
 800a714:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a718:	f04f 0901 	mov.w	r9, #1
 800a71c:	4623      	mov	r3, r4
 800a71e:	469a      	mov	sl, r3
 800a720:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a724:	b10a      	cbz	r2, 800a72a <_vfiprintf_r+0x86>
 800a726:	2a25      	cmp	r2, #37	@ 0x25
 800a728:	d1f9      	bne.n	800a71e <_vfiprintf_r+0x7a>
 800a72a:	ebba 0b04 	subs.w	fp, sl, r4
 800a72e:	d00b      	beq.n	800a748 <_vfiprintf_r+0xa4>
 800a730:	465b      	mov	r3, fp
 800a732:	4622      	mov	r2, r4
 800a734:	4629      	mov	r1, r5
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff ffa1 	bl	800a67e <__sfputs_r>
 800a73c:	3001      	adds	r0, #1
 800a73e:	f000 80a7 	beq.w	800a890 <_vfiprintf_r+0x1ec>
 800a742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a744:	445a      	add	r2, fp
 800a746:	9209      	str	r2, [sp, #36]	@ 0x24
 800a748:	f89a 3000 	ldrb.w	r3, [sl]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 809f 	beq.w	800a890 <_vfiprintf_r+0x1ec>
 800a752:	2300      	movs	r3, #0
 800a754:	f04f 32ff 	mov.w	r2, #4294967295
 800a758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75c:	f10a 0a01 	add.w	sl, sl, #1
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	9307      	str	r3, [sp, #28]
 800a764:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a768:	931a      	str	r3, [sp, #104]	@ 0x68
 800a76a:	4654      	mov	r4, sl
 800a76c:	2205      	movs	r2, #5
 800a76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a772:	4853      	ldr	r0, [pc, #332]	@ (800a8c0 <_vfiprintf_r+0x21c>)
 800a774:	f7f5 fdb4 	bl	80002e0 <memchr>
 800a778:	9a04      	ldr	r2, [sp, #16]
 800a77a:	b9d8      	cbnz	r0, 800a7b4 <_vfiprintf_r+0x110>
 800a77c:	06d1      	lsls	r1, r2, #27
 800a77e:	bf44      	itt	mi
 800a780:	2320      	movmi	r3, #32
 800a782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a786:	0713      	lsls	r3, r2, #28
 800a788:	bf44      	itt	mi
 800a78a:	232b      	movmi	r3, #43	@ 0x2b
 800a78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a790:	f89a 3000 	ldrb.w	r3, [sl]
 800a794:	2b2a      	cmp	r3, #42	@ 0x2a
 800a796:	d015      	beq.n	800a7c4 <_vfiprintf_r+0x120>
 800a798:	9a07      	ldr	r2, [sp, #28]
 800a79a:	4654      	mov	r4, sl
 800a79c:	2000      	movs	r0, #0
 800a79e:	f04f 0c0a 	mov.w	ip, #10
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7a8:	3b30      	subs	r3, #48	@ 0x30
 800a7aa:	2b09      	cmp	r3, #9
 800a7ac:	d94b      	bls.n	800a846 <_vfiprintf_r+0x1a2>
 800a7ae:	b1b0      	cbz	r0, 800a7de <_vfiprintf_r+0x13a>
 800a7b0:	9207      	str	r2, [sp, #28]
 800a7b2:	e014      	b.n	800a7de <_vfiprintf_r+0x13a>
 800a7b4:	eba0 0308 	sub.w	r3, r0, r8
 800a7b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	9304      	str	r3, [sp, #16]
 800a7c0:	46a2      	mov	sl, r4
 800a7c2:	e7d2      	b.n	800a76a <_vfiprintf_r+0xc6>
 800a7c4:	9b03      	ldr	r3, [sp, #12]
 800a7c6:	1d19      	adds	r1, r3, #4
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	9103      	str	r1, [sp, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bfbb      	ittet	lt
 800a7d0:	425b      	neglt	r3, r3
 800a7d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d6:	9307      	strge	r3, [sp, #28]
 800a7d8:	9307      	strlt	r3, [sp, #28]
 800a7da:	bfb8      	it	lt
 800a7dc:	9204      	strlt	r2, [sp, #16]
 800a7de:	7823      	ldrb	r3, [r4, #0]
 800a7e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7e2:	d10a      	bne.n	800a7fa <_vfiprintf_r+0x156>
 800a7e4:	7863      	ldrb	r3, [r4, #1]
 800a7e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7e8:	d132      	bne.n	800a850 <_vfiprintf_r+0x1ac>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	1d1a      	adds	r2, r3, #4
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	9203      	str	r2, [sp, #12]
 800a7f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7f6:	3402      	adds	r4, #2
 800a7f8:	9305      	str	r3, [sp, #20]
 800a7fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8d0 <_vfiprintf_r+0x22c>
 800a7fe:	7821      	ldrb	r1, [r4, #0]
 800a800:	2203      	movs	r2, #3
 800a802:	4650      	mov	r0, sl
 800a804:	f7f5 fd6c 	bl	80002e0 <memchr>
 800a808:	b138      	cbz	r0, 800a81a <_vfiprintf_r+0x176>
 800a80a:	9b04      	ldr	r3, [sp, #16]
 800a80c:	eba0 000a 	sub.w	r0, r0, sl
 800a810:	2240      	movs	r2, #64	@ 0x40
 800a812:	4082      	lsls	r2, r0
 800a814:	4313      	orrs	r3, r2
 800a816:	3401      	adds	r4, #1
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	4829      	ldr	r0, [pc, #164]	@ (800a8c4 <_vfiprintf_r+0x220>)
 800a820:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a824:	2206      	movs	r2, #6
 800a826:	f7f5 fd5b 	bl	80002e0 <memchr>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d03f      	beq.n	800a8ae <_vfiprintf_r+0x20a>
 800a82e:	4b26      	ldr	r3, [pc, #152]	@ (800a8c8 <_vfiprintf_r+0x224>)
 800a830:	bb1b      	cbnz	r3, 800a87a <_vfiprintf_r+0x1d6>
 800a832:	9b03      	ldr	r3, [sp, #12]
 800a834:	3307      	adds	r3, #7
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	3308      	adds	r3, #8
 800a83c:	9303      	str	r3, [sp, #12]
 800a83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a840:	443b      	add	r3, r7
 800a842:	9309      	str	r3, [sp, #36]	@ 0x24
 800a844:	e76a      	b.n	800a71c <_vfiprintf_r+0x78>
 800a846:	fb0c 3202 	mla	r2, ip, r2, r3
 800a84a:	460c      	mov	r4, r1
 800a84c:	2001      	movs	r0, #1
 800a84e:	e7a8      	b.n	800a7a2 <_vfiprintf_r+0xfe>
 800a850:	2300      	movs	r3, #0
 800a852:	3401      	adds	r4, #1
 800a854:	9305      	str	r3, [sp, #20]
 800a856:	4619      	mov	r1, r3
 800a858:	f04f 0c0a 	mov.w	ip, #10
 800a85c:	4620      	mov	r0, r4
 800a85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a862:	3a30      	subs	r2, #48	@ 0x30
 800a864:	2a09      	cmp	r2, #9
 800a866:	d903      	bls.n	800a870 <_vfiprintf_r+0x1cc>
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d0c6      	beq.n	800a7fa <_vfiprintf_r+0x156>
 800a86c:	9105      	str	r1, [sp, #20]
 800a86e:	e7c4      	b.n	800a7fa <_vfiprintf_r+0x156>
 800a870:	fb0c 2101 	mla	r1, ip, r1, r2
 800a874:	4604      	mov	r4, r0
 800a876:	2301      	movs	r3, #1
 800a878:	e7f0      	b.n	800a85c <_vfiprintf_r+0x1b8>
 800a87a:	ab03      	add	r3, sp, #12
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	462a      	mov	r2, r5
 800a880:	4b12      	ldr	r3, [pc, #72]	@ (800a8cc <_vfiprintf_r+0x228>)
 800a882:	a904      	add	r1, sp, #16
 800a884:	4630      	mov	r0, r6
 800a886:	f7fc fb67 	bl	8006f58 <_printf_float>
 800a88a:	4607      	mov	r7, r0
 800a88c:	1c78      	adds	r0, r7, #1
 800a88e:	d1d6      	bne.n	800a83e <_vfiprintf_r+0x19a>
 800a890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a892:	07d9      	lsls	r1, r3, #31
 800a894:	d405      	bmi.n	800a8a2 <_vfiprintf_r+0x1fe>
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	059a      	lsls	r2, r3, #22
 800a89a:	d402      	bmi.n	800a8a2 <_vfiprintf_r+0x1fe>
 800a89c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a89e:	f7fd fbb1 	bl	8008004 <__retarget_lock_release_recursive>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	065b      	lsls	r3, r3, #25
 800a8a6:	f53f af1f 	bmi.w	800a6e8 <_vfiprintf_r+0x44>
 800a8aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8ac:	e71e      	b.n	800a6ec <_vfiprintf_r+0x48>
 800a8ae:	ab03      	add	r3, sp, #12
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	462a      	mov	r2, r5
 800a8b4:	4b05      	ldr	r3, [pc, #20]	@ (800a8cc <_vfiprintf_r+0x228>)
 800a8b6:	a904      	add	r1, sp, #16
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f7fc fdd5 	bl	8007468 <_printf_i>
 800a8be:	e7e4      	b.n	800a88a <_vfiprintf_r+0x1e6>
 800a8c0:	0800b9e9 	.word	0x0800b9e9
 800a8c4:	0800b9f3 	.word	0x0800b9f3
 800a8c8:	08006f59 	.word	0x08006f59
 800a8cc:	0800a67f 	.word	0x0800a67f
 800a8d0:	0800b9ef 	.word	0x0800b9ef

0800a8d4 <__sflush_r>:
 800a8d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	0716      	lsls	r6, r2, #28
 800a8de:	4605      	mov	r5, r0
 800a8e0:	460c      	mov	r4, r1
 800a8e2:	d454      	bmi.n	800a98e <__sflush_r+0xba>
 800a8e4:	684b      	ldr	r3, [r1, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	dc02      	bgt.n	800a8f0 <__sflush_r+0x1c>
 800a8ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dd48      	ble.n	800a982 <__sflush_r+0xae>
 800a8f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	d045      	beq.n	800a982 <__sflush_r+0xae>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8fc:	682f      	ldr	r7, [r5, #0]
 800a8fe:	6a21      	ldr	r1, [r4, #32]
 800a900:	602b      	str	r3, [r5, #0]
 800a902:	d030      	beq.n	800a966 <__sflush_r+0x92>
 800a904:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	0759      	lsls	r1, r3, #29
 800a90a:	d505      	bpl.n	800a918 <__sflush_r+0x44>
 800a90c:	6863      	ldr	r3, [r4, #4]
 800a90e:	1ad2      	subs	r2, r2, r3
 800a910:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a912:	b10b      	cbz	r3, 800a918 <__sflush_r+0x44>
 800a914:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a916:	1ad2      	subs	r2, r2, r3
 800a918:	2300      	movs	r3, #0
 800a91a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a91c:	6a21      	ldr	r1, [r4, #32]
 800a91e:	4628      	mov	r0, r5
 800a920:	47b0      	blx	r6
 800a922:	1c43      	adds	r3, r0, #1
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	d106      	bne.n	800a936 <__sflush_r+0x62>
 800a928:	6829      	ldr	r1, [r5, #0]
 800a92a:	291d      	cmp	r1, #29
 800a92c:	d82b      	bhi.n	800a986 <__sflush_r+0xb2>
 800a92e:	4a2a      	ldr	r2, [pc, #168]	@ (800a9d8 <__sflush_r+0x104>)
 800a930:	40ca      	lsrs	r2, r1
 800a932:	07d6      	lsls	r6, r2, #31
 800a934:	d527      	bpl.n	800a986 <__sflush_r+0xb2>
 800a936:	2200      	movs	r2, #0
 800a938:	6062      	str	r2, [r4, #4]
 800a93a:	04d9      	lsls	r1, r3, #19
 800a93c:	6922      	ldr	r2, [r4, #16]
 800a93e:	6022      	str	r2, [r4, #0]
 800a940:	d504      	bpl.n	800a94c <__sflush_r+0x78>
 800a942:	1c42      	adds	r2, r0, #1
 800a944:	d101      	bne.n	800a94a <__sflush_r+0x76>
 800a946:	682b      	ldr	r3, [r5, #0]
 800a948:	b903      	cbnz	r3, 800a94c <__sflush_r+0x78>
 800a94a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a94c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a94e:	602f      	str	r7, [r5, #0]
 800a950:	b1b9      	cbz	r1, 800a982 <__sflush_r+0xae>
 800a952:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a956:	4299      	cmp	r1, r3
 800a958:	d002      	beq.n	800a960 <__sflush_r+0x8c>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7fe f942 	bl	8008be4 <_free_r>
 800a960:	2300      	movs	r3, #0
 800a962:	6363      	str	r3, [r4, #52]	@ 0x34
 800a964:	e00d      	b.n	800a982 <__sflush_r+0xae>
 800a966:	2301      	movs	r3, #1
 800a968:	4628      	mov	r0, r5
 800a96a:	47b0      	blx	r6
 800a96c:	4602      	mov	r2, r0
 800a96e:	1c50      	adds	r0, r2, #1
 800a970:	d1c9      	bne.n	800a906 <__sflush_r+0x32>
 800a972:	682b      	ldr	r3, [r5, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0c6      	beq.n	800a906 <__sflush_r+0x32>
 800a978:	2b1d      	cmp	r3, #29
 800a97a:	d001      	beq.n	800a980 <__sflush_r+0xac>
 800a97c:	2b16      	cmp	r3, #22
 800a97e:	d11e      	bne.n	800a9be <__sflush_r+0xea>
 800a980:	602f      	str	r7, [r5, #0]
 800a982:	2000      	movs	r0, #0
 800a984:	e022      	b.n	800a9cc <__sflush_r+0xf8>
 800a986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98a:	b21b      	sxth	r3, r3
 800a98c:	e01b      	b.n	800a9c6 <__sflush_r+0xf2>
 800a98e:	690f      	ldr	r7, [r1, #16]
 800a990:	2f00      	cmp	r7, #0
 800a992:	d0f6      	beq.n	800a982 <__sflush_r+0xae>
 800a994:	0793      	lsls	r3, r2, #30
 800a996:	680e      	ldr	r6, [r1, #0]
 800a998:	bf08      	it	eq
 800a99a:	694b      	ldreq	r3, [r1, #20]
 800a99c:	600f      	str	r7, [r1, #0]
 800a99e:	bf18      	it	ne
 800a9a0:	2300      	movne	r3, #0
 800a9a2:	eba6 0807 	sub.w	r8, r6, r7
 800a9a6:	608b      	str	r3, [r1, #8]
 800a9a8:	f1b8 0f00 	cmp.w	r8, #0
 800a9ac:	dde9      	ble.n	800a982 <__sflush_r+0xae>
 800a9ae:	6a21      	ldr	r1, [r4, #32]
 800a9b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9b2:	4643      	mov	r3, r8
 800a9b4:	463a      	mov	r2, r7
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b0      	blx	r6
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	dc08      	bgt.n	800a9d0 <__sflush_r+0xfc>
 800a9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c6:	81a3      	strh	r3, [r4, #12]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d0:	4407      	add	r7, r0
 800a9d2:	eba8 0800 	sub.w	r8, r8, r0
 800a9d6:	e7e7      	b.n	800a9a8 <__sflush_r+0xd4>
 800a9d8:	20400001 	.word	0x20400001

0800a9dc <_fflush_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	690b      	ldr	r3, [r1, #16]
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	b913      	cbnz	r3, 800a9ec <_fflush_r+0x10>
 800a9e6:	2500      	movs	r5, #0
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	b118      	cbz	r0, 800a9f6 <_fflush_r+0x1a>
 800a9ee:	6a03      	ldr	r3, [r0, #32]
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <_fflush_r+0x1a>
 800a9f2:	f7fd f8e9 	bl	8007bc8 <__sinit>
 800a9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0f3      	beq.n	800a9e6 <_fflush_r+0xa>
 800a9fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa00:	07d0      	lsls	r0, r2, #31
 800aa02:	d404      	bmi.n	800aa0e <_fflush_r+0x32>
 800aa04:	0599      	lsls	r1, r3, #22
 800aa06:	d402      	bmi.n	800aa0e <_fflush_r+0x32>
 800aa08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa0a:	f7fd fafa 	bl	8008002 <__retarget_lock_acquire_recursive>
 800aa0e:	4628      	mov	r0, r5
 800aa10:	4621      	mov	r1, r4
 800aa12:	f7ff ff5f 	bl	800a8d4 <__sflush_r>
 800aa16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa18:	07da      	lsls	r2, r3, #31
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	d4e4      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	059b      	lsls	r3, r3, #22
 800aa22:	d4e1      	bmi.n	800a9e8 <_fflush_r+0xc>
 800aa24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa26:	f7fd faed 	bl	8008004 <__retarget_lock_release_recursive>
 800aa2a:	e7dd      	b.n	800a9e8 <_fflush_r+0xc>

0800aa2c <__swhatbuf_r>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	460c      	mov	r4, r1
 800aa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa34:	2900      	cmp	r1, #0
 800aa36:	b096      	sub	sp, #88	@ 0x58
 800aa38:	4615      	mov	r5, r2
 800aa3a:	461e      	mov	r6, r3
 800aa3c:	da0d      	bge.n	800aa5a <__swhatbuf_r+0x2e>
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa44:	f04f 0100 	mov.w	r1, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2340      	movne	r3, #64	@ 0x40
 800aa4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa50:	2000      	movs	r0, #0
 800aa52:	6031      	str	r1, [r6, #0]
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	b016      	add	sp, #88	@ 0x58
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	466a      	mov	r2, sp
 800aa5c:	f000 f874 	bl	800ab48 <_fstat_r>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	dbec      	blt.n	800aa3e <__swhatbuf_r+0x12>
 800aa64:	9901      	ldr	r1, [sp, #4]
 800aa66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa6e:	4259      	negs	r1, r3
 800aa70:	4159      	adcs	r1, r3
 800aa72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa76:	e7eb      	b.n	800aa50 <__swhatbuf_r+0x24>

0800aa78 <__smakebuf_r>:
 800aa78:	898b      	ldrh	r3, [r1, #12]
 800aa7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa7c:	079d      	lsls	r5, r3, #30
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	d507      	bpl.n	800aa94 <__smakebuf_r+0x1c>
 800aa84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	6123      	str	r3, [r4, #16]
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	6163      	str	r3, [r4, #20]
 800aa90:	b003      	add	sp, #12
 800aa92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa94:	ab01      	add	r3, sp, #4
 800aa96:	466a      	mov	r2, sp
 800aa98:	f7ff ffc8 	bl	800aa2c <__swhatbuf_r>
 800aa9c:	9f00      	ldr	r7, [sp, #0]
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7fe f912 	bl	8008ccc <_malloc_r>
 800aaa8:	b948      	cbnz	r0, 800aabe <__smakebuf_r+0x46>
 800aaaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaae:	059a      	lsls	r2, r3, #22
 800aab0:	d4ee      	bmi.n	800aa90 <__smakebuf_r+0x18>
 800aab2:	f023 0303 	bic.w	r3, r3, #3
 800aab6:	f043 0302 	orr.w	r3, r3, #2
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	e7e2      	b.n	800aa84 <__smakebuf_r+0xc>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	6020      	str	r0, [r4, #0]
 800aac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac6:	81a3      	strh	r3, [r4, #12]
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aace:	b15b      	cbz	r3, 800aae8 <__smakebuf_r+0x70>
 800aad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad4:	4630      	mov	r0, r6
 800aad6:	f000 f849 	bl	800ab6c <_isatty_r>
 800aada:	b128      	cbz	r0, 800aae8 <__smakebuf_r+0x70>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	f023 0303 	bic.w	r3, r3, #3
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	81a3      	strh	r3, [r4, #12]
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	431d      	orrs	r5, r3
 800aaec:	81a5      	strh	r5, [r4, #12]
 800aaee:	e7cf      	b.n	800aa90 <__smakebuf_r+0x18>

0800aaf0 <memmove>:
 800aaf0:	4288      	cmp	r0, r1
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	eb01 0402 	add.w	r4, r1, r2
 800aaf8:	d902      	bls.n	800ab00 <memmove+0x10>
 800aafa:	4284      	cmp	r4, r0
 800aafc:	4623      	mov	r3, r4
 800aafe:	d807      	bhi.n	800ab10 <memmove+0x20>
 800ab00:	1e43      	subs	r3, r0, #1
 800ab02:	42a1      	cmp	r1, r4
 800ab04:	d008      	beq.n	800ab18 <memmove+0x28>
 800ab06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab0e:	e7f8      	b.n	800ab02 <memmove+0x12>
 800ab10:	4402      	add	r2, r0
 800ab12:	4601      	mov	r1, r0
 800ab14:	428a      	cmp	r2, r1
 800ab16:	d100      	bne.n	800ab1a <memmove+0x2a>
 800ab18:	bd10      	pop	{r4, pc}
 800ab1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab22:	e7f7      	b.n	800ab14 <memmove+0x24>

0800ab24 <strncmp>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	b16a      	cbz	r2, 800ab44 <strncmp+0x20>
 800ab28:	3901      	subs	r1, #1
 800ab2a:	1884      	adds	r4, r0, r2
 800ab2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d103      	bne.n	800ab40 <strncmp+0x1c>
 800ab38:	42a0      	cmp	r0, r4
 800ab3a:	d001      	beq.n	800ab40 <strncmp+0x1c>
 800ab3c:	2a00      	cmp	r2, #0
 800ab3e:	d1f5      	bne.n	800ab2c <strncmp+0x8>
 800ab40:	1ad0      	subs	r0, r2, r3
 800ab42:	bd10      	pop	{r4, pc}
 800ab44:	4610      	mov	r0, r2
 800ab46:	e7fc      	b.n	800ab42 <strncmp+0x1e>

0800ab48 <_fstat_r>:
 800ab48:	b538      	push	{r3, r4, r5, lr}
 800ab4a:	4d07      	ldr	r5, [pc, #28]	@ (800ab68 <_fstat_r+0x20>)
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4608      	mov	r0, r1
 800ab52:	4611      	mov	r1, r2
 800ab54:	602b      	str	r3, [r5, #0]
 800ab56:	f7f7 fc82 	bl	800245e <_fstat>
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	d102      	bne.n	800ab64 <_fstat_r+0x1c>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	b103      	cbz	r3, 800ab64 <_fstat_r+0x1c>
 800ab62:	6023      	str	r3, [r4, #0]
 800ab64:	bd38      	pop	{r3, r4, r5, pc}
 800ab66:	bf00      	nop
 800ab68:	240004f0 	.word	0x240004f0

0800ab6c <_isatty_r>:
 800ab6c:	b538      	push	{r3, r4, r5, lr}
 800ab6e:	4d06      	ldr	r5, [pc, #24]	@ (800ab88 <_isatty_r+0x1c>)
 800ab70:	2300      	movs	r3, #0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4608      	mov	r0, r1
 800ab76:	602b      	str	r3, [r5, #0]
 800ab78:	f7f7 fc81 	bl	800247e <_isatty>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_isatty_r+0x1a>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_isatty_r+0x1a>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	240004f0 	.word	0x240004f0

0800ab8c <_sbrk_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	4d06      	ldr	r5, [pc, #24]	@ (800aba8 <_sbrk_r+0x1c>)
 800ab90:	2300      	movs	r3, #0
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	602b      	str	r3, [r5, #0]
 800ab98:	f7f7 fc8a 	bl	80024b0 <_sbrk>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_sbrk_r+0x1a>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_sbrk_r+0x1a>
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	240004f0 	.word	0x240004f0

0800abac <memcpy>:
 800abac:	440a      	add	r2, r1
 800abae:	4291      	cmp	r1, r2
 800abb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800abb4:	d100      	bne.n	800abb8 <memcpy+0xc>
 800abb6:	4770      	bx	lr
 800abb8:	b510      	push	{r4, lr}
 800abba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abc2:	4291      	cmp	r1, r2
 800abc4:	d1f9      	bne.n	800abba <memcpy+0xe>
 800abc6:	bd10      	pop	{r4, pc}

0800abc8 <nan>:
 800abc8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800abd0 <nan+0x8>
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	00000000 	.word	0x00000000
 800abd4:	7ff80000 	.word	0x7ff80000

0800abd8 <__assert_func>:
 800abd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abda:	4614      	mov	r4, r2
 800abdc:	461a      	mov	r2, r3
 800abde:	4b09      	ldr	r3, [pc, #36]	@ (800ac04 <__assert_func+0x2c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4605      	mov	r5, r0
 800abe4:	68d8      	ldr	r0, [r3, #12]
 800abe6:	b14c      	cbz	r4, 800abfc <__assert_func+0x24>
 800abe8:	4b07      	ldr	r3, [pc, #28]	@ (800ac08 <__assert_func+0x30>)
 800abea:	9100      	str	r1, [sp, #0]
 800abec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abf0:	4906      	ldr	r1, [pc, #24]	@ (800ac0c <__assert_func+0x34>)
 800abf2:	462b      	mov	r3, r5
 800abf4:	f000 fba8 	bl	800b348 <fiprintf>
 800abf8:	f000 fbb8 	bl	800b36c <abort>
 800abfc:	4b04      	ldr	r3, [pc, #16]	@ (800ac10 <__assert_func+0x38>)
 800abfe:	461c      	mov	r4, r3
 800ac00:	e7f3      	b.n	800abea <__assert_func+0x12>
 800ac02:	bf00      	nop
 800ac04:	24000024 	.word	0x24000024
 800ac08:	0800ba02 	.word	0x0800ba02
 800ac0c:	0800ba0f 	.word	0x0800ba0f
 800ac10:	0800ba3d 	.word	0x0800ba3d

0800ac14 <_calloc_r>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	fba1 5402 	umull	r5, r4, r1, r2
 800ac1a:	b934      	cbnz	r4, 800ac2a <_calloc_r+0x16>
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	f7fe f855 	bl	8008ccc <_malloc_r>
 800ac22:	4606      	mov	r6, r0
 800ac24:	b928      	cbnz	r0, 800ac32 <_calloc_r+0x1e>
 800ac26:	4630      	mov	r0, r6
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	220c      	movs	r2, #12
 800ac2c:	6002      	str	r2, [r0, #0]
 800ac2e:	2600      	movs	r6, #0
 800ac30:	e7f9      	b.n	800ac26 <_calloc_r+0x12>
 800ac32:	462a      	mov	r2, r5
 800ac34:	4621      	mov	r1, r4
 800ac36:	f7fd f967 	bl	8007f08 <memset>
 800ac3a:	e7f4      	b.n	800ac26 <_calloc_r+0x12>

0800ac3c <rshift>:
 800ac3c:	6903      	ldr	r3, [r0, #16]
 800ac3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac4a:	f100 0414 	add.w	r4, r0, #20
 800ac4e:	dd45      	ble.n	800acdc <rshift+0xa0>
 800ac50:	f011 011f 	ands.w	r1, r1, #31
 800ac54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac5c:	d10c      	bne.n	800ac78 <rshift+0x3c>
 800ac5e:	f100 0710 	add.w	r7, r0, #16
 800ac62:	4629      	mov	r1, r5
 800ac64:	42b1      	cmp	r1, r6
 800ac66:	d334      	bcc.n	800acd2 <rshift+0x96>
 800ac68:	1a9b      	subs	r3, r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	1eea      	subs	r2, r5, #3
 800ac6e:	4296      	cmp	r6, r2
 800ac70:	bf38      	it	cc
 800ac72:	2300      	movcc	r3, #0
 800ac74:	4423      	add	r3, r4
 800ac76:	e015      	b.n	800aca4 <rshift+0x68>
 800ac78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac7c:	f1c1 0820 	rsb	r8, r1, #32
 800ac80:	40cf      	lsrs	r7, r1
 800ac82:	f105 0e04 	add.w	lr, r5, #4
 800ac86:	46a1      	mov	r9, r4
 800ac88:	4576      	cmp	r6, lr
 800ac8a:	46f4      	mov	ip, lr
 800ac8c:	d815      	bhi.n	800acba <rshift+0x7e>
 800ac8e:	1a9a      	subs	r2, r3, r2
 800ac90:	0092      	lsls	r2, r2, #2
 800ac92:	3a04      	subs	r2, #4
 800ac94:	3501      	adds	r5, #1
 800ac96:	42ae      	cmp	r6, r5
 800ac98:	bf38      	it	cc
 800ac9a:	2200      	movcc	r2, #0
 800ac9c:	18a3      	adds	r3, r4, r2
 800ac9e:	50a7      	str	r7, [r4, r2]
 800aca0:	b107      	cbz	r7, 800aca4 <rshift+0x68>
 800aca2:	3304      	adds	r3, #4
 800aca4:	1b1a      	subs	r2, r3, r4
 800aca6:	42a3      	cmp	r3, r4
 800aca8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800acac:	bf08      	it	eq
 800acae:	2300      	moveq	r3, #0
 800acb0:	6102      	str	r2, [r0, #16]
 800acb2:	bf08      	it	eq
 800acb4:	6143      	streq	r3, [r0, #20]
 800acb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acba:	f8dc c000 	ldr.w	ip, [ip]
 800acbe:	fa0c fc08 	lsl.w	ip, ip, r8
 800acc2:	ea4c 0707 	orr.w	r7, ip, r7
 800acc6:	f849 7b04 	str.w	r7, [r9], #4
 800acca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acce:	40cf      	lsrs	r7, r1
 800acd0:	e7da      	b.n	800ac88 <rshift+0x4c>
 800acd2:	f851 cb04 	ldr.w	ip, [r1], #4
 800acd6:	f847 cf04 	str.w	ip, [r7, #4]!
 800acda:	e7c3      	b.n	800ac64 <rshift+0x28>
 800acdc:	4623      	mov	r3, r4
 800acde:	e7e1      	b.n	800aca4 <rshift+0x68>

0800ace0 <__hexdig_fun>:
 800ace0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ace4:	2b09      	cmp	r3, #9
 800ace6:	d802      	bhi.n	800acee <__hexdig_fun+0xe>
 800ace8:	3820      	subs	r0, #32
 800acea:	b2c0      	uxtb	r0, r0
 800acec:	4770      	bx	lr
 800acee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800acf2:	2b05      	cmp	r3, #5
 800acf4:	d801      	bhi.n	800acfa <__hexdig_fun+0x1a>
 800acf6:	3847      	subs	r0, #71	@ 0x47
 800acf8:	e7f7      	b.n	800acea <__hexdig_fun+0xa>
 800acfa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d801      	bhi.n	800ad06 <__hexdig_fun+0x26>
 800ad02:	3827      	subs	r0, #39	@ 0x27
 800ad04:	e7f1      	b.n	800acea <__hexdig_fun+0xa>
 800ad06:	2000      	movs	r0, #0
 800ad08:	4770      	bx	lr
	...

0800ad0c <__gethex>:
 800ad0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	b085      	sub	sp, #20
 800ad12:	468a      	mov	sl, r1
 800ad14:	9302      	str	r3, [sp, #8]
 800ad16:	680b      	ldr	r3, [r1, #0]
 800ad18:	9001      	str	r0, [sp, #4]
 800ad1a:	4690      	mov	r8, r2
 800ad1c:	1c9c      	adds	r4, r3, #2
 800ad1e:	46a1      	mov	r9, r4
 800ad20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ad24:	2830      	cmp	r0, #48	@ 0x30
 800ad26:	d0fa      	beq.n	800ad1e <__gethex+0x12>
 800ad28:	eba9 0303 	sub.w	r3, r9, r3
 800ad2c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ad30:	f7ff ffd6 	bl	800ace0 <__hexdig_fun>
 800ad34:	4605      	mov	r5, r0
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d168      	bne.n	800ae0c <__gethex+0x100>
 800ad3a:	49a0      	ldr	r1, [pc, #640]	@ (800afbc <__gethex+0x2b0>)
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	4648      	mov	r0, r9
 800ad40:	f7ff fef0 	bl	800ab24 <strncmp>
 800ad44:	4607      	mov	r7, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d167      	bne.n	800ae1a <__gethex+0x10e>
 800ad4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ad4e:	4626      	mov	r6, r4
 800ad50:	f7ff ffc6 	bl	800ace0 <__hexdig_fun>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d062      	beq.n	800ae1e <__gethex+0x112>
 800ad58:	4623      	mov	r3, r4
 800ad5a:	7818      	ldrb	r0, [r3, #0]
 800ad5c:	2830      	cmp	r0, #48	@ 0x30
 800ad5e:	4699      	mov	r9, r3
 800ad60:	f103 0301 	add.w	r3, r3, #1
 800ad64:	d0f9      	beq.n	800ad5a <__gethex+0x4e>
 800ad66:	f7ff ffbb 	bl	800ace0 <__hexdig_fun>
 800ad6a:	fab0 f580 	clz	r5, r0
 800ad6e:	096d      	lsrs	r5, r5, #5
 800ad70:	f04f 0b01 	mov.w	fp, #1
 800ad74:	464a      	mov	r2, r9
 800ad76:	4616      	mov	r6, r2
 800ad78:	3201      	adds	r2, #1
 800ad7a:	7830      	ldrb	r0, [r6, #0]
 800ad7c:	f7ff ffb0 	bl	800ace0 <__hexdig_fun>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d1f8      	bne.n	800ad76 <__gethex+0x6a>
 800ad84:	498d      	ldr	r1, [pc, #564]	@ (800afbc <__gethex+0x2b0>)
 800ad86:	2201      	movs	r2, #1
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f7ff fecb 	bl	800ab24 <strncmp>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d13f      	bne.n	800ae12 <__gethex+0x106>
 800ad92:	b944      	cbnz	r4, 800ada6 <__gethex+0x9a>
 800ad94:	1c74      	adds	r4, r6, #1
 800ad96:	4622      	mov	r2, r4
 800ad98:	4616      	mov	r6, r2
 800ad9a:	3201      	adds	r2, #1
 800ad9c:	7830      	ldrb	r0, [r6, #0]
 800ad9e:	f7ff ff9f 	bl	800ace0 <__hexdig_fun>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d1f8      	bne.n	800ad98 <__gethex+0x8c>
 800ada6:	1ba4      	subs	r4, r4, r6
 800ada8:	00a7      	lsls	r7, r4, #2
 800adaa:	7833      	ldrb	r3, [r6, #0]
 800adac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800adb0:	2b50      	cmp	r3, #80	@ 0x50
 800adb2:	d13e      	bne.n	800ae32 <__gethex+0x126>
 800adb4:	7873      	ldrb	r3, [r6, #1]
 800adb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800adb8:	d033      	beq.n	800ae22 <__gethex+0x116>
 800adba:	2b2d      	cmp	r3, #45	@ 0x2d
 800adbc:	d034      	beq.n	800ae28 <__gethex+0x11c>
 800adbe:	1c71      	adds	r1, r6, #1
 800adc0:	2400      	movs	r4, #0
 800adc2:	7808      	ldrb	r0, [r1, #0]
 800adc4:	f7ff ff8c 	bl	800ace0 <__hexdig_fun>
 800adc8:	1e43      	subs	r3, r0, #1
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b18      	cmp	r3, #24
 800adce:	d830      	bhi.n	800ae32 <__gethex+0x126>
 800add0:	f1a0 0210 	sub.w	r2, r0, #16
 800add4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800add8:	f7ff ff82 	bl	800ace0 <__hexdig_fun>
 800addc:	f100 3cff 	add.w	ip, r0, #4294967295
 800ade0:	fa5f fc8c 	uxtb.w	ip, ip
 800ade4:	f1bc 0f18 	cmp.w	ip, #24
 800ade8:	f04f 030a 	mov.w	r3, #10
 800adec:	d91e      	bls.n	800ae2c <__gethex+0x120>
 800adee:	b104      	cbz	r4, 800adf2 <__gethex+0xe6>
 800adf0:	4252      	negs	r2, r2
 800adf2:	4417      	add	r7, r2
 800adf4:	f8ca 1000 	str.w	r1, [sl]
 800adf8:	b1ed      	cbz	r5, 800ae36 <__gethex+0x12a>
 800adfa:	f1bb 0f00 	cmp.w	fp, #0
 800adfe:	bf0c      	ite	eq
 800ae00:	2506      	moveq	r5, #6
 800ae02:	2500      	movne	r5, #0
 800ae04:	4628      	mov	r0, r5
 800ae06:	b005      	add	sp, #20
 800ae08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0c:	2500      	movs	r5, #0
 800ae0e:	462c      	mov	r4, r5
 800ae10:	e7b0      	b.n	800ad74 <__gethex+0x68>
 800ae12:	2c00      	cmp	r4, #0
 800ae14:	d1c7      	bne.n	800ada6 <__gethex+0x9a>
 800ae16:	4627      	mov	r7, r4
 800ae18:	e7c7      	b.n	800adaa <__gethex+0x9e>
 800ae1a:	464e      	mov	r6, r9
 800ae1c:	462f      	mov	r7, r5
 800ae1e:	2501      	movs	r5, #1
 800ae20:	e7c3      	b.n	800adaa <__gethex+0x9e>
 800ae22:	2400      	movs	r4, #0
 800ae24:	1cb1      	adds	r1, r6, #2
 800ae26:	e7cc      	b.n	800adc2 <__gethex+0xb6>
 800ae28:	2401      	movs	r4, #1
 800ae2a:	e7fb      	b.n	800ae24 <__gethex+0x118>
 800ae2c:	fb03 0002 	mla	r0, r3, r2, r0
 800ae30:	e7ce      	b.n	800add0 <__gethex+0xc4>
 800ae32:	4631      	mov	r1, r6
 800ae34:	e7de      	b.n	800adf4 <__gethex+0xe8>
 800ae36:	eba6 0309 	sub.w	r3, r6, r9
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	2b07      	cmp	r3, #7
 800ae40:	dc0a      	bgt.n	800ae58 <__gethex+0x14c>
 800ae42:	9801      	ldr	r0, [sp, #4]
 800ae44:	f7fd ffce 	bl	8008de4 <_Balloc>
 800ae48:	4604      	mov	r4, r0
 800ae4a:	b940      	cbnz	r0, 800ae5e <__gethex+0x152>
 800ae4c:	4b5c      	ldr	r3, [pc, #368]	@ (800afc0 <__gethex+0x2b4>)
 800ae4e:	4602      	mov	r2, r0
 800ae50:	21e4      	movs	r1, #228	@ 0xe4
 800ae52:	485c      	ldr	r0, [pc, #368]	@ (800afc4 <__gethex+0x2b8>)
 800ae54:	f7ff fec0 	bl	800abd8 <__assert_func>
 800ae58:	3101      	adds	r1, #1
 800ae5a:	105b      	asrs	r3, r3, #1
 800ae5c:	e7ef      	b.n	800ae3e <__gethex+0x132>
 800ae5e:	f100 0a14 	add.w	sl, r0, #20
 800ae62:	2300      	movs	r3, #0
 800ae64:	4655      	mov	r5, sl
 800ae66:	469b      	mov	fp, r3
 800ae68:	45b1      	cmp	r9, r6
 800ae6a:	d337      	bcc.n	800aedc <__gethex+0x1d0>
 800ae6c:	f845 bb04 	str.w	fp, [r5], #4
 800ae70:	eba5 050a 	sub.w	r5, r5, sl
 800ae74:	10ad      	asrs	r5, r5, #2
 800ae76:	6125      	str	r5, [r4, #16]
 800ae78:	4658      	mov	r0, fp
 800ae7a:	f7fe f8a5 	bl	8008fc8 <__hi0bits>
 800ae7e:	016d      	lsls	r5, r5, #5
 800ae80:	f8d8 6000 	ldr.w	r6, [r8]
 800ae84:	1a2d      	subs	r5, r5, r0
 800ae86:	42b5      	cmp	r5, r6
 800ae88:	dd54      	ble.n	800af34 <__gethex+0x228>
 800ae8a:	1bad      	subs	r5, r5, r6
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f7fe fc2e 	bl	80096f0 <__any_on>
 800ae94:	4681      	mov	r9, r0
 800ae96:	b178      	cbz	r0, 800aeb8 <__gethex+0x1ac>
 800ae98:	1e6b      	subs	r3, r5, #1
 800ae9a:	1159      	asrs	r1, r3, #5
 800ae9c:	f003 021f 	and.w	r2, r3, #31
 800aea0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aea4:	f04f 0901 	mov.w	r9, #1
 800aea8:	fa09 f202 	lsl.w	r2, r9, r2
 800aeac:	420a      	tst	r2, r1
 800aeae:	d003      	beq.n	800aeb8 <__gethex+0x1ac>
 800aeb0:	454b      	cmp	r3, r9
 800aeb2:	dc36      	bgt.n	800af22 <__gethex+0x216>
 800aeb4:	f04f 0902 	mov.w	r9, #2
 800aeb8:	4629      	mov	r1, r5
 800aeba:	4620      	mov	r0, r4
 800aebc:	f7ff febe 	bl	800ac3c <rshift>
 800aec0:	442f      	add	r7, r5
 800aec2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aec6:	42bb      	cmp	r3, r7
 800aec8:	da42      	bge.n	800af50 <__gethex+0x244>
 800aeca:	9801      	ldr	r0, [sp, #4]
 800aecc:	4621      	mov	r1, r4
 800aece:	f7fd ffc9 	bl	8008e64 <_Bfree>
 800aed2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aed4:	2300      	movs	r3, #0
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	25a3      	movs	r5, #163	@ 0xa3
 800aeda:	e793      	b.n	800ae04 <__gethex+0xf8>
 800aedc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aee0:	2a2e      	cmp	r2, #46	@ 0x2e
 800aee2:	d012      	beq.n	800af0a <__gethex+0x1fe>
 800aee4:	2b20      	cmp	r3, #32
 800aee6:	d104      	bne.n	800aef2 <__gethex+0x1e6>
 800aee8:	f845 bb04 	str.w	fp, [r5], #4
 800aeec:	f04f 0b00 	mov.w	fp, #0
 800aef0:	465b      	mov	r3, fp
 800aef2:	7830      	ldrb	r0, [r6, #0]
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	f7ff fef3 	bl	800ace0 <__hexdig_fun>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	f000 000f 	and.w	r0, r0, #15
 800af00:	4098      	lsls	r0, r3
 800af02:	ea4b 0b00 	orr.w	fp, fp, r0
 800af06:	3304      	adds	r3, #4
 800af08:	e7ae      	b.n	800ae68 <__gethex+0x15c>
 800af0a:	45b1      	cmp	r9, r6
 800af0c:	d8ea      	bhi.n	800aee4 <__gethex+0x1d8>
 800af0e:	492b      	ldr	r1, [pc, #172]	@ (800afbc <__gethex+0x2b0>)
 800af10:	9303      	str	r3, [sp, #12]
 800af12:	2201      	movs	r2, #1
 800af14:	4630      	mov	r0, r6
 800af16:	f7ff fe05 	bl	800ab24 <strncmp>
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d1e1      	bne.n	800aee4 <__gethex+0x1d8>
 800af20:	e7a2      	b.n	800ae68 <__gethex+0x15c>
 800af22:	1ea9      	subs	r1, r5, #2
 800af24:	4620      	mov	r0, r4
 800af26:	f7fe fbe3 	bl	80096f0 <__any_on>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d0c2      	beq.n	800aeb4 <__gethex+0x1a8>
 800af2e:	f04f 0903 	mov.w	r9, #3
 800af32:	e7c1      	b.n	800aeb8 <__gethex+0x1ac>
 800af34:	da09      	bge.n	800af4a <__gethex+0x23e>
 800af36:	1b75      	subs	r5, r6, r5
 800af38:	4621      	mov	r1, r4
 800af3a:	9801      	ldr	r0, [sp, #4]
 800af3c:	462a      	mov	r2, r5
 800af3e:	f7fe f9a1 	bl	8009284 <__lshift>
 800af42:	1b7f      	subs	r7, r7, r5
 800af44:	4604      	mov	r4, r0
 800af46:	f100 0a14 	add.w	sl, r0, #20
 800af4a:	f04f 0900 	mov.w	r9, #0
 800af4e:	e7b8      	b.n	800aec2 <__gethex+0x1b6>
 800af50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af54:	42bd      	cmp	r5, r7
 800af56:	dd6f      	ble.n	800b038 <__gethex+0x32c>
 800af58:	1bed      	subs	r5, r5, r7
 800af5a:	42ae      	cmp	r6, r5
 800af5c:	dc34      	bgt.n	800afc8 <__gethex+0x2bc>
 800af5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af62:	2b02      	cmp	r3, #2
 800af64:	d022      	beq.n	800afac <__gethex+0x2a0>
 800af66:	2b03      	cmp	r3, #3
 800af68:	d024      	beq.n	800afb4 <__gethex+0x2a8>
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d115      	bne.n	800af9a <__gethex+0x28e>
 800af6e:	42ae      	cmp	r6, r5
 800af70:	d113      	bne.n	800af9a <__gethex+0x28e>
 800af72:	2e01      	cmp	r6, #1
 800af74:	d10b      	bne.n	800af8e <__gethex+0x282>
 800af76:	9a02      	ldr	r2, [sp, #8]
 800af78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	2301      	movs	r3, #1
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	f8ca 3000 	str.w	r3, [sl]
 800af86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af88:	2562      	movs	r5, #98	@ 0x62
 800af8a:	601c      	str	r4, [r3, #0]
 800af8c:	e73a      	b.n	800ae04 <__gethex+0xf8>
 800af8e:	1e71      	subs	r1, r6, #1
 800af90:	4620      	mov	r0, r4
 800af92:	f7fe fbad 	bl	80096f0 <__any_on>
 800af96:	2800      	cmp	r0, #0
 800af98:	d1ed      	bne.n	800af76 <__gethex+0x26a>
 800af9a:	9801      	ldr	r0, [sp, #4]
 800af9c:	4621      	mov	r1, r4
 800af9e:	f7fd ff61 	bl	8008e64 <_Bfree>
 800afa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afa4:	2300      	movs	r3, #0
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	2550      	movs	r5, #80	@ 0x50
 800afaa:	e72b      	b.n	800ae04 <__gethex+0xf8>
 800afac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1f3      	bne.n	800af9a <__gethex+0x28e>
 800afb2:	e7e0      	b.n	800af76 <__gethex+0x26a>
 800afb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1dd      	bne.n	800af76 <__gethex+0x26a>
 800afba:	e7ee      	b.n	800af9a <__gethex+0x28e>
 800afbc:	0800b9e7 	.word	0x0800b9e7
 800afc0:	0800b97d 	.word	0x0800b97d
 800afc4:	0800ba3e 	.word	0x0800ba3e
 800afc8:	1e6f      	subs	r7, r5, #1
 800afca:	f1b9 0f00 	cmp.w	r9, #0
 800afce:	d130      	bne.n	800b032 <__gethex+0x326>
 800afd0:	b127      	cbz	r7, 800afdc <__gethex+0x2d0>
 800afd2:	4639      	mov	r1, r7
 800afd4:	4620      	mov	r0, r4
 800afd6:	f7fe fb8b 	bl	80096f0 <__any_on>
 800afda:	4681      	mov	r9, r0
 800afdc:	117a      	asrs	r2, r7, #5
 800afde:	2301      	movs	r3, #1
 800afe0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800afe4:	f007 071f 	and.w	r7, r7, #31
 800afe8:	40bb      	lsls	r3, r7
 800afea:	4213      	tst	r3, r2
 800afec:	4629      	mov	r1, r5
 800afee:	4620      	mov	r0, r4
 800aff0:	bf18      	it	ne
 800aff2:	f049 0902 	orrne.w	r9, r9, #2
 800aff6:	f7ff fe21 	bl	800ac3c <rshift>
 800affa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800affe:	1b76      	subs	r6, r6, r5
 800b000:	2502      	movs	r5, #2
 800b002:	f1b9 0f00 	cmp.w	r9, #0
 800b006:	d047      	beq.n	800b098 <__gethex+0x38c>
 800b008:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d015      	beq.n	800b03c <__gethex+0x330>
 800b010:	2b03      	cmp	r3, #3
 800b012:	d017      	beq.n	800b044 <__gethex+0x338>
 800b014:	2b01      	cmp	r3, #1
 800b016:	d109      	bne.n	800b02c <__gethex+0x320>
 800b018:	f019 0f02 	tst.w	r9, #2
 800b01c:	d006      	beq.n	800b02c <__gethex+0x320>
 800b01e:	f8da 3000 	ldr.w	r3, [sl]
 800b022:	ea49 0903 	orr.w	r9, r9, r3
 800b026:	f019 0f01 	tst.w	r9, #1
 800b02a:	d10e      	bne.n	800b04a <__gethex+0x33e>
 800b02c:	f045 0510 	orr.w	r5, r5, #16
 800b030:	e032      	b.n	800b098 <__gethex+0x38c>
 800b032:	f04f 0901 	mov.w	r9, #1
 800b036:	e7d1      	b.n	800afdc <__gethex+0x2d0>
 800b038:	2501      	movs	r5, #1
 800b03a:	e7e2      	b.n	800b002 <__gethex+0x2f6>
 800b03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b03e:	f1c3 0301 	rsb	r3, r3, #1
 800b042:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0f0      	beq.n	800b02c <__gethex+0x320>
 800b04a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b04e:	f104 0314 	add.w	r3, r4, #20
 800b052:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b056:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b05a:	f04f 0c00 	mov.w	ip, #0
 800b05e:	4618      	mov	r0, r3
 800b060:	f853 2b04 	ldr.w	r2, [r3], #4
 800b064:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b068:	d01b      	beq.n	800b0a2 <__gethex+0x396>
 800b06a:	3201      	adds	r2, #1
 800b06c:	6002      	str	r2, [r0, #0]
 800b06e:	2d02      	cmp	r5, #2
 800b070:	f104 0314 	add.w	r3, r4, #20
 800b074:	d13c      	bne.n	800b0f0 <__gethex+0x3e4>
 800b076:	f8d8 2000 	ldr.w	r2, [r8]
 800b07a:	3a01      	subs	r2, #1
 800b07c:	42b2      	cmp	r2, r6
 800b07e:	d109      	bne.n	800b094 <__gethex+0x388>
 800b080:	1171      	asrs	r1, r6, #5
 800b082:	2201      	movs	r2, #1
 800b084:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b088:	f006 061f 	and.w	r6, r6, #31
 800b08c:	fa02 f606 	lsl.w	r6, r2, r6
 800b090:	421e      	tst	r6, r3
 800b092:	d13a      	bne.n	800b10a <__gethex+0x3fe>
 800b094:	f045 0520 	orr.w	r5, r5, #32
 800b098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b09a:	601c      	str	r4, [r3, #0]
 800b09c:	9b02      	ldr	r3, [sp, #8]
 800b09e:	601f      	str	r7, [r3, #0]
 800b0a0:	e6b0      	b.n	800ae04 <__gethex+0xf8>
 800b0a2:	4299      	cmp	r1, r3
 800b0a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b0a8:	d8d9      	bhi.n	800b05e <__gethex+0x352>
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	459b      	cmp	fp, r3
 800b0ae:	db17      	blt.n	800b0e0 <__gethex+0x3d4>
 800b0b0:	6861      	ldr	r1, [r4, #4]
 800b0b2:	9801      	ldr	r0, [sp, #4]
 800b0b4:	3101      	adds	r1, #1
 800b0b6:	f7fd fe95 	bl	8008de4 <_Balloc>
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	b918      	cbnz	r0, 800b0c6 <__gethex+0x3ba>
 800b0be:	4b1a      	ldr	r3, [pc, #104]	@ (800b128 <__gethex+0x41c>)
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	2184      	movs	r1, #132	@ 0x84
 800b0c4:	e6c5      	b.n	800ae52 <__gethex+0x146>
 800b0c6:	6922      	ldr	r2, [r4, #16]
 800b0c8:	3202      	adds	r2, #2
 800b0ca:	f104 010c 	add.w	r1, r4, #12
 800b0ce:	0092      	lsls	r2, r2, #2
 800b0d0:	300c      	adds	r0, #12
 800b0d2:	f7ff fd6b 	bl	800abac <memcpy>
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	9801      	ldr	r0, [sp, #4]
 800b0da:	f7fd fec3 	bl	8008e64 <_Bfree>
 800b0de:	464c      	mov	r4, r9
 800b0e0:	6923      	ldr	r3, [r4, #16]
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0e8:	6122      	str	r2, [r4, #16]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	615a      	str	r2, [r3, #20]
 800b0ee:	e7be      	b.n	800b06e <__gethex+0x362>
 800b0f0:	6922      	ldr	r2, [r4, #16]
 800b0f2:	455a      	cmp	r2, fp
 800b0f4:	dd0b      	ble.n	800b10e <__gethex+0x402>
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f7ff fd9f 	bl	800ac3c <rshift>
 800b0fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b102:	3701      	adds	r7, #1
 800b104:	42bb      	cmp	r3, r7
 800b106:	f6ff aee0 	blt.w	800aeca <__gethex+0x1be>
 800b10a:	2501      	movs	r5, #1
 800b10c:	e7c2      	b.n	800b094 <__gethex+0x388>
 800b10e:	f016 061f 	ands.w	r6, r6, #31
 800b112:	d0fa      	beq.n	800b10a <__gethex+0x3fe>
 800b114:	4453      	add	r3, sl
 800b116:	f1c6 0620 	rsb	r6, r6, #32
 800b11a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b11e:	f7fd ff53 	bl	8008fc8 <__hi0bits>
 800b122:	42b0      	cmp	r0, r6
 800b124:	dbe7      	blt.n	800b0f6 <__gethex+0x3ea>
 800b126:	e7f0      	b.n	800b10a <__gethex+0x3fe>
 800b128:	0800b97d 	.word	0x0800b97d

0800b12c <L_shift>:
 800b12c:	f1c2 0208 	rsb	r2, r2, #8
 800b130:	0092      	lsls	r2, r2, #2
 800b132:	b570      	push	{r4, r5, r6, lr}
 800b134:	f1c2 0620 	rsb	r6, r2, #32
 800b138:	6843      	ldr	r3, [r0, #4]
 800b13a:	6804      	ldr	r4, [r0, #0]
 800b13c:	fa03 f506 	lsl.w	r5, r3, r6
 800b140:	432c      	orrs	r4, r5
 800b142:	40d3      	lsrs	r3, r2
 800b144:	6004      	str	r4, [r0, #0]
 800b146:	f840 3f04 	str.w	r3, [r0, #4]!
 800b14a:	4288      	cmp	r0, r1
 800b14c:	d3f4      	bcc.n	800b138 <L_shift+0xc>
 800b14e:	bd70      	pop	{r4, r5, r6, pc}

0800b150 <__match>:
 800b150:	b530      	push	{r4, r5, lr}
 800b152:	6803      	ldr	r3, [r0, #0]
 800b154:	3301      	adds	r3, #1
 800b156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b15a:	b914      	cbnz	r4, 800b162 <__match+0x12>
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	2001      	movs	r0, #1
 800b160:	bd30      	pop	{r4, r5, pc}
 800b162:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b166:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b16a:	2d19      	cmp	r5, #25
 800b16c:	bf98      	it	ls
 800b16e:	3220      	addls	r2, #32
 800b170:	42a2      	cmp	r2, r4
 800b172:	d0f0      	beq.n	800b156 <__match+0x6>
 800b174:	2000      	movs	r0, #0
 800b176:	e7f3      	b.n	800b160 <__match+0x10>

0800b178 <__hexnan>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	680b      	ldr	r3, [r1, #0]
 800b17e:	6801      	ldr	r1, [r0, #0]
 800b180:	115e      	asrs	r6, r3, #5
 800b182:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b186:	f013 031f 	ands.w	r3, r3, #31
 800b18a:	b087      	sub	sp, #28
 800b18c:	bf18      	it	ne
 800b18e:	3604      	addne	r6, #4
 800b190:	2500      	movs	r5, #0
 800b192:	1f37      	subs	r7, r6, #4
 800b194:	4682      	mov	sl, r0
 800b196:	4690      	mov	r8, r2
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b19e:	46b9      	mov	r9, r7
 800b1a0:	463c      	mov	r4, r7
 800b1a2:	9502      	str	r5, [sp, #8]
 800b1a4:	46ab      	mov	fp, r5
 800b1a6:	784a      	ldrb	r2, [r1, #1]
 800b1a8:	1c4b      	adds	r3, r1, #1
 800b1aa:	9303      	str	r3, [sp, #12]
 800b1ac:	b342      	cbz	r2, 800b200 <__hexnan+0x88>
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	9105      	str	r1, [sp, #20]
 800b1b2:	9204      	str	r2, [sp, #16]
 800b1b4:	f7ff fd94 	bl	800ace0 <__hexdig_fun>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d151      	bne.n	800b260 <__hexnan+0xe8>
 800b1bc:	9a04      	ldr	r2, [sp, #16]
 800b1be:	9905      	ldr	r1, [sp, #20]
 800b1c0:	2a20      	cmp	r2, #32
 800b1c2:	d818      	bhi.n	800b1f6 <__hexnan+0x7e>
 800b1c4:	9b02      	ldr	r3, [sp, #8]
 800b1c6:	459b      	cmp	fp, r3
 800b1c8:	dd13      	ble.n	800b1f2 <__hexnan+0x7a>
 800b1ca:	454c      	cmp	r4, r9
 800b1cc:	d206      	bcs.n	800b1dc <__hexnan+0x64>
 800b1ce:	2d07      	cmp	r5, #7
 800b1d0:	dc04      	bgt.n	800b1dc <__hexnan+0x64>
 800b1d2:	462a      	mov	r2, r5
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f7ff ffa8 	bl	800b12c <L_shift>
 800b1dc:	4544      	cmp	r4, r8
 800b1de:	d952      	bls.n	800b286 <__hexnan+0x10e>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f1a4 0904 	sub.w	r9, r4, #4
 800b1e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1ea:	f8cd b008 	str.w	fp, [sp, #8]
 800b1ee:	464c      	mov	r4, r9
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	9903      	ldr	r1, [sp, #12]
 800b1f4:	e7d7      	b.n	800b1a6 <__hexnan+0x2e>
 800b1f6:	2a29      	cmp	r2, #41	@ 0x29
 800b1f8:	d157      	bne.n	800b2aa <__hexnan+0x132>
 800b1fa:	3102      	adds	r1, #2
 800b1fc:	f8ca 1000 	str.w	r1, [sl]
 800b200:	f1bb 0f00 	cmp.w	fp, #0
 800b204:	d051      	beq.n	800b2aa <__hexnan+0x132>
 800b206:	454c      	cmp	r4, r9
 800b208:	d206      	bcs.n	800b218 <__hexnan+0xa0>
 800b20a:	2d07      	cmp	r5, #7
 800b20c:	dc04      	bgt.n	800b218 <__hexnan+0xa0>
 800b20e:	462a      	mov	r2, r5
 800b210:	4649      	mov	r1, r9
 800b212:	4620      	mov	r0, r4
 800b214:	f7ff ff8a 	bl	800b12c <L_shift>
 800b218:	4544      	cmp	r4, r8
 800b21a:	d936      	bls.n	800b28a <__hexnan+0x112>
 800b21c:	f1a8 0204 	sub.w	r2, r8, #4
 800b220:	4623      	mov	r3, r4
 800b222:	f853 1b04 	ldr.w	r1, [r3], #4
 800b226:	f842 1f04 	str.w	r1, [r2, #4]!
 800b22a:	429f      	cmp	r7, r3
 800b22c:	d2f9      	bcs.n	800b222 <__hexnan+0xaa>
 800b22e:	1b3b      	subs	r3, r7, r4
 800b230:	f023 0303 	bic.w	r3, r3, #3
 800b234:	3304      	adds	r3, #4
 800b236:	3401      	adds	r4, #1
 800b238:	3e03      	subs	r6, #3
 800b23a:	42b4      	cmp	r4, r6
 800b23c:	bf88      	it	hi
 800b23e:	2304      	movhi	r3, #4
 800b240:	4443      	add	r3, r8
 800b242:	2200      	movs	r2, #0
 800b244:	f843 2b04 	str.w	r2, [r3], #4
 800b248:	429f      	cmp	r7, r3
 800b24a:	d2fb      	bcs.n	800b244 <__hexnan+0xcc>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	b91b      	cbnz	r3, 800b258 <__hexnan+0xe0>
 800b250:	4547      	cmp	r7, r8
 800b252:	d128      	bne.n	800b2a6 <__hexnan+0x12e>
 800b254:	2301      	movs	r3, #1
 800b256:	603b      	str	r3, [r7, #0]
 800b258:	2005      	movs	r0, #5
 800b25a:	b007      	add	sp, #28
 800b25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	3501      	adds	r5, #1
 800b262:	2d08      	cmp	r5, #8
 800b264:	f10b 0b01 	add.w	fp, fp, #1
 800b268:	dd06      	ble.n	800b278 <__hexnan+0x100>
 800b26a:	4544      	cmp	r4, r8
 800b26c:	d9c1      	bls.n	800b1f2 <__hexnan+0x7a>
 800b26e:	2300      	movs	r3, #0
 800b270:	f844 3c04 	str.w	r3, [r4, #-4]
 800b274:	2501      	movs	r5, #1
 800b276:	3c04      	subs	r4, #4
 800b278:	6822      	ldr	r2, [r4, #0]
 800b27a:	f000 000f 	and.w	r0, r0, #15
 800b27e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b282:	6020      	str	r0, [r4, #0]
 800b284:	e7b5      	b.n	800b1f2 <__hexnan+0x7a>
 800b286:	2508      	movs	r5, #8
 800b288:	e7b3      	b.n	800b1f2 <__hexnan+0x7a>
 800b28a:	9b01      	ldr	r3, [sp, #4]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d0dd      	beq.n	800b24c <__hexnan+0xd4>
 800b290:	f1c3 0320 	rsb	r3, r3, #32
 800b294:	f04f 32ff 	mov.w	r2, #4294967295
 800b298:	40da      	lsrs	r2, r3
 800b29a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b2a4:	e7d2      	b.n	800b24c <__hexnan+0xd4>
 800b2a6:	3f04      	subs	r7, #4
 800b2a8:	e7d0      	b.n	800b24c <__hexnan+0xd4>
 800b2aa:	2004      	movs	r0, #4
 800b2ac:	e7d5      	b.n	800b25a <__hexnan+0xe2>

0800b2ae <__ascii_mbtowc>:
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	b901      	cbnz	r1, 800b2b4 <__ascii_mbtowc+0x6>
 800b2b2:	a901      	add	r1, sp, #4
 800b2b4:	b142      	cbz	r2, 800b2c8 <__ascii_mbtowc+0x1a>
 800b2b6:	b14b      	cbz	r3, 800b2cc <__ascii_mbtowc+0x1e>
 800b2b8:	7813      	ldrb	r3, [r2, #0]
 800b2ba:	600b      	str	r3, [r1, #0]
 800b2bc:	7812      	ldrb	r2, [r2, #0]
 800b2be:	1e10      	subs	r0, r2, #0
 800b2c0:	bf18      	it	ne
 800b2c2:	2001      	movne	r0, #1
 800b2c4:	b002      	add	sp, #8
 800b2c6:	4770      	bx	lr
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	e7fb      	b.n	800b2c4 <__ascii_mbtowc+0x16>
 800b2cc:	f06f 0001 	mvn.w	r0, #1
 800b2d0:	e7f8      	b.n	800b2c4 <__ascii_mbtowc+0x16>

0800b2d2 <_realloc_r>:
 800b2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	4614      	mov	r4, r2
 800b2da:	460d      	mov	r5, r1
 800b2dc:	b921      	cbnz	r1, 800b2e8 <_realloc_r+0x16>
 800b2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	f7fd bcf2 	b.w	8008ccc <_malloc_r>
 800b2e8:	b92a      	cbnz	r2, 800b2f6 <_realloc_r+0x24>
 800b2ea:	f7fd fc7b 	bl	8008be4 <_free_r>
 800b2ee:	4625      	mov	r5, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f6:	f000 f840 	bl	800b37a <_malloc_usable_size_r>
 800b2fa:	4284      	cmp	r4, r0
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	d802      	bhi.n	800b306 <_realloc_r+0x34>
 800b300:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b304:	d8f4      	bhi.n	800b2f0 <_realloc_r+0x1e>
 800b306:	4621      	mov	r1, r4
 800b308:	4638      	mov	r0, r7
 800b30a:	f7fd fcdf 	bl	8008ccc <_malloc_r>
 800b30e:	4680      	mov	r8, r0
 800b310:	b908      	cbnz	r0, 800b316 <_realloc_r+0x44>
 800b312:	4645      	mov	r5, r8
 800b314:	e7ec      	b.n	800b2f0 <_realloc_r+0x1e>
 800b316:	42b4      	cmp	r4, r6
 800b318:	4622      	mov	r2, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	bf28      	it	cs
 800b31e:	4632      	movcs	r2, r6
 800b320:	f7ff fc44 	bl	800abac <memcpy>
 800b324:	4629      	mov	r1, r5
 800b326:	4638      	mov	r0, r7
 800b328:	f7fd fc5c 	bl	8008be4 <_free_r>
 800b32c:	e7f1      	b.n	800b312 <_realloc_r+0x40>

0800b32e <__ascii_wctomb>:
 800b32e:	4603      	mov	r3, r0
 800b330:	4608      	mov	r0, r1
 800b332:	b141      	cbz	r1, 800b346 <__ascii_wctomb+0x18>
 800b334:	2aff      	cmp	r2, #255	@ 0xff
 800b336:	d904      	bls.n	800b342 <__ascii_wctomb+0x14>
 800b338:	228a      	movs	r2, #138	@ 0x8a
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	4770      	bx	lr
 800b342:	700a      	strb	r2, [r1, #0]
 800b344:	2001      	movs	r0, #1
 800b346:	4770      	bx	lr

0800b348 <fiprintf>:
 800b348:	b40e      	push	{r1, r2, r3}
 800b34a:	b503      	push	{r0, r1, lr}
 800b34c:	4601      	mov	r1, r0
 800b34e:	ab03      	add	r3, sp, #12
 800b350:	4805      	ldr	r0, [pc, #20]	@ (800b368 <fiprintf+0x20>)
 800b352:	f853 2b04 	ldr.w	r2, [r3], #4
 800b356:	6800      	ldr	r0, [r0, #0]
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	f7ff f9a3 	bl	800a6a4 <_vfiprintf_r>
 800b35e:	b002      	add	sp, #8
 800b360:	f85d eb04 	ldr.w	lr, [sp], #4
 800b364:	b003      	add	sp, #12
 800b366:	4770      	bx	lr
 800b368:	24000024 	.word	0x24000024

0800b36c <abort>:
 800b36c:	b508      	push	{r3, lr}
 800b36e:	2006      	movs	r0, #6
 800b370:	f000 f834 	bl	800b3dc <raise>
 800b374:	2001      	movs	r0, #1
 800b376:	f7f7 f83e 	bl	80023f6 <_exit>

0800b37a <_malloc_usable_size_r>:
 800b37a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b37e:	1f18      	subs	r0, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	bfbc      	itt	lt
 800b384:	580b      	ldrlt	r3, [r1, r0]
 800b386:	18c0      	addlt	r0, r0, r3
 800b388:	4770      	bx	lr

0800b38a <_raise_r>:
 800b38a:	291f      	cmp	r1, #31
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4605      	mov	r5, r0
 800b390:	460c      	mov	r4, r1
 800b392:	d904      	bls.n	800b39e <_raise_r+0x14>
 800b394:	2316      	movs	r3, #22
 800b396:	6003      	str	r3, [r0, #0]
 800b398:	f04f 30ff 	mov.w	r0, #4294967295
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b3a0:	b112      	cbz	r2, 800b3a8 <_raise_r+0x1e>
 800b3a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3a6:	b94b      	cbnz	r3, 800b3bc <_raise_r+0x32>
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f000 f831 	bl	800b410 <_getpid_r>
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3b8:	f000 b818 	b.w	800b3ec <_kill_r>
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d00a      	beq.n	800b3d6 <_raise_r+0x4c>
 800b3c0:	1c59      	adds	r1, r3, #1
 800b3c2:	d103      	bne.n	800b3cc <_raise_r+0x42>
 800b3c4:	2316      	movs	r3, #22
 800b3c6:	6003      	str	r3, [r0, #0]
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	e7e7      	b.n	800b39c <_raise_r+0x12>
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4798      	blx	r3
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e7e0      	b.n	800b39c <_raise_r+0x12>
	...

0800b3dc <raise>:
 800b3dc:	4b02      	ldr	r3, [pc, #8]	@ (800b3e8 <raise+0xc>)
 800b3de:	4601      	mov	r1, r0
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	f7ff bfd2 	b.w	800b38a <_raise_r>
 800b3e6:	bf00      	nop
 800b3e8:	24000024 	.word	0x24000024

0800b3ec <_kill_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4d07      	ldr	r5, [pc, #28]	@ (800b40c <_kill_r+0x20>)
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	602b      	str	r3, [r5, #0]
 800b3fa:	f7f6 ffec 	bl	80023d6 <_kill>
 800b3fe:	1c43      	adds	r3, r0, #1
 800b400:	d102      	bne.n	800b408 <_kill_r+0x1c>
 800b402:	682b      	ldr	r3, [r5, #0]
 800b404:	b103      	cbz	r3, 800b408 <_kill_r+0x1c>
 800b406:	6023      	str	r3, [r4, #0]
 800b408:	bd38      	pop	{r3, r4, r5, pc}
 800b40a:	bf00      	nop
 800b40c:	240004f0 	.word	0x240004f0

0800b410 <_getpid_r>:
 800b410:	f7f6 bfd9 	b.w	80023c6 <_getpid>

0800b414 <_init>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	bf00      	nop
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr

0800b420 <_fini>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	bf00      	nop
 800b424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b426:	bc08      	pop	{r3}
 800b428:	469e      	mov	lr, r3
 800b42a:	4770      	bx	lr
